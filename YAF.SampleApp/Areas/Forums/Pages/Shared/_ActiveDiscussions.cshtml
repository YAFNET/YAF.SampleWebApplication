@using YAF.Core.Context
@using YAF.Core.Extensions
@using YAF.Core.Helpers
@using YAF.Core.Model
@using YAF.Web.HtmlHelpers
@using YAF.Types.Constants
@using YAF.Types.Extensions
@using YAF.Types.Interfaces
@using YAF.Types.Interfaces.Services
@using YAF.Types.Models
@using YAF.Types.Objects.Model

@inject BoardContext Current

@{
    // Latest forum posts
    // Shows the latest n number of posts on the main forum list page
    const string cacheKey = Constants.Cache.ActiveDiscussions;

    List<LatestTopic> activeTopics = null;

    if (Current.IsGuest)
    {
        // allow caching since this is a guest...
        activeTopics = Current.Get<IDataCache>()[cacheKey] as List<LatestTopic>;
    }

    if (activeTopics is null)
    {
        activeTopics = Current.GetRepository<Topic>().Latest(
            Current.PageBoardID,
            Current.PageCategoryID,
            Current.BoardSettings.ActiveDiscussionsCount,
            Current.PageUserID,
            Current.BoardSettings.NoCountForumsInActiveDiscussions,
            Current.BoardSettings.UseReadTrackingByDatabase);

        if (Current.IsGuest)
        {
            Current.Get<IDataCache>().Set(cacheKey, activeTopics, TimeSpan.FromMinutes(Current.BoardSettings.ActiveDiscussionsCacheTimeout));
        }
    }
}

<div class="card mb-3">
    <div class="card-header d-flex align-items-center">
        @Html.IconHeader("comments", "DEFAULT", "ACTIVE_DISCUSSIONS", "fa-2x")
    </div>
    <ul class="list-group list-group-flush">
        @if (activeTopics.HasItems())
        {
            foreach (var topic in activeTopics)
            {
                if (!topic.LastPosted.HasValue)
                {
                    continue;
                }

                if (!topic.LastUserID.HasValue)
                {
                    continue;
                }

                var topicSubject = Current.Get<IBadWordReplace>().Replace(Html.HtmlEncode(topic.Topic));

                var topicStyle = topic.Styles;

                var styles = Current.BoardSettings.UseStyledTopicTitles && topicStyle.IsSet()
                                 ? Current.Get<IStyleTransform>().Decode(topic.Styles)
                                 : string.Empty;

                var lastRead = Current.Get<IReadTrackCurrentUser>().GetForumTopicRead(
                    topic.ForumID,
                    topic.TopicID,
                    topic.LastForumAccess ?? DateTimeHelper.SqlDbMinTime(),
                    topic.LastTopicAccess ?? DateTimeHelper.SqlDbMinTime());

                var startedByText = Current.Get<ILocalization>().GetTextFormatted(
                    "VIEW_TOPIC_STARTED_BY",
                    Current.BoardSettings.EnableDisplayName ? topic.UserDisplayName : topic.UserName);

                var inForumText = Current.Get<ILocalization>().GetTextFormatted("IN_FORUM", Html.HtmlEncode(topic.Forum));

                var lastPostedDateTime = topic.LastPosted.Value;

                var formattedDatetime = Current.BoardSettings.ShowRelativeTime
                                            ? lastPostedDateTime.ToRelativeTime()
                                            : Current.Get<IDateTimeService>().Format(
                                                DateTimeFormat.BothTopic,
                                                lastPostedDateTime);

                var span = Current.BoardSettings.ShowRelativeTime ? @"<span class=""popover-timeago"">" : "<span>";

                var iconBadge = Html.IconBadge("calendar-day", "clock");

                var infoData = $@"{Html.UserLink(topic.LastUserID.Value, Current.BoardSettings.EnableDisplayName
                                                                             ? topic.LastUserDisplayName
                                                                             : topic.LastUserName, topic.LastUserSuspended, topic.LastUserStyle).RenderToString()}
{iconBadge.RenderToString()}&nbsp;{span}{formattedDatetime}</span>";

                <li class="list-group-item pt-2 list-group-item-action">
                    <a button-style="@ButtonStyle.Link"
                       role="button"
                       icon="comment"
                       icon-css-class="far"
                       icon-color="text-secondary"
                       class=" fw-bold p-0 text-start"
                       style="@styles"
                       bs-toggle="tooltip"
                       text="@Html.Raw(topicSubject)"
                       title-non-localized="@Html.Raw($"{startedByText} {inForumText}")"
                       href="@Html.Raw(Current.Get<ILinkBuilder>().GetTopicLink(topic.TopicID, topic.Topic))">
                    </a>

                    @if (topic.LastPosted > lastRead)
                    {
	                    <span class="badge text-bg-success">@Html.LocalizedText("COMMON", "NEW_MESSAGE")</span>
                    }

                    <a class=" p-0 text-start"
                       role="button"
                       button-style="@ButtonStyle.Link"
                       text="@Html.Raw($"({topic.Forum})")"
                       href="@Html.Raw(Current.Get<ILinkBuilder>().GetForumLink(topic.ForumID, topic.Forum))"></a>

                    <a button-style="@ButtonStyle.Link"
                       icon="info-circle"
                       icon-color="text-secondary"
                       text-localized-page="DEFAULT"
                       text-localized-tag="BY"
                       text-param0="@Html.Raw(Current.BoardSettings.EnableDisplayName ? topic.LastUserDisplayName : topic.LastUserName)"
                       bs-content="@infoData"
                       class=" topic-link-popover p-0 text-start"
                       bs-toggle="popover"></a>

                </li>
            }
        }
    </ul>
    @if (Current.Get<IPermissions>().Check(Current.BoardSettings.PostLatestFeedAccess) && Current.BoardSettings.ShowAtomLink)
    {
        <div class="card-footer">
            <div class="float-end" role="group" aria-label="Tools">
                @Html.RssFeedLink(RssFeeds.LatestPosts, true)
            </div>
        </div>
    }
</div>
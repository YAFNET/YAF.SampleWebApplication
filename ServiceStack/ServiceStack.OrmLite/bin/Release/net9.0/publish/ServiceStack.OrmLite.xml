<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ServiceStack.OrmLite</name>
    </assembly>
    <members>
        <member name="T:ServiceStack.OrmLite.OrmLiteReadCommandExtensionsAsync">
            <summary>
            Class OrmLiteReadCommandExtensionsAsync.
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.OrmLiteReadCommandExtensionsAsync.Log">
            <summary>
            The log
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensionsAsync.ExecReaderAsync(System.Data.IDbCommand,System.String,System.Threading.CancellationToken)">
            <summary>
            Executes the reader asynchronous.
            </summary>
            <param name="dbCmd">The database command.</param>
            <param name="sql">The SQL.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;IDataReader&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensionsAsync.ExecReaderAsync(System.Data.IDbCommand,System.String,System.Collections.Generic.IEnumerable{System.Data.IDataParameter},System.Threading.CancellationToken)">
            <summary>
            Executes the reader asynchronous.
            </summary>
            <param name="dbCmd">The database command.</param>
            <param name="sql">The SQL.</param>
            <param name="parameters">The parameters.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;IDataReader&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensionsAsync.SelectAsync``1(System.Data.IDbCommand,System.Threading.CancellationToken)">
            <summary>
            Selects the asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;List&lt;T&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensionsAsync.SelectAsync``1(System.Data.IDbCommand,System.Type,System.Threading.CancellationToken)">
            <summary>
            Selects the asynchronous.
            </summary>
            <typeparam name="TModel">The type of the t model.</typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="fromTableType">Type of from table.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;List&lt;TModel&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensionsAsync.SelectAsync``1(System.Data.IDbCommand,System.Type,System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Selects the asynchronous.
            </summary>
            <typeparam name="TModel">The type of the t model.</typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="fromTableType">Type of from table.</param>
            <param name="sqlFilter">The SQL filter.</param>
            <param name="anonType">Type of the anon.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;List&lt;TModel&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensionsAsync.SelectByIdsAsync``1(System.Data.IDbCommand,System.Collections.IEnumerable,System.Threading.CancellationToken)">
            <summary>
            Selects the by ids asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="idValues">The identifier values.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;List&lt;T&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensionsAsync.SingleByIdAsync``1(System.Data.IDbCommand,System.Object,System.Threading.CancellationToken)">
            <summary>
            Singles the by identifier asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="value">The value.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensionsAsync.SingleWhereAsync``1(System.Data.IDbCommand,System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Singles the where asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensionsAsync.SingleAsync``1(System.Data.IDbCommand,System.Object,System.Threading.CancellationToken)">
            <summary>
            Singles the asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="anonType">Type of the anon.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensionsAsync.SingleAsync``1(System.Data.IDbCommand,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter},System.Threading.CancellationToken)">
            <summary>
            Singles the asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="sql">The SQL.</param>
            <param name="sqlParams">The SQL parameters.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensionsAsync.SingleAsync``1(System.Data.IDbCommand,System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Singles the asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="sql">The SQL.</param>
            <param name="anonType">Type of the anon.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensionsAsync.WhereAsync``1(System.Data.IDbCommand,System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Wheres the asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;List&lt;T&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensionsAsync.WhereAsync``1(System.Data.IDbCommand,System.Object,System.Threading.CancellationToken)">
            <summary>
            Wheres the asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="anonType">Type of the anon.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;List&lt;T&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensionsAsync.SelectAsync``1(System.Data.IDbCommand,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter},System.Threading.CancellationToken)">
            <summary>
            Selects the asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="sql">The SQL.</param>
            <param name="sqlParams">The SQL parameters.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;List&lt;T&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensionsAsync.SelectAsync``1(System.Data.IDbCommand,System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Selects the asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="sql">The SQL.</param>
            <param name="anonType">Type of the anon.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;List&lt;T&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensionsAsync.SelectAsync``1(System.Data.IDbCommand,System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            Selects the asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="sql">The SQL.</param>
            <param name="dict">The dictionary.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;List&lt;T&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensionsAsync.SqlListAsync``1(System.Data.IDbCommand,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter},System.Threading.CancellationToken)">
            <summary>
            SQLs the list asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="sql">The SQL.</param>
            <param name="sqlParams">The SQL parameters.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;List&lt;T&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensionsAsync.SqlListAsync``1(System.Data.IDbCommand,System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            SQLs the list asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="sql">The SQL.</param>
            <param name="anonType">Type of the anon.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;List&lt;T&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensionsAsync.SqlListAsync``1(System.Data.IDbCommand,System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            SQLs the list asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="sql">The SQL.</param>
            <param name="dict">The dictionary.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;List&lt;T&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensionsAsync.SqlListAsync``1(System.Data.IDbCommand,System.String,System.Action{System.Data.IDbCommand},System.Threading.CancellationToken)">
            <summary>
            SQLs the list asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="sql">The SQL.</param>
            <param name="dbCmdFilter">The database command filter.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;List&lt;T&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensionsAsync.SqlColumnAsync``1(System.Data.IDbCommand,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter},System.Threading.CancellationToken)">
            <summary>
            SQLs the column asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="sql">The SQL.</param>
            <param name="sqlParams">The SQL parameters.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;List&lt;T&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensionsAsync.SqlColumnAsync``1(System.Data.IDbCommand,System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            SQLs the column asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="sql">The SQL.</param>
            <param name="anonType">Type of the anon.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;List&lt;T&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensionsAsync.SqlColumnAsync``1(System.Data.IDbCommand,System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            SQLs the column asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="sql">The SQL.</param>
            <param name="dict">The dictionary.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;List&lt;T&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensionsAsync.SqlScalarAsync``1(System.Data.IDbCommand,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter},System.Threading.CancellationToken)">
            <summary>
            SQLs the scalar asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="sql">The SQL.</param>
            <param name="sqlParams">The SQL parameters.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensionsAsync.SqlScalarAsync``1(System.Data.IDbCommand,System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            SQLs the scalar asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="sql">The SQL.</param>
            <param name="anonType">Type of the anon.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensionsAsync.SqlScalarAsync``1(System.Data.IDbCommand,System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            SQLs the scalar asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="sql">The SQL.</param>
            <param name="dict">The dictionary.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensionsAsync.SelectNonDefaultsAsync``1(System.Data.IDbCommand,System.Object,System.Threading.CancellationToken)">
            <summary>
            Selects the non defaults asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="filter">The filter.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;List&lt;T&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensionsAsync.SelectNonDefaultsAsync``1(System.Data.IDbCommand,System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Selects the non defaults asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="sql">The SQL.</param>
            <param name="anonType">Type of the anon.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;List&lt;T&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensionsAsync.ScalarAsync``1(System.Data.IDbCommand,System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Scalars the asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="sql">The SQL.</param>
            <param name="anonType">Type of the anon.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensionsAsync.ScalarAsync``1(System.Data.IDataReader,ServiceStack.OrmLite.IOrmLiteDialectProvider,System.Threading.CancellationToken)">
            <summary>
            Scalars the asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="reader">The reader.</param>
            <param name="dialectProvider">The dialect provider.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensionsAsync.LongScalarAsync(System.Data.IDbCommand,System.Threading.CancellationToken)">
            <summary>
            Long scalar as an asynchronous operation.
            </summary>
            <param name="dbCmd">The database command.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>A Task&lt;System.Int64&gt; representing the asynchronous operation.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensionsAsync.ColumnAsync``1(System.Data.IDbCommand,System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Columns the asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="sql">The SQL.</param>
            <param name="anonType">Type of the anon.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;List&lt;T&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensionsAsync.ColumnAsync``1(System.Data.IDataReader,ServiceStack.OrmLite.IOrmLiteDialectProvider,System.Threading.CancellationToken)">
            <summary>
            Column as an asynchronous operation.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="reader">The reader.</param>
            <param name="dialectProvider">The dialect provider.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>A Task&lt;List`1&gt; representing the asynchronous operation.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensionsAsync.ColumnDistinctAsync``1(System.Data.IDbCommand,System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Columns the distinct asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="sql">The SQL.</param>
            <param name="anonType">Type of the anon.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;HashSet&lt;T&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensionsAsync.ColumnDistinctAsync``1(System.Data.IDataReader,ServiceStack.OrmLite.IOrmLiteDialectProvider,System.Threading.CancellationToken)">
            <summary>
            Column distinct as an asynchronous operation.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="reader">The reader.</param>
            <param name="dialectProvider">The dialect provider.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>A Task&lt;HashSet`1&gt; representing the asynchronous operation.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensionsAsync.LookupAsync``2(System.Data.IDbCommand,System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Lookups the asynchronous.
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="sql">The SQL.</param>
            <param name="anonType">Type of the anon.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;Dictionary&lt;K, List&lt;V&gt;&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensionsAsync.LookupAsync``2(System.Data.IDataReader,ServiceStack.OrmLite.IOrmLiteDialectProvider,System.Threading.CancellationToken)">
            <summary>
            Lookups the asynchronous.
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="reader">The reader.</param>
            <param name="dialectProvider">The dialect provider.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;Dictionary&lt;K, List&lt;V&gt;&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensionsAsync.DictionaryAsync``2(System.Data.IDbCommand,System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Dictionaries the asynchronous.
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="sql">The SQL.</param>
            <param name="anonType">Type of the anon.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;Dictionary&lt;K, V&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensionsAsync.DictionaryAsync``2(System.Data.IDataReader,ServiceStack.OrmLite.IOrmLiteDialectProvider,System.Threading.CancellationToken)">
            <summary>
            Dictionaries the asynchronous.
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="reader">The reader.</param>
            <param name="dialectProvider">The dialect provider.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;Dictionary&lt;K, V&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensionsAsync.KeyValuePairsAsync``2(System.Data.IDbCommand,System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Keys the value pairs asynchronous.
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="sql">The SQL.</param>
            <param name="anonType">Type of the anon.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;List&lt;KeyValuePair&lt;K, V&gt;&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensionsAsync.KeyValuePairsAsync``2(System.Data.IDataReader,ServiceStack.OrmLite.IOrmLiteDialectProvider,System.Threading.CancellationToken)">
            <summary>
            Keys the value pairs asynchronous.
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="reader">The reader.</param>
            <param name="dialectProvider">The dialect provider.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;List&lt;KeyValuePair&lt;K, V&gt;&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensionsAsync.ExistsAsync``1(System.Data.IDbCommand,System.Object,System.Threading.CancellationToken)">
            <summary>
            Exists as an asynchronous operation.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="anonType">Type of the anon.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>A Task&lt;System.Boolean&gt; representing the asynchronous operation.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensionsAsync.ExistsAsync``1(System.Data.IDbCommand,System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Exists as an asynchronous operation.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="sql">The SQL.</param>
            <param name="anonType">Type of the anon.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>A Task&lt;System.Boolean&gt; representing the asynchronous operation.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensionsAsync.SqlProcedureAsync``1(System.Data.IDbCommand,System.Object,System.Threading.CancellationToken)">
            <summary>
            SQLs the procedure asynchronous.
            </summary>
            <typeparam name="TOutputModel">The type of the t output model.</typeparam>
            <param name="dbCommand">The database command.</param>
            <param name="fromObjWithProperties">From object with properties.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;List&lt;TOutputModel&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensionsAsync.SqlProcedureFmtAsync``1(System.Data.IDbCommand,System.Threading.CancellationToken,System.Object,System.String,System.Object[])">
            <summary>
            SQLs the procedure FMT asynchronous.
            </summary>
            <typeparam name="TOutputModel">The type of the t output model.</typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <param name="fromObjWithProperties">From object with properties.</param>
            <param name="sqlFilter">The SQL filter.</param>
            <param name="filterParams">The filter parameters.</param>
            <returns>Task&lt;List&lt;TOutputModel&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensionsAsync.LoadSingleByIdAsync``1(System.Data.IDbCommand,System.Object,System.String[],System.Threading.CancellationToken)">
            <summary>
            Load single by identifier as an asynchronous operation.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="value">The value.</param>
            <param name="include">The include.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>A Task&lt;T&gt; representing the asynchronous operation.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensionsAsync.LoadReferencesAsync``1(System.Data.IDbCommand,``0,System.String[],System.Threading.CancellationToken)">
            <summary>
            Load references as an asynchronous operation.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="instance">The instance.</param>
            <param name="include">The include.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>A Task representing the asynchronous operation.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensionsAsync.LoadListWithReferences``2(System.Data.IDbCommand,ServiceStack.OrmLite.SqlExpression{``1},System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Loads the list with references.
            </summary>
            <typeparam name="Into">The type of the into.</typeparam>
            <typeparam name="From">The type of from.</typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="expr">The expr.</param>
            <param name="include">The include.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>List&lt;Into&gt;.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.OrmLiteResultsFilterExtensionsAsync">
            <summary>
            Class OrmLiteResultsFilterExtensionsAsync.
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.OrmLiteResultsFilterExtensionsAsync.Log">
            <summary>
            The log
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteResultsFilterExtensionsAsync.ExecNonQueryAsync(System.Data.IDbCommand,System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Executes the non query asynchronous.
            </summary>
            <param name="dbCmd">The database command.</param>
            <param name="sql">The SQL.</param>
            <param name="anonType">Type of the anon.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;System.Int32&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteResultsFilterExtensionsAsync.ExecNonQueryAsync(System.Data.IDbCommand,System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            Executes the non query asynchronous.
            </summary>
            <param name="dbCmd">The database command.</param>
            <param name="sql">The SQL.</param>
            <param name="dict">The dictionary.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;System.Int32&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteResultsFilterExtensionsAsync.ExecNonQueryAsync(System.Data.IDbCommand,System.Threading.CancellationToken)">
            <summary>
            Executes the non query asynchronous.
            </summary>
            <param name="dbCmd">The database command.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;System.Int32&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteResultsFilterExtensionsAsync.ConvertToListAsync``1(System.Data.IDbCommand)">
            <summary>
            Converts to list asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <returns>Task&lt;List&lt;T&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteResultsFilterExtensionsAsync.ConvertToListAsync``1(System.Data.IDbCommand,System.String,System.Threading.CancellationToken)">
            <summary>
            Convert to list as an asynchronous operation.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="sql">The SQL.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>A Task&lt;List`1&gt; representing the asynchronous operation.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteResultsFilterExtensionsAsync.ConvertToListAsync(System.Data.IDbCommand,System.Type)">
            <summary>
            Converts to list asynchronous.
            </summary>
            <param name="dbCmd">The database command.</param>
            <param name="refType">Type of the reference.</param>
            <returns>Task&lt;IList&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteResultsFilterExtensionsAsync.ConvertToListAsync(System.Data.IDbCommand,System.Type,System.String,System.Threading.CancellationToken)">
            <summary>
            Convert to list as an asynchronous operation.
            </summary>
            <param name="dbCmd">The database command.</param>
            <param name="refType">Type of the reference.</param>
            <param name="sql">The SQL.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>A Task&lt;IList&gt; representing the asynchronous operation.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteResultsFilterExtensionsAsync.ExprConvertToListAsync``1(System.Data.IDbCommand,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter},System.Collections.Generic.HashSet{System.String},System.Threading.CancellationToken)">
            <summary>
            Expr convert to list as an asynchronous operation.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="sql">The SQL.</param>
            <param name="sqlParams">The SQL parameters.</param>
            <param name="onlyFields">The only fields.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>A Task&lt;List`1&gt; representing the asynchronous operation.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteResultsFilterExtensionsAsync.ConvertToAsync``1(System.Data.IDbCommand)">
            <summary>
            Converts to asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <returns>Task&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteResultsFilterExtensionsAsync.ConvertToAsync``1(System.Data.IDbCommand,System.String,System.Threading.CancellationToken)">
            <summary>
            Convert to as an asynchronous operation.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="sql">The SQL.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>A Task&lt;T&gt; representing the asynchronous operation.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteResultsFilterExtensionsAsync.ConvertToAsync(System.Data.IDbCommand,System.Type,System.String,System.Threading.CancellationToken)">
            <summary>
            Convert to as an asynchronous operation.
            </summary>
            <param name="dbCmd">The database command.</param>
            <param name="refType">Type of the reference.</param>
            <param name="sql">The SQL.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>A Task&lt;System.Object&gt; representing the asynchronous operation.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteResultsFilterExtensionsAsync.ScalarAsync``1(System.Data.IDbCommand)">
            <summary>
            Scalars the asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <returns>Task&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteResultsFilterExtensionsAsync.ScalarAsync``1(System.Data.IDbCommand,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter},System.Threading.CancellationToken)">
            <summary>
            Scalars the asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="sql">The SQL.</param>
            <param name="sqlParams">The SQL parameters.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteResultsFilterExtensionsAsync.ScalarAsync``1(System.Data.IDbCommand,System.String,System.Threading.CancellationToken)">
            <summary>
            Scalar as an asynchronous operation.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="sql">The SQL.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>A Task&lt;T&gt; representing the asynchronous operation.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteResultsFilterExtensionsAsync.ScalarAsync(System.Data.IDbCommand)">
            <summary>
            Scalars the asynchronous.
            </summary>
            <param name="dbCmd">The database command.</param>
            <returns>Task&lt;System.Object&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteResultsFilterExtensionsAsync.ScalarAsync(System.Data.IDbCommand,ServiceStack.OrmLite.ISqlExpression,System.Threading.CancellationToken)">
            <summary>
            Scalars the asynchronous.
            </summary>
            <param name="dbCmd">The database command.</param>
            <param name="expression">The expression.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;System.Object&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteResultsFilterExtensionsAsync.ScalarAsync(System.Data.IDbCommand,System.String,System.Threading.CancellationToken)">
            <summary>
            Scalars the asynchronous.
            </summary>
            <param name="dbCmd">The database command.</param>
            <param name="sql">The SQL.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;System.Object&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteResultsFilterExtensionsAsync.ExecLongScalarAsync(System.Data.IDbCommand)">
            <summary>
            Executes the long scalar asynchronous.
            </summary>
            <param name="dbCmd">The database command.</param>
            <returns>Task&lt;System.Int64&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteResultsFilterExtensionsAsync.ExecLongScalarAsync(System.Data.IDbCommand,System.String,System.Threading.CancellationToken)">
            <summary>
            Executes the long scalar asynchronous.
            </summary>
            <param name="dbCmd">The database command.</param>
            <param name="sql">The SQL.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;System.Int64&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteResultsFilterExtensionsAsync.ExprConvertToAsync``1(System.Data.IDbCommand,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter},System.Threading.CancellationToken)">
            <summary>
            Expr convert to as an asynchronous operation.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="sql">The SQL.</param>
            <param name="sqlParams">The SQL parameters.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>A Task&lt;T&gt; representing the asynchronous operation.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteResultsFilterExtensionsAsync.ColumnAsync``1(System.Data.IDbCommand,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter},System.Threading.CancellationToken)">
            <summary>
            Columns the asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="sql">The SQL.</param>
            <param name="sqlParams">The SQL parameters.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;List&lt;T&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteResultsFilterExtensionsAsync.ColumnAsync``1(System.Data.IDbCommand,System.String,System.Threading.CancellationToken)">
            <summary>
            Column as an asynchronous operation.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="sql">The SQL.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>A Task&lt;List`1&gt; representing the asynchronous operation.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteResultsFilterExtensionsAsync.ColumnDistinctAsync``1(System.Data.IDbCommand,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter},System.Threading.CancellationToken)">
            <summary>
            Columns the distinct asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="sql">The SQL.</param>
            <param name="sqlParams">The SQL parameters.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;HashSet&lt;T&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteResultsFilterExtensionsAsync.ColumnDistinctAsync``1(System.Data.IDbCommand,System.String,System.Threading.CancellationToken)">
            <summary>
            Column distinct as an asynchronous operation.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="sql">The SQL.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>A Task&lt;HashSet`1&gt; representing the asynchronous operation.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteResultsFilterExtensionsAsync.DictionaryAsync``2(System.Data.IDbCommand,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter},System.Threading.CancellationToken)">
            <summary>
            Dictionaries the asynchronous.
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="sql">The SQL.</param>
            <param name="sqlParams">The SQL parameters.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;Dictionary&lt;K, V&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteResultsFilterExtensionsAsync.DictionaryAsync``2(System.Data.IDbCommand,System.String,System.Threading.CancellationToken)">
            <summary>
            Dictionary as an asynchronous operation.
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="sql">The SQL.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>A Task&lt;Dictionary`2&gt; representing the asynchronous operation.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteResultsFilterExtensionsAsync.KeyValuePairsAsync``2(System.Data.IDbCommand,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter},System.Threading.CancellationToken)">
            <summary>
            Keys the value pairs asynchronous.
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="sql">The SQL.</param>
            <param name="sqlParams">The SQL parameters.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;List&lt;KeyValuePair&lt;K, V&gt;&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteResultsFilterExtensionsAsync.KeyValuePairsAsync``2(System.Data.IDbCommand,System.String,System.Threading.CancellationToken)">
            <summary>
            Key value pairs as an asynchronous operation.
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="sql">The SQL.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>A Task&lt;List`1&gt; representing the asynchronous operation.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteResultsFilterExtensionsAsync.LookupAsync``2(System.Data.IDbCommand,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter},System.Threading.CancellationToken)">
            <summary>
            Lookups the asynchronous.
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="sql">The SQL.</param>
            <param name="sqlParams">The SQL parameters.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;Dictionary&lt;K, List&lt;V&gt;&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteResultsFilterExtensionsAsync.LookupAsync``2(System.Data.IDbCommand,System.String,System.Threading.CancellationToken)">
            <summary>
            Lookup as an asynchronous operation.
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="sql">The SQL.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>A Task&lt;Dictionary`2&gt; representing the asynchronous operation.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.OrmLiteUtilExtensionsAsync">
            <summary>
            Class OrmLiteUtilExtensionsAsync.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteUtilExtensionsAsync.CreateInstance``1">
            <summary>
            Creates the instance.
            </summary>
            <typeparam name="T"></typeparam>
            <returns>T.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteUtilExtensionsAsync.ConvertToAsync(System.Data.IDataReader,ServiceStack.OrmLite.IOrmLiteDialectProvider,System.Type,System.Threading.CancellationToken)">
            <summary>
            Convert to as an asynchronous operation.
            </summary>
            <param name="reader">The reader.</param>
            <param name="dialectProvider">The dialect provider.</param>
            <param name="type">The type.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>A Task&lt;System.Object&gt; representing the asynchronous operation.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteUtilExtensionsAsync.ConvertToAsync``1(System.Data.IDataReader,ServiceStack.OrmLite.IOrmLiteDialectProvider,System.Threading.CancellationToken)">
            <summary>
            Convert to as an asynchronous operation.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="reader">The reader.</param>
            <param name="dialectProvider">The dialect provider.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>A Task&lt;T&gt; representing the asynchronous operation.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteUtilExtensionsAsync.ConvertToListAsync``1(System.Data.IDataReader,ServiceStack.OrmLite.IOrmLiteDialectProvider,System.Collections.Generic.HashSet{System.String},System.Threading.CancellationToken)">
            <summary>
            Convert to list as an asynchronous operation.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="reader">The reader.</param>
            <param name="dialectProvider">The dialect provider.</param>
            <param name="onlyFields">The only fields.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>A Task&lt;List`1&gt; representing the asynchronous operation.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteUtilExtensionsAsync.ConvertToListAsync(System.Data.IDataReader,ServiceStack.OrmLite.IOrmLiteDialectProvider,System.Type,System.Threading.CancellationToken)">
            <summary>
            Convert to list as an asynchronous operation.
            </summary>
            <param name="reader">The reader.</param>
            <param name="dialectProvider">The dialect provider.</param>
            <param name="type">The type.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>A Task&lt;IList&gt; representing the asynchronous operation.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.OrmLiteWriteCommandExtensionsAsync">
            <summary>
            Class OrmLiteWriteCommandExtensionsAsync.
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.OrmLiteWriteCommandExtensionsAsync.Log">
            <summary>
            The log
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteCommandExtensionsAsync.ExecuteSqlAsync(System.Data.IDbCommand,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter},System.Threading.CancellationToken)">
            <summary>
            Executes the SQL asynchronous.
            </summary>
            <param name="dbCmd">The database command.</param>
            <param name="sql">The SQL.</param>
            <param name="sqlParams">The SQL parameters.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;System.Int32&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteCommandExtensionsAsync.ExecuteSqlAsync(System.Data.IDbCommand,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter},System.Action{System.Data.IDbCommand},System.Threading.CancellationToken)">
            <summary>
            Executes the SQL asynchronous.
            </summary>
            <param name="dbCmd">The database command.</param>
            <param name="sql">The SQL.</param>
            <param name="sqlParams">The SQL parameters.</param>
            <param name="commandFilter">The command filter.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;System.Int32&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteCommandExtensionsAsync.ExecuteSqlAsync(System.Data.IDbCommand,System.String,System.Threading.CancellationToken)">
            <summary>
            Executes the SQL asynchronous.
            </summary>
            <param name="dbCmd">The database command.</param>
            <param name="sql">The SQL.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;System.Int32&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteCommandExtensionsAsync.ExecuteSqlAsync(System.Data.IDbCommand,System.String,System.Action{System.Data.IDbCommand},System.Threading.CancellationToken)">
            <summary>
            Executes the SQL asynchronous.
            </summary>
            <param name="dbCmd">The database command.</param>
            <param name="sql">The SQL.</param>
            <param name="commandFilter">The command filter.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;System.Int32&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteCommandExtensionsAsync.ExecuteSqlAsync(System.Data.IDbCommand,System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Executes the SQL asynchronous.
            </summary>
            <param name="dbCmd">The database command.</param>
            <param name="sql">The SQL.</param>
            <param name="anonType">Type of the anon.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;System.Int32&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteCommandExtensionsAsync.ExecuteSqlAsync(System.Data.IDbCommand,System.String,System.Object,System.Action{System.Data.IDbCommand},System.Threading.CancellationToken)">
            <summary>
            Executes the SQL asynchronous.
            </summary>
            <param name="dbCmd">The database command.</param>
            <param name="sql">The SQL.</param>
            <param name="anonType">Type of the anon.</param>
            <param name="commandFilter">The command filter.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;System.Int32&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteCommandExtensionsAsync.UpdateAsync``1(System.Data.IDbCommand,``0,System.Threading.CancellationToken,System.Action{System.Data.IDbCommand})">
            <summary>
            Updates the asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="obj">The object.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <param name="commandFilter">The command filter.</param>
            <returns>Task&lt;System.Int32&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteCommandExtensionsAsync.UpdateAsync``1(System.Data.IDbCommand,System.Collections.Generic.Dictionary{System.String,System.Object},System.Threading.CancellationToken,System.Action{System.Data.IDbCommand})">
            <summary>
            Updates the asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="obj">The object.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <param name="commandFilter">The command filter.</param>
            <returns>Task&lt;System.Int32&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteCommandExtensionsAsync.UpdateInternalAsync``1(System.Data.IDbCommand,System.Object,System.Threading.CancellationToken,System.Action{System.Data.IDbCommand})">
            <summary>
            Update internal as an asynchronous operation.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="obj">The object.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <param name="commandFilter">The command filter.</param>
            <returns>A Task&lt;System.Int32&gt; representing the asynchronous operation.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteCommandExtensionsAsync.UpdateAndVerifyAsync``1(System.Data.IDbCommand,System.Action{System.Data.IDbCommand},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Update and verify as an asynchronous operation.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="commandFilter">The command filter.</param>
            <param name="hadRowVersion">if set to <c>true</c> [had row version].</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>A Task&lt;System.Int32&gt; representing the asynchronous operation.</returns>
            <exception cref="T:ServiceStack.Data.OptimisticConcurrencyException"></exception>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteCommandExtensionsAsync.UpdateAsync``1(System.Data.IDbCommand,System.Action{System.Data.IDbCommand},System.Threading.CancellationToken,``0[])">
            <summary>
            Updates the asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="commandFilter">The command filter.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <param name="objs">The objs.</param>
            <returns>Task&lt;System.Int32&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteCommandExtensionsAsync.UpdateAllAsync``1(System.Data.IDbCommand,System.Collections.Generic.IEnumerable{``0},System.Action{System.Data.IDbCommand},System.Threading.CancellationToken)">
            <summary>
            Update all as an asynchronous operation.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="objs">The objs.</param>
            <param name="commandFilter">The command filter.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>A Task&lt;System.Int32&gt; representing the asynchronous operation.</returns>
            <exception cref="T:ServiceStack.Data.OptimisticConcurrencyException"></exception>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteCommandExtensionsAsync.AssertRowsUpdatedAsync(System.Data.IDbCommand,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Assert rows updated as an asynchronous operation.
            </summary>
            <param name="dbCmd">The database command.</param>
            <param name="hadRowVersion">if set to <c>true</c> [had row version].</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>A Task&lt;System.Int32&gt; representing the asynchronous operation.</returns>
            <exception cref="T:ServiceStack.Data.OptimisticConcurrencyException"></exception>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteCommandExtensionsAsync.DeleteAsync``1(System.Data.IDbCommand,``0,System.Threading.CancellationToken)">
            <summary>
            Deletes the asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="filter">The filter.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;System.Int32&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteCommandExtensionsAsync.DeleteAsync``1(System.Data.IDbCommand,System.Object,System.Threading.CancellationToken)">
            <summary>
            Deletes the asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="anonType">Type of the anon.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;System.Int32&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteCommandExtensionsAsync.DeleteNonDefaultsAsync``1(System.Data.IDbCommand,``0,System.Threading.CancellationToken)">
            <summary>
            Deletes the non defaults asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="filter">The filter.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;System.Int32&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteCommandExtensionsAsync.DeleteAsync``1(System.Data.IDbCommand,System.Threading.CancellationToken,``0[])">
            <summary>
            Deletes the asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <param name="objs">The objs.</param>
            <returns>Task&lt;System.Int32&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteCommandExtensionsAsync.DeleteNonDefaultsAsync``1(System.Data.IDbCommand,System.Threading.CancellationToken,``0[])">
            <summary>
            Deletes the non defaults asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <param name="filters">The filters.</param>
            <returns>Task&lt;System.Int32&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteCommandExtensionsAsync.DeleteAllAsync``1(System.Data.IDbCommand,System.Collections.Generic.IEnumerable{``0},System.Func{System.Object,System.Collections.Generic.Dictionary{System.String,System.Object}},System.Action{System.Data.IDbCommand},System.Threading.CancellationToken)">
            <summary>
            Delete all as an asynchronous operation.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="objs">The objs.</param>
            <param name="fieldValuesFn">The field values function.</param>
            <param name="commandFilter">The command filter.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>A Task&lt;System.Int32&gt; representing the asynchronous operation.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteCommandExtensionsAsync.DeleteByIdAsync``1(System.Data.IDbCommand,System.Object,System.Action{System.Data.IDbCommand},System.Threading.CancellationToken)">
            <summary>
            Deletes the by identifier asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="id">The identifier.</param>
            <param name="commandFilter">The command filter.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;System.Int32&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteCommandExtensionsAsync.DeleteByIdAsync``1(System.Data.IDbCommand,System.Object,System.UInt64,System.Action{System.Data.IDbCommand},System.Threading.CancellationToken)">
            <summary>
            Delete by identifier as an asynchronous operation.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="id">The identifier.</param>
            <param name="rowVersion">The row version.</param>
            <param name="commandFilter">The command filter.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>A Task representing the asynchronous operation.</returns>
            <exception cref="T:ServiceStack.Data.OptimisticConcurrencyException">The row was modified or deleted since the last read</exception>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteCommandExtensionsAsync.DeleteByIdsAsync``1(System.Data.IDbCommand,System.Collections.IEnumerable,System.Action{System.Data.IDbCommand},System.Threading.CancellationToken)">
            <summary>
            Deletes the by ids asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="idValues">The identifier values.</param>
            <param name="commandFilter">The command filter.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;System.Int32&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteCommandExtensionsAsync.DeleteAllAsync``1(System.Data.IDbCommand,System.Threading.CancellationToken)">
            <summary>
            Deletes all asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;System.Int32&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteCommandExtensionsAsync.DeleteAllAsync(System.Data.IDbCommand,System.Type,System.Threading.CancellationToken)">
            <summary>
            Deletes all asynchronous.
            </summary>
            <param name="dbCmd">The database command.</param>
            <param name="tableType">Type of the table.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;System.Int32&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteCommandExtensionsAsync.DeleteAsync``1(System.Data.IDbCommand,System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Deletes the asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="sql">The SQL.</param>
            <param name="anonType">Type of the anon.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;System.Int32&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteCommandExtensionsAsync.DeleteAsync(System.Data.IDbCommand,System.Type,System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Deletes the asynchronous.
            </summary>
            <param name="dbCmd">The database command.</param>
            <param name="tableType">Type of the table.</param>
            <param name="sql">The SQL.</param>
            <param name="anonType">Type of the anon.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;System.Int32&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteCommandExtensionsAsync.InsertAsync``1(System.Data.IDbCommand,``0,System.Action{System.Data.IDbCommand},System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Insert as an asynchronous operation.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="obj">The object.</param>
            <param name="commandFilter">The command filter.</param>
            <param name="selectIdentity">if set to <c>true</c> [select identity].</param>
            <param name="enableIdentityInsert">if set to <c>true</c> [enable identity insert].</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>A Task&lt;System.Int64&gt; representing the asynchronous operation.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteCommandExtensionsAsync.InsertAsync``1(System.Data.IDbCommand,System.Collections.Generic.Dictionary{System.String,System.Object},System.Action{System.Data.IDbCommand},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Insert as an asynchronous operation.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="obj">The object.</param>
            <param name="commandFilter">The command filter.</param>
            <param name="selectIdentity">if set to <c>true</c> [select identity].</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>A Task&lt;System.Int64&gt; representing the asynchronous operation.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteCommandExtensionsAsync.InsertInternalAsync``1(ServiceStack.OrmLite.IOrmLiteDialectProvider,System.Data.IDbCommand,System.Object,System.Action{System.Data.IDbCommand},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Insert internal as an asynchronous operation.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dialectProvider">The dialect provider.</param>
            <param name="dbCmd">The database command.</param>
            <param name="obj">The object.</param>
            <param name="commandFilter">The command filter.</param>
            <param name="selectIdentity">if set to <c>true</c> [select identity].</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>A Task&lt;System.Int64&gt; representing the asynchronous operation.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteCommandExtensionsAsync.InsertAsync``1(System.Data.IDbCommand,System.Action{System.Data.IDbCommand},System.Threading.CancellationToken,``0[])">
            <summary>
            Inserts the asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="commandFilter">The command filter.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <param name="objs">The objs.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteCommandExtensionsAsync.InsertUsingDefaultsAsync``1(System.Data.IDbCommand,``0[],System.Threading.CancellationToken)">
            <summary>
            Insert using defaults as an asynchronous operation.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="objs">The objs.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>A Task representing the asynchronous operation.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteCommandExtensionsAsync.InsertIntoSelectAsync``1(System.Data.IDbCommand,ServiceStack.OrmLite.ISqlExpression,System.Action{System.Data.IDbCommand},System.Threading.CancellationToken)">
            <summary>
            Insert into select as an asynchronous operation.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="query">The query.</param>
            <param name="commandFilter">The command filter.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>A Task&lt;System.Int64&gt; representing the asynchronous operation.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteCommandExtensionsAsync.InsertAllAsync``1(System.Data.IDbCommand,System.Collections.Generic.IEnumerable{``0},System.Action{System.Data.IDbCommand},System.Threading.CancellationToken)">
            <summary>
            Insert all as an asynchronous operation.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="objs">The objs.</param>
            <param name="commandFilter">The command filter.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>A Task representing the asynchronous operation.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteCommandExtensionsAsync.SaveAsync``1(System.Data.IDbCommand,System.Threading.CancellationToken,``0[])">
            <summary>
            Saves the asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <param name="objs">The objs.</param>
            <returns>Task&lt;System.Int32&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteCommandExtensionsAsync.SaveAsync``1(System.Data.IDbCommand,``0,System.Threading.CancellationToken)">
            <summary>
            Save as an asynchronous operation.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="obj">The object.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>A Task&lt;System.Boolean&gt; representing the asynchronous operation.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteCommandExtensionsAsync.SaveAllAsync``1(System.Data.IDbCommand,System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken)">
            <summary>
            Save all as an asynchronous operation.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="objs">The objs.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>A Task&lt;System.Int32&gt; representing the asynchronous operation.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteCommandExtensionsAsync.SaveAllReferencesAsync``1(System.Data.IDbCommand,``0,System.Threading.CancellationToken)">
            <summary>
            Save all references as an asynchronous operation.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="instance">The instance.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>A Task representing the asynchronous operation.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteCommandExtensionsAsync.SaveAllReferences(System.Data.IDbCommand,ServiceStack.OrmLite.ModelDefinition,System.Object,System.Threading.CancellationToken)">
            <summary>
            Saves all references.
            </summary>
            <param name="dbCmd">The database command.</param>
            <param name="modelDef">The model definition.</param>
            <param name="instance">The instance.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteCommandExtensionsAsync.SaveReferencesAsync``2(System.Data.IDbCommand,System.Threading.CancellationToken,``0,``1[])">
            <summary>
            Save references as an asynchronous operation.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TRef">The type of the t reference.</typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <param name="instance">The instance.</param>
            <param name="refs">The refs.</param>
            <returns>A Task representing the asynchronous operation.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteCommandExtensionsAsync.ExecuteProcedureAsync``1(System.Data.IDbCommand,``0,System.Threading.CancellationToken)">
            <summary>
            Executes the procedure asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCommand">The database command.</param>
            <param name="obj">The object.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteCommandExtensionsAsync.GetRowVersionAsync(System.Data.IDbCommand,ServiceStack.OrmLite.ModelDefinition,System.Object,System.Threading.CancellationToken)">
            <summary>
            Get row version as an asynchronous operation.
            </summary>
            <param name="dbCmd">The database command.</param>
            <param name="modelDef">The model definition.</param>
            <param name="id">The identifier.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>A Task&lt;System.Object&gt; representing the asynchronous operation.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.ReadExpressionCommandExtensionsAsync">
            <summary>
            Class ReadExpressionCommandExtensionsAsync.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.ReadExpressionCommandExtensionsAsync.SelectAsync``2(System.Data.IDbCommand,ServiceStack.OrmLite.SqlExpression{``1},System.Threading.CancellationToken)">
            <summary>
            Selects the asynchronous.
            </summary>
            <typeparam name="Into">The type of the into.</typeparam>
            <typeparam name="From">The type of from.</typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="q">The q.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;List&lt;Into&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.ReadExpressionCommandExtensionsAsync.SelectAsync``1(System.Data.IDbCommand,ServiceStack.OrmLite.SqlExpression{``0},System.Threading.CancellationToken)">
            <summary>
            Selects the asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="q">The q.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;List&lt;T&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.ReadExpressionCommandExtensionsAsync.SelectAsync``1(System.Data.IDbCommand,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Selects the asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="predicate">The predicate.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;List&lt;T&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.ReadExpressionCommandExtensionsAsync.SelectMultiAsync``2(System.Data.IDbCommand,ServiceStack.OrmLite.SqlExpression{``0},System.Threading.CancellationToken)">
            <summary>
            Selects the multi asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="T2">The type of the t2.</typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="q">The q.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;List&lt;Tuple&lt;T, T2&gt;&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.ReadExpressionCommandExtensionsAsync.SelectMultiAsync``3(System.Data.IDbCommand,ServiceStack.OrmLite.SqlExpression{``0},System.Threading.CancellationToken)">
            <summary>
            Selects the multi asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="T2">The type of the t2.</typeparam>
            <typeparam name="T3">The type of the t3.</typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="q">The q.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;List&lt;Tuple&lt;T, T2, T3&gt;&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.ReadExpressionCommandExtensionsAsync.SelectMultiAsync``4(System.Data.IDbCommand,ServiceStack.OrmLite.SqlExpression{``0},System.Threading.CancellationToken)">
            <summary>
            Selects the multi asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="T2">The type of the t2.</typeparam>
            <typeparam name="T3">The type of the t3.</typeparam>
            <typeparam name="T4">The type of the t4.</typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="q">The q.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;List&lt;Tuple&lt;T, T2, T3, T4&gt;&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.ReadExpressionCommandExtensionsAsync.SelectMultiAsync``5(System.Data.IDbCommand,ServiceStack.OrmLite.SqlExpression{``0},System.Threading.CancellationToken)">
            <summary>
            Selects the multi asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="T2">The type of the t2.</typeparam>
            <typeparam name="T3">The type of the t3.</typeparam>
            <typeparam name="T4">The type of the t4.</typeparam>
            <typeparam name="T5">The type of the t5.</typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="q">The q.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;List&lt;Tuple&lt;T, T2, T3, T4, T5&gt;&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.ReadExpressionCommandExtensionsAsync.SelectMultiAsync``6(System.Data.IDbCommand,ServiceStack.OrmLite.SqlExpression{``0},System.Threading.CancellationToken)">
            <summary>
            Selects the multi asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="T2">The type of the t2.</typeparam>
            <typeparam name="T3">The type of the t3.</typeparam>
            <typeparam name="T4">The type of the t4.</typeparam>
            <typeparam name="T5">The type of the t5.</typeparam>
            <typeparam name="T6">The type of the t6.</typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="q">The q.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;List&lt;Tuple&lt;T, T2, T3, T4, T5, T6&gt;&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.ReadExpressionCommandExtensionsAsync.SelectMultiAsync``7(System.Data.IDbCommand,ServiceStack.OrmLite.SqlExpression{``0},System.Threading.CancellationToken)">
            <summary>
            Selects the multi asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="T2">The type of the t2.</typeparam>
            <typeparam name="T3">The type of the t3.</typeparam>
            <typeparam name="T4">The type of the t4.</typeparam>
            <typeparam name="T5">The type of the t5.</typeparam>
            <typeparam name="T6">The type of the t6.</typeparam>
            <typeparam name="T7">The type of the t7.</typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="q">The q.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;List&lt;Tuple&lt;T, T2, T3, T4, T5, T6, T7&gt;&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.ReadExpressionCommandExtensionsAsync.SelectMultiAsync``8(System.Data.IDbCommand,ServiceStack.OrmLite.SqlExpression{``0},System.Threading.CancellationToken)">
            <summary>
            Selects the multi asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="T2">The type of the t2.</typeparam>
            <typeparam name="T3">The type of the t3.</typeparam>
            <typeparam name="T4">The type of the t4.</typeparam>
            <typeparam name="T5">The type of the t5.</typeparam>
            <typeparam name="T6">The type of the t6.</typeparam>
            <typeparam name="T7">The type of the t7.</typeparam>
            <typeparam name="T8">The type of the t8.</typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="q">The q.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;List&lt;Tuple&lt;T, T2, T3, T4, T5, T6, T7, T8&gt;&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.ReadExpressionCommandExtensionsAsync.SelectMultiAsync``2(System.Data.IDbCommand,ServiceStack.OrmLite.SqlExpression{``0},System.String[],System.Threading.CancellationToken)">
            <summary>
            Selects the multi asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="T2">The type of the t2.</typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="q">The q.</param>
            <param name="tableSelects">The table selects.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;List&lt;Tuple&lt;T, T2&gt;&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.ReadExpressionCommandExtensionsAsync.SelectMultiAsync``3(System.Data.IDbCommand,ServiceStack.OrmLite.SqlExpression{``0},System.String[],System.Threading.CancellationToken)">
            <summary>
            Selects the multi asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="T2">The type of the t2.</typeparam>
            <typeparam name="T3">The type of the t3.</typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="q">The q.</param>
            <param name="tableSelects">The table selects.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;List&lt;Tuple&lt;T, T2, T3&gt;&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.ReadExpressionCommandExtensionsAsync.SelectMultiAsync``4(System.Data.IDbCommand,ServiceStack.OrmLite.SqlExpression{``0},System.String[],System.Threading.CancellationToken)">
            <summary>
            Selects the multi asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="T2">The type of the t2.</typeparam>
            <typeparam name="T3">The type of the t3.</typeparam>
            <typeparam name="T4">The type of the t4.</typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="q">The q.</param>
            <param name="tableSelects">The table selects.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;List&lt;Tuple&lt;T, T2, T3, T4&gt;&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.ReadExpressionCommandExtensionsAsync.SelectMultiAsync``5(System.Data.IDbCommand,ServiceStack.OrmLite.SqlExpression{``0},System.String[],System.Threading.CancellationToken)">
            <summary>
            Selects the multi asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="T2">The type of the t2.</typeparam>
            <typeparam name="T3">The type of the t3.</typeparam>
            <typeparam name="T4">The type of the t4.</typeparam>
            <typeparam name="T5">The type of the t5.</typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="q">The q.</param>
            <param name="tableSelects">The table selects.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;List&lt;Tuple&lt;T, T2, T3, T4, T5&gt;&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.ReadExpressionCommandExtensionsAsync.SelectMultiAsync``6(System.Data.IDbCommand,ServiceStack.OrmLite.SqlExpression{``0},System.String[],System.Threading.CancellationToken)">
            <summary>
            Selects the multi asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="T2">The type of the t2.</typeparam>
            <typeparam name="T3">The type of the t3.</typeparam>
            <typeparam name="T4">The type of the t4.</typeparam>
            <typeparam name="T5">The type of the t5.</typeparam>
            <typeparam name="T6">The type of the t6.</typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="q">The q.</param>
            <param name="tableSelects">The table selects.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;List&lt;Tuple&lt;T, T2, T3, T4, T5, T6&gt;&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.ReadExpressionCommandExtensionsAsync.SelectMultiAsync``7(System.Data.IDbCommand,ServiceStack.OrmLite.SqlExpression{``0},System.String[],System.Threading.CancellationToken)">
            <summary>
            Selects the multi asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="T2">The type of the t2.</typeparam>
            <typeparam name="T3">The type of the t3.</typeparam>
            <typeparam name="T4">The type of the t4.</typeparam>
            <typeparam name="T5">The type of the t5.</typeparam>
            <typeparam name="T6">The type of the t6.</typeparam>
            <typeparam name="T7">The type of the t7.</typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="q">The q.</param>
            <param name="tableSelects">The table selects.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;List&lt;Tuple&lt;T, T2, T3, T4, T5, T6, T7&gt;&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.ReadExpressionCommandExtensionsAsync.SelectMultiAsync``8(System.Data.IDbCommand,ServiceStack.OrmLite.SqlExpression{``0},System.String[],System.Threading.CancellationToken)">
            <summary>
            Selects the multi asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="T2">The type of the t2.</typeparam>
            <typeparam name="T3">The type of the t3.</typeparam>
            <typeparam name="T4">The type of the t4.</typeparam>
            <typeparam name="T5">The type of the t5.</typeparam>
            <typeparam name="T6">The type of the t6.</typeparam>
            <typeparam name="T7">The type of the t7.</typeparam>
            <typeparam name="T8">The type of the t8.</typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="q">The q.</param>
            <param name="tableSelects">The table selects.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;List&lt;Tuple&lt;T, T2, T3, T4, T5, T6, T7, T8&gt;&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.ReadExpressionCommandExtensionsAsync.SingleAsync``1(System.Data.IDbCommand,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Singles the asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="predicate">The predicate.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.ReadExpressionCommandExtensionsAsync.SingleAsync``1(System.Data.IDbCommand,ServiceStack.OrmLite.SqlExpression{``0},System.Threading.CancellationToken)">
            <summary>
            Singles the asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="expression">The expression.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.ReadExpressionCommandExtensionsAsync.ScalarAsync``2(System.Data.IDbCommand,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Threading.CancellationToken)">
            <summary>
            Scalars the asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TKey">The type of the t key.</typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="field">The field.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;TKey&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.ReadExpressionCommandExtensionsAsync.ScalarAsync``2(System.Data.IDbCommand,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Scalars the asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TKey">The type of the t key.</typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="field">The field.</param>
            <param name="predicate">The predicate.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;TKey&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.ReadExpressionCommandExtensionsAsync.CountAsync``1(System.Data.IDbCommand,System.Threading.CancellationToken)">
            <summary>
            Counts the asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;System.Int64&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.ReadExpressionCommandExtensionsAsync.CountAsync``1(System.Data.IDbCommand,ServiceStack.OrmLite.SqlExpression{``0},System.Threading.CancellationToken)">
            <summary>
            Counts the asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="q">The q.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;System.Int64&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.ReadExpressionCommandExtensionsAsync.CountAsync``1(System.Data.IDbCommand,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Counts the asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="predicate">The predicate.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;System.Int64&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.ReadExpressionCommandExtensionsAsync.GetCountAsync(System.Data.IDbCommand,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter},System.Threading.CancellationToken)">
            <summary>
            Get count as an asynchronous operation.
            </summary>
            <param name="dbCmd">The database command.</param>
            <param name="sql">The SQL.</param>
            <param name="sqlParams">The SQL parameters.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>A Task&lt;System.Int64&gt; representing the asynchronous operation.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.ReadExpressionCommandExtensionsAsync.RowCountAsync``1(System.Data.IDbCommand,ServiceStack.OrmLite.SqlExpression{``0},System.Threading.CancellationToken)">
            <summary>
            Rows the count asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="expression">The expression.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;System.Int64&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.ReadExpressionCommandExtensionsAsync.RowCountAsync(System.Data.IDbCommand,System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Rows the count asynchronous.
            </summary>
            <param name="dbCmd">The database command.</param>
            <param name="sql">The SQL.</param>
            <param name="anonType">Type of the anon.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;System.Int64&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.ReadExpressionCommandExtensionsAsync.LoadSelectAsync``1(System.Data.IDbCommand,ServiceStack.OrmLite.SqlExpression{``0},System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Loads the select asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="expression">The expression.</param>
            <param name="include">The include.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;List&lt;T&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.ReadExpressionCommandExtensionsAsync.LoadSelectAsync``2(System.Data.IDbCommand,ServiceStack.OrmLite.SqlExpression{``1},System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Loads the select asynchronous.
            </summary>
            <typeparam name="Into">The type of the into.</typeparam>
            <typeparam name="From">The type of from.</typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="expression">The expression.</param>
            <param name="include">The include.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;List&lt;Into&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.ReadExpressionCommandExtensionsAsync.LoadSelectAsync``1(System.Data.IDbCommand,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Loads the select asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="predicate">The predicate.</param>
            <param name="include">The include.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;List&lt;T&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.ReadExpressionCommandExtensionsAsync.ExprConvertToAsync``1(System.Data.IDataReader,ServiceStack.OrmLite.IOrmLiteDialectProvider,System.Threading.CancellationToken)">
            <summary>
            Exprs the convert to asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dataReader">The data reader.</param>
            <param name="dialectProvider">The dialect provider.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.ReadExpressionCommandExtensionsAsync.Select``1(System.Data.IDbCommand,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Selects the specified predicate.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="predicate">The predicate.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;List&lt;T&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.ReadExpressionCommandExtensionsAsync.GetSchemaTableAsync(System.Data.IDbCommand,System.String,System.Threading.CancellationToken)">
            <summary>
            Get schema table as an asynchronous operation.
            </summary>
            <param name="dbCmd">The database command.</param>
            <param name="sql">The SQL.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>A Task&lt;DataTable&gt; representing the asynchronous operation.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.ReadExpressionCommandExtensionsAsync.GetTableColumnsAsync(System.Data.IDbCommand,System.Type,System.Threading.CancellationToken)">
            <summary>
            Gets the table columns asynchronous.
            </summary>
            <param name="dbCmd">The database command.</param>
            <param name="table">The table.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;ColumnSchema[]&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.ReadExpressionCommandExtensionsAsync.GetTableColumnsAsync(System.Data.IDbCommand,System.String,System.Threading.CancellationToken)">
            <summary>
            Get table columns as an asynchronous operation.
            </summary>
            <param name="dbCmd">The database command.</param>
            <param name="sql">The SQL.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>A Task&lt;ColumnSchema[]&gt; representing the asynchronous operation.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.WriteExpressionCommandExtensionsAsync">
            <summary>
            Class WriteExpressionCommandExtensionsAsync.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.WriteExpressionCommandExtensionsAsync.UpdateOnlyFieldsAsync``1(System.Data.IDbCommand,``0,ServiceStack.OrmLite.SqlExpression{``0},System.Action{System.Data.IDbCommand},System.Threading.CancellationToken)">
            <summary>
            Updates the only asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="model">The model.</param>
            <param name="onlyFields">The only fields.</param>
            <param name="commandFilter">The command filter.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;System.Int32&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.WriteExpressionCommandExtensionsAsync.UpdateOnlyFieldsAsync``1(System.Data.IDbCommand,``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Action{System.Data.IDbCommand},System.Threading.CancellationToken)">
            <summary>
            Updates the only asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="obj">The object.</param>
            <param name="onlyFields">The only fields.</param>
            <param name="where">The where.</param>
            <param name="commandFilter">The command filter.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;System.Int32&gt;.</returns>
            <exception cref="T:System.ArgumentNullException">onlyFields</exception>
        </member>
        <member name="M:ServiceStack.OrmLite.WriteExpressionCommandExtensionsAsync.UpdateOnlyFieldsAsync``1(System.Data.IDbCommand,``0,System.String[],System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Action{System.Data.IDbCommand},System.Threading.CancellationToken)">
            <summary>
            Updates the only asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="obj">The object.</param>
            <param name="onlyFields">The only fields.</param>
            <param name="where">The where.</param>
            <param name="commandFilter">The command filter.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;System.Int32&gt;.</returns>
            <exception cref="T:System.ArgumentNullException">onlyFields</exception>
        </member>
        <member name="M:ServiceStack.OrmLite.WriteExpressionCommandExtensionsAsync.UpdateOnlyFieldsAsync``1(System.Data.IDbCommand,System.Linq.Expressions.Expression{System.Func{``0}},ServiceStack.OrmLite.SqlExpression{``0},System.Action{System.Data.IDbCommand},System.Threading.CancellationToken)">
            <summary>
            Updates the only asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="updateFields">The update fields.</param>
            <param name="q">The q.</param>
            <param name="commandFilter">The command filter.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;System.Int32&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.WriteExpressionCommandExtensionsAsync.UpdateOnlyFieldsAsync``1(System.Data.IDbCommand,System.Linq.Expressions.Expression{System.Func{``0}},System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter},System.Action{System.Data.IDbCommand},System.Threading.CancellationToken)">
            <summary>
            Updates the only asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="updateFields">The update fields.</param>
            <param name="whereExpression">The where expression.</param>
            <param name="sqlParams">The SQL parameters.</param>
            <param name="commandFilter">The command filter.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;System.Int32&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.WriteExpressionCommandExtensionsAsync.UpdateAddAsync``1(System.Data.IDbCommand,System.Linq.Expressions.Expression{System.Func{``0}},ServiceStack.OrmLite.SqlExpression{``0},System.Action{System.Data.IDbCommand},System.Threading.CancellationToken)">
            <summary>
            Updates the add asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="updateFields">The update fields.</param>
            <param name="q">The q.</param>
            <param name="commandFilter">The command filter.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;System.Int32&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.WriteExpressionCommandExtensionsAsync.UpdateOnlyFieldsAsync``1(System.Data.IDbCommand,System.Collections.Generic.Dictionary{System.String,System.Object},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Action{System.Data.IDbCommand},System.Threading.CancellationToken)">
            <summary>
            Updates the only asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="updateFields">The update fields.</param>
            <param name="where">The where.</param>
            <param name="commandFilter">The command filter.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;System.Int32&gt;.</returns>
            <exception cref="T:System.ArgumentNullException">updateFields</exception>
        </member>
        <member name="M:ServiceStack.OrmLite.WriteExpressionCommandExtensionsAsync.UpdateOnlyFieldsAsync``1(System.Data.IDbCommand,System.Collections.Generic.Dictionary{System.String,System.Object},System.Action{System.Data.IDbCommand},System.Threading.CancellationToken)">
            <summary>
            Updates the only asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="updateFields">The update fields.</param>
            <param name="commandFilter">The command filter.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;System.Int32&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.WriteExpressionCommandExtensionsAsync.UpdateOnlyFieldsAsync``1(System.Data.IDbCommand,System.Collections.Generic.Dictionary{System.String,System.Object},System.String,System.Object[],System.Action{System.Data.IDbCommand},System.Threading.CancellationToken)">
            <summary>
            Updates the only asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="updateFields">The update fields.</param>
            <param name="whereExpression">The where expression.</param>
            <param name="whereParams">The where parameters.</param>
            <param name="commandFilter">The command filter.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;System.Int32&gt;.</returns>
            <exception cref="T:System.ArgumentNullException">updateFields</exception>
        </member>
        <member name="M:ServiceStack.OrmLite.WriteExpressionCommandExtensionsAsync.UpdateOnlyReferencesAsync``1(System.Data.IDbCommand,System.Collections.Generic.Dictionary{System.String,System.Object},System.Func{System.Collections.Generic.Dictionary{System.String,System.Object},System.Threading.Tasks.Task{System.Int32}},System.Threading.CancellationToken)">
            <summary>
            Update only references as an asynchronous operation.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="updateFields">The update fields.</param>
            <param name="fn">The function.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>A Task&lt;System.Int32&gt; representing the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException">updateFields</exception>
        </member>
        <member name="M:ServiceStack.OrmLite.WriteExpressionCommandExtensionsAsync.UpdateNonDefaultsAsync``1(System.Data.IDbCommand,``0,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Updates the non defaults asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="item">The item.</param>
            <param name="obj">The object.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;System.Int32&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.WriteExpressionCommandExtensionsAsync.UpdateAsync``1(System.Data.IDbCommand,``0,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Action{System.Data.IDbCommand},System.Threading.CancellationToken)">
            <summary>
            Updates the asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="item">The item.</param>
            <param name="expression">The expression.</param>
            <param name="commandFilter">The command filter.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;System.Int32&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.WriteExpressionCommandExtensionsAsync.UpdateAsync``1(System.Data.IDbCommand,System.Object,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Action{System.Data.IDbCommand},System.Threading.CancellationToken)">
            <summary>
            Updates the asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="updateOnly">The update only.</param>
            <param name="where">The where.</param>
            <param name="commandFilter">The command filter.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;System.Int32&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.WriteExpressionCommandExtensionsAsync.InsertOnlyAsync``1(System.Data.IDbCommand,``0,System.String[],System.Threading.CancellationToken)">
            <summary>
            Inserts the only asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="obj">The object.</param>
            <param name="onlyFields">The only fields.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.WriteExpressionCommandExtensionsAsync.InsertOnlyAsync``1(System.Data.IDbCommand,System.Linq.Expressions.Expression{System.Func{``0}},System.Threading.CancellationToken)">
            <summary>
            Inserts the only asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="insertFields">The insert fields.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;System.Int32&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.WriteExpressionCommandExtensionsAsync.DeleteAsync``1(System.Data.IDbCommand,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Action{System.Data.IDbCommand},System.Threading.CancellationToken)">
            <summary>
            Deletes the asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="where">The where.</param>
            <param name="commandFilter">The command filter.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;System.Int32&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.WriteExpressionCommandExtensionsAsync.DeleteAsync``1(System.Data.IDbCommand,ServiceStack.OrmLite.SqlExpression{``0},System.Action{System.Data.IDbCommand},System.Threading.CancellationToken)">
            <summary>
            Deletes the asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="q">The q.</param>
            <param name="commandFilter">The command filter.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;System.Int32&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.WriteExpressionCommandExtensionsAsync.DeleteWhereAsync``1(System.Data.IDbCommand,System.String,System.Object[],System.Action{System.Data.IDbCommand},System.Threading.CancellationToken)">
            <summary>
            Deletes the where asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="whereFilter">The where filter.</param>
            <param name="whereParams">The where parameters.</param>
            <param name="commandFilter">The command filter.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;System.Int32&gt;.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Common.EnumerableExtensions">
            <summary>
            Class EnumerableExtensions.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Common.EnumerableExtensions.IsEmpty``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Determines whether the specified collection is empty.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection">The collection.</param>
            <returns><c>true</c> if the specified collection is empty; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Common.EnumerableExtensions.IsEmpty``1(``0[])">
            <summary>
            Determines whether the specified collection is empty.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection">The collection.</param>
            <returns><c>true</c> if the specified collection is empty; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Common.EnumerableExtensions.ToSet``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Converts to set.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items">The items.</param>
            <returns>HashSet&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Common.EnumerableExtensions.Each``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Eaches the specified action.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="values">The values.</param>
            <param name="action">The action.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Common.EnumerableExtensions.Each``2(System.Collections.Generic.IDictionary{``0,``1},System.Action{``0,``1})">
            <summary>
            Eaches the specified action.
            </summary>
            <typeparam name="TKey">The type of the t key.</typeparam>
            <typeparam name="TValue">The type of the t value.</typeparam>
            <param name="map">The map.</param>
            <param name="action">The action.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Common.EnumerableExtensions.Map``2(System.Collections.Generic.IEnumerable{``1},System.Func{``1,``0})">
            <summary>
            Maps the specified converter.
            </summary>
            <typeparam name="To">The type of to.</typeparam>
            <typeparam name="From">The type of from.</typeparam>
            <param name="items">The items.</param>
            <param name="converter">The converter.</param>
            <returns>List&lt;To&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Common.EnumerableExtensions.Map``1(System.Collections.IEnumerable,System.Func{System.Object,``0})">
            <summary>
            Maps the specified converter.
            </summary>
            <typeparam name="To">The type of to.</typeparam>
            <param name="items">The items.</param>
            <param name="converter">The converter.</param>
            <returns>List&lt;To&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Common.EnumerableExtensions.BatchesOf``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Batcheses the of.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sequence">The sequence.</param>
            <param name="batchSize">Size of the batch.</param>
            <returns>IEnumerable&lt;T[]&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Common.EnumerableExtensions.ToSafeDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Converts to safedictionary.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TKey">The type of the t key.</typeparam>
            <param name="list">The list.</param>
            <param name="expr">The expr.</param>
            <returns>Dictionary&lt;TKey, T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Common.EnumerableExtensions.Safe(System.Collections.IEnumerable)">
            <summary>
            Safes the specified enumerable.
            </summary>
            <param name="enumerable">The enumerable.</param>
            <returns>IEnumerable.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Common.EnumerableExtensions.Exists``1(``0[],System.Predicate{``0})">
            <summary>
            Check if match Exists in the Array
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">The array.</param>
            <param name="match">The match.</param>
            <returns>bool.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Common.EnumerableExtensions.Find``1(``0[],System.Predicate{``0})">
            <summary>
            Finds the specified match in the  array.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">The array.</param>
            <param name="match">The match.</param>
            <returns>T?.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.AssemblyUtils">
            <summary>
            Utils to load types
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.AssemblyUtils.TypeCache">
            <summary>
            The type cache
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.AssemblyUtils.ValidateTypeName">
            <summary>
            Gets or sets the name of the validate type.
            </summary>
            <value>The name of the validate type.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.AssemblyUtils.ValidateTypeRegex">
            <summary>
            Gets or sets the validate type regex.
            </summary>
            <value>The validate type regex.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.AssemblyUtils.DefaultValidateTypeName(System.String)">
            <summary>
            Defaults the name of the validate type.
            </summary>
            <param name="typeName">Name of the type.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.AssemblyUtils.FindType(System.String)">
            <summary>
            Find the type from the name supplied
            </summary>
            <param name="typeName">[typeName] or [typeName, assemblyName]</param>
            <returns>System.Type.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.AssemblyUtils.UncheckedFindType(System.String)">
            <summary>
            Uncheckeds the type of the find.
            </summary>
            <param name="typeName">Name of the type.</param>
            <returns>Type.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.AssemblyUtils.FindType(System.String,System.String)">
            <summary>
            Find type if it exists
            </summary>
            <param name="typeName">Name of the type.</param>
            <param name="assemblyName">Name of the assembly.</param>
            <returns>The type if it exists</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.AssemblyUtils.MainInterface``1">
            <summary>
            The top-most interface of the given type, if any.
            </summary>
            <typeparam name="T"></typeparam>
            <returns>System.Type.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.AssemblyUtils.FindTypeFromLoadedAssemblies(System.String)">
            <summary>
            Finds the type from loaded assemblies.
            </summary>
            <param name="typeName">Name of the type.</param>
            <returns>System.Type.</returns>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.AssemblyUtils.versionRegEx">
            <summary>
            The version reg ex
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.AssemblyUtils.ToTypeString(System.Type)">
            <summary>
            Converts to typestring.
            </summary>
            <param name="type">The type.</param>
            <returns>string.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.AssemblyUtils.WriteType(System.Type)">
            <summary>
            Writes the type.
            </summary>
            <param name="type">The type.</param>
            <returns>string.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.AssemblyUtils.ValidateType">
            <remarks>
            Pattern:<br/>
            <code>^[a-zA-Z0-9_.,+`\\[\\]\\s]+$</code><br/>
            Options:<br/>
            <code>RegexOptions.Compiled</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match a character in the set [+,.0-9A-[]_-z\s] greedily at least once.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.AutoMappingUtils">
            <summary>
            Class AutoMappingUtils.
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.AutoMappingUtils.converters">
            <summary>
            The converters
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.AutoMappingUtils.populators">
            <summary>
            The populators
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.AutoMappingUtils.ignoreMappings">
            <summary>
            The ignore mappings
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.AutoMappingUtils.Reset">
            <summary>
            Resets this instance.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.AutoMappingUtils.ShouldIgnoreMapping(System.Type,System.Type)">
            <summary>
            Shoulds the ignore mapping.
            </summary>
            <param name="fromType">From type.</param>
            <param name="toType">To type.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.AutoMappingUtils.GetConverter(System.Type,System.Type)">
            <summary>
            Gets the converter.
            </summary>
            <param name="fromType">From type.</param>
            <param name="toType">To type.</param>
            <returns>GetMemberDelegate.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.AutoMappingUtils.GetPopulator(System.Type,System.Type)">
            <summary>
            Gets the populator.
            </summary>
            <param name="targetType">Type of the target.</param>
            <param name="sourceType">Type of the source.</param>
            <returns>PopulateMemberDelegate.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.AutoMappingUtils.ConvertTo``1(System.Object,``0)">
            <summary>
            Converts to.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="from">From.</param>
            <param name="defaultValue">The default value.</param>
            <returns>T.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.AutoMappingUtils.ConvertTo``1(System.Object)">
            <summary>
            Converts to.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="from">From.</param>
            <returns>T.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.AutoMappingUtils.ConvertTo``1(System.Object,System.Boolean)">
            <summary>
            Converts to.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="from">From.</param>
            <param name="skipConverters">if set to <c>true</c> [skip converters].</param>
            <returns>T.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.AutoMappingUtils.CreateCopy``1(``0)">
            <summary>
            Creates the copy.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="from">From.</param>
            <returns>T.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.AutoMappingUtils.ThenDo``1(``0,System.Action{``0})">
            <summary>
            Thens the do.
            </summary>
            <typeparam name="To">The type of to.</typeparam>
            <param name="to">To.</param>
            <param name="fn">The function.</param>
            <returns>To.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.AutoMappingUtils.ConvertTo(System.Object,System.Type)">
            <summary>
            Converts to.
            </summary>
            <param name="from">From.</param>
            <param name="toType">To type.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.AutoMappingUtils.ConvertTo(System.Object,System.Type,System.Boolean)">
            <summary>
            Converts to.
            </summary>
            <param name="from">From.</param>
            <param name="toType">To type.</param>
            <param name="skipConverters">if set to <c>true</c> [skip converters].</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.AutoMappingUtils.GetImplicitCastMethod(System.Type,System.Type)">
            <summary>
            Gets the implicit cast method.
            </summary>
            <param name="fromType">From type.</param>
            <param name="toType">To type.</param>
            <returns>MethodInfo.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.AutoMappingUtils.GetExplicitCastMethod(System.Type,System.Type)">
            <summary>
            Gets the explicit cast method.
            </summary>
            <param name="fromType">From type.</param>
            <param name="toType">To type.</param>
            <returns>MethodInfo.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.AutoMappingUtils.ChangeValueType(System.Object,System.Type)">
            <summary>
            Changes the type of the value.
            </summary>
            <param name="from">From.</param>
            <param name="toType">To type.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.AutoMappingUtils.ChangeTo(System.String,System.Type)">
            <summary>
            Changes to.
            </summary>
            <param name="strValue">The string value.</param>
            <param name="type">The type.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.AutoMappingUtils.PopulateObjectInternal(System.Object,System.Collections.Generic.Dictionary{System.Type,System.Int32})">
            <summary>
            Populates the object with example data.
            </summary>
            <param name="obj">The object.</param>
            <param name="recursionInfo">Tracks how deeply nested we are</param>
            <returns>System.Object.</returns>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.AutoMappingUtils.DefaultValueTypes">
            <summary>
            The default value types
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.AutoMappingUtils.GetDefaultValue(System.Type)">
            <summary>
            Gets the default value.
            </summary>
            <param name="type">The type.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.AutoMappingUtils.IsDefaultValue(System.Object)">
            <summary>
            Determines whether [is default value] [the specified value].
            </summary>
            <param name="value">The value.</param>
            <returns><c>true</c> if [is default value] [the specified value]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.AutoMappingUtils.IsDefaultValue(System.Object,System.Type)">
            <summary>
            Determines whether [is default value] [the specified value].
            </summary>
            <param name="value">The value.</param>
            <param name="valueType">Type of the value.</param>
            <returns><c>true</c> if [is default value] [the specified value]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.AutoMappingUtils.AssignmentDefinitionCache">
            <summary>
            The assignment definition cache
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.AutoMappingUtils.GetAssignmentDefinition(System.Type,System.Type)">
            <summary>
            Gets the assignment definition.
            </summary>
            <param name="toType">To type.</param>
            <param name="fromType">From type.</param>
            <returns>AssignmentDefinition.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.AutoMappingUtils.CreateCacheKey(System.Type,System.Type)">
            <summary>
            Creates the cache key.
            </summary>
            <param name="fromType">From type.</param>
            <param name="toType">To type.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.AutoMappingUtils.GetMembers(System.Type,System.Boolean)">
            <summary>
            Gets the members.
            </summary>
            <param name="type">The type.</param>
            <param name="isReadable">if set to <c>true</c> [is readable].</param>
            <returns>Dictionary&lt;System.String, AssignmentMember&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.AutoMappingUtils.PopulateWith``2(``0,``1)">
            <summary>
            Populates the with.
            </summary>
            <typeparam name="To">The type of to.</typeparam>
            <typeparam name="From">The type of from.</typeparam>
            <param name="to">To.</param>
            <param name="from">From.</param>
            <returns>To.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.AutoMappingUtils.SetProperty(System.Reflection.PropertyInfo,System.Object,System.Object)">
            <summary>
            Sets the property.
            </summary>
            <param name="propertyInfo">The property information.</param>
            <param name="obj">The object.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.AutoMappingUtils.GetProperty(System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Gets the property.
            </summary>
            <param name="propertyInfo">The property information.</param>
            <param name="obj">The object.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.AutoMappingUtils.SetValue(System.Reflection.FieldInfo,System.Reflection.PropertyInfo,System.Object,System.Object)">
            <summary>
            Sets the value.
            </summary>
            <param name="fieldInfo">The field information.</param>
            <param name="propertyInfo">The property information.</param>
            <param name="obj">The object.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.AutoMappingUtils.IsUnsettableValue(System.Reflection.PropertyInfo)">
            <summary>
            Determines whether [is unsettable value] [the specified field information].
            </summary>
            <param name="propertyInfo">The property information.</param>
            <returns><c>true</c> if [is unsettable value] [the specified field information]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.AutoMappingUtils.CreateDefaultValues(System.Collections.Generic.IEnumerable{System.Type},System.Collections.Generic.Dictionary{System.Type,System.Int32})">
            <summary>
            Creates the default values.
            </summary>
            <param name="types">The types.</param>
            <param name="recursionInfo">The recursion information.</param>
            <returns>System.Object[].</returns>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.AutoMappingUtils.MaxRecursionLevelForDefaultValues">
            <summary>
            The maximum recursion level for default values
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.AutoMappingUtils.CreateDefaultValue(System.Type,System.Collections.Generic.Dictionary{System.Type,System.Int32})">
            <summary>
            Creates the default value.
            </summary>
            <param name="type">The type.</param>
            <param name="recursionInfo">The recursion information.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.AutoMappingUtils.SetGenericCollection(System.Type,System.Object,System.Collections.Generic.Dictionary{System.Type,System.Int32})">
            <summary>
            Sets the generic collection.
            </summary>
            <param name="realizedListType">Type of the realized list.</param>
            <param name="genericObj">The generic object.</param>
            <param name="recursionInfo">The recursion information.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.AutoMappingUtils.PopulateArray(System.Type,System.Collections.Generic.Dictionary{System.Type,System.Int32})">
            <summary>
            Populates the array.
            </summary>
            <param name="type">The type.</param>
            <param name="recursionInfo">The recursion information.</param>
            <returns>Array.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.AutoMappingUtils.CanCast(System.Type,System.Type)">
            <summary>
            Determines whether this instance can cast the specified to type.
            </summary>
            <param name="toType">To type.</param>
            <param name="fromType">From type.</param>
            <returns><c>true</c> if this instance can cast the specified to type; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.AutoMappingUtils.TryConvertCollections(System.Type,System.Type,System.Object)">
            <summary>
            Tries the convert collections.
            </summary>
            <param name="fromType">From type.</param>
            <param name="toType">To type.</param>
            <param name="fromValue">From value.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.AssignmentEntry">
            <summary>
            Class AssignmentEntry.
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.AssignmentEntry.Name">
            <summary>
            The name
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.AssignmentEntry.From">
            <summary>
            From
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.AssignmentEntry.To">
            <summary>
            To
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.AssignmentEntry.GetValueFn">
            <summary>
            The get value function
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.AssignmentEntry.SetValueFn">
            <summary>
            The set value function
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.AssignmentEntry.ConvertValueFn">
            <summary>
            The convert value function
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.AssignmentEntry.#ctor(System.String,ServiceStack.OrmLite.Base.Text.AssignmentMember,ServiceStack.OrmLite.Base.Text.AssignmentMember)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.OrmLite.Base.Text.AssignmentEntry" /> class.
            </summary>
            <param name="name">The name.</param>
            <param name="from">From.</param>
            <param name="to">To.</param>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.AssignmentMember">
            <summary>
            Class AssignmentMember.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.AssignmentMember.#ctor(System.Type,System.Reflection.PropertyInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.OrmLite.Base.Text.AssignmentMember" /> class.
            </summary>
            <param name="type">The type.</param>
            <param name="propertyInfo">The property information.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.AssignmentMember.#ctor(System.Type,System.Reflection.FieldInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.OrmLite.Base.Text.AssignmentMember" /> class.
            </summary>
            <param name="type">The type.</param>
            <param name="fieldInfo">The field information.</param>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.AssignmentMember.Type">
            <summary>
            The type
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.AssignmentMember.PropertyInfo">
            <summary>
            The property information
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.AssignmentMember.FieldInfo">
            <summary>
            The field information
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.AssignmentMember.MethodInfo">
            <summary>
            The method information
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.AssignmentMember.CreateGetter">
            <summary>
            Creates the getter.
            </summary>
            <returns>GetMemberDelegate.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.AssignmentMember.CreateSetter">
            <summary>
            Creates the setter.
            </summary>
            <returns>SetMemberDelegate.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.AssignmentDefinition">
            <summary>
            Class AssignmentDefinition.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.AssignmentDefinition.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.OrmLite.Base.Text.AssignmentDefinition" /> class.
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.AssignmentDefinition.FromType">
            <summary>
            Gets or sets from type.
            </summary>
            <value>From type.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.AssignmentDefinition.ToType">
            <summary>
            Converts to type.
            </summary>
            <value>To type.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.AssignmentDefinition.AssignmentMemberMap">
            <summary>
            Gets or sets the assignment member map.
            </summary>
            <value>The assignment member map.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.AssignmentDefinition.AddMatch(System.String,ServiceStack.OrmLite.Base.Text.AssignmentMember,ServiceStack.OrmLite.Base.Text.AssignmentMember)">
            <summary>
            Adds the match.
            </summary>
            <param name="name">The name.</param>
            <param name="readMember">The read member.</param>
            <param name="writeMember">The write member.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.AssignmentDefinition.Populate(System.Object,System.Object)">
            <summary>
            Populates the specified to.
            </summary>
            <param name="to">To.</param>
            <param name="from">From.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.AssignmentDefinition.Populate(System.Object,System.Object,System.Func{System.Reflection.PropertyInfo,System.Boolean},System.Func{System.Object,System.Type,System.Boolean})">
            <summary>
            Populates the specified to.
            </summary>
            <param name="to">To.</param>
            <param name="from">From.</param>
            <param name="propertyInfoPredicate">The property information predicate.</param>
            <param name="valuePredicate">The value predicate.</param>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.GetMemberDelegate">
            <summary>
            Delegate GetMemberDelegate
            </summary>
            <param name="instance">The instance.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.GetMemberDelegate`1">
            <summary>
            Delegate GetMemberDelegate
            </summary>
            <typeparam name="T"></typeparam>
            <param name="instance">The instance.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.PopulateMemberDelegate">
            <summary>
            Delegate PopulateMemberDelegate
            </summary>
            <param name="target">The target.</param>
            <param name="source">The source.</param>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.SetMemberDelegate">
            <summary>
            Delegate SetMemberDelegate
            </summary>
            <param name="instance">The instance.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.SetMemberDelegate`1">
            <summary>
            Delegate SetMemberDelegate
            </summary>
            <typeparam name="T"></typeparam>
            <param name="instance">The instance.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.SetMemberRefDelegate">
            <summary>
            Delegate SetMemberRefDelegate
            </summary>
            <param name="instance">The instance.</param>
            <param name="propertyValue">The property value.</param>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.SetMemberRefDelegate`1">
            <summary>
            Delegate SetMemberRefDelegate
            </summary>
            <typeparam name="T"></typeparam>
            <param name="instance">The instance.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.TypeConverter">
            <summary>
            Class TypeConverter.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.TypeConverter.CreateTypeConverter(System.Type,System.Type)">
            <summary>
            Creates the type converter.
            </summary>
            <param name="fromType">From type.</param>
            <param name="toType">To type.</param>
            <returns>GetMemberDelegate.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.CachedTypeInfo">
            <summary>
            Class CachedTypeInfo.
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.CachedTypeInfo.CacheMap">
            <summary>
            The cache map
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.CachedTypeInfo.Get(System.Type)">
            <summary>
            Gets the specified type.
            </summary>
            <param name="type">The type.</param>
            <returns>CachedTypeInfo.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.CachedTypeInfo.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.OrmLite.Base.Text.CachedTypeInfo" /> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.CachedTypeInfo.EnumInfo">
            <summary>
            Gets the enum information.
            </summary>
            <value>The enum information.</value>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.EnumInfo">
            <summary>
            Class EnumInfo.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.EnumInfo.GetEnumInfo(System.Type)">
            <summary>
            Gets the enum information.
            </summary>
            <param name="type">The type.</param>
            <returns>EnumInfo.</returns>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.EnumInfo.enumType">
            <summary>
            The enum type
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.EnumInfo.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.OrmLite.Base.Text.EnumInfo" /> class.
            </summary>
            <param name="enumType">Type of the enum.</param>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.EnumInfo.isEnumFlag">
            <summary>
            The is enum flag
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.EnumInfo.enumMemberValues">
            <summary>
            The enum member values
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.EnumInfo.enumMemberReverseLookup">
            <summary>
            The enum member reverse lookup
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.EnumInfo.GetSerializedValue(System.Object)">
            <summary>
            Gets the serialized value.
            </summary>
            <param name="enumValue">The enum value.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.EnumInfo.Parse(System.String)">
            <summary>
            Parses the specified serialized value.
            </summary>
            <param name="serializedValue">The serialized value.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.CharMemoryExtensions">
            <summary>
            Class CharMemoryExtensions.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.CharMemoryExtensions.IsNullOrEmpty(System.ReadOnlyMemory{System.Char})">
            <summary>
            Determines whether [is null or empty] [the specified value].
            </summary>
            <param name="value">The value.</param>
            <returns><c>true</c> if [is null or empty] [the specified value]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.CharMemoryExtensions.Advance(System.ReadOnlyMemory{System.Char},System.Int32)">
            <summary>
            Advances the specified to.
            </summary>
            <param name="text">The text.</param>
            <param name="to">To.</param>
            <returns>ReadOnlyMemory&lt;System.Char&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.CharMemoryExtensions.RightPart(System.ReadOnlyMemory{System.Char},System.Char)">
            <summary>
            Rights the part.
            </summary>
            <param name="strVal">The string value.</param>
            <param name="needle">The needle.</param>
            <returns>ReadOnlyMemory&lt;System.Char&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.CharMemoryExtensions.RightPart(System.ReadOnlyMemory{System.Char},System.String)">
            <summary>
            Rights the part.
            </summary>
            <param name="strVal">The string value.</param>
            <param name="needle">The needle.</param>
            <returns>ReadOnlyMemory&lt;System.Char&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.CharMemoryExtensions.LastRightPart(System.ReadOnlyMemory{System.Char},System.Char)">
            <summary>
            Lasts the right part.
            </summary>
            <param name="strVal">The string value.</param>
            <param name="needle">The needle.</param>
            <returns>ReadOnlyMemory&lt;System.Char&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.CharMemoryExtensions.LastRightPart(System.ReadOnlyMemory{System.Char},System.String)">
            <summary>
            Lasts the right part.
            </summary>
            <param name="strVal">The string value.</param>
            <param name="needle">The needle.</param>
            <returns>ReadOnlyMemory&lt;System.Char&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.CharMemoryExtensions.TryReadLine(System.ReadOnlyMemory{System.Char},System.ReadOnlyMemory{System.Char}@,System.Int32@)">
            <summary>
            Tries the read line.
            </summary>
            <param name="text">The text.</param>
            <param name="line">The line.</param>
            <param name="startIndex">The start index.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.CharMemoryExtensions.TryReadPart(System.ReadOnlyMemory{System.Char},System.ReadOnlyMemory{System.Char},System.ReadOnlyMemory{System.Char}@,System.Int32@)">
            <summary>
            Tries the read part.
            </summary>
            <param name="text">The text.</param>
            <param name="needle">The needle.</param>
            <param name="part">The part.</param>
            <param name="startIndex">The start index.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.CharMemoryExtensions.SplitOnFirst(System.ReadOnlyMemory{System.Char},System.Char,System.ReadOnlyMemory{System.Char}@,System.ReadOnlyMemory{System.Char}@)">
            <summary>
            Splits the on first.
            </summary>
            <param name="strVal">The string value.</param>
            <param name="needle">The needle.</param>
            <param name="first">The first.</param>
            <param name="last">The last.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.CharMemoryExtensions.SplitOnFirst(System.ReadOnlyMemory{System.Char},System.ReadOnlyMemory{System.Char},System.ReadOnlyMemory{System.Char}@,System.ReadOnlyMemory{System.Char}@)">
            <summary>
            Splits the on first.
            </summary>
            <param name="strVal">The string value.</param>
            <param name="needle">The needle.</param>
            <param name="first">The first.</param>
            <param name="last">The last.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.CharMemoryExtensions.SplitOnLast(System.ReadOnlyMemory{System.Char},System.Char,System.ReadOnlyMemory{System.Char}@,System.ReadOnlyMemory{System.Char}@)">
            <summary>
            Splits the on last.
            </summary>
            <param name="strVal">The string value.</param>
            <param name="needle">The needle.</param>
            <param name="first">The first.</param>
            <param name="last">The last.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.CharMemoryExtensions.SplitOnLast(System.ReadOnlyMemory{System.Char},System.ReadOnlyMemory{System.Char},System.ReadOnlyMemory{System.Char}@,System.ReadOnlyMemory{System.Char}@)">
            <summary>
            Splits the on last.
            </summary>
            <param name="strVal">The string value.</param>
            <param name="needle">The needle.</param>
            <param name="first">The first.</param>
            <param name="last">The last.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.CharMemoryExtensions.IndexOf(System.ReadOnlyMemory{System.Char},System.Char)">
            <summary>
            Indexes the of.
            </summary>
            <param name="value">The value.</param>
            <param name="needle">The needle.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.CharMemoryExtensions.IndexOf(System.ReadOnlyMemory{System.Char},System.String)">
            <summary>
            Indexes the of.
            </summary>
            <param name="value">The value.</param>
            <param name="needle">The needle.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.CharMemoryExtensions.IndexOf(System.ReadOnlyMemory{System.Char},System.Char,System.Int32)">
            <summary>
            Indexes the of.
            </summary>
            <param name="value">The value.</param>
            <param name="needle">The needle.</param>
            <param name="start">The start.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.CharMemoryExtensions.IndexOf(System.ReadOnlyMemory{System.Char},System.String,System.Int32)">
            <summary>
            Indexes the of.
            </summary>
            <param name="value">The value.</param>
            <param name="needle">The needle.</param>
            <param name="start">The start.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.CharMemoryExtensions.LastIndexOf(System.ReadOnlyMemory{System.Char},System.Char)">
            <summary>
            Lasts the index of.
            </summary>
            <param name="value">The value.</param>
            <param name="needle">The needle.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.CharMemoryExtensions.LastIndexOf(System.ReadOnlyMemory{System.Char},System.String)">
            <summary>
            Lasts the index of.
            </summary>
            <param name="value">The value.</param>
            <param name="needle">The needle.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.CharMemoryExtensions.LastIndexOf(System.ReadOnlyMemory{System.Char},System.Char,System.Int32)">
            <summary>
            Lasts the index of.
            </summary>
            <param name="value">The value.</param>
            <param name="needle">The needle.</param>
            <param name="start">The start.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.CharMemoryExtensions.LastIndexOf(System.ReadOnlyMemory{System.Char},System.String,System.Int32)">
            <summary>
            Lasts the index of.
            </summary>
            <param name="value">The value.</param>
            <param name="needle">The needle.</param>
            <param name="start">The start.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.CharMemoryExtensions.StartsWith(System.ReadOnlyMemory{System.Char},System.String)">
            <summary>
            Startses the with.
            </summary>
            <param name="value">The value.</param>
            <param name="other">The other.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.CharMemoryExtensions.StartsWith(System.ReadOnlyMemory{System.Char},System.String,System.StringComparison)">
            <summary>
            Startses the with.
            </summary>
            <param name="value">The value.</param>
            <param name="other">The other.</param>
            <param name="comparison">The comparison.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.CharMemoryExtensions.EndsWith(System.ReadOnlyMemory{System.Char},System.String)">
            <summary>
            Endses the with.
            </summary>
            <param name="value">The value.</param>
            <param name="other">The other.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.CharMemoryExtensions.EndsWith(System.ReadOnlyMemory{System.Char},System.String,System.StringComparison)">
            <summary>
            Endses the with.
            </summary>
            <param name="value">The value.</param>
            <param name="other">The other.</param>
            <param name="comparison">The comparison.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.CharMemoryExtensions.EqualsOrdinal(System.ReadOnlyMemory{System.Char},System.String)">
            <summary>
            Equalses the ordinal.
            </summary>
            <param name="value">The value.</param>
            <param name="other">The other.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.CharMemoryExtensions.EqualsOrdinal(System.ReadOnlyMemory{System.Char},System.ReadOnlyMemory{System.Char})">
            <summary>
            Equalses the ordinal.
            </summary>
            <param name="value">The value.</param>
            <param name="other">The other.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.CharMemoryExtensions.SafeSlice(System.ReadOnlyMemory{System.Char},System.Int32,System.Int32)">
            <summary>
            Safes the slice.
            </summary>
            <param name="value">The value.</param>
            <param name="startIndex">The start index.</param>
            <param name="length">The length.</param>
            <returns>ReadOnlyMemory&lt;System.Char&gt;.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.CollectionExtensions">
            <summary>
            Class CollectionExtensions.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.CollectionExtensions.CreateAndPopulate``1(System.Type,``0[])">
            <summary>
            Creates the and populate.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ofCollectionType">Type of the of collection.</param>
            <param name="withItems">The with items.</param>
            <returns>ICollection&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.CollectionExtensions.ToArray``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Converts to array.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection">The collection.</param>
            <returns>T[].</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.CollectionExtensions.Convert``1(System.Object,System.Type)">
            <summary>
            Converts the specified object collection.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="objCollection">The object collection.</param>
            <param name="toCollectionType">Type of to collection.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.Common.DateTimeSerializer">
            <summary>
            Class DateTimeSerializer.
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Common.DateTimeSerializer.CondensedDateTimeFormat">
            <summary>
            The condensed date time format
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Common.DateTimeSerializer.ShortDateTimeFormat">
            <summary>
            The short date time format
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Common.DateTimeSerializer.DefaultDateTimeFormat">
            <summary>
            The default date time format
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Common.DateTimeSerializer.DefaultDateTimeFormatWithFraction">
            <summary>
            The default date time format with fraction
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Common.DateTimeSerializer.XsdDateTimeFormat">
            <summary>
            The XSD date time format
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Common.DateTimeSerializer.XsdDateTimeFormat3F">
            <summary>
            The XSD date time format3 f
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Common.DateTimeSerializer.XsdDateTimeFormatSeconds">
            <summary>
            The XSD date time format seconds
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Common.DateTimeSerializer.DateTimeFormatSecondsUtcOffset">
            <summary>
            The date time format seconds UTC offset
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Common.DateTimeSerializer.DateTimeFormatSecondsNoOffset">
            <summary>
            The date time format seconds no offset
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Common.DateTimeSerializer.DateTimeFormatTicksUtcOffset">
            <summary>
            The date time format ticks UTC offset
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Common.DateTimeSerializer.DateTimeFormatTicksNoUtcOffset">
            <summary>
            The date time format ticks no UTC offset
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Common.DateTimeSerializer.EscapedWcfJsonPrefix">
            <summary>
            The escaped WCF json prefix
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Common.DateTimeSerializer.EscapedWcfJsonSuffix">
            <summary>
            The escaped WCF json suffix
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Common.DateTimeSerializer.WcfJsonPrefix">
            <summary>
            The WCF json prefix
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Common.DateTimeSerializer.WcfJsonSuffix">
            <summary>
            The WCF json suffix
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Common.DateTimeSerializer.UnspecifiedOffset">
            <summary>
            The unspecified offset
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Common.DateTimeSerializer.UtcOffset">
            <summary>
            The UTC offset
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Common.DateTimeSerializer.XsdTimeSeparator">
            <summary>
            The XSD time separator
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Common.DateTimeSerializer.XsdTimeSeparatorIndex">
            <summary>
            The XSD time separator index
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Common.DateTimeSerializer.XsdUtcSuffix">
            <summary>
            The XSD UTC suffix
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Common.DateTimeSerializer.DateTimeSeparators">
            <summary>
            The date time separators
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Common.DateTimeSerializer.UtcOffsetInfoRegex">
            <summary>
            The UTC offset information regex
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.Common.DateTimeSerializer.OnParseErrorFn">
            <summary>
            Gets or sets the on parse error function.
            </summary>
            <value>The on parse error function.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.DateTimeSerializer.Prepare(System.DateTime,System.Boolean)">
            <summary>
            If AlwaysUseUtc is set to true then convert all DateTime to UTC. If PreserveUtc is set to true then UTC dates will not convert to local
            </summary>
            <param name="dateTime">The date time.</param>
            <param name="parsedAsUtc">The parsed as UTC.</param>
            <returns>System.DateTime.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.DateTimeSerializer.ParseShortestNullableXsdDateTime(System.String)">
            <summary>
            Parses the shortest nullable XSD date time.
            </summary>
            <param name="dateTimeStr">The date time string.</param>
            <returns>System.DateTime?.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.DateTimeSerializer.ParseRFC1123DateTime(System.String)">
            <summary>
            Parses the rf C1123 date time.
            </summary>
            <param name="dateTimeStr">The date time string.</param>
            <returns>System.DateTime.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.DateTimeSerializer.ParseShortestXsdDateTime(System.String)">
            <summary>
            Parses the shortest XSD date time.
            </summary>
            <param name="dateTimeStr">The date time string.</param>
            <returns>System.DateTime.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.DateTimeSerializer.RemoveUtcOffsets(System.String,System.DateTimeKind@)">
            <summary>
            Removes the UTC offsets.
            </summary>
            <param name="dateTimeStr">The date time string.</param>
            <param name="kind">The kind.</param>
            <returns>string.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.DateTimeSerializer.RepairXsdTimeSeparator(System.String)">
            <summary>
            Repairs an out-of-spec XML date/time string which incorrectly uses a space instead of a 'T' to separate the date from the time.
            These string are occasionally generated by SQLite and can cause errors in OrmLite when reading these columns from the DB.
            </summary>
            <param name="dateTimeStr">The XML date/time string to repair</param>
            <returns>The repaired string. If no repairs were made, the original string is returned.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.DateTimeSerializer.ParseManual(System.String)">
            <summary>
            Parses the manual.
            </summary>
            <param name="dateTimeStr">The date time string.</param>
            <returns>System.DateTime?.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.DateTimeSerializer.ParseManual(System.String,System.DateTimeKind)">
            <summary>
            Parses the manual.
            </summary>
            <param name="dateTimeStr">The date time string.</param>
            <param name="dateKind">Kind of the date.</param>
            <returns>System.DateTime?.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.DateTimeSerializer.ToDateTimeString(System.DateTime)">
            <summary>
            Converts to datetimestring.
            </summary>
            <param name="dateTime">The date time.</param>
            <returns>string.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.DateTimeSerializer.ParseDateTime(System.String)">
            <summary>
            Parses the date time.
            </summary>
            <param name="dateTimeStr">The date time string.</param>
            <returns>System.DateTime.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.DateTimeSerializer.ParseDateTimeOffset(System.String)">
            <summary>
            Parses the date time offset.
            </summary>
            <param name="dateTimeOffsetStr">The date time offset string.</param>
            <returns>System.DateTimeOffset.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.DateTimeSerializer.ParseNullableDateTimeOffset(System.String)">
            <summary>
            Parses the nullable date time offset.
            </summary>
            <param name="dateTimeOffsetStr">The date time offset string.</param>
            <returns>System.DateTimeOffset?.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.DateTimeSerializer.ToLocalXsdDateTimeString(System.DateTime)">
            <summary>
            Converts to localxsddatetimestring.
            </summary>
            <param name="dateTime">The date time.</param>
            <returns>string.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.DateTimeSerializer.ToXsdTimeSpanString(System.TimeSpan)">
            <summary>
            Converts to xsdtimespanstring.
            </summary>
            <param name="timeSpan">The time span.</param>
            <returns>string.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.DateTimeSerializer.ToXsdTimeSpanString(System.Nullable{System.TimeSpan})">
            <summary>
            Converts to xsdtimespanstring.
            </summary>
            <param name="timeSpan">The time span.</param>
            <returns>string.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.DateTimeSerializer.ParseTimeSpan(System.String)">
            <summary>
            Parses the time span.
            </summary>
            <param name="dateTimeStr">The date time string.</param>
            <returns>System.TimeSpan.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.DateTimeSerializer.ParseNSTimeInterval(System.String)">
            <summary>
            Parses the ns time interval.
            </summary>
            <param name="doubleInSecs">The double in secs.</param>
            <returns>System.TimeSpan.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.DateTimeSerializer.ParseNullableTimeSpan(System.String)">
            <summary>
            Parses the nullable time span.
            </summary>
            <param name="dateTimeStr">The date time string.</param>
            <returns>System.TimeSpan?.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.DateTimeSerializer.ParseXsdTimeSpan(System.String)">
            <summary>
            Parses the XSD time span.
            </summary>
            <param name="dateTimeStr">The date time string.</param>
            <returns>System.TimeSpan.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.DateTimeSerializer.ToShortestXsdDateTimeString(System.DateTime)">
            <summary>
            Converts to shortestxsddatetimestring.
            </summary>
            <param name="dateTime">The date time.</param>
            <returns>string.</returns>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Common.DateTimeSerializer.TimeZoneChars">
            <summary>
            The time zone chars
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Common.DateTimeSerializer.MinDateTimeOffsetWcfValue">
            <summary>
            The minimum date time offset WCF value
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Common.DateTimeSerializer.MaxDateTimeOffsetWcfValue">
            <summary>
            The maximum date time offset WCF value
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.DateTimeSerializer.ParseWcfJsonDateOffset(System.String)">
            <summary>
            WCF Json format: /Date(unixts+0000)/
            </summary>
            <param name="wcfJsonDate">The WCF json date.</param>
            <returns>System.DateTimeOffset.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.DateTimeSerializer.ParseWcfJsonDate(System.String)">
            <summary>
            WCF Json format: /Date(unixts+0000)/
            </summary>
            <param name="wcfJsonDate">The WCF json date.</param>
            <returns>System.DateTime.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.DateTimeSerializer.GetLocalTimeZoneInfo">
            <summary>
            Gets the local time zone information.
            </summary>
            <returns>System.TimeZoneInfo.</returns>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Common.DateTimeSerializer.LocalTimeZone">
            <summary>
            The local time zone
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.DateTimeSerializer.UseConfigSpecifiedSetting(System.DateTime)">
            <summary>
            Uses the configuration specified setting.
            </summary>
            <param name="dateTime">The date time.</param>
            <returns>System.DateTime.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.DateTimeSerializer.WriteWcfJsonDate(System.IO.TextWriter,System.DateTime)">
            <summary>
            Writes the WCF json date.
            </summary>
            <param name="writer">The writer.</param>
            <param name="dateTime">The date time.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.DateTimeSerializer.WriteWcfJsonDateTimeOffset(System.IO.TextWriter,System.DateTimeOffset)">
            <summary>
            Writes the WCF json date time offset.
            </summary>
            <param name="writer">The writer.</param>
            <param name="dateTimeOffset">The date time offset.</param>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.Common.DeserializeArrayWithElements`1">
            <summary>
            Class DeserializeArrayWithElements.
            </summary>
            <typeparam name="TSerializer">The type of the t serializer.</typeparam>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Common.DeserializeArrayWithElements`1.ParseDelegateCache">
            <summary>
            The parse delegate cache
            </summary>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.Common.DeserializeArrayWithElements`1.ParseArrayOfElementsDelegate">
            <summary>
            Delegate ParseArrayOfElementsDelegate
            </summary>
            <param name="value">The value.</param>
            <param name="parseFn">The parse function.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Common.DeserializeArrayWithElements`1.signature">
            <summary>
            The signature
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.DeserializeArrayWithElements`1.GetParseStringSpanFn(System.Type)">
            <summary>
            Gets the parse string span function.
            </summary>
            <param name="type">The type.</param>
            <returns>ParseArrayOfElementsDelegate.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.Common.DeserializeArrayWithElements`2">
            <summary>
            Class DeserializeArrayWithElements.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TSerializer">The type of the t serializer.</typeparam>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Common.DeserializeArrayWithElements`2.Serializer">
            <summary>
            The serializer
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.DeserializeArrayWithElements`2.ParseGenericArray(System.ReadOnlySpan{System.Char},ServiceStack.OrmLite.Base.Text.Common.ParseStringSpanDelegate)">
            <summary>
            Parses the generic array.
            </summary>
            <param name="value">The value.</param>
            <param name="elementParseFn">The element parse function.</param>
            <returns>T[].</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.Common.DeserializeArray`2">
            <summary>
            Class DeserializeArray.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TSerializer">The type of the t serializer.</typeparam>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Common.DeserializeArray`2.Serializer">
            <summary>
            The serializer
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Common.DeserializeArray`2.CacheFn">
            <summary>
            The cache function
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.DeserializeArray`2.#cctor">
            <summary>
            Initializes static members of the <see cref="T:ServiceStack.OrmLite.Base.Text.Common.DeserializeArray`2" /> class.
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.Common.DeserializeArray`2.Parse">
            <summary>
            Gets the parse.
            </summary>
            <value>The parse.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.Common.DeserializeArray`2.ParseStringSpan">
            <summary>
            Gets the parse string span.
            </summary>
            <value>The parse string span.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.DeserializeArray`2.GetParseStringSpanFn">
            <summary>
            Gets the parse string span function.
            </summary>
            <returns>ParseStringSpanDelegate.</returns>
            <exception cref="T:System.ArgumentException">Type {type.FullName} is not an Array type</exception>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.DeserializeArray`2.ParseStringArray(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses the string array.
            </summary>
            <param name="value">The value.</param>
            <returns>System.String[].</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.DeserializeArray`2.ParseStringArray(System.String)">
            <summary>
            Parses the string array.
            </summary>
            <param name="value">The value.</param>
            <returns>System.String[].</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.DeserializeArray`2.ParseByteArray(System.String)">
            <summary>
            Parses the byte array.
            </summary>
            <param name="value">The value.</param>
            <returns>System.Byte[].</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.DeserializeArray`2.ParseByteArray(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses the byte array.
            </summary>
            <param name="value">The value.</param>
            <returns>System.Byte[].</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.Common.DeserializeBuiltin`1">
            <summary>
            Class DeserializeBuiltin.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Common.DeserializeBuiltin`1.CachedParseFn">
            <summary>
            The cached parse function
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.DeserializeBuiltin`1.#cctor">
            <summary>
            Initializes static members of the <see cref="T:ServiceStack.OrmLite.Base.Text.Common.DeserializeBuiltin`1" /> class.
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.Common.DeserializeBuiltin`1.Parse">
            <summary>
            Gets the parse.
            </summary>
            <value>The parse.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.Common.DeserializeBuiltin`1.ParseStringSpan">
            <summary>
            Gets the parse string span.
            </summary>
            <value>The parse string span.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.DeserializeBuiltin`1.GetParseStringSpanFn">
            <summary>
            Gets the parse string span function.
            </summary>
            <returns>ParseStringSpanDelegate.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.Common.DeserializeCollection`1">
            <summary>
            Class DeserializeCollection.
            </summary>
            <typeparam name="TSerializer">The type of the t serializer.</typeparam>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Common.DeserializeCollection`1.Serializer">
            <summary>
            The serializer
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.DeserializeCollection`1.GetParseMethod(System.Type)">
            <summary>
            Gets the parse method.
            </summary>
            <param name="type">The type.</param>
            <returns>ParseStringDelegate.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.DeserializeCollection`1.GetParseStringSpanMethod(System.Type)">
            <summary>
            Gets the parse string span method.
            </summary>
            <param name="type">The type.</param>
            <returns>ParseStringSpanDelegate.</returns>
            <exception cref="T:System.ArgumentException">Type {type.FullName} is not of type ICollection</exception>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.DeserializeCollection`1.ParseStringCollection(System.String,System.Type)">
            <summary>
            Parses the string collection.
            </summary>
            <param name="value">The value.</param>
            <param name="createType">Type of the create.</param>
            <returns>ICollection&lt;System.String&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.DeserializeCollection`1.ParseStringCollection(System.ReadOnlySpan{System.Char},System.Type)">
            <summary>
            Parses the string collection.
            </summary>
            <param name="value">The value.</param>
            <param name="createType">Type of the create.</param>
            <returns>ICollection&lt;System.String&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.DeserializeCollection`1.ParseIntCollection(System.String,System.Type)">
            <summary>
            Parses the int collection.
            </summary>
            <param name="value">The value.</param>
            <param name="createType">Type of the create.</param>
            <returns>ICollection&lt;System.Int32&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.DeserializeCollection`1.ParseIntCollection(System.ReadOnlySpan{System.Char},System.Type)">
            <summary>
            Parses the int collection.
            </summary>
            <param name="value">The value.</param>
            <param name="createType">Type of the create.</param>
            <returns>ICollection&lt;System.Int32&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.DeserializeCollection`1.ParseCollection``1(System.String,System.Type,ServiceStack.OrmLite.Base.Text.Common.ParseStringDelegate)">
            <summary>
            Parses the collection.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The value.</param>
            <param name="createType">Type of the create.</param>
            <param name="parseFn">The parse function.</param>
            <returns>ICollection&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.DeserializeCollection`1.ParseCollection``1(System.ReadOnlySpan{System.Char},System.Type,ServiceStack.OrmLite.Base.Text.Common.ParseStringSpanDelegate)">
            <summary>
            Parses the collection.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The value.</param>
            <param name="createType">Type of the create.</param>
            <param name="parseFn">The parse function.</param>
            <returns>ICollection&lt;T&gt;.</returns>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Common.DeserializeCollection`1.ParseDelegateCache">
            <summary>
            The parse delegate cache
            </summary>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.Common.DeserializeCollection`1.ParseCollectionDelegate">
            <summary>
            Delegate ParseCollectionDelegate
            </summary>
            <param name="value">The value.</param>
            <param name="createType">Type of the create.</param>
            <param name="parseFn">The parse function.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.DeserializeCollection`1.ParseCollectionType(System.String,System.Type,System.Type,ServiceStack.OrmLite.Base.Text.Common.ParseStringDelegate)">
            <summary>
            Parses the type of the collection.
            </summary>
            <param name="value">The value.</param>
            <param name="createType">Type of the create.</param>
            <param name="elementType">Type of the element.</param>
            <param name="parseFn">The parse function.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Common.DeserializeCollection`1.arguments">
            <summary>
            The arguments
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.DeserializeCollection`1.ParseCollectionType(System.ReadOnlySpan{System.Char},System.Type,System.Type,ServiceStack.OrmLite.Base.Text.Common.ParseStringSpanDelegate)">
            <summary>
            Parses the type of the collection.
            </summary>
            <param name="value">The value.</param>
            <param name="createType">Type of the create.</param>
            <param name="elementType">Type of the element.</param>
            <param name="parseFn">The parse function.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.Common.DeserializeCustomGenericType`1">
            <summary>
            Class DeserializeCustomGenericType.
            </summary>
            <typeparam name="TSerializer">The type of the t serializer.</typeparam>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Common.DeserializeCustomGenericType`1.Serializer">
            <summary>
            The serializer
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.DeserializeCustomGenericType`1.GetParseMethod(System.Type)">
            <summary>
            Gets the parse method.
            </summary>
            <param name="type">The type.</param>
            <returns>ParseStringDelegate.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.DeserializeCustomGenericType`1.GetParseStringSpanMethod(System.Type)">
            <summary>
            Gets the parse string span method.
            </summary>
            <param name="type">The type.</param>
            <returns>ParseStringSpanDelegate.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.DeserializeCustomGenericType`1.ParseTuple(System.Type,System.String)">
            <summary>
            Parses the tuple.
            </summary>
            <param name="tupleType">Type of the tuple.</param>
            <param name="value">The value.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.DeserializeCustomGenericType`1.ParseTuple(System.Type,System.ReadOnlySpan{System.Char})">
            <summary>
            Parses the tuple.
            </summary>
            <param name="tupleType">Type of the tuple.</param>
            <param name="value">The value.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.Common.DeserializeDictionary`1">
            <summary>
            Class DeserializeDictionary.
            </summary>
            <typeparam name="TSerializer">The type of the t serializer.</typeparam>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Common.DeserializeDictionary`1.Serializer">
            <summary>
            The serializer
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Common.DeserializeDictionary`1.KeyIndex">
            <summary>
            The key index
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Common.DeserializeDictionary`1.ValueIndex">
            <summary>
            The value index
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.DeserializeDictionary`1.GetParseMethod(System.Type)">
            <summary>
            Gets the parse method.
            </summary>
            <param name="type">The type.</param>
            <returns>ParseStringDelegate.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.DeserializeDictionary`1.GetParseStringSpanMethod(System.Type)">
            <summary>
            Gets the parse string span method.
            </summary>
            <param name="type">The type.</param>
            <returns>ParseStringSpanDelegate.</returns>
            <exception cref="T:System.ArgumentException">$"Type {type.FullName} is not of type IDictionary</exception>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.DeserializeDictionary`1.ParseJsonObject(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses the json object.
            </summary>
            <param name="value">The value.</param>
            <returns>JsonObject.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.DeserializeDictionary`1.ParseStringDictionary(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses the string dictionary.
            </summary>
            <param name="value">The value.</param>
            <returns>Dictionary&lt;System.String, System.String&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.DeserializeDictionary`1.ParseIDictionary(System.ReadOnlySpan{System.Char},System.Type)">
            <summary>
            Parses the i dictionary.
            </summary>
            <param name="value">The value.</param>
            <param name="dictType">Type of the dictionary.</param>
            <returns>IDictionary.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.DeserializeDictionary`1.ParseDictionary``2(System.String,System.Type,ServiceStack.OrmLite.Base.Text.Common.ParseStringDelegate,ServiceStack.OrmLite.Base.Text.Common.ParseStringDelegate)">
            <summary>
            Parses the dictionary.
            </summary>
            <typeparam name="TKey">The type of the t key.</typeparam>
            <typeparam name="TValue">The type of the t value.</typeparam>
            <param name="value">The value.</param>
            <param name="createMapType">Type of the create map.</param>
            <param name="parseKeyFn">The parse key function.</param>
            <param name="parseValueFn">The parse value function.</param>
            <returns>IDictionary&lt;TKey, TValue&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.DeserializeDictionary`1.ParseDictionary``2(System.ReadOnlySpan{System.Char},System.Type,ServiceStack.OrmLite.Base.Text.Common.ParseStringSpanDelegate,ServiceStack.OrmLite.Base.Text.Common.ParseStringSpanDelegate)">
            <summary>
            Parses the dictionary.
            </summary>
            <typeparam name="TKey">The type of the t key.</typeparam>
            <typeparam name="TValue">The type of the t value.</typeparam>
            <param name="value">The value.</param>
            <param name="createMapType">Type of the create map.</param>
            <param name="parseKeyFn">The parse key function.</param>
            <param name="parseValueFn">The parse value function.</param>
            <returns>IDictionary&lt;TKey, TValue&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.DeserializeDictionary`1.VerifyAndGetStartIndex(System.ReadOnlySpan{System.Char},System.Type)">
            <summary>
            Verifies the start index of the and get.
            </summary>
            <param name="value">The value.</param>
            <param name="createMapType">Type of the create map.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Common.DeserializeDictionary`1.ParseDelegateCache">
            <summary>
            The parse delegate cache
            </summary>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.Common.DeserializeDictionary`1.ParseDictionaryDelegate">
            <summary>
            Delegate ParseDictionaryDelegate
            </summary>
            <param name="value">The value.</param>
            <param name="createMapType">Type of the create map.</param>
            <param name="keyParseFn">The key parse function.</param>
            <param name="valueParseFn">The value parse function.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Common.DeserializeDictionary`1.signature">
            <summary>
            The signature
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.DeserializeDictionary`1.ParseDictionaryType(System.ReadOnlySpan{System.Char},System.Type,System.Type[],ServiceStack.OrmLite.Base.Text.Common.ParseStringSpanDelegate,ServiceStack.OrmLite.Base.Text.Common.ParseStringSpanDelegate)">
            <summary>
            Parses the type of the dictionary.
            </summary>
            <param name="value">The value.</param>
            <param name="createMapType">Type of the create map.</param>
            <param name="argTypes">The argument types.</param>
            <param name="keyParseFn">The key parse function.</param>
            <param name="valueParseFn">The value parse function.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.Common.DeserializeDictionary`1.TypesKey">
            <summary>
            Struct TypesKey
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.Common.DeserializeDictionary`1.TypesKey.Type1">
            <summary>
            Gets the type1.
            </summary>
            <value>The type1.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.Common.DeserializeDictionary`1.TypesKey.Type2">
            <summary>
            Gets the type2.
            </summary>
            <value>The type2.</value>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Common.DeserializeDictionary`1.TypesKey.hashcode">
            <summary>
            The hashcode
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.DeserializeDictionary`1.TypesKey.#ctor(System.Type,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.OrmLite.Base.Text.Common.DeserializeDictionary`1.TypesKey" /> struct.
            </summary>
            <param name="type1">The type1.</param>
            <param name="type2">The type2.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.DeserializeDictionary`1.TypesKey.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The object to compare with the current instance.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.DeserializeDictionary`1.TypesKey.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.Common.DeserializeKeyValuePair`1">
            <summary>
            Class DeserializeKeyValuePair.
            </summary>
            <typeparam name="TSerializer">The type of the t serializer.</typeparam>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Common.DeserializeKeyValuePair`1.Serializer">
            <summary>
            The serializer
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Common.DeserializeKeyValuePair`1.KeyIndex">
            <summary>
            The key index
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Common.DeserializeKeyValuePair`1.ValueIndex">
            <summary>
            The value index
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.DeserializeKeyValuePair`1.GetParseMethod(System.Type)">
            <summary>
            Gets the parse method.
            </summary>
            <param name="type">The type.</param>
            <returns>ParseStringDelegate.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.DeserializeKeyValuePair`1.GetParseStringSpanMethod(System.Type)">
            <summary>
            Gets the parse string span method.
            </summary>
            <param name="type">The type.</param>
            <returns>ParseStringSpanDelegate.</returns>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Common.DeserializeKeyValuePair`1.ParseDelegateCache">
            <summary>
            The parse delegate cache
            </summary>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.Common.DeserializeKeyValuePair`1.ParseKeyValuePairDelegate">
            <summary>
            Delegate ParseKeyValuePairDelegate
            </summary>
            <param name="value">The value.</param>
            <param name="createMapType">Type of the create map.</param>
            <param name="keyParseFn">The key parse function.</param>
            <param name="valueParseFn">The value parse function.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Common.DeserializeKeyValuePair`1.signature">
            <summary>
            The signature
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.DeserializeKeyValuePair`1.ParseKeyValuePairType(System.ReadOnlySpan{System.Char},System.Type,System.Type[],ServiceStack.OrmLite.Base.Text.Common.ParseStringSpanDelegate,ServiceStack.OrmLite.Base.Text.Common.ParseStringSpanDelegate)">
            <summary>
            Parses the type of the key value pair.
            </summary>
            <param name="value">The value.</param>
            <param name="createMapType">Type of the create map.</param>
            <param name="argTypes">The argument types.</param>
            <param name="keyParseFn">The key parse function.</param>
            <param name="valueParseFn">The value parse function.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.DeserializeKeyValuePair`1.GetTypesKey(System.Type[])">
            <summary>
            Gets the types key.
            </summary>
            <param name="types">The types.</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.Common.DeserializeListWithElements`1">
            <summary>
            Class DeserializeListWithElements.
            </summary>
            <typeparam name="TSerializer">The type of the t serializer.</typeparam>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Common.DeserializeListWithElements`1.Serializer">
            <summary>
            The serializer
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Common.DeserializeListWithElements`1.ParseDelegateCache">
            <summary>
            The parse delegate cache
            </summary>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.Common.DeserializeListWithElements`1.ParseListDelegate">
            <summary>
            Delegate ParseListDelegate
            </summary>
            <param name="value">The value.</param>
            <param name="createListType">Type of the create list.</param>
            <param name="parseFn">The parse function.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Common.DeserializeListWithElements`1.signature">
            <summary>
            The signature
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.DeserializeListWithElements`1.GetListTypeParseStringSpanFn(System.Type,System.Type,ServiceStack.OrmLite.Base.Text.Common.ParseStringSpanDelegate)">
            <summary>
            Gets the list type parse string span function.
            </summary>
            <param name="createListType">Type of the create list.</param>
            <param name="elementType">Type of the element.</param>
            <param name="parseFn">The parse function.</param>
            <returns>ParseListDelegate.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.DeserializeListWithElements`1.StripList(System.ReadOnlySpan{System.Char})">
            <summary>
            Strips the list.
            </summary>
            <param name="value">The value.</param>
            <returns>ReadOnlySpan&lt;System.Char&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.DeserializeListWithElements`1.ParseStringList(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses the string list.
            </summary>
            <param name="value">The value.</param>
            <returns>List&lt;System.String&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.DeserializeListWithElements`1.ParseIntList(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses the int list.
            </summary>
            <param name="value">The value.</param>
            <returns>List&lt;System.Int32&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.DeserializeListWithElements`1.ParseByteList(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses the byte list.
            </summary>
            <param name="value">The value.</param>
            <returns>List&lt;System.Byte&gt;.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.Common.DeserializeListWithElements`2">
            <summary>
            Class DeserializeListWithElements.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TSerializer">The type of the t serializer.</typeparam>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Common.DeserializeListWithElements`2.Serializer">
            <summary>
            The serializer
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.DeserializeListWithElements`2.ParseGenericList(System.ReadOnlySpan{System.Char},System.Type,ServiceStack.OrmLite.Base.Text.Common.ParseStringSpanDelegate)">
            <summary>
            Parses the generic list.
            </summary>
            <param name="value">The value.</param>
            <param name="createListType">Type of the create list.</param>
            <param name="parseFn">The parse function.</param>
            <returns>ICollection&lt;T&gt;.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.Common.DeserializeList`2">
            <summary>
            Class DeserializeList.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TSerializer">The type of the t serializer.</typeparam>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Common.DeserializeList`2.CacheFn">
            <summary>
            The cache function
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.DeserializeList`2.#cctor">
            <summary>
            Initializes static members of the <see cref="T:ServiceStack.OrmLite.Base.Text.Common.DeserializeList`2" /> class.
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.Common.DeserializeList`2.Parse">
            <summary>
            Gets the parse.
            </summary>
            <value>The parse.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.Common.DeserializeList`2.ParseStringSpan">
            <summary>
            Gets the parse string span.
            </summary>
            <value>The parse string span.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.DeserializeList`2.GetParseStringSpanFn">
            <summary>
            Gets the parse string span function.
            </summary>
            <returns>ParseStringSpanDelegate.</returns>
            <exception cref="T:System.ArgumentException">Type {typeof(T).FullName} is not of type IList</exception>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.Common.DeserializeEnumerable`2">
            <summary>
            Class DeserializeEnumerable.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TSerializer">The type of the t serializer.</typeparam>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Common.DeserializeEnumerable`2.CacheFn">
            <summary>
            The cache function
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.DeserializeEnumerable`2.#cctor">
            <summary>
            Initializes static members of the <see cref="T:ServiceStack.OrmLite.Base.Text.Common.DeserializeEnumerable`2" /> class.
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.Common.DeserializeEnumerable`2.Parse">
            <summary>
            Gets the parse.
            </summary>
            <value>The parse.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.Common.DeserializeEnumerable`2.ParseStringSpan">
            <summary>
            Gets the parse string span.
            </summary>
            <value>The parse string span.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.DeserializeEnumerable`2.GetParseStringSpanFn">
            <summary>
            Gets the parse string span function.
            </summary>
            <returns>ParseStringSpanDelegate.</returns>
            <exception cref="T:System.ArgumentException">Type {typeof(T).FullName} is not of type IEnumerable</exception>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.Common.DeserializeSpecializedCollections`2">
            <summary>
            Class DeserializeSpecializedCollections.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TSerializer">The type of the t serializer.</typeparam>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Common.DeserializeSpecializedCollections`2.CacheFn">
            <summary>
            The cache function
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.DeserializeSpecializedCollections`2.#cctor">
            <summary>
            Initializes static members of the <see cref="T:ServiceStack.OrmLite.Base.Text.Common.DeserializeSpecializedCollections`2" /> class.
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.Common.DeserializeSpecializedCollections`2.Parse">
            <summary>
            Gets the parse.
            </summary>
            <value>The parse.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.Common.DeserializeSpecializedCollections`2.ParseStringSpan">
            <summary>
            Gets the parse string span.
            </summary>
            <value>The parse string span.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.DeserializeSpecializedCollections`2.GetParseStringSpanFn">
            <summary>
            Gets the parse string span function.
            </summary>
            <returns>ParseStringSpanDelegate.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.DeserializeSpecializedCollections`2.ParseStringQueue(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses the string queue.
            </summary>
            <param name="value">The value.</param>
            <returns>Queue&lt;System.String&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.DeserializeSpecializedCollections`2.ParseIntQueue(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses the int queue.
            </summary>
            <param name="value">The value.</param>
            <returns>Queue&lt;System.Int32&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.DeserializeSpecializedCollections`2.GetGenericQueueParseFn">
            <summary>
            Gets the generic queue parse function.
            </summary>
            <returns>ParseStringSpanDelegate.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.DeserializeSpecializedCollections`2.ParseStringStack(System.String)">
            <summary>
            Parses the string stack.
            </summary>
            <param name="value">The value.</param>
            <returns>Stack&lt;System.String&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.DeserializeSpecializedCollections`2.ParseStringStack(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses the string stack.
            </summary>
            <param name="value">The value.</param>
            <returns>Stack&lt;System.String&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.DeserializeSpecializedCollections`2.ParseIntStack(System.String)">
            <summary>
            Parses the int stack.
            </summary>
            <param name="value">The value.</param>
            <returns>Stack&lt;System.Int32&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.DeserializeSpecializedCollections`2.ParseIntStack(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses the int stack.
            </summary>
            <param name="value">The value.</param>
            <returns>Stack&lt;System.Int32&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.DeserializeSpecializedCollections`2.GetGenericStackParseFn">
            <summary>
            Gets the generic stack parse function.
            </summary>
            <returns>ParseStringSpanDelegate.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.DeserializeSpecializedCollections`2.GetEnumerableParseStringSpanFn">
            <summary>
            Gets the enumerable parse string span function.
            </summary>
            <returns>ParseStringSpanDelegate.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.DeserializeSpecializedCollections`2.GetGenericEnumerableParseStringSpanFn">
            <summary>
            Gets the generic enumerable parse string span function.
            </summary>
            <returns>ParseStringSpanDelegate.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.Common.SpecializedQueueElements`1">
            <summary>
            Class SpecializedQueueElements.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.SpecializedQueueElements`1.ConvertToStack(System.Object)">
            <summary>
            Converts to stack.
            </summary>
            <param name="enumerable">The enumerable.</param>
            <returns>Stack&lt;T&gt;.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.Common.SpecializedEnumerableElements`2">
            <summary>
            Class SpecializedEnumerableElements.
            </summary>
            <typeparam name="TCollection">The type of the t collection.</typeparam>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Common.SpecializedEnumerableElements`2.ConvertFn">
            <summary>
            The convert function
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.SpecializedEnumerableElements`2.#cctor">
            <summary>
            Initializes static members of the <see cref="T:ServiceStack.OrmLite.Base.Text.Common.SpecializedEnumerableElements`2" /> class.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.SpecializedEnumerableElements`2.Convert(System.Object)">
            <summary>
            Converts the specified enumerable.
            </summary>
            <param name="enumerable">The enumerable.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.SpecializedEnumerableElements`2.ConvertFromCollection(System.Object)">
            <summary>
            Converts from collection.
            </summary>
            <param name="enumerable">The enumerable.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.Common.DeserializeType`1">
            <summary>
            Class DeserializeType.
            </summary>
            <typeparam name="TSerializer">The type of the t serializer.</typeparam>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Common.DeserializeType`1.Serializer">
            <summary>
            The serializer
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.DeserializeType`1.GetParseMethod(ServiceStack.OrmLite.Base.Text.TypeConfig)">
            <summary>
            Gets the parse method.
            </summary>
            <param name="typeConfig">The type configuration.</param>
            <returns>ParseStringDelegate.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.DeserializeType`1.GetParseStringSpanMethod(ServiceStack.OrmLite.Base.Text.TypeConfig)">
            <summary>
            Gets the parse string span method.
            </summary>
            <param name="typeConfig">The type configuration.</param>
            <returns>ParseStringSpanDelegate.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.Common.DeserializeType`1.StringToTypeContext">
            <summary>
            Struct StringToTypeContext
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Common.DeserializeType`1.StringToTypeContext.typeConfig">
            <summary>
            The type configuration
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Common.DeserializeType`1.StringToTypeContext.ctorFn">
            <summary>
            The ctor function
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Common.DeserializeType`1.StringToTypeContext.accessors">
            <summary>
            The accessors
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.DeserializeType`1.StringToTypeContext.#ctor(ServiceStack.OrmLite.Base.Text.TypeConfig,ServiceStack.OrmLite.Base.Text.EmptyCtorDelegate,System.Collections.Generic.KeyValuePair{System.String,ServiceStack.OrmLite.Base.Text.Common.TypeAccessor}[])">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.OrmLite.Base.Text.Common.DeserializeType`1.StringToTypeContext" /> struct.
            </summary>
            <param name="typeConfig">The type configuration.</param>
            <param name="ctorFn">The ctor function.</param>
            <param name="accessors">The accessors.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.DeserializeType`1.StringToTypeContext.DeserializeJson(System.ReadOnlySpan{System.Char})">
            <summary>
            Deserializes the json.
            </summary>
            <param name="value">The value.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.DeserializeType`1.StringToTypeContext.DeserializeJsv(System.ReadOnlySpan{System.Char})">
            <summary>
            Deserializes the JSV.
            </summary>
            <param name="value">The value.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.DeserializeType`1.ObjectStringToType(System.ReadOnlySpan{System.Char})">
            <summary>
            Objects the type of the string to.
            </summary>
            <param name="strType">Type of the string.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.DeserializeType`1.ExtractType(System.String)">
            <summary>
            Extracts the type.
            </summary>
            <param name="strType">Type of the string.</param>
            <returns>Type.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.DeserializeType`1.ExtractType(System.ReadOnlySpan{System.Char})">
            <summary>
            Extracts the type.
            </summary>
            <param name="strType">Type of the string.</param>
            <returns>Type.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.DeserializeType`1.ParseAbstractType``1(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses the type of the abstract.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The value.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.DeserializeType`1.ParseQuotedPrimitive(System.String)">
            <summary>
            Parses the quoted primitive.
            </summary>
            <param name="value">The value.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.DeserializeType`1.ParsePrimitive(System.String)">
            <summary>
            Parses the primitive.
            </summary>
            <param name="value">The value.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.DeserializeType`1.ParsePrimitive(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses the primitive.
            </summary>
            <param name="value">The value.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.DeserializeType`1.ParsePrimitive(System.String,System.Char)">
            <summary>
            Parses the primitive.
            </summary>
            <param name="value">The value.</param>
            <param name="firstChar">The first character.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.Common.TypeAccessorUtils">
            <summary>
            Class TypeAccessorUtils.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.TypeAccessorUtils.Get(System.Collections.Generic.KeyValuePair{System.String,ServiceStack.OrmLite.Base.Text.Common.TypeAccessor}[],System.ReadOnlySpan{System.Char},System.Boolean)">
            <summary>
            Gets the specified property name.
            </summary>
            <param name="accessors">The accessors.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="lenient">if set to <c>true</c> [lenient].</param>
            <returns>TypeAccessor.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.TypeAccessorUtils.FindPropertyAccessor(System.Collections.Generic.IReadOnlyList{System.Collections.Generic.KeyValuePair{System.String,ServiceStack.OrmLite.Base.Text.Common.TypeAccessor}},System.ReadOnlySpan{System.Char})">
            <summary>
            Finds the property accessor.
            </summary>
            <param name="accessors">The accessors.</param>
            <param name="propertyName">Name of the property.</param>
            <returns>TypeAccessor.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.Common.TypeAccessor">
            <summary>
            Class TypeAccessor.
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Common.TypeAccessor.GetProperty">
            <summary>
            The get property
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Common.TypeAccessor.SetProperty">
            <summary>
            The set property
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Common.TypeAccessor.PropertyType">
            <summary>
            The property type
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.TypeAccessor.ExtractType(ServiceStack.OrmLite.Base.Text.Common.ITypeSerializer,System.String)">
            <summary>
            Extracts the type.
            </summary>
            <param name="Serializer">The serializer.</param>
            <param name="strType">Type of the string.</param>
            <returns>Type.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.TypeAccessor.ExtractType(ServiceStack.OrmLite.Base.Text.Common.ITypeSerializer,System.ReadOnlySpan{System.Char})">
            <summary>
            Extracts the type.
            </summary>
            <param name="Serializer">The serializer.</param>
            <param name="strType">Type of the string.</param>
            <returns>Type.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.TypeAccessor.Create(ServiceStack.OrmLite.Base.Text.Common.ITypeSerializer,ServiceStack.OrmLite.Base.Text.TypeConfig,System.Reflection.PropertyInfo)">
            <summary>
            Creates the specified serializer.
            </summary>
            <param name="serializer">The serializer.</param>
            <param name="typeConfig">The type configuration.</param>
            <param name="propertyInfo">The property information.</param>
            <returns>TypeAccessor.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.TypeAccessor.GetPropertyMethod(ServiceStack.OrmLite.Base.Text.Common.ITypeSerializer,System.Reflection.PropertyInfo)">
            <summary>
            Gets the property method.
            </summary>
            <param name="serializer">The serializer.</param>
            <param name="propertyInfo">The property information.</param>
            <returns>ParseStringSpanDelegate.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.TypeAccessor.GetSetPropertyMethod(ServiceStack.OrmLite.Base.Text.TypeConfig,System.Reflection.PropertyInfo)">
            <summary>
            Gets the set property method.
            </summary>
            <param name="typeConfig">The type configuration.</param>
            <param name="propertyInfo">The property information.</param>
            <returns>SetMemberDelegate.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.TypeAccessor.Create(ServiceStack.OrmLite.Base.Text.Common.ITypeSerializer,ServiceStack.OrmLite.Base.Text.TypeConfig,System.Reflection.FieldInfo)">
            <summary>
            Creates the specified serializer.
            </summary>
            <param name="serializer">The serializer.</param>
            <param name="typeConfig">The type configuration.</param>
            <param name="fieldInfo">The field information.</param>
            <returns>TypeAccessor.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.TypeAccessor.GetSetFieldMethod(ServiceStack.OrmLite.Base.Text.TypeConfig,System.Reflection.FieldInfo)">
            <summary>
            Gets the set field method.
            </summary>
            <param name="typeConfig">The type configuration.</param>
            <param name="fieldInfo">The field information.</param>
            <returns>SetMemberDelegate.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.Common.DeserializeTypeExensions">
            <summary>
            Class DeserializeTypeExensions.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.DeserializeTypeExensions.Has(ServiceStack.OrmLite.Base.Text.ParseAsType,ServiceStack.OrmLite.Base.Text.ParseAsType)">
            <summary>
            Determines whether [has] [the specified flag].
            </summary>
            <param name="flags">The flags.</param>
            <param name="flag">The flag.</param>
            <returns><c>true</c> if [has] [the specified flag]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.DeserializeTypeExensions.ParseNumber(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses the number.
            </summary>
            <param name="value">The value.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.DeserializeTypeExensions.ParseNumber(System.ReadOnlySpan{System.Char},System.Boolean)">
            <summary>
            Parses the number.
            </summary>
            <param name="value">The value.</param>
            <param name="bestFit">if set to <c>true</c> [best fit].</param>
            <returns>System.Object.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.Common.DeserializeTypeRef">
            <summary>
            Class DeserializeTypeRef.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.DeserializeTypeRef.CreateSerializationError(System.Type,System.String)">
            <summary>
            Creates the serialization error.
            </summary>
            <param name="type">The type.</param>
            <param name="strType">Type of the string.</param>
            <returns>System.Runtime.Serialization.SerializationException.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.DeserializeTypeRef.GetSerializationException(System.String,System.String,System.Type,System.Exception)">
            <summary>
            Gets the serialization exception.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="propertyValueString">The property value string.</param>
            <param name="propertyType">Type of the property.</param>
            <param name="e">The e.</param>
            <returns>System.Runtime.Serialization.SerializationException.</returns>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Common.DeserializeTypeRef.TypeAccessorsCache">
            <summary>
            The type accessors cache
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.DeserializeTypeRef.GetCachedTypeAccessors(System.Type,ServiceStack.OrmLite.Base.Text.Common.ITypeSerializer)">
            <summary>
            Gets the cached type accessors.
            </summary>
            <param name="type">The type.</param>
            <param name="serializer">The serializer.</param>
            <returns>System.Collections.Generic.KeyValuePair&lt;string, ServiceStack.Text.Common.TypeAccessor&gt;[].</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.DeserializeTypeRef.GetTypeAccessors(ServiceStack.OrmLite.Base.Text.TypeConfig,ServiceStack.OrmLite.Base.Text.Common.ITypeSerializer)">
            <summary>
            Gets the type accessors.
            </summary>
            <param name="typeConfig">The type configuration.</param>
            <param name="serializer">The serializer.</param>
            <returns>System.Collections.Generic.KeyValuePair&lt;string, ServiceStack.Text.Common.TypeAccessor&gt;[].</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.Common.DeserializeTypeRefJson">
            <summary>
            Class DeserializeTypeRefJson.
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Common.DeserializeTypeRefJson.Serializer">
            <summary>
            The serializer
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.DeserializeTypeRefJson.StringToType(System.ReadOnlySpan{System.Char},ServiceStack.OrmLite.Base.Text.TypeConfig,ServiceStack.OrmLite.Base.Text.EmptyCtorDelegate,System.Collections.Generic.KeyValuePair{System.String,ServiceStack.OrmLite.Base.Text.Common.TypeAccessor}[])">
            <summary>
            Strings to type.
            </summary>
            <param name="strType">Type of the string.</param>
            <param name="typeConfig">The type configuration.</param>
            <param name="ctorFn">The ctor function.</param>
            <param name="typeAccessors">The type accessors.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.Common.DeserializeTypeRefJsv">
            <summary>
            Class DeserializeTypeRefJsv.
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Common.DeserializeTypeRefJsv.Serializer">
            <summary>
            The serializer
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Common.DeserializeTypeRefJsv.typeAttr">
            <summary>
            The type attribute
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.DeserializeTypeRefJsv.StringToType(System.ReadOnlySpan{System.Char},ServiceStack.OrmLite.Base.Text.TypeConfig,ServiceStack.OrmLite.Base.Text.EmptyCtorDelegate,System.Collections.Generic.KeyValuePair{System.String,ServiceStack.OrmLite.Base.Text.Common.TypeAccessor}[])">
            <summary>
            Strings to type.
            </summary>
            <param name="strType">Type of the string.</param>
            <param name="typeConfig">The type configuration.</param>
            <param name="ctorFn">The ctor function.</param>
            <param name="typeAccessors">The type accessors.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.Common.DeserializeTypeUtils">
            <summary>
            Class DeserializeTypeUtils.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.DeserializeTypeUtils.GetParseMethod(System.Type)">
            <summary>
            Gets the parse method.
            </summary>
            <param name="type">The type.</param>
            <returns>ParseStringDelegate.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.DeserializeTypeUtils.GetParseStringSpanMethod(System.Type)">
            <summary>
            Gets the parse string span method.
            </summary>
            <param name="type">The type.</param>
            <returns>ParseStringSpanDelegate.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.DeserializeTypeUtils.GetTypeStringConstructor(System.Type)">
            <summary>
            Get the type(string) constructor if exists
            </summary>
            <param name="type">The type.</param>
            <returns>ConstructorInfo.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.Common.ObjectDeserializerDelegate">
            <summary>
            Delegate ObjectDeserializerDelegate
            </summary>
            <param name="value">The value.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.Common.ITypeSerializer">
            <summary>Interface ITypeSerializer</summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.Common.ITypeSerializer.ObjectDeserializer">
            <summary>
            Gets or sets the object deserializer.
            </summary>
            <value>The object deserializer.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.Common.ITypeSerializer.IncludeNullValues">
            <summary>
            Gets a value indicating whether [include null values].
            </summary>
            <value><c>true</c> if [include null values]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.Common.ITypeSerializer.IncludeNullValuesInDictionaries">
            <summary>
            Gets a value indicating whether [include null values in dictionaries].
            </summary>
            <value><c>true</c> if [include null values in dictionaries]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.Common.ITypeSerializer.TypeAttrInObject">
            <summary>
            Gets the type attribute in object.
            </summary>
            <value>The type attribute in object.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.ITypeSerializer.GetWriteFn``1">
            <summary>
            Gets the write function.
            </summary>
            <typeparam name="T"></typeparam>
            <returns>WriteObjectDelegate.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.ITypeSerializer.GetWriteFn(System.Type)">
            <summary>
            Gets the write function.
            </summary>
            <param name="type">The type.</param>
            <returns>WriteObjectDelegate.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.ITypeSerializer.GetTypeInfo(System.Type)">
            <summary>
            Gets the type information.
            </summary>
            <param name="type">The type.</param>
            <returns>TypeInfo.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.ITypeSerializer.WriteRawString(System.IO.TextWriter,System.String)">
            <summary>
            Writes the raw string.
            </summary>
            <param name="writer">The writer.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.ITypeSerializer.WritePropertyName(System.IO.TextWriter,System.String)">
            <summary>
            Writes the name of the property.
            </summary>
            <param name="writer">The writer.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.ITypeSerializer.WriteBuiltIn(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the built in.
            </summary>
            <param name="writer">The writer.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.ITypeSerializer.WriteObjectString(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the object string.
            </summary>
            <param name="writer">The writer.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.ITypeSerializer.WriteException(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the exception.
            </summary>
            <param name="writer">The writer.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.ITypeSerializer.WriteString(System.IO.TextWriter,System.String)">
            <summary>
            Writes the string.
            </summary>
            <param name="writer">The writer.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.ITypeSerializer.WriteFormattableObjectString(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the formattable object string.
            </summary>
            <param name="writer">The writer.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.ITypeSerializer.WriteDateTime(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the date time.
            </summary>
            <param name="writer">The writer.</param>
            <param name="oDateTime">The o date time.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.ITypeSerializer.WriteNullableDateTime(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the nullable date time.
            </summary>
            <param name="writer">The writer.</param>
            <param name="dateTime">The date time.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.ITypeSerializer.WriteDateTimeOffset(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the date time offset.
            </summary>
            <param name="writer">The writer.</param>
            <param name="oDateTimeOffset">The o date time offset.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.ITypeSerializer.WriteNullableDateTimeOffset(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the nullable date time offset.
            </summary>
            <param name="writer">The writer.</param>
            <param name="dateTimeOffset">The date time offset.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.ITypeSerializer.WriteTimeSpan(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the time span.
            </summary>
            <param name="writer">The writer.</param>
            <param name="timeSpan">The date time offset.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.ITypeSerializer.WriteNullableTimeSpan(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the nullable time span.
            </summary>
            <param name="writer">The writer.</param>
            <param name="timeSpan">The date time offset.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.ITypeSerializer.WriteGuid(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the unique identifier.
            </summary>
            <param name="writer">The writer.</param>
            <param name="oValue">The o value.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.ITypeSerializer.WriteNullableGuid(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the nullable unique identifier.
            </summary>
            <param name="writer">The writer.</param>
            <param name="oValue">The o value.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.ITypeSerializer.WriteBytes(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the bytes.
            </summary>
            <param name="writer">The writer.</param>
            <param name="oByteValue">The o byte value.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.ITypeSerializer.WriteChar(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the character.
            </summary>
            <param name="writer">The writer.</param>
            <param name="charValue">The character value.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.ITypeSerializer.WriteByte(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the byte.
            </summary>
            <param name="writer">The writer.</param>
            <param name="byteValue">The byte value.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.ITypeSerializer.WriteSByte(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the s byte.
            </summary>
            <param name="writer">The writer.</param>
            <param name="sbyteValue">The sbyte value.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.ITypeSerializer.WriteInt16(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the int16.
            </summary>
            <param name="writer">The writer.</param>
            <param name="intValue">The int value.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.ITypeSerializer.WriteUInt16(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the u int16.
            </summary>
            <param name="writer">The writer.</param>
            <param name="intValue">The int value.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.ITypeSerializer.WriteInt32(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the int32.
            </summary>
            <param name="writer">The writer.</param>
            <param name="intValue">The int value.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.ITypeSerializer.WriteUInt32(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the u int32.
            </summary>
            <param name="writer">The writer.</param>
            <param name="uintValue">The uint value.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.ITypeSerializer.WriteInt64(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the int64.
            </summary>
            <param name="writer">The writer.</param>
            <param name="longValue">The long value.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.ITypeSerializer.WriteUInt64(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the u int64.
            </summary>
            <param name="writer">The writer.</param>
            <param name="ulongValue">The ulong value.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.ITypeSerializer.WriteBool(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the bool.
            </summary>
            <param name="writer">The writer.</param>
            <param name="boolValue">The bool value.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.ITypeSerializer.WriteFloat(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the float.
            </summary>
            <param name="writer">The writer.</param>
            <param name="floatValue">The float value.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.ITypeSerializer.WriteDouble(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the double.
            </summary>
            <param name="writer">The writer.</param>
            <param name="doubleValue">The double value.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.ITypeSerializer.WriteDecimal(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the decimal.
            </summary>
            <param name="writer">The writer.</param>
            <param name="decimalValue">The decimal value.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.ITypeSerializer.WriteEnum(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the enum.
            </summary>
            <param name="writer">The writer.</param>
            <param name="enumValue">The enum value.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.ITypeSerializer.WriteDateOnly(System.IO.TextWriter,System.Object)">
            <summary>
            Write Date Only
            </summary>
            <param name="writer">The writer.</param>
            <param name="oDateOnly">The date value.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.ITypeSerializer.WriteNullableDateOnly(System.IO.TextWriter,System.Object)">
            <summary>
            
            </summary>
            <param name="writer">The writer.</param>
            <param name="oDateOnly">The date value.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.ITypeSerializer.WriteTimeOnly(System.IO.TextWriter,System.Object)">
            <summary>
            
            </summary>
            <param name="writer">The writer.</param>
            <param name="oTimeOnly">The time value.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.ITypeSerializer.WriteNullableTimeOnly(System.IO.TextWriter,System.Object)">
            <summary>
            
            </summary>
            <param name="writer">The writer.</param>
            <param name="oTimeOnly">The time value.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.ITypeSerializer.GetParseStringSpanFn(System.Type)">
            <summary>
            Gets the parse string span function.
            </summary>
            <param name="type">The type.</param>
            <returns>ParseStringSpanDelegate.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.ITypeSerializer.ParseRawString(System.String)">
            <summary>
            Parses the raw string.
            </summary>
            <param name="value">The value.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.ITypeSerializer.ParseString(System.String)">
            <summary>
            Parses the string.
            </summary>
            <param name="value">The value.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.ITypeSerializer.ParseString(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses the string.
            </summary>
            <param name="value">The value.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.ITypeSerializer.UnescapeString(System.String)">
            <summary>
            Unescapes the string.
            </summary>
            <param name="value">The value.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.ITypeSerializer.UnescapeString(System.ReadOnlySpan{System.Char})">
            <summary>
            Unescapes the string.
            </summary>
            <param name="value">The value.</param>
            <returns>ReadOnlySpan&lt;System.Char&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.ITypeSerializer.UnescapeStringAsObject(System.ReadOnlySpan{System.Char})">
            <summary>
            Unescapes the string as object.
            </summary>
            <param name="value">The value.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.ITypeSerializer.UnescapeSafeString(System.ReadOnlySpan{System.Char})">
            <summary>
            Unescapes the safe string.
            </summary>
            <param name="value">The value.</param>
            <returns>ReadOnlySpan&lt;System.Char&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.ITypeSerializer.EatTypeValue(System.ReadOnlySpan{System.Char},System.Int32@)">
            <summary>
            Eats the type value.
            </summary>
            <param name="value">The value.</param>
            <param name="i">The i.</param>
            <returns>ReadOnlySpan&lt;System.Char&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.ITypeSerializer.EatMapStartChar(System.ReadOnlySpan{System.Char},System.Int32@)">
            <summary>
            Eats the map start character.
            </summary>
            <param name="value">The value.</param>
            <param name="i">The i.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.ITypeSerializer.EatMapKey(System.ReadOnlySpan{System.Char},System.Int32@)">
            <summary>
            Eats the map key.
            </summary>
            <param name="value">The value.</param>
            <param name="i">The i.</param>
            <returns>ReadOnlySpan&lt;System.Char&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.ITypeSerializer.EatMapKeySeperator(System.ReadOnlySpan{System.Char},System.Int32@)">
            <summary>
            Eats the map key seperator.
            </summary>
            <param name="value">The value.</param>
            <param name="i">The i.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.ITypeSerializer.EatWhitespace(System.ReadOnlySpan{System.Char},System.Int32@)">
            <summary>
            Eats the whitespace.
            </summary>
            <param name="value">The value.</param>
            <param name="i">The i.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.ITypeSerializer.EatValue(System.ReadOnlySpan{System.Char},System.Int32@)">
            <summary>
            Eats the value.
            </summary>
            <param name="value">The value.</param>
            <param name="i">The i.</param>
            <returns>ReadOnlySpan&lt;System.Char&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.ITypeSerializer.EatItemSeperatorOrMapEndChar(System.ReadOnlySpan{System.Char},System.Int32@)">
            <summary>
            Eats the item seperator or map end character.
            </summary>
            <param name="value">The value.</param>
            <param name="i">The i.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.Common.WriteDelegate">
            <summary>
            Delegate WriteDelegate
            </summary>
            <param name="writer">The writer.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.Common.ParseFactoryDelegate">
            <summary>
            Delegate ParseFactoryDelegate
            </summary>
            <returns>ParseStringSpanDelegate.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.Common.DeserializeStringSpanDelegate">
            <summary>
            Delegate DeserializeStringSpanDelegate
            </summary>
            <param name="type">The type.</param>
            <param name="source">The source.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.Common.WriteObjectDelegate">
            <summary>
            Delegate WriteObjectDelegate
            </summary>
            <param name="writer">The writer.</param>
            <param name="obj">The object.</param>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.Common.ParseStringDelegate">
            <summary>
            Delegate ParseStringDelegate
            </summary>
            <param name="stringValue">The string value.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.Common.ParseStringSpanDelegate">
            <summary>
            Delegate ParseStringSpanDelegate
            </summary>
            <param name="value">The value.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.Common.ConvertObjectDelegate">
            <summary>
            Delegate ConvertObjectDelegate
            </summary>
            <param name="fromObject">From object.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.Common.ConvertInstanceDelegate">
            <summary>
            Delegate ConvertInstanceDelegate
            </summary>
            <param name="obj">The object.</param>
            <param name="type">The type.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.Common.DeserializationErrorDelegate">
            <summary>
            Delegate DeserializationErrorDelegate
            </summary>
            <param name="instance">The instance.</param>
            <param name="propertyType">Type of the property.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="propertyValueStr">The property value string.</param>
            <param name="ex">The ex.</param>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.Common.JsReader`1">
            <summary>
            Class JsReader.
            </summary>
            <typeparam name="TSerializer">The type of the t serializer.</typeparam>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Common.JsReader`1.Serializer">
            <summary>
            The serializer
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.JsReader`1.GetParseFn``1">
            <summary>
            Gets the parse function.
            </summary>
            <typeparam name="T"></typeparam>
            <returns>ParseStringDelegate.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.JsReader`1.GetParseStringSpanFn``1">
            <summary>
            Gets the parse string span function.
            </summary>
            <typeparam name="T"></typeparam>
            <returns>ParseStringSpanDelegate.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.JsReader`1.GetCoreParseFn``1">
            <summary>
            Gets the core parse function.
            </summary>
            <typeparam name="T"></typeparam>
            <returns>ParseStringDelegate.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.JsReader`1.GetCoreParseStringSpanFn``1">
            <summary>
            Gets the core parse string span function.
            </summary>
            <typeparam name="T"></typeparam>
            <returns>ParseStringSpanDelegate.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.JsReader`1.InitAot``1">
            <summary>
            Initializes the aot.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.Common.JsState">
            <summary>
            Class JsState.
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Common.JsState.WritingKeyCount">
            <summary>
            The writing key count
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Common.JsState.IsWritingValue">
            <summary>
            The is writing value
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Common.JsState.IsWritingDynamic">
            <summary>
            The is writing dynamic
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Common.JsState.IsRuntimeType">
            <summary>
            The is runtime type
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Common.JsState.QueryStringMode">
            <summary>
            The query string mode
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Common.JsState.Depth">
            <summary>
            The depth
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Common.JsState.IsCsv">
            <summary>
            The is CSV
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Common.JsState.DeclaringType">
            <summary>
            The declaring type
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Common.JsState.InSerializerFns">
            <summary>
            The in serializer FNS
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.JsState.RegisterSerializer``1">
            <summary>
            Registers the serializer.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.JsState.UnRegisterSerializer``1">
            <summary>
            Uns the register serializer.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.JsState.InSerializer``1">
            <summary>
            Ins the serializer.
            </summary>
            <typeparam name="T"></typeparam>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Common.JsState.InDeserializerFns">
            <summary>
            The in deserializer FNS
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.JsState.RegisterDeserializer``1">
            <summary>
            Registers the deserializer.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.JsState.UnRegisterDeserializer``1">
            <summary>
            Uns the register deserializer.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.JsState.InDeserializer``1">
            <summary>
            Ins the deserializer.
            </summary>
            <typeparam name="T"></typeparam>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.JsState.Traverse(System.Object)">
            <summary>
            Traverses the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.JsState.UnTraverse">
            <summary>
            Uns the traverse.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.JsState.Reset">
            <summary>
            Resets this instance.
            </summary>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.Common.JsWriter">
            <summary>
            Class JsWriter.
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Common.JsWriter.TypeAttr">
            <summary>
            The type attribute
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Common.JsWriter.MapStartChar">
            <summary>
            The map start character
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Common.JsWriter.MapKeySeperator">
            <summary>
            The map key seperator
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Common.JsWriter.ItemSeperator">
            <summary>
            The item seperator
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Common.JsWriter.MapEndChar">
            <summary>
            The map end character
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Common.JsWriter.EmptyMap">
            <summary>
            The empty map
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Common.JsWriter.ListStartChar">
            <summary>
            The list start character
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Common.JsWriter.ListEndChar">
            <summary>
            The list end character
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Common.JsWriter.ReturnChar">
            <summary>
            The return character
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Common.JsWriter.LineFeedChar">
            <summary>
            The line feed character
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Common.JsWriter.QuoteChar">
            <summary>
            The quote character
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Common.JsWriter.QuoteString">
            <summary>
            The quote string
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Common.JsWriter.EscapedQuoteString">
            <summary>
            The escaped quote string
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Common.JsWriter.ItemSeperatorString">
            <summary>
            The item seperator string
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Common.JsWriter.EscapeChars">
            <summary>
            The escape chars
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Common.JsWriter.LengthFromLargestChar">
            <summary>
            The length from largest character
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Common.JsWriter.EscapeCharFlags">
            <summary>
            The escape character flags
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.JsWriter.#cctor">
            <summary>
            Initializes static members of the <see cref="T:ServiceStack.OrmLite.Base.Text.Common.JsWriter" /> class.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.JsWriter.HasAnyEscapeChars(System.String)">
            <summary>
            micro optimizations: using flags instead of value.IndexOfAny(EscapeChars)
            </summary>
            <param name="value">The value.</param>
            <returns><c>true</c> if [has any escape chars] [the specified value]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.JsWriter.WriteItemSeperatorIfRanOnce(System.IO.TextWriter,System.Boolean@)">
            <summary>
            Writes the item seperator if ran once.
            </summary>
            <param name="writer">The writer.</param>
            <param name="ranOnce">if set to <c>true</c> [ran once].</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.JsWriter.ShouldUseDefaultToStringMethod(System.Type)">
            <summary>
            Shoulds the use default to string method.
            </summary>
            <param name="type">The type.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.JsWriter.GetTypeSerializer``1">
            <summary>
            Gets the type serializer.
            </summary>
            <typeparam name="TSerializer">The type of the t serializer.</typeparam>
            <returns>ITypeSerializer.</returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.JsWriter.WriteEnumFlags(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the enum flags.
            </summary>
            <param name="writer">The writer.</param>
            <param name="enumFlagValue">The enum flag value.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.JsWriter.ShouldAllowRuntimeType(System.Type)">
            <summary>
            Shoulds the type of the allow runtime.
            </summary>
            <param name="type">The type.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.JsWriter.AssertAllowedRuntimeType(System.Type)">
            <summary>
            Asserts the type of the allowed runtime.
            </summary>
            <param name="type">The type.</param>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.Common.JsWriter`1">
            <summary>
            Class JsWriter.
            </summary>
            <typeparam name="TSerializer">The type of the t serializer.</typeparam>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Common.JsWriter`1.Serializer">
            <summary>
            The serializer
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.JsWriter`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.OrmLite.Base.Text.Common.JsWriter`1" /> class.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.JsWriter`1.GetValueTypeToStringMethod(System.Type)">
            <summary>
            Gets the value type to string method.
            </summary>
            <param name="type">The type.</param>
            <returns>WriteObjectDelegate.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.JsWriter`1.GetWriteFn``1">
            <summary>
            Gets the write function.
            </summary>
            <typeparam name="T"></typeparam>
            <returns>WriteObjectDelegate.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.JsWriter`1.WriteValue(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the value.
            </summary>
            <param name="writer">The writer.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.JsWriter`1.ThrowTaskNotSupported(System.IO.TextWriter,System.Object)">
            <summary>
            Throws the task not supported.
            </summary>
            <param name="writer">The writer.</param>
            <param name="value">The value.</param>
            <exception cref="T:System.NotSupportedException">Serializing Task's is not supported. Did you forget to await it?</exception>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.JsWriter`1.GetCoreWriteFn``1">
            <summary>
            Gets the core write function.
            </summary>
            <typeparam name="T"></typeparam>
            <returns>WriteObjectDelegate.</returns>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Common.JsWriter`1.SpecialTypes">
            <summary>
            The special types
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.JsWriter`1.GetSpecialWriteFn(System.Type)">
            <summary>
            Gets the special write function.
            </summary>
            <param name="type">The type.</param>
            <returns>WriteObjectDelegate.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.JsWriter`1.WriteType(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the type.
            </summary>
            <param name="writer">The writer.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.Common.ParseUtils">
            <summary>
            Class ParseUtils.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.ParseUtils.GetSpecialParseMethod(System.Type)">
            <summary>
            Gets the special parse method.
            </summary>
            <param name="type">The type.</param>
            <returns>ParseStringDelegate.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.ParseUtils.ParseType(System.String)">
            <summary>
            Parses the type.
            </summary>
            <param name="assemblyQualifiedName">Name of the assembly qualified.</param>
            <returns>Type.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.ParseUtils.TryParseEnum(System.Type,System.String)">
            <summary>
            Tries the parse enum.
            </summary>
            <param name="enumType">Type of the enum.</param>
            <param name="str">The string.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.Common.ParseDelegate">
            <summary>
            Delegate ParseDelegate
            </summary>
            <param name="value">The value.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.Common.ParseMethodUtilities">
            <summary>
            Class ParseMethodUtilities.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.ParseMethodUtilities.GetParseFn``1(System.String)">
            <summary>
            Gets the parse function.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="parseMethod">The parse method.</param>
            <returns>ParseStringDelegate.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.Common.ParseMethodUtilities.ParseStringSpanGenericDelegate`1">
            <summary>
            Delegate ParseStringSpanGenericDelegate
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The value.</param>
            <returns>T.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.ParseMethodUtilities.GetParseStringSpanFn``1(System.String)">
            <summary>
            Gets the parse string span function.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="parseMethod">The parse method.</param>
            <returns>ParseStringSpanDelegate.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.Common.StaticParseMethod`1">
            <summary>
            Class StaticParseMethod.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Common.StaticParseMethod`1.ParseMethod">
            <summary>
            The parse method
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.Common.StaticParseMethod`1.Parse">
            <summary>
            Gets the parse.
            </summary>
            <value>The parse.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.Common.StaticParseMethod`1.ParseStringSpan">
            <summary>
            Gets the parse string span.
            </summary>
            <value>The parse string span.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.StaticParseMethod`1.#cctor">
            <summary>
            Initializes static members of the <see cref="T:ServiceStack.OrmLite.Base.Text.Common.StaticParseMethod`1" /> class.
            </summary>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.Common.StaticParseRefTypeMethod`2">
            <summary>
            Class StaticParseRefTypeMethod.
            </summary>
            <typeparam name="TSerializer">The type of the t serializer.</typeparam>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Common.StaticParseRefTypeMethod`2.ParseMethod">
            <summary>
            The parse method
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Common.StaticParseRefTypeMethod`2.ParseStringSpanMethod">
            <summary>
            The parse string span method
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.Common.StaticParseRefTypeMethod`2.Parse">
            <summary>
            Gets the parse.
            </summary>
            <value>The parse.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.Common.StaticParseRefTypeMethod`2.ParseStringSpan">
            <summary>
            Gets the parse string span.
            </summary>
            <value>The parse string span.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.StaticParseRefTypeMethod`2.#cctor">
            <summary>
            Initializes static members of the <see cref="T:ServiceStack.OrmLite.Base.Text.Common.StaticParseRefTypeMethod`2" /> class.
            </summary>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.Common.WriteMapDelegate">
            <summary>
            Delegate WriteMapDelegate
            </summary>
            <param name="writer">The writer.</param>
            <param name="oMap">The o map.</param>
            <param name="writeKeyFn">The write key function.</param>
            <param name="writeValueFn">The write value function.</param>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.Common.WriteDictionary`1">
            <summary>
            Class WriteDictionary.
            </summary>
            <typeparam name="TSerializer">The type of the t serializer.</typeparam>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Common.WriteDictionary`1.Serializer">
            <summary>
            The serializer
            </summary>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.Common.WriteDictionary`1.MapKey">
            <summary>
            Class MapKey.
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Common.WriteDictionary`1.MapKey.KeyType">
            <summary>
            The key type
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Common.WriteDictionary`1.MapKey.ValueType">
            <summary>
            The value type
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.WriteDictionary`1.MapKey.#ctor(System.Type,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.OrmLite.Base.Text.Common.WriteDictionary`1.MapKey" /> class.
            </summary>
            <param name="keyType">Type of the key.</param>
            <param name="valueType">Type of the value.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.WriteDictionary`1.MapKey.Equals(ServiceStack.OrmLite.Base.Text.Common.WriteDictionary{`0}.MapKey)">
            <summary>
            Equals the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.WriteDictionary`1.MapKey.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.WriteDictionary`1.MapKey.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Common.WriteDictionary`1.CacheFns">
            <summary>
            The cache FNS
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.WriteDictionary`1.GetWriteGenericDictionary(System.Type,System.Type)">
            <summary>
            Gets the write generic dictionary.
            </summary>
            <param name="keyType">Type of the key.</param>
            <param name="valueType">Type of the value.</param>
            <returns>Action&lt;TextWriter, System.Object, WriteObjectDelegate, WriteObjectDelegate&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.WriteDictionary`1.WriteIDictionary(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the i dictionary.
            </summary>
            <param name="writer">The writer.</param>
            <param name="oMap">The o map.</param>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.Common.ToStringDictionaryMethods`3">
            <summary>
            Class ToStringDictionaryMethods.
            </summary>
            <typeparam name="TKey">The type of the t key.</typeparam>
            <typeparam name="TValue">The type of the t value.</typeparam>
            <typeparam name="TSerializer">The type of the t serializer.</typeparam>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Common.ToStringDictionaryMethods`3.Serializer">
            <summary>
            The serializer
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.ToStringDictionaryMethods`3.WriteIDictionary(System.IO.TextWriter,System.Object,ServiceStack.OrmLite.Base.Text.Common.WriteObjectDelegate,ServiceStack.OrmLite.Base.Text.Common.WriteObjectDelegate)">
            <summary>
            Writes the i dictionary.
            </summary>
            <param name="writer">The writer.</param>
            <param name="oMap">The o map.</param>
            <param name="writeKeyFn">The write key function.</param>
            <param name="writeValueFn">The write value function.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.ToStringDictionaryMethods`3.WriteGenericIDictionary(System.IO.TextWriter,System.Collections.Generic.IDictionary{`0,`1},ServiceStack.OrmLite.Base.Text.Common.WriteObjectDelegate,ServiceStack.OrmLite.Base.Text.Common.WriteObjectDelegate)">
            <summary>
            Writes the generic i dictionary.
            </summary>
            <param name="writer">The writer.</param>
            <param name="map">The map.</param>
            <param name="writeKeyFn">The write key function.</param>
            <param name="writeValueFn">The write value function.</param>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.Common.WriteListsOfElements`1">
            <summary>
            Class WriteListsOfElements.
            </summary>
            <typeparam name="TSerializer">The type of the t serializer.</typeparam>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Common.WriteListsOfElements`1.Serializer">
            <summary>
            The serializer
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Common.WriteListsOfElements`1.ListCacheFns">
            <summary>
            The list cache FNS
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.WriteListsOfElements`1.GetListWriteFn(System.Type)">
            <summary>
            Gets the list write function.
            </summary>
            <param name="elementType">Type of the element.</param>
            <returns>WriteObjectDelegate.</returns>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Common.WriteListsOfElements`1.IListCacheFns">
            <summary>
            The i list cache FNS
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.WriteListsOfElements`1.GetIListWriteFn(System.Type)">
            <summary>
            Gets the i list write function.
            </summary>
            <param name="elementType">Type of the element.</param>
            <returns>WriteObjectDelegate.</returns>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Common.WriteListsOfElements`1.CacheFns">
            <summary>
            The cache FNS
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.WriteListsOfElements`1.GetGenericWriteArray(System.Type)">
            <summary>
            Gets the generic write array.
            </summary>
            <param name="elementType">Type of the element.</param>
            <returns>WriteObjectDelegate.</returns>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Common.WriteListsOfElements`1.EnumerableCacheFns">
            <summary>
            The enumerable cache FNS
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.WriteListsOfElements`1.GetGenericWriteEnumerable(System.Type)">
            <summary>
            Gets the generic write enumerable.
            </summary>
            <param name="elementType">Type of the element.</param>
            <returns>WriteObjectDelegate.</returns>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Common.WriteListsOfElements`1.ListValueTypeCacheFns">
            <summary>
            The list value type cache FNS
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.WriteListsOfElements`1.GetWriteListValueType(System.Type)">
            <summary>
            Gets the type of the write list value.
            </summary>
            <param name="elementType">Type of the element.</param>
            <returns>WriteObjectDelegate.</returns>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Common.WriteListsOfElements`1.IListValueTypeCacheFns">
            <summary>
            The i list value type cache FNS
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.WriteListsOfElements`1.GetWriteIListValueType(System.Type)">
            <summary>
            Gets the type of the write i list value.
            </summary>
            <param name="elementType">Type of the element.</param>
            <returns>WriteObjectDelegate.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.WriteListsOfElements`1.WriteIEnumerable(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the i enumerable.
            </summary>
            <param name="writer">The writer.</param>
            <param name="oValueCollection">The o value collection.</param>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.Common.WriteListsOfElements`2">
            <summary>
            Class WriteListsOfElements.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TSerializer">The type of the t serializer.</typeparam>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Common.WriteListsOfElements`2.ElementWriteFn">
            <summary>
            The element write function
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.WriteListsOfElements`2.#cctor">
            <summary>
            Initializes static members of the <see cref="T:ServiceStack.OrmLite.Base.Text.Common.WriteListsOfElements`2" /> class.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.WriteListsOfElements`2.WriteList(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the list.
            </summary>
            <param name="writer">The writer.</param>
            <param name="oList">The o list.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.WriteListsOfElements`2.WriteListValueType(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the type of the list value.
            </summary>
            <param name="writer">The writer.</param>
            <param name="list">The list.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.WriteListsOfElements`2.WriteGenericListValueType(System.IO.TextWriter,System.Collections.Generic.List{`0})">
            <summary>
            Writes the type of the generic list value.
            </summary>
            <param name="writer">The writer.</param>
            <param name="list">The list.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.WriteListsOfElements`2.WriteIList(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the i list.
            </summary>
            <param name="writer">The writer.</param>
            <param name="oList">The o list.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.WriteListsOfElements`2.WriteGenericIList(System.IO.TextWriter,System.Collections.Generic.IList{`0})">
            <summary>
            Writes the generic i list.
            </summary>
            <param name="writer">The writer.</param>
            <param name="list">The list.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.WriteListsOfElements`2.WriteIListValueType(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the type of the i list value.
            </summary>
            <param name="writer">The writer.</param>
            <param name="list">The list.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.WriteListsOfElements`2.WriteGenericIListValueType(System.IO.TextWriter,System.Collections.Generic.IList{`0})">
            <summary>
            Writes the type of the generic i list value.
            </summary>
            <param name="writer">The writer.</param>
            <param name="list">The list.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.WriteListsOfElements`2.WriteArray(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the array.
            </summary>
            <param name="writer">The writer.</param>
            <param name="oArrayValue">The o array value.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.WriteListsOfElements`2.WriteGenericArrayValueType(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the type of the generic array value.
            </summary>
            <param name="writer">The writer.</param>
            <param name="oArray">The o array.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.WriteListsOfElements`2.WriteGenericArrayValueType(System.IO.TextWriter,`0[])">
            <summary>
            Writes the type of the generic array value.
            </summary>
            <param name="writer">The writer.</param>
            <param name="array">The array.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.WriteListsOfElements`2.WriteGenericArrayMultiDimension(System.IO.TextWriter,System.Array,System.Int32,System.Int32[])">
            <summary>
            Writes the generic array multi dimension.
            </summary>
            <param name="writer">The writer.</param>
            <param name="array">The array.</param>
            <param name="rank">The rank.</param>
            <param name="indices">The indices.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.WriteListsOfElements`2.WriteGenericArray(System.IO.TextWriter,System.Array)">
            <summary>
            Writes the generic array.
            </summary>
            <param name="writer">The writer.</param>
            <param name="array">The array.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.WriteListsOfElements`2.WriteEnumerable(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the enumerable.
            </summary>
            <param name="writer">The writer.</param>
            <param name="oEnumerable">The o enumerable.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.WriteListsOfElements`2.WriteGenericEnumerable(System.IO.TextWriter,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Writes the generic enumerable.
            </summary>
            <param name="writer">The writer.</param>
            <param name="enumerable">The enumerable.</param>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.Common.WriteLists">
            <summary>
            Class WriteLists.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.WriteLists.WriteListString(ServiceStack.OrmLite.Base.Text.Common.ITypeSerializer,System.IO.TextWriter,System.Object)">
            <summary>
            Writes the list string.
            </summary>
            <param name="serializer">The serializer.</param>
            <param name="writer">The writer.</param>
            <param name="list">The list.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.WriteLists.WriteListString(ServiceStack.OrmLite.Base.Text.Common.ITypeSerializer,System.IO.TextWriter,System.Collections.Generic.List{System.String})">
            <summary>
            Writes the list string.
            </summary>
            <param name="serializer">The serializer.</param>
            <param name="writer">The writer.</param>
            <param name="list">The list.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.WriteLists.WriteIListString(ServiceStack.OrmLite.Base.Text.Common.ITypeSerializer,System.IO.TextWriter,System.Object)">
            <summary>
            Writes the i list string.
            </summary>
            <param name="serializer">The serializer.</param>
            <param name="writer">The writer.</param>
            <param name="list">The list.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.WriteLists.WriteIListString(ServiceStack.OrmLite.Base.Text.Common.ITypeSerializer,System.IO.TextWriter,System.Collections.Generic.IList{System.String})">
            <summary>
            Writes the i list string.
            </summary>
            <param name="serializer">The serializer.</param>
            <param name="writer">The writer.</param>
            <param name="list">The list.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.WriteLists.WriteBytes(ServiceStack.OrmLite.Base.Text.Common.ITypeSerializer,System.IO.TextWriter,System.Object)">
            <summary>
            Writes the bytes.
            </summary>
            <param name="serializer">The serializer.</param>
            <param name="writer">The writer.</param>
            <param name="byteValue">The byte value.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.WriteLists.WriteStringArray(ServiceStack.OrmLite.Base.Text.Common.ITypeSerializer,System.IO.TextWriter,System.Object)">
            <summary>
            Writes the string array.
            </summary>
            <param name="serializer">The serializer.</param>
            <param name="writer">The writer.</param>
            <param name="oList">The o list.</param>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.Common.WriteLists`2">
            <summary>
            Class WriteLists.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TSerializer">The type of the t serializer.</typeparam>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Common.WriteLists`2.Serializer">
            <summary>
            The serializer
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.WriteLists`2.#cctor">
            <summary>
            Initializes static members of the <see cref="T:ServiceStack.OrmLite.Base.Text.Common.WriteLists`2" /> class.
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.Common.WriteLists`2.Write">
            <summary>
            Gets the write.
            </summary>
            <value>The write.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.WriteLists`2.GetWriteFn">
            <summary>
            Gets the write function.
            </summary>
            <returns>WriteObjectDelegate.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.Common.WriteType`2">
            <summary>
            Class WriteType.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TSerializer">The type of the t serializer.</typeparam>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Common.WriteType`2.Serializer">
            <summary>
            The serializer
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Common.WriteType`2.PropertyWriters">
            <summary>
            The property writers
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Common.WriteType`2.WriteTypeInfo">
            <summary>
            The write type information
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.Common.WriteType`2.IsIncluded">
            <summary>
            Gets a value indicating whether this instance is included.
            </summary>
            <value><c>true</c> if this instance is included; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.Common.WriteType`2.IsExcluded">
            <summary>
            Gets a value indicating whether this instance is excluded.
            </summary>
            <value><c>true</c> if this instance is excluded; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.WriteType`2.#cctor">
            <summary>
            Initializes static members of the <see cref="T:ServiceStack.OrmLite.Base.Text.Common.WriteType`2" /> class.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.WriteType`2.TypeInfoWriter(System.IO.TextWriter,System.Object)">
            <summary>
            Types the information writer.
            </summary>
            <param name="writer">The writer.</param>
            <param name="obj">The object.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.WriteType`2.ShouldSkipType">
            <summary>
            Shoulds the type of the skip.
            </summary>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.WriteType`2.TryWriteSelfType(System.IO.TextWriter)">
            <summary>
            Tries the type of the write self.
            </summary>
            <param name="writer">The writer.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.WriteType`2.TryWriteTypeInfo(System.IO.TextWriter,System.Object)">
            <summary>
            Tries the write type information.
            </summary>
            <param name="writer">The writer.</param>
            <param name="obj">The object.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.Common.WriteType`2.Write">
            <summary>
            Gets the write.
            </summary>
            <value>The write.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.WriteType`2.GetWriteFn">
            <summary>
            Gets the write function.
            </summary>
            <returns>WriteObjectDelegate.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.WriteType`2.GetShouldSerializeMethod(System.Reflection.MemberInfo)">
            <summary>
            Gets the should serialize method.
            </summary>
            <param name="member">The member.</param>
            <returns>Func&lt;T, System.Boolean&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.WriteType`2.ShouldSerialize(System.Type)">
            <summary>
            Shoulds the serialize.
            </summary>
            <param name="type">The type.</param>
            <returns>Func&lt;T, System.String, System.Nullable&lt;System.Boolean&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.WriteType`2.Init">
            <summary>
            Initializes this instance.
            </summary>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.Common.WriteType`2.TypePropertyWriter">
            <summary>
            Struct TypePropertyWriter
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.WriteType`2.TypePropertyWriter.GetPropertyName(ServiceStack.OrmLite.Base.Text.Config)">
            <summary>
            Gets the name of the property.
            </summary>
            <param name="config">The configuration.</param>
            <returns>System.String.</returns>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Common.WriteType`2.TypePropertyWriter.PropertyType">
            <summary>
            The property type
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Common.WriteType`2.TypePropertyWriter.propertyName">
            <summary>
            The property name
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Common.WriteType`2.TypePropertyWriter.propertyOrder">
            <summary>
            The property order
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Common.WriteType`2.TypePropertyWriter.propertySuppressDefaultConfig">
            <summary>
            The property suppress default configuration
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Common.WriteType`2.TypePropertyWriter.propertySuppressDefaultAttribute">
            <summary>
            The property suppress default attribute
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Common.WriteType`2.TypePropertyWriter.propertyReferenceName">
            <summary>
            The property reference name
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Common.WriteType`2.TypePropertyWriter.propertyNameCLSFriendly">
            <summary>
            The property name CLS friendly
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Common.WriteType`2.TypePropertyWriter.propertyNameLowercaseUnderscore">
            <summary>
            The property name lowercase underscore
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Common.WriteType`2.TypePropertyWriter.GetterFn">
            <summary>
            The getter function
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Common.WriteType`2.TypePropertyWriter.WriteFn">
            <summary>
            The write function
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Common.WriteType`2.TypePropertyWriter.DefaultValue">
            <summary>
            The default value
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Common.WriteType`2.TypePropertyWriter.shouldSerialize">
            <summary>
            The should serialize
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Common.WriteType`2.TypePropertyWriter.shouldSerializeDynamic">
            <summary>
            The should serialize dynamic
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Common.WriteType`2.TypePropertyWriter.isEnum">
            <summary>
            The is enum
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.WriteType`2.TypePropertyWriter.#ctor(System.Type,System.String,System.String,System.String,System.String,System.Int32,System.Boolean,System.Boolean,ServiceStack.OrmLite.Base.Text.GetMemberDelegate{`0},ServiceStack.OrmLite.Base.Text.Common.WriteObjectDelegate,System.Object,System.Func{`0,System.Boolean},System.Func{`0,System.String,System.Nullable{System.Boolean}},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.OrmLite.Base.Text.Common.WriteType`2.TypePropertyWriter" /> struct.
            </summary>
            <param name="propertyType">Type of the property.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="propertyDeclaredTypeName">Name of the property declared type.</param>
            <param name="propertyNameCLSFriendly">The property name CLS friendly.</param>
            <param name="propertyNameLowercaseUnderscore">The property name lowercase underscore.</param>
            <param name="propertyOrder">The property order.</param>
            <param name="propertySuppressDefaultConfig">if set to <c>true</c> [property suppress default configuration].</param>
            <param name="propertySuppressDefaultAttribute">if set to <c>true</c> [property suppress default attribute].</param>
            <param name="getterFn">The getter function.</param>
            <param name="writeFn">The write function.</param>
            <param name="defaultValue">The default value.</param>
            <param name="shouldSerialize">The should serialize.</param>
            <param name="shouldSerializeDynamic">The should serialize dynamic.</param>
            <param name="isEnum">if set to <c>true</c> [is enum].</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.WriteType`2.TypePropertyWriter.ShouldWriteProperty(System.Object,ServiceStack.OrmLite.Base.Text.Config)">
            <summary>
            Shoulds the write property.
            </summary>
            <param name="propertyValue">The property value.</param>
            <param name="config">The configuration.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.WriteType`2.WriteObjectType(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the type of the object.
            </summary>
            <param name="writer">The writer.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.WriteType`2.WriteEmptyType(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the empty type.
            </summary>
            <param name="writer">The writer.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.WriteType`2.WriteAbstractProperties(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the abstract properties.
            </summary>
            <param name="writer">The writer.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.WriteType`2.WriteProperties(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the properties.
            </summary>
            <param name="writer">The writer.</param>
            <param name="instance">The instance.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.WriteType`2.WriteLateboundProperties(System.IO.TextWriter,System.Object,System.Type)">
            <summary>
            Writes the latebound properties.
            </summary>
            <param name="writer">The writer.</param>
            <param name="value">The value.</param>
            <param name="valueType">Type of the value.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Common.WriteType`2.GetPropertyName(System.String,ServiceStack.OrmLite.Base.Text.Config)">
            <summary>
            Gets the name of the property.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="config">The configuration.</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.CsvBehavior">
            <summary>
            Enum CsvBehavior
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.CsvBehavior.FirstEnumerable">
            <summary>
            The first enumerable
            </summary>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.CsvAttribute">
            <summary>
            Class CsvAttribute.
            Implements the <see cref="T:System.Attribute" />
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.CsvAttribute.CsvBehavior">
            <summary>
            Gets or sets the CSV behavior.
            </summary>
            <value>The CSV behavior.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.CsvAttribute.#ctor(ServiceStack.OrmLite.Base.Text.CsvBehavior)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.OrmLite.Base.Text.CsvAttribute" /> class.
            </summary>
            <param name="csvBehavior">The CSV behavior.</param>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.CsvConfig">
            <summary>
            Class CsvConfig.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.CsvConfig.#cctor">
            <summary>
            Initializes static members of the <see cref="T:ServiceStack.OrmLite.Base.Text.CsvConfig" /> class.
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.CsvConfig.sRealNumberCultureInfo">
            <summary>
            The s real number culture information
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.CsvConfig.RealNumberCultureInfo">
            <summary>
            Gets or sets the real number culture information.
            </summary>
            <value>The real number culture information.</value>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.CsvConfig.tsItemSeperatorString">
            <summary>
            The ts item seperator string
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.CsvConfig.sItemSeperatorString">
            <summary>
            The s item seperator string
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.CsvConfig.ItemSeperatorString">
            <summary>
            Gets or sets the item seperator string.
            </summary>
            <value>The item seperator string.</value>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.CsvConfig.tsItemDelimiterString">
            <summary>
            The ts item delimiter string
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.CsvConfig.sItemDelimiterString">
            <summary>
            The s item delimiter string
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.CsvConfig.ItemDelimiterString">
            <summary>
            Gets or sets the item delimiter string.
            </summary>
            <value>The item delimiter string.</value>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.CsvConfig.DefaultEscapedItemDelimiterString">
            <summary>
            The default escaped item delimiter string
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.CsvConfig.tsEscapedItemDelimiterString">
            <summary>
            The ts escaped item delimiter string
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.CsvConfig.sEscapedItemDelimiterString">
            <summary>
            The s escaped item delimiter string
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.CsvConfig.EscapedItemDelimiterString">
            <summary>
            Gets or sets the escaped item delimiter string.
            </summary>
            <value>The escaped item delimiter string.</value>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.CsvConfig.defaultEscapeStrings">
            <summary>
            The default escape strings
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.CsvConfig.tsEscapeStrings">
            <summary>
            The ts escape strings
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.CsvConfig.sEscapeStrings">
            <summary>
            The s escape strings
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.CsvConfig.EscapeStrings">
            <summary>
            Gets the escape strings.
            </summary>
            <value>The escape strings.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.CsvConfig.GetEscapeStrings">
            <summary>
            Gets the escape strings.
            </summary>
            <returns>System.String[].</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.CsvConfig.ResetEscapeStrings">
            <summary>
            Resets the escape strings.
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.CsvConfig.tsRowSeparatorString">
            <summary>
            The ts row separator string
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.CsvConfig.sRowSeparatorString">
            <summary>
            The s row separator string
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.CsvConfig.RowSeparatorString">
            <summary>
            Gets or sets the row separator string.
            </summary>
            <value>The row separator string.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.CsvConfig.Reset">
            <summary>
            Resets this instance.
            </summary>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.CsvConfig`1">
            <summary>
            Class CsvConfig.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.CsvConfig`1.OmitHeaders">
            <summary>
            Gets or sets a value indicating whether [omit headers].
            </summary>
            <value><c>true</c> if [omit headers]; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.CsvReader">
            <summary>
            Class CsvReader.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.CsvReader.ParseLines(System.String)">
            <summary>
            Parses the lines.
            </summary>
            <param name="csv">The CSV.</param>
            <returns>List&lt;System.String&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.CsvReader.ParseFields(System.String)">
            <summary>
            Parses the fields.
            </summary>
            <param name="line">The line.</param>
            <returns>List&lt;System.String&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.CsvReader.ParseFields(System.String,System.Func{System.String,System.String})">
            <summary>
            Parses the fields.
            </summary>
            <param name="line">The line.</param>
            <param name="parseFn">The parse function.</param>
            <returns>List&lt;System.String&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.CsvReader.EatValue(System.String,System.Int32@)">
            <summary>
            Eats the value.
            </summary>
            <param name="value">The value.</param>
            <param name="i">The i.</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.CsvReader`1">
            <summary>
            Class CsvReader.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.CsvReader`1.Headers">
            <summary>
            Gets or sets the headers.
            </summary>
            <value>The headers.</value>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.CsvReader`1.PropertySetters">
            <summary>
            The property setters
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.CsvReader`1.PropertySettersMap">
            <summary>
            The property setters map
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.CsvReader`1.PropertyConverters">
            <summary>
            The property converters
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.CsvReader`1.PropertyConvertersMap">
            <summary>
            The property converters map
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.CsvReader`1.#cctor">
            <summary>
            Initializes static members of the <see cref="T:ServiceStack.OrmLite.Base.Text.CsvReader`1" /> class.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.CsvReader`1.Reset">
            <summary>
            Resets this instance.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.CsvReader`1.GetSingleRow(System.Collections.Generic.IEnumerable{System.String},System.Type)">
            <summary>
            Gets the single row.
            </summary>
            <param name="rows">The rows.</param>
            <param name="recordType">Type of the record.</param>
            <returns>List&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.CsvReader`1.GetRows(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets the rows.
            </summary>
            <param name="records">The records.</param>
            <returns>List&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.CsvReader`1.ReadObject(System.String)">
            <summary>
            Reads the object.
            </summary>
            <param name="csv">The CSV.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.CsvReader`1.ReadObjectRow(System.String)">
            <summary>
            Reads the object row.
            </summary>
            <param name="csv">The CSV.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.CsvReader`1.ReadStringDictionary(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Reads the string dictionary.
            </summary>
            <param name="rows">The rows.</param>
            <returns>List&lt;Dictionary&lt;System.String, System.String&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.CsvReader`1.Read(System.Collections.Generic.List{System.String})">
            <summary>
            Reads the specified rows.
            </summary>
            <param name="rows">The rows.</param>
            <returns>List&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.CsvReader`1.ReadRow(System.String)">
            <summary>
            Reads the row.
            </summary>
            <param name="value">The value.</param>
            <returns>T.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.CsvSerializer">
            <summary>
            Class CsvSerializer.
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.CsvSerializer.UseEncoding">
            <summary>
            Gets or sets the use encoding.
            </summary>
            <value>The use encoding.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.CsvSerializer.OnSerialize">
            <summary>
            Gets or sets the on serialize.
            </summary>
            <value>The on serialize.</value>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.CsvSerializer.WriteFnCache">
            <summary>
            The write function cache
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.CsvSerializer.GetWriteFn(System.Type)">
            <summary>
            Gets the write function.
            </summary>
            <param name="type">The type.</param>
            <returns>WriteObjectDelegate.</returns>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.CsvSerializer.ReadFnCache">
            <summary>
            The read function cache
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.CsvSerializer.GetReadFn(System.Type)">
            <summary>
            Gets the read function.
            </summary>
            <param name="type">The type.</param>
            <returns>ParseStringDelegate.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.CsvSerializer.SerializeToCsv``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Serializes to CSV.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="records">The records.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.CsvSerializer.SerializeToString``1(``0)">
            <summary>
            Serializes to string.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The value.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.CsvSerializer.SerializeToStream``1(``0,System.IO.Stream)">
            <summary>
            Serializes to stream.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The value.</param>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.CsvSerializer.SerializeToStream(System.Object,System.IO.Stream)">
            <summary>
            Serializes to stream.
            </summary>
            <param name="obj">The object.</param>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.CsvSerializer.DeserializeFromString``1(System.String)">
            <summary>
            Deserializes from string.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="text">The text.</param>
            <returns>T.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.CsvSerializer.DeserializeFromString(System.Type,System.String)">
            <summary>
            Deserializes from string.
            </summary>
            <param name="type">The type.</param>
            <param name="text">The text.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.CsvSerializer.WriteLateBoundObject(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the late bound object.
            </summary>
            <param name="writer">The writer.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.CsvSerializer.ReadLateBoundObject(System.Type,System.String)">
            <summary>
            Reads the late bound object.
            </summary>
            <param name="type">The type.</param>
            <param name="value">The value.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.CsvSerializer.ConvertFrom``1(System.Object)">
            <summary>
            Converts from.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="results">The results.</param>
            <returns>T.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.CsvSerializer.ConvertFrom(System.Type,System.Object)">
            <summary>
            Converts from.
            </summary>
            <param name="type">The type.</param>
            <param name="results">The results.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.CsvSerializer.InitAot``1">
            <summary>
            Initializes the aot.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.CsvSerializer.PropertiesFor``1">
            <summary>
            Properties For Type
            </summary>
            <typeparam name="T">the type</typeparam>
            <returns>System.ValueTuple&lt;System.String, Type&gt;[].</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.CsvSerializer`1">
            <summary>
            Class CsvSerializer.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.CsvSerializer`1.WriteCacheFn">
            <summary>
            The write cache function
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.CsvSerializer`1.ReadCacheFn">
            <summary>
            The read cache function
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.CsvSerializer`1.Properties">
            <summary>
            Gets the properties.
            </summary>
            <value>The properties.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.CsvSerializer`1.WriteFn">
            <summary>
            Writes the function.
            </summary>
            <returns>WriteObjectDelegate.</returns>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.CsvSerializer`1.IgnoreResponseStatus">
            <summary>
            The ignore response status
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.CsvSerializer`1.valueGetter">
            <summary>
            The value getter
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.CsvSerializer`1.writeElementFn">
            <summary>
            The write element function
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.CsvSerializer`1.GetWriteFn">
            <summary>
            Gets the write function.
            </summary>
            <returns>WriteObjectDelegate.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.CsvSerializer`1.CreateWriteFn(System.Type)">
            <summary>
            Creates the write function.
            </summary>
            <param name="elementType">Type of the element.</param>
            <returns>WriteObjectDelegate.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.CsvSerializer`1.CreateWriteRowFn(System.Type)">
            <summary>
            Creates the write row function.
            </summary>
            <param name="elementType">Type of the element.</param>
            <returns>WriteObjectDelegate.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.CsvSerializer`1.CreateCsvWriterFn(System.Type,System.String)">
            <summary>
            Creates the CSV writer function.
            </summary>
            <param name="elementType">Type of the element.</param>
            <param name="methodName">Name of the method.</param>
            <returns>WriteObjectDelegate.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.CsvSerializer`1.WriteEnumerableType(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the type of the enumerable.
            </summary>
            <param name="writer">The writer.</param>
            <param name="obj">The object.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.CsvSerializer`1.WriteSelf(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the self.
            </summary>
            <param name="writer">The writer.</param>
            <param name="obj">The object.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.CsvSerializer`1.WriteEnumerableProperty(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the enumerable property.
            </summary>
            <param name="writer">The writer.</param>
            <param name="obj">The object.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.CsvSerializer`1.WriteNonEnumerableType(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the type of the non enumerable.
            </summary>
            <param name="writer">The writer.</param>
            <param name="obj">The object.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.CsvSerializer`1.WriteObject(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the object.
            </summary>
            <param name="writer">The writer.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.CsvSerializer`1.#cctor">
            <summary>
            Initializes static members of the <see cref="T:ServiceStack.OrmLite.Base.Text.CsvSerializer`1" /> class.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.CsvSerializer`1.ReadFn">
            <summary>
            Reads the function.
            </summary>
            <returns>ParseStringDelegate.</returns>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.CsvSerializer`1.valueSetter">
            <summary>
            The value setter
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.CsvSerializer`1.readElementFn">
            <summary>
            The read element function
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.CsvSerializer`1.GetReadFn">
            <summary>
            Gets the read function.
            </summary>
            <returns>ParseStringDelegate.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.CsvSerializer`1.CreateReadFn(System.Type)">
            <summary>
            Creates the read function.
            </summary>
            <param name="elementType">Type of the element.</param>
            <returns>ParseStringDelegate.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.CsvSerializer`1.CreateReadRowFn(System.Type)">
            <summary>
            Creates the read row function.
            </summary>
            <param name="elementType">Type of the element.</param>
            <returns>ParseStringDelegate.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.CsvSerializer`1.CreateCsvReadFn(System.Type,System.String)">
            <summary>
            Creates the CSV read function.
            </summary>
            <param name="elementType">Type of the element.</param>
            <param name="methodName">Name of the method.</param>
            <returns>ParseStringDelegate.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.CsvSerializer`1.ReadEnumerableType(System.String)">
            <summary>
            Reads the type of the enumerable.
            </summary>
            <param name="value">The value.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.CsvSerializer`1.ReadSelf(System.String)">
            <summary>
            Reads the self.
            </summary>
            <param name="value">The value.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.CsvSerializer`1.ReadEnumerableProperty(System.String)">
            <summary>
            Reads the enumerable property.
            </summary>
            <param name="row">The row.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.CsvSerializer`1.ReadNonEnumerableType(System.String)">
            <summary>
            Reads the type of the non enumerable.
            </summary>
            <param name="row">The row.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.CsvSerializer`1.ReadObject(System.String)">
            <summary>
            Reads the object.
            </summary>
            <param name="value">The value.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.CsvStreamExtensions">
            <summary>
            Class CsvStreamExtensions.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.CsvStreamExtensions.WriteCsv``1(System.IO.Stream,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Writes the CSV.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="outputStream">The output stream.</param>
            <param name="records">The records.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.CsvStreamExtensions.WriteCsv``1(System.IO.TextWriter,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Writes the CSV.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="writer">The writer.</param>
            <param name="records">The records.</param>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.CsvDictionaryWriter">
            <summary>
            Class CsvDictionaryWriter.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.CsvDictionaryWriter.WriteRow(System.IO.TextWriter,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Writes the row.
            </summary>
            <param name="writer">The writer.</param>
            <param name="row">The row.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.CsvDictionaryWriter.WriteObjectRow(System.IO.TextWriter,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Writes the object row.
            </summary>
            <param name="writer">The writer.</param>
            <param name="row">The row.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.CsvDictionaryWriter.Write(System.IO.TextWriter,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Writes the specified writer.
            </summary>
            <param name="writer">The writer.</param>
            <param name="records">The records.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.CsvDictionaryWriter.Write(System.IO.TextWriter,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Writes the specified writer.
            </summary>
            <param name="writer">The writer.</param>
            <param name="records">The records.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.CsvDictionaryWriter.Write(System.IO.TextWriter,System.Collections.Generic.IEnumerable{System.Collections.Generic.IDictionary{System.String,System.Object}})">
            <summary>
            Writes the specified writer.
            </summary>
            <param name="writer">The writer.</param>
            <param name="records">The records.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.CsvDictionaryWriter.Write(System.IO.TextWriter,System.Collections.Generic.IEnumerable{System.Collections.Generic.IDictionary{System.String,System.String}})">
            <summary>
            Writes the specified writer.
            </summary>
            <param name="writer">The writer.</param>
            <param name="records">The records.</param>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.CsvWriter">
            <summary>
            Class CsvWriter.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.CsvWriter.HasAnyEscapeChars(System.String)">
            <summary>
            Determines whether [has any escape chars] [the specified value].
            </summary>
            <param name="value">The value.</param>
            <returns><c>true</c> if [has any escape chars] [the specified value]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.CsvWriter.WriteItemSeperatorIfRanOnce(System.IO.TextWriter,System.Boolean@)">
            <summary>
            Writes the item seperator if ran once.
            </summary>
            <param name="writer">The writer.</param>
            <param name="ranOnce">if set to <c>true</c> [ran once].</param>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.CsvWriter`1">
            <summary>
            Class CsvWriter.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.CsvWriter`1.DelimiterChar">
            <summary>
            The delimiter character
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.CsvWriter`1.Headers">
            <summary>
            Gets or sets the headers.
            </summary>
            <value>The headers.</value>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.CsvWriter`1.PropertyGetters">
            <summary>
            The property getters
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.CsvWriter`1.PropertyInfos">
            <summary>
            The property infos
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.CsvWriter`1.OptimizedWriter">
            <summary>
            The optimized writer
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.CsvWriter`1.#cctor">
            <summary>
            Initializes static members of the <see cref="T:ServiceStack.OrmLite.Base.Text.CsvWriter`1" /> class.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.CsvWriter`1.Reset">
            <summary>
            Resets this instance.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.CsvWriter`1.GetSingleRow(System.Collections.Generic.IEnumerable{`0},System.Type)">
            <summary>
            Gets the single row.
            </summary>
            <param name="records">The records.</param>
            <param name="recordType">Type of the record.</param>
            <returns>List&lt;System.String&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.CsvWriter`1.GetRows(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Gets the rows.
            </summary>
            <param name="records">The records.</param>
            <returns>List&lt;List&lt;System.String&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.CsvWriter`1.WriteObject(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the object.
            </summary>
            <param name="writer">The writer.</param>
            <param name="records">The records.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.CsvWriter`1.WriteObjectRow(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the object row.
            </summary>
            <param name="writer">The writer.</param>
            <param name="record">The record.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.CsvWriter`1.Write(System.IO.TextWriter,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Writes the specified writer.
            </summary>
            <param name="writer">The writer.</param>
            <param name="records">The records.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.CsvWriter`1.WriteRow(System.IO.TextWriter,`0)">
            <summary>
            Writes the row.
            </summary>
            <param name="writer">The writer.</param>
            <param name="row">The row.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.CsvWriter`1.WriteRow(System.IO.TextWriter,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Writes the row.
            </summary>
            <param name="writer">The writer.</param>
            <param name="row">The row.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.CsvWriter`1.Write(System.IO.TextWriter,System.Collections.Generic.IEnumerable{System.Collections.Generic.List{System.String}})">
            <summary>
            Writes the specified writer.
            </summary>
            <param name="writer">The writer.</param>
            <param name="rows">The rows.</param>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.DateTimeExtensions">
            <summary>
            A fast, standards-based, serialization-issue free DateTime serializer.
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.DateTimeExtensions.UnixEpoch">
            <summary>
            The unix epoch
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.DateTimeExtensions.UnixEpochDateTimeUtc">
            <summary>
            The unix epoch date time UTC
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.DateTimeExtensions.UnixEpochDateTimeUnspecified">
            <summary>
            The unix epoch date time unspecified
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.DateTimeExtensions.MinDateTimeUtc">
            <summary>
            The minimum date time UTC
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DateTimeExtensions.FromUnixTime(System.Int32)">
            <summary>
            Froms the unix time.
            </summary>
            <param name="unixTime">The unix time.</param>
            <returns>DateTime.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DateTimeExtensions.ToUnixTimeMs(System.DateTime)">
            <summary>
            Converts to unixtimems.
            </summary>
            <param name="dateTime">The date time.</param>
            <returns>System.Int64.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DateTimeExtensions.ToUnixTime(System.DateTime)">
            <summary>
            Converts to unixtime.
            </summary>
            <param name="dateTime">The date time.</param>
            <returns>System.Int64.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DateTimeExtensions.ToDateTimeSinceUnixEpoch(System.DateTime)">
            <summary>
            Converts to datetimesinceunixepoch.
            </summary>
            <param name="dateTime">The date time.</param>
            <returns>TimeSpan.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DateTimeExtensions.ToUnixTimeMs(System.Int64)">
            <summary>
            Converts to unixtimems.
            </summary>
            <param name="ticks">The ticks.</param>
            <returns>System.Int64.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DateTimeExtensions.ToUnixTimeMs(System.DateOnly)">
            <summary>
            Converts to unixtimems.
            </summary>
            <param name="dateOnly">The date only.</param>
            <returns>System.Int64.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DateTimeExtensions.ToUnixTime(System.DateOnly)">
            <summary>
            Converts to unixtime.
            </summary>
            <param name="dateOnly">The date only.</param>
            <returns>System.Int64.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DateTimeExtensions.FromUnixTimeMs(System.Int64)">
            <summary>
            Froms the unix time ms.
            </summary>
            <param name="msSince1970">The ms since1970.</param>
            <returns>DateTime.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DateTimeExtensions.FromUnixTimeMs(System.Int64,System.TimeSpan)">
            <summary>
            Froms the unix time ms.
            </summary>
            <param name="msSince1970">The ms since1970.</param>
            <param name="offset">The offset.</param>
            <returns>DateTime.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DateTimeExtensions.RoundToSecond(System.DateTime)">
            <summary>
            Rounds to second.
            </summary>
            <param name="dateTime">The date time.</param>
            <returns>DateTime.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DateTimeExtensions.Truncate(System.DateTime,System.TimeSpan)">
            <summary>
            Truncates the specified time span.
            </summary>
            <param name="dateTime">The date time.</param>
            <param name="timeSpan">The time span.</param>
            <returns>DateTime.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DateTimeExtensions.ToTimeOffsetString(System.TimeSpan,System.String)">
            <summary>
            Converts to timeoffsetstring.
            </summary>
            <param name="offset">The offset.</param>
            <param name="seperator">The seperator.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DateTimeExtensions.FromTimeOffsetString(System.String)">
            <summary>
            Froms the time offset string.
            </summary>
            <param name="offsetString">The offset string.</param>
            <returns>TimeSpan.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DateTimeExtensions.ToStableUniversalTime(System.DateTime)">
            <summary>
            Converts to stableuniversaltime.
            </summary>
            <param name="dateTime">The date time.</param>
            <returns>DateTime.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.DefaultMemory">
            <summary>
            Class DefaultMemory. This class cannot be inherited.
            Implements the <see cref="T:ServiceStack.OrmLite.Base.Text.MemoryProvider" />
            </summary>
            <seealso cref="T:ServiceStack.OrmLite.Base.Text.MemoryProvider" />
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.DefaultMemory.provider">
            <summary>
            The provider
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.DefaultMemory.Provider">
            <summary>
            Gets the provider.
            </summary>
            <value>The provider.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DefaultMemory.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:ServiceStack.OrmLite.Base.Text.DefaultMemory" /> class from being created.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DefaultMemory.Configure">
            <summary>
            Configures this instance.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DefaultMemory.ParseBoolean(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses the boolean.
            </summary>
            <param name="value">The value.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
            <exception cref="T:System.FormatException"></exception>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DefaultMemory.TryParseBoolean(System.ReadOnlySpan{System.Char},System.Boolean@)">
            <summary>
            Tries the parse boolean.
            </summary>
            <param name="value">The value.</param>
            <param name="result">if set to <c>true</c> [result].</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DefaultMemory.TryParseDecimal(System.ReadOnlySpan{System.Char},System.Decimal@)">
            <summary>
            Tries the parse decimal.
            </summary>
            <param name="value">The value.</param>
            <param name="result">The result.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DefaultMemory.ParseDecimal(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses the decimal.
            </summary>
            <param name="value">The value.</param>
            <returns>System.Decimal.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DefaultMemory.ParseDecimal(System.ReadOnlySpan{System.Char},System.Boolean)">
            <summary>
            Parses the decimal.
            </summary>
            <param name="value">The value.</param>
            <param name="allowThousands">if set to <c>true</c> [allow thousands].</param>
            <returns>System.Decimal.</returns>
            <exception cref="T:System.FormatException"></exception>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DefaultMemory.TryParseFloat(System.ReadOnlySpan{System.Char},System.Single@)">
            <summary>
            Tries the parse float.
            </summary>
            <param name="value">The value.</param>
            <param name="result">The result.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DefaultMemory.ParseFloat(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses the float.
            </summary>
            <param name="value">The value.</param>
            <returns>System.Single.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DefaultMemory.TryParseDouble(System.ReadOnlySpan{System.Char},System.Double@)">
            <summary>
            Tries the parse double.
            </summary>
            <param name="value">The value.</param>
            <param name="result">The result.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DefaultMemory.ParseDouble(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses the double.
            </summary>
            <param name="value">The value.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DefaultMemory.ParseSByte(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses the s byte.
            </summary>
            <param name="value">The value.</param>
            <returns>System.SByte.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DefaultMemory.ParseByte(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses the byte.
            </summary>
            <param name="value">The value.</param>
            <returns>System.Byte.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DefaultMemory.ParseInt32(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses the int32.
            </summary>
            <param name="value">The value.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DefaultMemory.ParseUInt32(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles)">
            <summary>
            Parses the u int32.
            </summary>
            <param name="value">The value.</param>
            <param name="style">The style.</param>
            <returns>System.UInt32.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DefaultMemory.CreateOverflowException(System.Int64)">
            <summary>
            Creates the overflow exception.
            </summary>
            <param name="maxValue">The maximum value.</param>
            <returns>Exception.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DefaultMemory.CreateOverflowException(System.UInt64)">
            <summary>
            Creates the overflow exception.
            </summary>
            <param name="maxValue">The maximum value.</param>
            <returns>Exception.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DefaultMemory.SignedMaxValueToIntType(System.Int64)">
            <summary>
            Signeds the maximum type of the value to int.
            </summary>
            <param name="maxValue">The maximum value.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DefaultMemory.UnsignedMaxValueToIntType(System.UInt64)">
            <summary>
            Unsigneds the maximum type of the value to int.
            </summary>
            <param name="maxValue">The maximum value.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DefaultMemory.TryParseDecimal(System.ReadOnlySpan{System.Char},System.Boolean,System.Decimal@)">
            <summary>
            Tries the parse decimal.
            </summary>
            <param name="value">The value.</param>
            <param name="allowThousands">if set to <c>true</c> [allow thousands].</param>
            <param name="result">The result.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.DefaultMemory.lo16">
            <summary>
            The lo16
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.DefaultMemory.hi16">
            <summary>
            The hi16
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DefaultMemory.ParseGuid(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses the unique identifier.
            </summary>
            <param name="value">The value.</param>
            <returns>Guid.</returns>
            <exception cref="T:System.FormatException"></exception>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DefaultMemory.Write(System.IO.Stream,System.ReadOnlyMemory{System.Char})">
            <summary>
            Writes the specified stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DefaultMemory.Write(System.IO.Stream,System.ReadOnlyMemory{System.Byte})">
            <summary>
            Writes the specified stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DefaultMemory.WriteAsync(System.IO.Stream,System.ReadOnlySpan{System.Char},System.Threading.CancellationToken)">
            <summary>
            Writes the asynchronous.
            </summary>
            <param name="stream">The stream.</param>
            <param name="value">The value.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DefaultMemory.WriteAsyncAndReturn(System.IO.Stream,System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Writes the asynchronous and return.
            </summary>
            <param name="stream">The stream.</param>
            <param name="bytes">The bytes.</param>
            <param name="offset">The offset.</param>
            <param name="count">The count.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DefaultMemory.WriteAsync(System.IO.Stream,System.ReadOnlyMemory{System.Char},System.Threading.CancellationToken)">
            <summary>
            Writes the asynchronous.
            </summary>
            <param name="stream">The stream.</param>
            <param name="value">The value.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DefaultMemory.WriteAsync(System.IO.Stream,System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Write as an asynchronous operation.
            </summary>
            <param name="stream">The stream.</param>
            <param name="value">The value.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>A Task representing the asynchronous operation.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DefaultMemory.Deserialize(System.IO.Stream,System.Type,ServiceStack.OrmLite.Base.Text.Common.DeserializeStringSpanDelegate)">
            <summary>
            Deserializes the specified stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="type">The type.</param>
            <param name="deserializer">The deserializer.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DefaultMemory.DeserializeAsync(System.IO.Stream,System.Type,ServiceStack.OrmLite.Base.Text.Common.DeserializeStringSpanDelegate)">
            <summary>
            Deserialize as an asynchronous operation.
            </summary>
            <param name="stream">The stream.</param>
            <param name="type">The type.</param>
            <param name="deserializer">The deserializer.</param>
            <returns>A Task&lt;System.Object&gt; representing the asynchronous operation.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DefaultMemory.Deserialize(System.IO.MemoryStream,System.Boolean,System.Type,ServiceStack.OrmLite.Base.Text.Common.DeserializeStringSpanDelegate)">
            <summary>
            Deserializes the specified ms.
            </summary>
            <param name="ms">The ms.</param>
            <param name="fromPool">if set to <c>true</c> [from pool].</param>
            <param name="type">The type.</param>
            <param name="deserializer">The deserializer.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DefaultMemory.ParseBase64(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses the base64.
            </summary>
            <param name="value">The value.</param>
            <returns>System.Byte[].</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DefaultMemory.Append(System.Text.StringBuilder,System.ReadOnlySpan{System.Char})">
            <summary>
            Appends the specified sb.
            </summary>
            <param name="sb">The sb.</param>
            <param name="value">The value.</param>
            <returns>StringBuilder.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DefaultMemory.ParseGeneralStyleGuid(System.ReadOnlySpan{System.Char},System.Int32@)">
            <summary>
            Parses the general style unique identifier.
            </summary>
            <param name="value">The value.</param>
            <param name="len">The length.</param>
            <returns>Guid.</returns>
            <exception cref="T:System.FormatException"></exception>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DefaultMemory.ParseHexByte(System.Char,System.Char)">
            <summary>
            Parses the hexadecimal byte.
            </summary>
            <param name="c1">The c1.</param>
            <param name="c2">The c2.</param>
            <returns>System.Byte.</returns>
            <exception cref="T:System.FormatException"></exception>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.ParseState">
            <summary>
            Enum ParseState
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.ParseState.LeadingWhite">
            <summary>
            The leading white
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.ParseState.Sign">
            <summary>
            The sign
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.ParseState.Number">
            <summary>
            The number
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.ParseState.DecimalPoint">
            <summary>
            The decimal point
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.ParseState.FractionNumber">
            <summary>
            The fraction number
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.ParseState.Exponent">
            <summary>
            The exponent
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.ParseState.ExponentSign">
            <summary>
            The exponent sign
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.ParseState.TrailingWhite">
            <summary>
            The trailing white
            </summary>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.SignedInteger`1">
            <summary>
            Class SignedInteger.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.SignedInteger`1.typeCode">
            <summary>
            The type code
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.SignedInteger`1.minValue">
            <summary>
            The minimum value
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.SignedInteger`1.maxValue">
            <summary>
            The maximum value
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.SignedInteger`1.#cctor">
            <summary>
            Initializes static members of the <see cref="T:ServiceStack.OrmLite.Base.Text.SignedInteger`1" /> class.
            </summary>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.SignedInteger`1.ParseNullableObject(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses the nullable object.
            </summary>
            <param name="value">The value.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.SignedInteger`1.ParseObject(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses the object.
            </summary>
            <param name="value">The value.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.SignedInteger`1.ParseSByte(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses the s byte.
            </summary>
            <param name="value">The value.</param>
            <returns>System.SByte.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.SignedInteger`1.ParseInt32(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses the int32.
            </summary>
            <param name="value">The value.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.SignedInteger`1.ParseInt64(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses the int64.
            </summary>
            <param name="value">The value.</param>
            <returns>System.Int64.</returns>
            <exception cref="T:System.FormatException"></exception>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.UnsignedInteger`1">
            <summary>
            Class UnsignedInteger.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.UnsignedInteger`1.typeCode">
            <summary>
            The type code
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.UnsignedInteger`1.maxValue">
            <summary>
            The maximum value
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.UnsignedInteger`1.#cctor">
            <summary>
            Initializes static members of the <see cref="T:ServiceStack.OrmLite.Base.Text.UnsignedInteger`1" /> class.
            </summary>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.UnsignedInteger`1.ParseNullableObject(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses the nullable object.
            </summary>
            <param name="value">The value.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.UnsignedInteger`1.ParseObject(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses the object.
            </summary>
            <param name="value">The value.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.UnsignedInteger`1.ParseByte(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses the byte.
            </summary>
            <param name="value">The value.</param>
            <returns>System.Byte.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.UnsignedInteger`1.ParseUInt64(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses the u int64.
            </summary>
            <param name="value">The value.</param>
            <returns>System.UInt64.</returns>
            <exception cref="T:System.FormatException"></exception>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.Diagnostics">
            <summary>
            Class Diagnostics.
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Diagnostics.Instance">
            <summary>
            The instance
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Diagnostics.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:ServiceStack.OrmLite.Base.Text.Diagnostics"/> class from being created.
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Diagnostics.includeStackTrace">
            <summary>
            The include stack trace
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.Diagnostics.IncludeStackTrace">
            <summary>
            Gets or sets a value indicating whether [include stack trace].
            </summary>
            <value><c>true</c> if [include stack trace]; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.Diagnostics.Listeners">
            <summary>
            Class Listeners.
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Diagnostics.Listeners.ServiceStack">
            <summary>
            The service stack
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Diagnostics.Listeners.OrmLite">
            <summary>
            The orm lite
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Diagnostics.Listeners.Redis">
            <summary>
            The redis
            </summary>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.Diagnostics.Events">
            <summary>
            Class Events.
            </summary>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.Diagnostics.Events.ServiceStack">
            <summary>
            Class ServiceStack.
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Diagnostics.Events.ServiceStack.Prefix">
            <summary>
            The prefix
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Diagnostics.Events.ServiceStack.WriteRequestBefore">
            <summary>
            The write request before
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Diagnostics.Events.ServiceStack.WriteRequestAfter">
            <summary>
            The write request after
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Diagnostics.Events.ServiceStack.WriteRequestError">
            <summary>
            The write request error
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Diagnostics.Events.ServiceStack.WriteGatewayBefore">
            <summary>
            The write gateway before
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Diagnostics.Events.ServiceStack.WriteGatewayAfter">
            <summary>
            The write gateway after
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Diagnostics.Events.ServiceStack.WriteGatewayError">
            <summary>
            The write gateway error
            </summary>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.Diagnostics.Events.OrmLite">
            <summary>
            Class OrmLite.
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Diagnostics.Events.OrmLite.Prefix">
            <summary>
            The prefix
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Diagnostics.Events.OrmLite.WriteCommandBefore">
            <summary>
            The write command before
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Diagnostics.Events.OrmLite.WriteCommandAfter">
            <summary>
            The write command after
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Diagnostics.Events.OrmLite.WriteCommandError">
            <summary>
            The write command error
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Diagnostics.Events.OrmLite.WriteConnectionOpenBefore">
            <summary>
            The write connection open before
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Diagnostics.Events.OrmLite.WriteConnectionOpenAfter">
            <summary>
            The write connection open after
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Diagnostics.Events.OrmLite.WriteConnectionOpenError">
            <summary>
            The write connection open error
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Diagnostics.Events.OrmLite.WriteConnectionCloseBefore">
            <summary>
            The write connection close before
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Diagnostics.Events.OrmLite.WriteConnectionCloseAfter">
            <summary>
            The write connection close after
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Diagnostics.Events.OrmLite.WriteConnectionCloseError">
            <summary>
            The write connection close error
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Diagnostics.Events.OrmLite.WriteTransactionOpen">
            <summary>
            The write transaction open
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Diagnostics.Events.OrmLite.WriteTransactionCommitBefore">
            <summary>
            The write transaction commit before
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Diagnostics.Events.OrmLite.WriteTransactionCommitAfter">
            <summary>
            The write transaction commit after
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Diagnostics.Events.OrmLite.WriteTransactionCommitError">
            <summary>
            The write transaction commit error
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Diagnostics.Events.OrmLite.WriteTransactionRollbackBefore">
            <summary>
            The write transaction rollback before
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Diagnostics.Events.OrmLite.WriteTransactionRollbackAfter">
            <summary>
            The write transaction rollback after
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Diagnostics.Events.OrmLite.WriteTransactionRollbackError">
            <summary>
            The write transaction rollback error
            </summary>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.Diagnostics.Activity">
            <summary>
            Class Activity.
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Diagnostics.Activity.HttpBegin">
            <summary>
            The HTTP begin
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Diagnostics.Activity.HttpEnd">
            <summary>
            The HTTP end
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Diagnostics.Activity.OperationId">
            <summary>
            The operation identifier
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Diagnostics.Activity.UserId">
            <summary>
            The user identifier
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Diagnostics.Activity.Tag">
            <summary>
            The tag
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.Diagnostics.servicestack">
            <summary>
            Gets or sets the servicestack.
            </summary>
            <value>The servicestack.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.Diagnostics.ormlite">
            <summary>
            Gets or sets the ormlite.
            </summary>
            <value>The ormlite.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.Diagnostics.redis">
            <summary>
            Gets or sets the redis.
            </summary>
            <value>The redis.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.Diagnostics.ServiceStack">
            <summary>
            Gets the service stack.
            </summary>
            <value>The service stack.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.Diagnostics.OrmLite">
            <summary>
            Gets the orm lite.
            </summary>
            <value>The orm lite.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.Diagnostics.Redis">
            <summary>
            Gets the redis.
            </summary>
            <value>The redis.</value>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.ProfileSource">
            <summary>
            Enum ProfileSource
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.ProfileSource.None">
            <summary>
            The none
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.ProfileSource.ServiceStack">
            <summary>
            The service stack
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.ProfileSource.Redis">
            <summary>
            The redis
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.ProfileSource.OrmLite">
            <summary>
            The orm lite
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.ProfileSource.All">
            <summary>
            All
            </summary>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.DiagnosticEvent">
            <summary>
            Class DiagnosticEvent.
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.DiagnosticEvent.Source">
            <summary>
            Gets the source.
            </summary>
            <value>The source.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.DiagnosticEvent.EventType">
            <summary>
            Gets or sets the type of the event.
            </summary>
            <value>The type of the event.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.DiagnosticEvent.OperationId">
            <summary>
            Gets or sets the operation identifier.
            </summary>
            <value>The operation identifier.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.DiagnosticEvent.Operation">
            <summary>
            Gets or sets the operation.
            </summary>
            <value>The operation.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.DiagnosticEvent.TraceId">
            <summary>
            Gets or sets the trace identifier.
            </summary>
            <value>The trace identifier.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.DiagnosticEvent.UserAuthId">
            <summary>
            Gets or sets the user authentication identifier.
            </summary>
            <value>The user authentication identifier.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.DiagnosticEvent.Exception">
            <summary>
            Gets or sets the exception.
            </summary>
            <value>The exception.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.DiagnosticEvent.Timestamp">
            <summary>
            Gets or sets the timestamp.
            </summary>
            <value>The timestamp.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.DiagnosticEvent.Tag">
            <summary>
            Gets or sets the tag.
            </summary>
            <value>The tag.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.DiagnosticEvent.StackTrace">
            <summary>
            Gets or sets the stack trace.
            </summary>
            <value>The stack trace.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.DiagnosticEvent.Meta">
            <summary>
            Gets or sets the meta.
            </summary>
            <value>The meta.</value>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.OrmLiteDiagnosticEvent">
            <summary>
            Class OrmLiteDiagnosticEvent.
            Implements the <see cref="T:ServiceStack.OrmLite.Base.Text.DiagnosticEvent" />
            </summary>
            <seealso cref="T:ServiceStack.OrmLite.Base.Text.DiagnosticEvent" />
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.OrmLiteDiagnosticEvent.Source">
            <summary>
            Gets the source.
            </summary>
            <value>The source.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.OrmLiteDiagnosticEvent.ConnectionId">
            <summary>
            Gets or sets the connection identifier.
            </summary>
            <value>The connection identifier.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.OrmLiteDiagnosticEvent.Connection">
            <summary>
            Gets or sets the connection.
            </summary>
            <value>The connection.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.OrmLiteDiagnosticEvent.Command">
            <summary>
            Gets or sets the command.
            </summary>
            <value>The command.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.OrmLiteDiagnosticEvent.IsolationLevel">
            <summary>
            Gets or sets the isolation level.
            </summary>
            <value>The isolation level.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.OrmLiteDiagnosticEvent.TransactionName">
            <summary>
            Gets or sets the name of the transaction.
            </summary>
            <value>The name of the transaction.</value>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.DiagnosticsUtils">
            <summary>
            Class DiagnosticsUtils.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DiagnosticsUtils.GetRoot(System.Diagnostics.Activity)">
            <summary>
            Gets the root.
            </summary>
            <param name="activity">The activity.</param>
            <returns>System.Nullable&lt;Activity&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DiagnosticsUtils.GetTraceId(System.Diagnostics.Activity)">
            <summary>
            Gets the trace identifier.
            </summary>
            <param name="activity">The activity.</param>
            <returns>System.Nullable&lt;System.String&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DiagnosticsUtils.GetUserId(System.Diagnostics.Activity)">
            <summary>
            Gets the user identifier.
            </summary>
            <param name="activity">The activity.</param>
            <returns>System.Nullable&lt;System.String&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DiagnosticsUtils.GetTag(System.Diagnostics.Activity)">
            <summary>
            Gets the tag.
            </summary>
            <param name="activity">The activity.</param>
            <returns>System.Nullable&lt;System.String&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DiagnosticsUtils.Init``1(``0,System.Diagnostics.Activity)">
            <summary>
            Initializes the specified activity.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="evt">The evt.</param>
            <param name="activity">The activity.</param>
            <returns>T.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.DirectStreamWriter">
            <summary>
            Class DirectStreamWriter.
            Implements the <see cref="T:System.IO.TextWriter" />
            </summary>
            <seealso cref="T:System.IO.TextWriter" />
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.DirectStreamWriter.optimizedBufferLength">
            <summary>
            The optimized buffer length
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.DirectStreamWriter.maxBufferLength">
            <summary>
            The maximum buffer length
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.DirectStreamWriter.stream">
            <summary>
            The stream
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.DirectStreamWriter.writer">
            <summary>
            The writer
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.DirectStreamWriter.curChar">
            <summary>
            The current character
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.DirectStreamWriter.needFlush">
            <summary>
            The need flush
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.DirectStreamWriter.Encoding">
            <summary>
            When overridden in a derived class, returns the character encoding in which the output is written.
            </summary>
            <value>The encoding.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DirectStreamWriter.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.OrmLite.Base.Text.DirectStreamWriter" /> class.
            </summary>
            <param name="stream">The stream.</param>
            <param name="encoding">The encoding.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DirectStreamWriter.Write(System.String)">
            <summary>
            Writes the specified s.
            </summary>
            <param name="s">The s.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DirectStreamWriter.Write(System.Char)">
            <summary>
            Writes the specified c.
            </summary>
            <param name="c">The c.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DirectStreamWriter.Flush">
            <summary>
            Flushes this instance.
            </summary>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.IDynamicNumber">
            <summary>
            Interface IDynamicNumber
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.IDynamicNumber.Type">
            <summary>
            Gets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.IDynamicNumber.ConvertFrom(System.Object)">
            <summary>
            Converts from.
            </summary>
            <param name="value">The value.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.IDynamicNumber.TryParse(System.String,System.Object@)">
            <summary>
            Tries the parse.
            </summary>
            <param name="str">The string.</param>
            <param name="result">The result.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.IDynamicNumber.ToString(System.Object)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="value">The value.</param>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.IDynamicNumber.DefaultValue">
            <summary>
            Gets the default value.
            </summary>
            <value>The default value.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.IDynamicNumber.add(System.Object,System.Object)">
            <summary>
            Adds the specified LHS.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.IDynamicNumber.sub(System.Object,System.Object)">
            <summary>
            Subs the specified LHS.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.IDynamicNumber.mul(System.Object,System.Object)">
            <summary>
            Muls the specified LHS.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.IDynamicNumber.div(System.Object,System.Object)">
            <summary>
            Divs the specified LHS.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.IDynamicNumber.mod(System.Object,System.Object)">
            <summary>
            Mods the specified LHS.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.IDynamicNumber.pow(System.Object,System.Object)">
            <summary>
            Pows the specified LHS.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.IDynamicNumber.log(System.Object,System.Object)">
            <summary>
            Logs the specified LHS.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.IDynamicNumber.min(System.Object,System.Object)">
            <summary>
            Minimums the specified LHS.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.IDynamicNumber.max(System.Object,System.Object)">
            <summary>
            Maximums the specified LHS.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.IDynamicNumber.compareTo(System.Object,System.Object)">
            <summary>
            Compares to.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.IDynamicNumber.bitwiseAnd(System.Object,System.Object)">
            <summary>
            Bitwises the and.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.IDynamicNumber.bitwiseOr(System.Object,System.Object)">
            <summary>
            Bitwises the or.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.IDynamicNumber.bitwiseXOr(System.Object,System.Object)">
            <summary>
            Bitwises the x or.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.IDynamicNumber.bitwiseLeftShift(System.Object,System.Object)">
            <summary>
            Bitwises the left shift.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.IDynamicNumber.bitwiseRightShift(System.Object,System.Object)">
            <summary>
            Bitwises the right shift.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.DynamicSByte">
            <summary>
            Class DynamicSByte.
            Implements the <see cref="T:ServiceStack.OrmLite.Base.Text.IDynamicNumber" />
            </summary>
            <seealso cref="T:ServiceStack.OrmLite.Base.Text.IDynamicNumber" />
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.DynamicSByte.Instance">
            <summary>
            The instance
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.DynamicSByte.Type">
            <summary>
            Gets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicSByte.Convert(System.Object)">
            <summary>
            Converts the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>System.SByte.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicSByte.ConvertFrom(System.Object)">
            <summary>
            Converts from.
            </summary>
            <param name="value">The value.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicSByte.TryParse(System.String,System.Object@)">
            <summary>
            Tries the parse.
            </summary>
            <param name="str">The string.</param>
            <param name="result">The result.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicSByte.ToString(System.Object)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="value">The value.</param>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.DynamicSByte.DefaultValue">
            <summary>
            Gets the default value.
            </summary>
            <value>The default value.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicSByte.add(System.Object,System.Object)">
            <summary>
            Adds the specified LHS.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicSByte.sub(System.Object,System.Object)">
            <summary>
            Subs the specified LHS.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicSByte.mul(System.Object,System.Object)">
            <summary>
            Muls the specified LHS.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicSByte.div(System.Object,System.Object)">
            <summary>
            Divs the specified LHS.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicSByte.mod(System.Object,System.Object)">
            <summary>
            Mods the specified LHS.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicSByte.min(System.Object,System.Object)">
            <summary>
            Minimums the specified LHS.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicSByte.max(System.Object,System.Object)">
            <summary>
            Maximums the specified LHS.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicSByte.pow(System.Object,System.Object)">
            <summary>
            Pows the specified LHS.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicSByte.log(System.Object,System.Object)">
            <summary>
            Logs the specified LHS.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicSByte.compareTo(System.Object,System.Object)">
            <summary>
            Compares to.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicSByte.bitwiseAnd(System.Object,System.Object)">
            <summary>
            Bitwises the and.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicSByte.bitwiseOr(System.Object,System.Object)">
            <summary>
            Bitwises the or.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicSByte.bitwiseXOr(System.Object,System.Object)">
            <summary>
            Bitwises the x or.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicSByte.bitwiseLeftShift(System.Object,System.Object)">
            <summary>
            Bitwises the left shift.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicSByte.bitwiseRightShift(System.Object,System.Object)">
            <summary>
            Bitwises the right shift.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.DynamicByte">
            <summary>
            Class DynamicByte.
            Implements the <see cref="T:ServiceStack.OrmLite.Base.Text.IDynamicNumber" />
            </summary>
            <seealso cref="T:ServiceStack.OrmLite.Base.Text.IDynamicNumber" />
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.DynamicByte.Instance">
            <summary>
            The instance
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.DynamicByte.Type">
            <summary>
            Gets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicByte.Convert(System.Object)">
            <summary>
            Converts the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>System.Byte.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicByte.ConvertFrom(System.Object)">
            <summary>
            Converts from.
            </summary>
            <param name="value">The value.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicByte.TryParse(System.String,System.Object@)">
            <summary>
            Tries the parse.
            </summary>
            <param name="str">The string.</param>
            <param name="result">The result.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicByte.ToString(System.Object)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="value">The value.</param>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.DynamicByte.DefaultValue">
            <summary>
            Gets the default value.
            </summary>
            <value>The default value.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicByte.add(System.Object,System.Object)">
            <summary>
            Adds the specified LHS.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicByte.sub(System.Object,System.Object)">
            <summary>
            Subs the specified LHS.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicByte.mul(System.Object,System.Object)">
            <summary>
            Muls the specified LHS.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicByte.div(System.Object,System.Object)">
            <summary>
            Divs the specified LHS.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicByte.mod(System.Object,System.Object)">
            <summary>
            Mods the specified LHS.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicByte.min(System.Object,System.Object)">
            <summary>
            Minimums the specified LHS.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicByte.max(System.Object,System.Object)">
            <summary>
            Maximums the specified LHS.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicByte.pow(System.Object,System.Object)">
            <summary>
            Pows the specified LHS.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicByte.log(System.Object,System.Object)">
            <summary>
            Logs the specified LHS.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicByte.compareTo(System.Object,System.Object)">
            <summary>
            Compares to.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicByte.bitwiseAnd(System.Object,System.Object)">
            <summary>
            Bitwises the and.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicByte.bitwiseOr(System.Object,System.Object)">
            <summary>
            Bitwises the or.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicByte.bitwiseXOr(System.Object,System.Object)">
            <summary>
            Bitwises the x or.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicByte.bitwiseLeftShift(System.Object,System.Object)">
            <summary>
            Bitwises the left shift.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicByte.bitwiseRightShift(System.Object,System.Object)">
            <summary>
            Bitwises the right shift.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.DynamicShort">
            <summary>
            Class DynamicShort.
            Implements the <see cref="T:ServiceStack.OrmLite.Base.Text.IDynamicNumber" />
            </summary>
            <seealso cref="T:ServiceStack.OrmLite.Base.Text.IDynamicNumber" />
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.DynamicShort.Instance">
            <summary>
            The instance
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.DynamicShort.Type">
            <summary>
            Gets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicShort.Convert(System.Object)">
            <summary>
            Converts the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>System.Int16.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicShort.ConvertFrom(System.Object)">
            <summary>
            Converts from.
            </summary>
            <param name="value">The value.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicShort.TryParse(System.String,System.Object@)">
            <summary>
            Tries the parse.
            </summary>
            <param name="str">The string.</param>
            <param name="result">The result.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicShort.ToString(System.Object)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="value">The value.</param>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.DynamicShort.DefaultValue">
            <summary>
            Gets the default value.
            </summary>
            <value>The default value.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicShort.add(System.Object,System.Object)">
            <summary>
            Adds the specified LHS.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicShort.sub(System.Object,System.Object)">
            <summary>
            Subs the specified LHS.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicShort.mul(System.Object,System.Object)">
            <summary>
            Muls the specified LHS.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicShort.div(System.Object,System.Object)">
            <summary>
            Divs the specified LHS.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicShort.mod(System.Object,System.Object)">
            <summary>
            Mods the specified LHS.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicShort.min(System.Object,System.Object)">
            <summary>
            Minimums the specified LHS.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicShort.max(System.Object,System.Object)">
            <summary>
            Maximums the specified LHS.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicShort.pow(System.Object,System.Object)">
            <summary>
            Pows the specified LHS.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicShort.log(System.Object,System.Object)">
            <summary>
            Logs the specified LHS.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicShort.compareTo(System.Object,System.Object)">
            <summary>
            Compares to.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicShort.bitwiseAnd(System.Object,System.Object)">
            <summary>
            Bitwises the and.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicShort.bitwiseOr(System.Object,System.Object)">
            <summary>
            Bitwises the or.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicShort.bitwiseXOr(System.Object,System.Object)">
            <summary>
            Bitwises the x or.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicShort.bitwiseLeftShift(System.Object,System.Object)">
            <summary>
            Bitwises the left shift.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicShort.bitwiseRightShift(System.Object,System.Object)">
            <summary>
            Bitwises the right shift.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.DynamicUShort">
            <summary>
            Class DynamicUShort.
            Implements the <see cref="T:ServiceStack.OrmLite.Base.Text.IDynamicNumber" />
            </summary>
            <seealso cref="T:ServiceStack.OrmLite.Base.Text.IDynamicNumber" />
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.DynamicUShort.Instance">
            <summary>
            The instance
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.DynamicUShort.Type">
            <summary>
            Gets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicUShort.Convert(System.Object)">
            <summary>
            Converts the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>System.UInt16.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicUShort.ConvertFrom(System.Object)">
            <summary>
            Converts from.
            </summary>
            <param name="value">The value.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicUShort.TryParse(System.String,System.Object@)">
            <summary>
            Tries the parse.
            </summary>
            <param name="str">The string.</param>
            <param name="result">The result.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicUShort.ToString(System.Object)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="value">The value.</param>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.DynamicUShort.DefaultValue">
            <summary>
            Gets the default value.
            </summary>
            <value>The default value.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicUShort.add(System.Object,System.Object)">
            <summary>
            Adds the specified LHS.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicUShort.sub(System.Object,System.Object)">
            <summary>
            Subs the specified LHS.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicUShort.mul(System.Object,System.Object)">
            <summary>
            Muls the specified LHS.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicUShort.div(System.Object,System.Object)">
            <summary>
            Divs the specified LHS.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicUShort.mod(System.Object,System.Object)">
            <summary>
            Mods the specified LHS.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicUShort.min(System.Object,System.Object)">
            <summary>
            Minimums the specified LHS.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicUShort.max(System.Object,System.Object)">
            <summary>
            Maximums the specified LHS.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicUShort.pow(System.Object,System.Object)">
            <summary>
            Pows the specified LHS.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicUShort.log(System.Object,System.Object)">
            <summary>
            Logs the specified LHS.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicUShort.compareTo(System.Object,System.Object)">
            <summary>
            Compares to.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicUShort.bitwiseAnd(System.Object,System.Object)">
            <summary>
            Bitwises the and.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicUShort.bitwiseOr(System.Object,System.Object)">
            <summary>
            Bitwises the or.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicUShort.bitwiseXOr(System.Object,System.Object)">
            <summary>
            Bitwises the x or.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicUShort.bitwiseLeftShift(System.Object,System.Object)">
            <summary>
            Bitwises the left shift.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicUShort.bitwiseRightShift(System.Object,System.Object)">
            <summary>
            Bitwises the right shift.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.DynamicInt">
            <summary>
            Class DynamicInt.
            Implements the <see cref="T:ServiceStack.OrmLite.Base.Text.IDynamicNumber" />
            </summary>
            <seealso cref="T:ServiceStack.OrmLite.Base.Text.IDynamicNumber" />
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.DynamicInt.Instance">
            <summary>
            The instance
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.DynamicInt.Type">
            <summary>
            Gets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicInt.Convert(System.Object)">
            <summary>
            Converts the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicInt.ConvertFrom(System.Object)">
            <summary>
            Converts from.
            </summary>
            <param name="value">The value.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicInt.TryParse(System.String,System.Object@)">
            <summary>
            Tries the parse.
            </summary>
            <param name="str">The string.</param>
            <param name="result">The result.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicInt.ToString(System.Object)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="value">The value.</param>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.DynamicInt.DefaultValue">
            <summary>
            Gets the default value.
            </summary>
            <value>The default value.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicInt.add(System.Object,System.Object)">
            <summary>
            Adds the specified LHS.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicInt.sub(System.Object,System.Object)">
            <summary>
            Subs the specified LHS.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicInt.mul(System.Object,System.Object)">
            <summary>
            Muls the specified LHS.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicInt.div(System.Object,System.Object)">
            <summary>
            Divs the specified LHS.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicInt.mod(System.Object,System.Object)">
            <summary>
            Mods the specified LHS.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicInt.min(System.Object,System.Object)">
            <summary>
            Minimums the specified LHS.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicInt.max(System.Object,System.Object)">
            <summary>
            Maximums the specified LHS.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicInt.pow(System.Object,System.Object)">
            <summary>
            Pows the specified LHS.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicInt.log(System.Object,System.Object)">
            <summary>
            Logs the specified LHS.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicInt.compareTo(System.Object,System.Object)">
            <summary>
            Compares to.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicInt.bitwiseAnd(System.Object,System.Object)">
            <summary>
            Bitwises the and.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicInt.bitwiseOr(System.Object,System.Object)">
            <summary>
            Bitwises the or.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicInt.bitwiseXOr(System.Object,System.Object)">
            <summary>
            Bitwises the x or.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicInt.bitwiseLeftShift(System.Object,System.Object)">
            <summary>
            Bitwises the left shift.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicInt.bitwiseRightShift(System.Object,System.Object)">
            <summary>
            Bitwises the right shift.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.DynamicUInt">
            <summary>
            Class DynamicUInt.
            Implements the <see cref="T:ServiceStack.OrmLite.Base.Text.IDynamicNumber" />
            </summary>
            <seealso cref="T:ServiceStack.OrmLite.Base.Text.IDynamicNumber" />
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.DynamicUInt.Instance">
            <summary>
            The instance
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.DynamicUInt.Type">
            <summary>
            Gets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicUInt.Convert(System.Object)">
            <summary>
            Converts the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>System.UInt32.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicUInt.ConvertFrom(System.Object)">
            <summary>
            Converts from.
            </summary>
            <param name="value">The value.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicUInt.TryParse(System.String,System.Object@)">
            <summary>
            Tries the parse.
            </summary>
            <param name="str">The string.</param>
            <param name="result">The result.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicUInt.ToString(System.Object)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="value">The value.</param>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.DynamicUInt.DefaultValue">
            <summary>
            Gets the default value.
            </summary>
            <value>The default value.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicUInt.add(System.Object,System.Object)">
            <summary>
            Adds the specified LHS.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicUInt.sub(System.Object,System.Object)">
            <summary>
            Subs the specified LHS.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicUInt.mul(System.Object,System.Object)">
            <summary>
            Muls the specified LHS.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicUInt.div(System.Object,System.Object)">
            <summary>
            Divs the specified LHS.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicUInt.mod(System.Object,System.Object)">
            <summary>
            Mods the specified LHS.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicUInt.min(System.Object,System.Object)">
            <summary>
            Minimums the specified LHS.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicUInt.max(System.Object,System.Object)">
            <summary>
            Maximums the specified LHS.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicUInt.pow(System.Object,System.Object)">
            <summary>
            Pows the specified LHS.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicUInt.log(System.Object,System.Object)">
            <summary>
            Logs the specified LHS.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicUInt.compareTo(System.Object,System.Object)">
            <summary>
            Compares to.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicUInt.bitwiseAnd(System.Object,System.Object)">
            <summary>
            Bitwises the and.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicUInt.bitwiseOr(System.Object,System.Object)">
            <summary>
            Bitwises the or.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicUInt.bitwiseXOr(System.Object,System.Object)">
            <summary>
            Bitwises the x or.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicUInt.bitwiseLeftShift(System.Object,System.Object)">
            <summary>
            Bitwises the left shift.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicUInt.bitwiseRightShift(System.Object,System.Object)">
            <summary>
            Bitwises the right shift.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.DynamicLong">
            <summary>
            Class DynamicLong.
            Implements the <see cref="T:ServiceStack.OrmLite.Base.Text.IDynamicNumber" />
            </summary>
            <seealso cref="T:ServiceStack.OrmLite.Base.Text.IDynamicNumber" />
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.DynamicLong.Instance">
            <summary>
            The instance
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.DynamicLong.Type">
            <summary>
            Gets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicLong.Convert(System.Object)">
            <summary>
            Converts the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>System.Int64.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicLong.ConvertFrom(System.Object)">
            <summary>
            Converts from.
            </summary>
            <param name="value">The value.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicLong.TryParse(System.String,System.Object@)">
            <summary>
            Tries the parse.
            </summary>
            <param name="str">The string.</param>
            <param name="result">The result.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicLong.ToString(System.Object)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="value">The value.</param>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.DynamicLong.DefaultValue">
            <summary>
            Gets the default value.
            </summary>
            <value>The default value.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicLong.add(System.Object,System.Object)">
            <summary>
            Adds the specified LHS.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicLong.sub(System.Object,System.Object)">
            <summary>
            Subs the specified LHS.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicLong.mul(System.Object,System.Object)">
            <summary>
            Muls the specified LHS.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicLong.div(System.Object,System.Object)">
            <summary>
            Divs the specified LHS.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicLong.mod(System.Object,System.Object)">
            <summary>
            Mods the specified LHS.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicLong.min(System.Object,System.Object)">
            <summary>
            Minimums the specified LHS.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicLong.max(System.Object,System.Object)">
            <summary>
            Maximums the specified LHS.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicLong.pow(System.Object,System.Object)">
            <summary>
            Pows the specified LHS.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicLong.log(System.Object,System.Object)">
            <summary>
            Logs the specified LHS.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicLong.compareTo(System.Object,System.Object)">
            <summary>
            Compares to.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicLong.bitwiseAnd(System.Object,System.Object)">
            <summary>
            Bitwises the and.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicLong.bitwiseOr(System.Object,System.Object)">
            <summary>
            Bitwises the or.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicLong.bitwiseXOr(System.Object,System.Object)">
            <summary>
            Bitwises the x or.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicLong.bitwiseLeftShift(System.Object,System.Object)">
            <summary>
            Bitwises the left shift.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicLong.bitwiseRightShift(System.Object,System.Object)">
            <summary>
            Bitwises the right shift.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.DynamicULong">
            <summary>
            Class DynamicULong.
            Implements the <see cref="T:ServiceStack.OrmLite.Base.Text.IDynamicNumber" />
            </summary>
            <seealso cref="T:ServiceStack.OrmLite.Base.Text.IDynamicNumber" />
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.DynamicULong.Instance">
            <summary>
            The instance
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.DynamicULong.Type">
            <summary>
            Gets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicULong.Convert(System.Object)">
            <summary>
            Converts the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>System.UInt64.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicULong.ConvertFrom(System.Object)">
            <summary>
            Converts from.
            </summary>
            <param name="value">The value.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicULong.TryParse(System.String,System.Object@)">
            <summary>
            Tries the parse.
            </summary>
            <param name="str">The string.</param>
            <param name="result">The result.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicULong.ToString(System.Object)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="value">The value.</param>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.DynamicULong.DefaultValue">
            <summary>
            Gets the default value.
            </summary>
            <value>The default value.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicULong.add(System.Object,System.Object)">
            <summary>
            Adds the specified LHS.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicULong.sub(System.Object,System.Object)">
            <summary>
            Subs the specified LHS.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicULong.mul(System.Object,System.Object)">
            <summary>
            Muls the specified LHS.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicULong.div(System.Object,System.Object)">
            <summary>
            Divs the specified LHS.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicULong.mod(System.Object,System.Object)">
            <summary>
            Mods the specified LHS.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicULong.min(System.Object,System.Object)">
            <summary>
            Minimums the specified LHS.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicULong.max(System.Object,System.Object)">
            <summary>
            Maximums the specified LHS.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicULong.pow(System.Object,System.Object)">
            <summary>
            Pows the specified LHS.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicULong.log(System.Object,System.Object)">
            <summary>
            Logs the specified LHS.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicULong.compareTo(System.Object,System.Object)">
            <summary>
            Compares to.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicULong.bitwiseAnd(System.Object,System.Object)">
            <summary>
            Bitwises the and.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicULong.bitwiseOr(System.Object,System.Object)">
            <summary>
            Bitwises the or.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicULong.bitwiseXOr(System.Object,System.Object)">
            <summary>
            Bitwises the x or.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicULong.bitwiseLeftShift(System.Object,System.Object)">
            <summary>
            Bitwises the left shift.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicULong.bitwiseRightShift(System.Object,System.Object)">
            <summary>
            Bitwises the right shift.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.DynamicFloat">
            <summary>
            Class DynamicFloat.
            Implements the <see cref="T:ServiceStack.OrmLite.Base.Text.IDynamicNumber" />
            </summary>
            <seealso cref="T:ServiceStack.OrmLite.Base.Text.IDynamicNumber" />
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.DynamicFloat.Instance">
            <summary>
            The instance
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.DynamicFloat.Type">
            <summary>
            Gets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicFloat.Convert(System.Object)">
            <summary>
            Converts the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>System.Single.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicFloat.ConvertFrom(System.Object)">
            <summary>
            Converts from.
            </summary>
            <param name="value">The value.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicFloat.TryParse(System.String,System.Object@)">
            <summary>
            Tries the parse.
            </summary>
            <param name="str">The string.</param>
            <param name="result">The result.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicFloat.ToString(System.Object)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="value">The value.</param>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.DynamicFloat.DefaultValue">
            <summary>
            Gets the default value.
            </summary>
            <value>The default value.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicFloat.add(System.Object,System.Object)">
            <summary>
            Adds the specified LHS.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicFloat.sub(System.Object,System.Object)">
            <summary>
            Subs the specified LHS.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicFloat.mul(System.Object,System.Object)">
            <summary>
            Muls the specified LHS.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicFloat.div(System.Object,System.Object)">
            <summary>
            Divs the specified LHS.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicFloat.mod(System.Object,System.Object)">
            <summary>
            Mods the specified LHS.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicFloat.min(System.Object,System.Object)">
            <summary>
            Minimums the specified LHS.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicFloat.max(System.Object,System.Object)">
            <summary>
            Maximums the specified LHS.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicFloat.pow(System.Object,System.Object)">
            <summary>
            Pows the specified LHS.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicFloat.log(System.Object,System.Object)">
            <summary>
            Logs the specified LHS.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicFloat.compareTo(System.Object,System.Object)">
            <summary>
            Compares to.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicFloat.bitwiseAnd(System.Object,System.Object)">
            <summary>
            Bitwises the and.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
            <exception cref="T:System.NotSupportedException">Bitwise operators only supported on integer types</exception>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicFloat.bitwiseOr(System.Object,System.Object)">
            <summary>
            Bitwises the or.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
            <exception cref="T:System.NotSupportedException">Bitwise operators only supported on integer types</exception>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicFloat.bitwiseXOr(System.Object,System.Object)">
            <summary>
            Bitwises the x or.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
            <exception cref="T:System.NotSupportedException">Bitwise operators only supported on integer types</exception>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicFloat.bitwiseLeftShift(System.Object,System.Object)">
            <summary>
            Bitwises the left shift.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
            <exception cref="T:System.NotSupportedException">Bitwise operators only supported on integer types</exception>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicFloat.bitwiseRightShift(System.Object,System.Object)">
            <summary>
            Bitwises the right shift.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
            <exception cref="T:System.NotSupportedException">Bitwise operators only supported on integer types</exception>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.DynamicDouble">
            <summary>
            Class DynamicDouble.
            Implements the <see cref="T:ServiceStack.OrmLite.Base.Text.IDynamicNumber" />
            </summary>
            <seealso cref="T:ServiceStack.OrmLite.Base.Text.IDynamicNumber" />
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.DynamicDouble.Instance">
            <summary>
            The instance
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.DynamicDouble.Type">
            <summary>
            Gets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicDouble.Convert(System.Object)">
            <summary>
            Converts the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicDouble.ConvertFrom(System.Object)">
            <summary>
            Converts from.
            </summary>
            <param name="value">The value.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicDouble.TryParse(System.String,System.Object@)">
            <summary>
            Tries the parse.
            </summary>
            <param name="str">The string.</param>
            <param name="result">The result.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicDouble.ToString(System.Object)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="value">The value.</param>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.DynamicDouble.DefaultValue">
            <summary>
            Gets the default value.
            </summary>
            <value>The default value.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicDouble.add(System.Object,System.Object)">
            <summary>
            Adds the specified LHS.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicDouble.sub(System.Object,System.Object)">
            <summary>
            Subs the specified LHS.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicDouble.mul(System.Object,System.Object)">
            <summary>
            Muls the specified LHS.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicDouble.div(System.Object,System.Object)">
            <summary>
            Divs the specified LHS.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicDouble.mod(System.Object,System.Object)">
            <summary>
            Mods the specified LHS.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicDouble.min(System.Object,System.Object)">
            <summary>
            Minimums the specified LHS.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicDouble.max(System.Object,System.Object)">
            <summary>
            Maximums the specified LHS.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicDouble.pow(System.Object,System.Object)">
            <summary>
            Pows the specified LHS.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicDouble.log(System.Object,System.Object)">
            <summary>
            Logs the specified LHS.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicDouble.compareTo(System.Object,System.Object)">
            <summary>
            Compares to.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicDouble.bitwiseAnd(System.Object,System.Object)">
            <summary>
            Bitwises the and.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
            <exception cref="T:System.NotSupportedException">Bitwise operators only supported on integer types</exception>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicDouble.bitwiseOr(System.Object,System.Object)">
            <summary>
            Bitwises the or.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
            <exception cref="T:System.NotSupportedException">Bitwise operators only supported on integer types</exception>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicDouble.bitwiseXOr(System.Object,System.Object)">
            <summary>
            Bitwises the x or.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
            <exception cref="T:System.NotSupportedException">Bitwise operators only supported on integer types</exception>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicDouble.bitwiseLeftShift(System.Object,System.Object)">
            <summary>
            Bitwises the left shift.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
            <exception cref="T:System.NotSupportedException">Bitwise operators only supported on integer types</exception>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicDouble.bitwiseRightShift(System.Object,System.Object)">
            <summary>
            Bitwises the right shift.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
            <exception cref="T:System.NotSupportedException">Bitwise operators only supported on integer types</exception>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.DynamicDecimal">
            <summary>
            Class DynamicDecimal.
            Implements the <see cref="T:ServiceStack.OrmLite.Base.Text.IDynamicNumber" />
            </summary>
            <seealso cref="T:ServiceStack.OrmLite.Base.Text.IDynamicNumber" />
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.DynamicDecimal.Instance">
            <summary>
            The instance
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.DynamicDecimal.Type">
            <summary>
            Gets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicDecimal.Convert(System.Object)">
            <summary>
            Converts the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>System.Decimal.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicDecimal.ConvertFrom(System.Object)">
            <summary>
            Converts from.
            </summary>
            <param name="value">The value.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicDecimal.TryParse(System.String,System.Object@)">
            <summary>
            Tries the parse.
            </summary>
            <param name="str">The string.</param>
            <param name="result">The result.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicDecimal.ToString(System.Object)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="value">The value.</param>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.DynamicDecimal.DefaultValue">
            <summary>
            Gets the default value.
            </summary>
            <value>The default value.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicDecimal.add(System.Object,System.Object)">
            <summary>
            Adds the specified LHS.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicDecimal.sub(System.Object,System.Object)">
            <summary>
            Subs the specified LHS.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicDecimal.mul(System.Object,System.Object)">
            <summary>
            Muls the specified LHS.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicDecimal.div(System.Object,System.Object)">
            <summary>
            Divs the specified LHS.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicDecimal.mod(System.Object,System.Object)">
            <summary>
            Mods the specified LHS.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicDecimal.min(System.Object,System.Object)">
            <summary>
            Minimums the specified LHS.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicDecimal.max(System.Object,System.Object)">
            <summary>
            Maximums the specified LHS.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicDecimal.pow(System.Object,System.Object)">
            <summary>
            Pows the specified LHS.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicDecimal.log(System.Object,System.Object)">
            <summary>
            Logs the specified LHS.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicDecimal.compareTo(System.Object,System.Object)">
            <summary>
            Compares to.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicDecimal.bitwiseAnd(System.Object,System.Object)">
            <summary>
            Bitwises the and.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
            <exception cref="T:System.NotSupportedException">Bitwise operators only supported on integer types</exception>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicDecimal.bitwiseOr(System.Object,System.Object)">
            <summary>
            Bitwises the or.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
            <exception cref="T:System.NotSupportedException">Bitwise operators only supported on integer types</exception>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicDecimal.bitwiseXOr(System.Object,System.Object)">
            <summary>
            Bitwises the x or.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
            <exception cref="T:System.NotSupportedException">Bitwise operators only supported on integer types</exception>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicDecimal.bitwiseLeftShift(System.Object,System.Object)">
            <summary>
            Bitwises the left shift.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
            <exception cref="T:System.NotSupportedException">Bitwise operators only supported on integer types</exception>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicDecimal.bitwiseRightShift(System.Object,System.Object)">
            <summary>
            Bitwises the right shift.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
            <exception cref="T:System.NotSupportedException">Bitwise operators only supported on integer types</exception>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.DynamicNumber">
            <summary>
            Class DynamicNumber.
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.DynamicNumber.RankNumbers">
            <summary>
            The rank numbers
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicNumber.IsNumber(System.Type)">
            <summary>
            Determines whether the specified type is number.
            </summary>
            <param name="type">The type.</param>
            <returns><c>true</c> if the specified type is number; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicNumber.TryGetRanking(System.Type,System.Int32@)">
            <summary>
            Tries the get ranking.
            </summary>
            <param name="type">The type.</param>
            <param name="ranking">The ranking.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicNumber.GetNumber(System.Type)">
            <summary>
            Gets the number.
            </summary>
            <param name="type">The type.</param>
            <returns>IDynamicNumber.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicNumber.Get(System.Object)">
            <summary>
            Gets the specified object.
            </summary>
            <param name="obj">The object.</param>
            <returns>IDynamicNumber.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicNumber.GetNumber(System.Object,System.Object)">
            <summary>
            Gets the number.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>IDynamicNumber.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicNumber.AssertNumbers(System.String,System.Object,System.Object)">
            <summary>
            Asserts the numbers.
            </summary>
            <param name="name">The name.</param>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>IDynamicNumber.</returns>
            <exception cref="T:System.ArgumentException">Invalid numbers passed to {name}: " +
                                                    $"({lhs?.GetType().Name ?? "null"} '{lhs?.ToString().SubstringWithEllipsis(0, 100)}', " +
                                                    $"{rhs?.GetType().Name ?? "null"} '{rhs?.ToString().SubstringWithEllipsis(0, 100)}')</exception>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicNumber.Add(System.Object,System.Object)">
            <summary>
            Adds the specified LHS.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicNumber.Sub(System.Object,System.Object)">
            <summary>
            Subs the specified LHS.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicNumber.Subtract(System.Object,System.Object)">
            <summary>
            Subtracts the specified LHS.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicNumber.Mul(System.Object,System.Object)">
            <summary>
            Muls the specified LHS.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicNumber.Multiply(System.Object,System.Object)">
            <summary>
            Multiplies the specified LHS.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicNumber.Div(System.Object,System.Object)">
            <summary>
            Divs the specified LHS.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicNumber.Divide(System.Object,System.Object)">
            <summary>
            Divides the specified LHS.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicNumber.Mod(System.Object,System.Object)">
            <summary>
            Mods the specified LHS.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicNumber.Min(System.Object,System.Object)">
            <summary>
            Determines the minimum of the parameters.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicNumber.Max(System.Object,System.Object)">
            <summary>
            Determines the maximum of the parameters.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicNumber.Pow(System.Object,System.Object)">
            <summary>
            Pows the specified LHS.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicNumber.Log(System.Object,System.Object)">
            <summary>
            Logs the specified LHS.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicNumber.CompareTo(System.Object,System.Object)">
            <summary>
            Compares to.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicNumber.BitwiseAnd(System.Object,System.Object)">
            <summary>
            Bitwises the and.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicNumber.BitwiseOr(System.Object,System.Object)">
            <summary>
            Bitwises the or.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicNumber.BitwiseXOr(System.Object,System.Object)">
            <summary>
            Bitwises the x or.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicNumber.BitwiseLeftShift(System.Object,System.Object)">
            <summary>
            Bitwises the left shift.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicNumber.BitwiseRightShift(System.Object,System.Object)">
            <summary>
            Bitwises the right shift.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicNumber.TryParse(System.String,System.Object@)">
            <summary>
            Tries the parse.
            </summary>
            <param name="strValue">The string value.</param>
            <param name="result">The result.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicNumber.TryParseIntoBestFit(System.String,System.Object@)">
            <summary>
            Tries the parse into best fit.
            </summary>
            <param name="strValue">The string value.</param>
            <param name="result">The result.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.DynamicNumberExtensions">
            <summary>
            Class DynamicNumberExtensions.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicNumberExtensions.ParseString(ServiceStack.OrmLite.Base.Text.IDynamicNumber,System.Object)">
            <summary>
            Parses the string.
            </summary>
            <param name="number">The number.</param>
            <param name="value">The value.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.Env">
            <summary>
            Class Env.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Env.#cctor">
            <summary>
            Initializes static members of the <see cref="T:ServiceStack.OrmLite.Base.Text.Env" /> class.
            </summary>
            <exception cref="T:System.ArgumentException">PclExport.Instance needs to be initialized</exception>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.Env.IsMono">
            <summary>
            Gets or sets a value indicating whether this instance is mono.
            </summary>
            <value><c>true</c> if this instance is mono; otherwise, <c>false</c>.</value>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Env.strictMode">
            <summary>
            The strict mode
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.Env.StrictMode">
            <summary>
            Gets or sets a value indicating whether [strict mode].
            </summary>
            <value><c>true</c> if [strict mode]; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Env.GetReleaseDate">
            <summary>
            The get release date.
            </summary>
            <returns>The <see cref="T:System.DateTime" />.</returns>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Env.ContinueOnCapturedContext">
            <summary>
            The continue on captured context
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Env.ConfigAwait(System.Threading.Tasks.Task)">
            <summary>
            Configurations the await.
            </summary>
            <param name="task">The task.</param>
            <returns>ConfiguredTaskAwaitable.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Env.ConfigAwait``1(System.Threading.Tasks.Task{``0})">
            <summary>
            Configurations the await.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="task">The task.</param>
            <returns>ConfiguredTaskAwaitable&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Env.ConfigAwait(System.Threading.Tasks.ValueTask)">
            <summary>
            Configurations the await.
            </summary>
            <param name="task">The task.</param>
            <returns>ConfiguredValueTaskAwaitable.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.IStringSerializer">
            <summary>
            Interface IStringSerializer
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.IStringSerializer.DeserializeFromString``1(System.String)">
            <summary>
            Deserializes from string.
            </summary>
            <typeparam name="To">The type of to.</typeparam>
            <param name="serializedText">The serialized text.</param>
            <returns>To.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.IStringSerializer.DeserializeFromString(System.String,System.Type)">
            <summary>
            Deserializes from string.
            </summary>
            <param name="serializedText">The serialized text.</param>
            <param name="type">The type.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.IStringSerializer.SerializeToString``1(``0)">
            <summary>
            Serializes to string.
            </summary>
            <typeparam name="TFrom">The type of the t from.</typeparam>
            <param name="from">From.</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.ITracer">
            <summary>
            Interface ITracer
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.ITracer.WriteDebug(System.String)">
            <summary>
            Writes the debug.
            </summary>
            <param name="error">The error.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.ITracer.WriteDebug(System.String,System.Object[])">
            <summary>
            Writes the debug.
            </summary>
            <param name="format">The format.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.ITracer.WriteWarning(System.String)">
            <summary>
            Writes the warning.
            </summary>
            <param name="warning">The warning.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.ITracer.WriteWarning(System.String,System.Object[])">
            <summary>
            Writes the warning.
            </summary>
            <param name="format">The format.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.ITracer.WriteError(System.Exception)">
            <summary>
            Writes the error.
            </summary>
            <param name="ex">The ex.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.ITracer.WriteError(System.String)">
            <summary>
            Writes the error.
            </summary>
            <param name="error">The error.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.ITracer.WriteError(System.String,System.Object[])">
            <summary>
            Writes the error.
            </summary>
            <param name="format">The format.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.ITypeSerializer`1">
            <summary>
            Interface ITypeSerializer
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.ITypeSerializer`1.DeserializeFromString(System.String)">
            <summary>
            Parses the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>T.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.ITypeSerializer`1.SerializeToString(`0)">
            <summary>
            Serializes to string.
            </summary>
            <param name="value">The value.</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.JsConfig">
            <summary>
            Class JsConfig.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.JsConfig.#cctor">
            <summary>
            Initializes static members of the <see cref="T:ServiceStack.OrmLite.Base.Text.JsConfig"/> class.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.JsConfig.InitStatics">
            <summary>
            force deterministic initialization of static constructor
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.JsConfig.Init">
            <summary>
            Mark JsConfig global config as initialized and assert it's no longer mutated
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.JsConfig.Init(ServiceStack.OrmLite.Base.Text.Config)">
            <summary>
            Initialize global config and assert that it's no longer mutated
            </summary>
            <param name="config">The configuration.</param>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.JsConfig.HasInit">
            <summary>
            Gets a value indicating whether this instance has initialize.
            </summary>
            <value><c>true</c> if this instance has initialize; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.JsConfig.BeginScope">
            <summary>
            Begins the scope.
            </summary>
            <returns>JsConfigScope.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.JsConfig.CreateScope(System.String,ServiceStack.OrmLite.Base.Text.JsConfigScope)">
            <summary>
            Creates the scope.
            </summary>
            <param name="config">The configuration.</param>
            <param name="scope">The scope.</param>
            <returns>JsConfigScope.</returns>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.JsConfig.UTF8Encoding">
            <summary>
            Gets or sets the ut f8 encoding.
            </summary>
            <value>The ut f8 encoding.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.JsConfig.With(ServiceStack.OrmLite.Base.Text.Config)">
            <summary>
            Withes the specified configuration.
            </summary>
            <param name="config">The configuration.</param>
            <returns>JsConfigScope.</returns>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.JsConfig.TryToParsePrimitiveTypeValues">
            <summary>
            Gets or sets a value indicating whether [try to parse primitive type values].
            </summary>
            <value><c>true</c> if [try to parse primitive type values]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.JsConfig.TryParseIntoBestFit">
            <summary>
            Gets or sets a value indicating whether [try parse into best fit].
            </summary>
            <value><c>true</c> if [try parse into best fit]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.JsConfig.ExcludeDefaultValues">
            <summary>
            Gets or sets a value indicating whether [exclude default values].
            </summary>
            <value><c>true</c> if [exclude default values]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.JsConfig.IncludeNullValues">
            <summary>
            Gets or sets a value indicating whether [include null values].
            </summary>
            <value><c>true</c> if [include null values]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.JsConfig.IncludeNullValuesInDictionaries">
            <summary>
            Gets or sets a value indicating whether [include null values in dictionaries].
            </summary>
            <value><c>true</c> if [include null values in dictionaries]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.JsConfig.TreatEnumAsInteger">
            <summary>
            Gets or sets a value indicating whether [treat enum as integer].
            </summary>
            <value><c>true</c> if [treat enum as integer]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.JsConfig.ExcludeTypeInfo">
            <summary>
            Gets or sets a value indicating whether [exclude type information].
            </summary>
            <value><c>true</c> if [exclude type information]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.JsConfig.IncludeTypeInfo">
            <summary>
            Gets or sets a value indicating whether [include type information].
            </summary>
            <value><c>true</c> if [include type information]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.JsConfig.Indent">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:ServiceStack.OrmLite.Base.Text.JsConfig"/> is indent.
            </summary>
            <value><c>true</c> if indent; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.JsConfig.TypeAttr">
            <summary>
            Gets or sets the type attribute.
            </summary>
            <value>The type attribute.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.JsConfig.JsonTypeAttrInObject">
            <summary>
            Gets the json type attribute in object.
            </summary>
            <value>The json type attribute in object.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.JsConfig.JsvTypeAttrInObject">
            <summary>
            Gets the JSV type attribute in object.
            </summary>
            <value>The JSV type attribute in object.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.JsConfig.TypeWriter">
            <summary>
            Gets or sets the type writer.
            </summary>
            <value>The type writer.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.JsConfig.TypeFinder">
            <summary>
            Gets or sets the type finder.
            </summary>
            <value>The type finder.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.JsConfig.ParsePrimitiveFn">
            <summary>
            Gets or sets the parse primitive function.
            </summary>
            <value>The parse primitive function.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.JsConfig.SystemJsonCompatible">
            <summary>
            Gets or sets a value indicating whether [system json compatible].
            </summary>
            <value><c>true</c> if [system json compatible]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.JsConfig.DateHandler">
            <summary>
            Gets or sets the date handler.
            </summary>
            <value>The date handler.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.JsConfig.TimeSpanHandler">
            <summary>
            Sets which format to use when serializing TimeSpans
            </summary>
            <value>The time span handler.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.JsConfig.TextCase">
            <summary>
            Text case to use for property names (Default = PascalCase)
            </summary>
            <value>The text case.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.JsConfig.GetConfig">
            <summary>
            Avoid multiple static property checks by getting snapshot of active config
            </summary>
            <returns>Config.</returns>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.JsConfig.ThrowOnError">
            <summary>
            Gets or sets a value indicating if the framework should throw serialization exceptions
            or continue regardless of serialization errors. If <see langword="true" />  the framework
            will throw; otherwise, it will parse as many fields as possible. The default is <see langword="false" />.
            </summary>
            <value><c>true</c> if [throw on error]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.JsConfig.SkipDateTimeConversion">
            <summary>
            Gets or sets a value indicating if the framework should skip automatic <see cref="T:System.DateTime" /> conversions.
            Dates will be handled literally, any included timezone encoding will be lost and the date will be treaded as DateTimeKind.Local
            Utc formatted input will result in DateTimeKind.Utc output. Any input without TZ data will be set DateTimeKind.Unspecified
            This will take precedence over other flags like AlwaysUseUtc
            JsConfig.DateHandler = DateHandler.ISO8601 should be used when set true for consistent de/serialization.
            </summary>
            <value><c>true</c> if [skip date time conversion]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.JsConfig.AssumeUtc">
            <summary>
            Gets or sets a value indicating if the framework should always assume <see cref="T:System.DateTime" /> is in UTC format if Kind is Unspecified.
            </summary>
            <value><c>true</c> if [assume UTC]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.JsConfig.HasSerializeFn">
            <summary>
            The has serialize function
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.JsConfig.HasIncludeDefaultValue">
            <summary>
            The has include default value
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.JsConfig.TreatValueAsRefTypes">
            <summary>
            The treat value as reference types
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.JsConfig.PreferInterfaces">
            <summary>
            If set to true, Interface types will be preferred over concrete types when serializing.
            </summary>
            <value><c>true</c> if [prefer interfaces]; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.JsConfig.TreatAsRefType(System.Type)">
            <summary>
            Treats the type of as reference.
            </summary>
            <param name="valueType">Type of the value.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.JsConfig.IncludePublicFields">
            <summary>
            If set to true, Interface types will be preferred over concrete types when serializing.
            </summary>
            <value><c>true</c> if [include public fields]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.JsConfig.MaxDepth">
            <summary>
            Sets the maximum depth to avoid circular dependencies
            </summary>
            <value>The maximum depth.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.JsConfig.ModelFactory">
            <summary>
            Set this to enable your own type construction provider.
            This is helpful for integration with IoC containers where you need to call the container constructor.
            Return null if you don't know how to construct the type and the parameterless constructor will be used.
            </summary>
            <value>The model factory.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.JsConfig.ExcludeTypes">
            <summary>
            Gets or sets the exclude types.
            </summary>
            <value>The exclude types.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.JsConfig.ExcludeTypeNames">
            <summary>
            Gets or sets the exclude type names.
            </summary>
            <value>The exclude type names.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.JsConfig.AllowRuntimeTypeWithAttributesNamed">
            <summary>
            Gets or sets the allow runtime type with attributes named.
            </summary>
            <value>The allow runtime type with attributes named.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.JsConfig.AllowRuntimeTypeWithInterfacesNamed">
            <summary>
            Gets or sets the allow runtime type with interfaces named.
            </summary>
            <value>The allow runtime type with interfaces named.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.JsConfig.AllowRuntimeTypeInTypes">
            <summary>
            Gets or sets the allow runtime type in types.
            </summary>
            <value>The allow runtime type in types.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.JsConfig.AllowRuntimeTypeInTypesWithNamespaces">
            <summary>
            Gets or sets the allow runtime type in types with namespaces.
            </summary>
            <value>The allow runtime type in types with namespaces.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.JsConfig.AllowRuntimeType">
            <summary>
            Gets or sets the type of the allow runtime.
            </summary>
            <value>The type of the allow runtime.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.JsConfig.AllowRuntimeInterfaces">
            <summary>
            Gets or sets a value indicating whether [allow runtime interfaces].
            </summary>
            <value><c>true</c> if [allow runtime interfaces]; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.JsConfig.Reset">
            <summary>
            Resets this instance.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.JsConfig.Reset(System.Type)">
            <summary>
            Resets the specified caches for type.
            </summary>
            <param name="cachesForType">Type of the caches for.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.JsConfig.InvokeReset(System.Type)">
            <summary>
            Invokes the reset.
            </summary>
            <param name="genericType">Type of the generic.</param>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.JsConfig.__uniqueTypes">
            <summary>
            The unique types
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.JsConfig.__uniqueTypesCount">
            <summary>
            The unique types count
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.JsConfig.AddUniqueType(System.Type)">
            <summary>
            Adds the type of the unique.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.JsConfig`1">
            <summary>
            Class JsConfig.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.JsConfig`1.#cctor">
            <summary>
            Initializes static members of the <see cref="T:ServiceStack.OrmLite.Base.Text.JsConfig`1"/> class.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.JsConfig`1.GetConfig">
            <summary>
            Gets the configuration.
            </summary>
            <returns>Config.</returns>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.JsConfig`1.IncludeTypeInfo">
            <summary>
            Always emit type info for this type.  Takes precedence over ExcludeTypeInfo
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.JsConfig`1.ExcludeTypeInfo">
            <summary>
            Never emit type info for this type
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.JsConfig`1.TextCase">
            <summary>
            Text case to use for property names (Default = PascalCase)
            </summary>
            <value>The text case.</value>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.JsConfig`1.serializeFn">
            <summary>
            Define custom serialization fn for BCL Structs
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.JsConfig`1.SerializeFn">
            <summary>
            Gets or sets the serialize function.
            </summary>
            <value>The serialize function.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.JsConfig`1.HasSerializeFn">
            <summary>
            Whether there is a fn (raw or otherwise)
            </summary>
            <value><c>true</c> if this instance has serialize function; otherwise, <c>false</c>.</value>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.JsConfig`1.rawSerializeFn">
            <summary>
            Define custom raw serialization fn
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.JsConfig`1.RawSerializeFn">
            <summary>
            Gets or sets the raw serialize function.
            </summary>
            <value>The raw serialize function.</value>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.JsConfig`1.onSerializingFn">
            <summary>
            Define custom serialization hook
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.JsConfig`1.OnSerializingFn">
            <summary>
            Gets or sets the on serializing function.
            </summary>
            <value>The on serializing function.</value>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.JsConfig`1.onSerializedFn">
            <summary>
            Define custom after serialization hook
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.JsConfig`1.OnSerializedFn">
            <summary>
            Gets or sets the on serialized function.
            </summary>
            <value>The on serialized function.</value>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.JsConfig`1.deSerializeFn">
            <summary>
            Define custom deserialization fn for BCL Structs
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.JsConfig`1.DeSerializeFn">
            <summary>
            Gets or sets the de serialize function.
            </summary>
            <value>The de serialize function.</value>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.JsConfig`1.rawDeserializeFn">
            <summary>
            Define custom raw deserialization fn for objects
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.JsConfig`1.RawDeserializeFn">
            <summary>
            Gets or sets the raw deserialize function.
            </summary>
            <value>The raw deserialize function.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.JsConfig`1.HasDeserializeFn">
            <summary>
            Gets a value indicating whether this instance has deserialize function.
            </summary>
            <value><c>true</c> if this instance has deserialize function; otherwise, <c>false</c>.</value>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.JsConfig`1.onDeserializedFn">
            <summary>
            The on deserialized function
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.JsConfig`1.OnDeserializedFn">
            <summary>
            Gets or sets the on deserialized function.
            </summary>
            <value>The on deserialized function.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.JsConfig`1.HasDeserializingFn">
            <summary>
            Gets a value indicating whether this instance has deserializing function.
            </summary>
            <value><c>true</c> if this instance has deserializing function; otherwise, <c>false</c>.</value>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.JsConfig`1.onDeserializingFn">
            <summary>
            The on deserializing function
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.JsConfig`1.OnDeserializingFn">
            <summary>
            Gets or sets the on deserializing function.
            </summary>
            <value>The on deserializing function.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.JsConfig`1.ExcludePropertyNames">
            <summary>
            Exclude specific properties of this type from being serialized
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.JsConfig`1.WriteFn``1(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the function.
            </summary>
            <typeparam name="TSerializer">The type of the t serializer.</typeparam>
            <param name="writer">The writer.</param>
            <param name="obj">The object.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.JsConfig`1.ParseFn(System.String)">
            <summary>
            Parses the function.
            </summary>
            <param name="str">The string.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.JsConfig`1.ParseFn(ServiceStack.OrmLite.Base.Text.Common.ITypeSerializer,System.String)">
            <summary>
            Parses the function.
            </summary>
            <param name="serializer">The serializer.</param>
            <param name="str">The string.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.JsConfig`1.ClearFnCaches">
            <summary>
            Clears the function caches.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.JsConfig`1.Reset">
            <summary>
            Resets this instance.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.JsConfig`1.RefreshRead">
            <summary>
            Refreshes the read.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.JsConfig`1.RefreshWrite">
            <summary>
            Refreshes the write.
            </summary>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.PropertyConvention">
            <summary>
            Enum PropertyConvention
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.PropertyConvention.Strict">
            <summary>
            The property names on target types must match property names in the JSON source
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.PropertyConvention.Lenient">
            <summary>
            The property names on target types may not match the property names in the JSON source
            </summary>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.DateHandler">
            <summary>
            Enum DateHandler
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.DateHandler.TimestampOffset">
            <summary>
            The timestamp offset
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.DateHandler.DCJSCompatible">
            <summary>
            The DCJS compatible
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.DateHandler.ISO8601">
            <summary>
            The is o8601
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.DateHandler.ISO8601DateOnly">
            <summary>
            The is o8601 date only
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.DateHandler.ISO8601DateTime">
            <summary>
            The is o8601 date time
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.DateHandler.RFC1123">
            <summary>
            The rf C1123
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.DateHandler.UnixTime">
            <summary>
            The unix time
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.DateHandler.UnixTimeMs">
            <summary>
            The unix time ms
            </summary>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.TimeSpanHandler">
            <summary>
            Enum TimeSpanHandler
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.TimeSpanHandler.DurationFormat">
            <summary>
            Uses the xsd format like PT15H10M20S
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.TimeSpanHandler.StandardFormat">
            <summary>
            Uses the standard .net ToString method of the TimeSpan class
            </summary>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.TextCase">
            <summary>
            Enum TextCase
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.TextCase.Default">
            <summary>
            If unspecified uses PascalCase
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.TextCase.PascalCase">
            <summary>
            PascalCase
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.TextCase.CamelCase">
            <summary>
            camelCase
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.TextCase.SnakeCase">
            <summary>
            snake_case
            </summary>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.JsConfigScope">
            <summary>
            Class JsConfigScope. This class cannot be inherited.
            Implements the <see cref="T:ServiceStack.OrmLite.Base.Text.Config" />
            Implements the <see cref="T:System.IDisposable" />
            </summary>
            <seealso cref="T:ServiceStack.OrmLite.Base.Text.Config" />
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.JsConfigScope.disposed">
            <summary>
            The disposed
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.JsConfigScope.parent">
            <summary>
            The parent
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.JsConfigScope.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.OrmLite.Base.Text.JsConfigScope"/> class.
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.JsConfigScope.Current">
            <summary>
            Gets the current.
            </summary>
            <value>The current.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.JsConfigScope.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.Config">
            <summary>
            Class Config.
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Config.instance">
            <summary>
            The instance
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.Config.Instance">
            <summary>
            Gets the instance.
            </summary>
            <value>The instance.</value>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Config.HasInit">
            <summary>
            The has initialize
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Config.AssertNotInit">
            <summary>
            Asserts the not initialize.
            </summary>
            <returns>Config.</returns>
            <exception cref="T:System.NotSupportedException">JsConfig can't be mutated after JsConfig.Init(). Use BeginScope() or CreateScope() to use custom config after Init().</exception>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Config.InitStackTrace">
            <summary>
            The initialize stack trace
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Config.Init">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Config.Init(ServiceStack.OrmLite.Base.Text.Config)">
            <summary>
            Initializes the specified configuration.
            </summary>
            <param name="config">The configuration.</param>
            <exception cref="T:System.NotSupportedException">JsConfig has already been initialized at: {InitStackTrace}</exception>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Config.Reset">
            <summary>
            Resets this instance.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Config.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.OrmLite.Base.Text.Config"/> class.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Config.#ctor(ServiceStack.OrmLite.Base.Text.Config)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.OrmLite.Base.Text.Config"/> class.
            </summary>
            <param name="config">The configuration.</param>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.Config.ConvertObjectTypesIntoStringDictionary">
            <summary>
            Gets or sets a value indicating whether [convert object types into string dictionary].
            </summary>
            <value><c>true</c> if [convert object types into string dictionary]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.Config.TryToParsePrimitiveTypeValues">
            <summary>
            Gets or sets a value indicating whether [try to parse primitive type values].
            </summary>
            <value><c>true</c> if [try to parse primitive type values]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.Config.TryToParseNumericType">
            <summary>
            Gets or sets a value indicating whether [try to parse numeric type].
            </summary>
            <value><c>true</c> if [try to parse numeric type]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.Config.TryParseIntoBestFit">
            <summary>
            Gets or sets a value indicating whether [try parse into best fit].
            </summary>
            <value><c>true</c> if [try parse into best fit]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.Config.ParsePrimitiveFloatingPointTypes">
            <summary>
            Gets or sets the parse primitive floating point types.
            </summary>
            <value>The parse primitive floating point types.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.Config.ParsePrimitiveIntegerTypes">
            <summary>
            Gets or sets the parse primitive integer types.
            </summary>
            <value>The parse primitive integer types.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.Config.ExcludeDefaultValues">
            <summary>
            Gets or sets a value indicating whether [exclude default values].
            </summary>
            <value><c>true</c> if [exclude default values]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.Config.IncludeNullValues">
            <summary>
            Gets or sets a value indicating whether [include null values].
            </summary>
            <value><c>true</c> if [include null values]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.Config.IncludeNullValuesInDictionaries">
            <summary>
            Gets or sets a value indicating whether [include null values in dictionaries].
            </summary>
            <value><c>true</c> if [include null values in dictionaries]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.Config.IncludeDefaultEnums">
            <summary>
            Gets or sets a value indicating whether [include default enums].
            </summary>
            <value><c>true</c> if [include default enums]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.Config.TreatEnumAsInteger">
            <summary>
            Gets or sets a value indicating whether [treat enum as integer].
            </summary>
            <value><c>true</c> if [treat enum as integer]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.Config.ExcludeTypeInfo">
            <summary>
            Gets or sets a value indicating whether [exclude type information].
            </summary>
            <value><c>true</c> if [exclude type information]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.Config.IncludeTypeInfo">
            <summary>
            Gets or sets a value indicating whether [include type information].
            </summary>
            <value><c>true</c> if [include type information]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.Config.Indent">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:ServiceStack.OrmLite.Base.Text.Config"/> is indent.
            </summary>
            <value><c>true</c> if indent; otherwise, <c>false</c>.</value>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Config.typeAttr">
            <summary>
            The type attribute
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.Config.TypeAttr">
            <summary>
            Gets or sets the type attribute.
            </summary>
            <value>The type attribute.</value>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Config.typeAttrSpan">
            <summary>
            The type attribute span
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.Config.TypeAttrMemory">
            <summary>
            Gets the type attribute memory.
            </summary>
            <value>The type attribute memory.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.Config.DateTimeFormat">
            <summary>
            Gets or sets the date time format.
            </summary>
            <value>The date time format.</value>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Config.jsonTypeAttrInObject">
            <summary>
            The json type attribute in object
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.Config.JsonTypeAttrInObject">
            <summary>
            Gets the json type attribute in object.
            </summary>
            <value>The json type attribute in object.</value>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Config.jsvTypeAttrInObject">
            <summary>
            The JSV type attribute in object
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.Config.JsvTypeAttrInObject">
            <summary>
            Gets the JSV type attribute in object.
            </summary>
            <value>The JSV type attribute in object.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.Config.TypeWriter">
            <summary>
            Gets or sets the type writer.
            </summary>
            <value>The type writer.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.Config.TypeFinder">
            <summary>
            Gets or sets the type finder.
            </summary>
            <value>The type finder.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.Config.ParsePrimitiveFn">
            <summary>
            Gets or sets the parse primitive function.
            </summary>
            <value>The parse primitive function.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.Config.SystemJsonCompatible">
            <summary>
            Gets or sets a value indicating whether [system json compatible].
            </summary>
            <value><c>true</c> if [system json compatible]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.Config.DateHandler">
            <summary>
            Gets or sets the date handler.
            </summary>
            <value>The date handler.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.Config.TimeSpanHandler">
            <summary>
            Gets or sets the time span handler.
            </summary>
            <value>The time span handler.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.Config.PropertyConvention">
            <summary>
            Gets or sets the property convention.
            </summary>
            <value>The property convention.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.Config.TextCase">
            <summary>
            Gets or sets the text case.
            </summary>
            <value>The text case.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.Config.ThrowOnError">
            <summary>
            Gets or sets a value indicating whether [throw on error].
            </summary>
            <value><c>true</c> if [throw on error]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.Config.SkipDateTimeConversion">
            <summary>
            Gets or sets a value indicating whether [skip date time conversion].
            </summary>
            <value><c>true</c> if [skip date time conversion]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.Config.AlwaysUseUtc">
            <summary>
            Gets or sets a value indicating whether [always use UTC].
            </summary>
            <value><c>true</c> if [always use UTC]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.Config.AssumeUtc">
            <summary>
            Gets or sets a value indicating whether [assume UTC].
            </summary>
            <value><c>true</c> if [assume UTC]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.Config.AppendUtcOffset">
            <summary>
            Gets or sets a value indicating whether [append UTC offset].
            </summary>
            <value><c>true</c> if [append UTC offset]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.Config.PreferInterfaces">
            <summary>
            Gets or sets a value indicating whether [prefer interfaces].
            </summary>
            <value><c>true</c> if [prefer interfaces]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.Config.IncludePublicFields">
            <summary>
            Gets or sets a value indicating whether [include public fields].
            </summary>
            <value><c>true</c> if [include public fields]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.Config.MaxDepth">
            <summary>
            Gets or sets the maximum depth.
            </summary>
            <value>The maximum depth.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.Config.OnDeserializationError">
            <summary>
            Gets or sets the on deserialization error.
            </summary>
            <value>The on deserialization error.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.Config.ModelFactory">
            <summary>
            Gets or sets the model factory.
            </summary>
            <value>The model factory.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.Config.ExcludePropertyReferences">
            <summary>
            Gets or sets the exclude property references.
            </summary>
            <value>The exclude property references.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.Config.ExcludeTypes">
            <summary>
            Gets or sets the exclude types.
            </summary>
            <value>The exclude types.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.Config.ExcludeTypeNames">
            <summary>
            Gets or sets the exclude type names.
            </summary>
            <value>The exclude type names.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.Config.EscapeUnicode">
            <summary>
            Gets or sets a value indicating whether [escape unicode].
            </summary>
            <value><c>true</c> if [escape unicode]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.Config.EscapeHtmlChars">
            <summary>
            Gets or sets a value indicating whether [escape HTML chars].
            </summary>
            <value><c>true</c> if [escape HTML chars]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.Config.Defaults">
            <summary>
            Gets the defaults.
            </summary>
            <value>The defaults.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Config.Populate(ServiceStack.OrmLite.Base.Text.Config)">
            <summary>
            Populates the specified configuration.
            </summary>
            <param name="config">The configuration.</param>
            <returns>Config.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.JsonExtensions">
            <summary>
            Class JsonExtensions.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.JsonExtensions.JsonTo``1(System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>
            JSON to Type
            </summary>
            <typeparam name="T">the type.</typeparam>
            <param name="map">The map.</param>
            <param name="key">The key.</param>
            <returns>the type</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.JsonExtensions.Get``1(System.Collections.Generic.Dictionary{System.String,System.String},System.String,``0)">
            <summary>
            Get JSON string value converted to T
            </summary>
            <typeparam name="T"></typeparam>
            <param name="map">The map.</param>
            <param name="key">The key.</param>
            <param name="defaultValue">The default value.</param>
            <returns>T.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.JsonExtensions.GetArray``1(System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>
            Gets the array.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="map">The map.</param>
            <param name="key">The key.</param>
            <returns>T[].</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.JsonExtensions.Get(System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>
            Get JSON string value
            </summary>
            <param name="map">The map.</param>
            <param name="key">The key.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.JsonExtensions.ConvertAll``1(ServiceStack.OrmLite.Base.Text.JsonArrayObjects,System.Func{ServiceStack.OrmLite.Base.Text.JsonObject,``0})">
            <summary>
            Converts all.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="jsonArrayObjects">The json array objects.</param>
            <param name="converter">The converter.</param>
            <returns>List&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.JsonExtensions.ConvertTo``1(ServiceStack.OrmLite.Base.Text.JsonObject,System.Func{ServiceStack.OrmLite.Base.Text.JsonObject,``0})">
            <summary>
            Converts to.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="jsonObject">The json object.</param>
            <param name="convertFn">The convert function.</param>
            <returns>T.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.JsonExtensions.ToDictionary(ServiceStack.OrmLite.Base.Text.JsonObject)">
            <summary>
            Converts to dictionary.
            </summary>
            <param name="jsonObject">The json object.</param>
            <returns>Dictionary&lt;System.String, System.String&gt;.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.JsonObject">
            <summary>
            Class JsonObject.
            Implements the <see cref="T:System.String" />
            </summary>
            <seealso cref="T:System.String" />
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.JsonObject.Item(System.String)">
            <summary>
            Get JSON string value
            </summary>
            <param name="key">The key.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.JsonObject.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.Dictionary`2.Enumerator" /> structure for the <see cref="T:System.Collections.Generic.Dictionary`2" />.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.JsonObject.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#String,System#String}}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.JsonObject.ToUnescapedDictionary">
            <summary>
            Converts to an unescaped dictionary.
            </summary>
            <returns>Dictionary&lt;System.String, System.String&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.JsonObject.Parse(System.String)">
            <summary>
            Parses the specified json.
            </summary>
            <param name="json">The json.</param>
            <returns>JsonObject.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.JsonObject.ParseArray(System.String)">
            <summary>
            Parses the array.
            </summary>
            <param name="json">The json.</param>
            <returns>JsonArrayObjects.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.JsonObject.Object(System.String)">
            <summary>
            Objects the specified property name.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>JsonObject.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.JsonObject.Child(System.String)">
            <summary>
            Get unescaped string value
            </summary>
            <param name="key">The key.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.JsonObject.WriteValue(System.IO.TextWriter,System.Object)">
            <summary>
            Write JSON Array, Object, bool or number values as raw string
            </summary>
            <param name="writer">The writer.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.JsonObject.IsJavaScriptNumber(System.String)">
            <summary>
            Determines whether [is java script number] [the specified string value].
            </summary>
            <param name="strValue">The string value.</param>
            <returns><c>true</c> if [is java script number] [the specified string value]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.JsonObject.ConvertTo``1">
            <summary>
            Converts to.
            </summary>
            <typeparam name="T"></typeparam>
            <returns>T.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.JsonObject.ConvertTo(System.Type)">
            <summary>
            Converts to.
            </summary>
            <param name="type">The type.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.JsonArrayObjects">
            <summary>
            Class JsonArrayObjects.
            Implements the <see cref="T:ServiceStack.OrmLite.Base.Text.JsonObject" />
            </summary>
            <seealso cref="T:ServiceStack.OrmLite.Base.Text.JsonObject" />
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.JsonArrayObjects.Parse(System.String)">
            <summary>
            Parses the specified json.
            </summary>
            <param name="json">The json.</param>
            <returns>JsonArrayObjects.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.IValueWriter">
            <summary>
            Interface IValueWriter
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.IValueWriter.WriteTo(ServiceStack.OrmLite.Base.Text.Common.ITypeSerializer,System.IO.TextWriter)">
            <summary>
            Writes to.
            </summary>
            <param name="serializer">The serializer.</param>
            <param name="writer">The writer.</param>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.JsonValue">
            <summary>
            Struct JsonValue
            Implements the <see cref="T:ServiceStack.OrmLite.Base.Text.IValueWriter" />
            </summary>
            <seealso cref="T:ServiceStack.OrmLite.Base.Text.IValueWriter" />
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.JsonValue.json">
            <summary>
            The json
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.JsonValue.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.OrmLite.Base.Text.JsonValue" /> struct.
            </summary>
            <param name="json">The json.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.JsonValue.As``1">
            <summary>
            As type
            </summary>
            <typeparam name="T"></typeparam>
            <returns>T.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.JsonValue.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.JsonValue.WriteTo(ServiceStack.OrmLite.Base.Text.Common.ITypeSerializer,System.IO.TextWriter)">
            <summary>
            Writes to.
            </summary>
            <param name="serializer">The serializer.</param>
            <param name="writer">The writer.</param>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.JsonSerializer">
            <summary>
            Creates an instance of a Type from a string value
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.JsonSerializer.#cctor">
            <summary>
            Initializes static members of the <see cref="T:ServiceStack.OrmLite.Base.Text.JsonSerializer" /> class.
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.JsonSerializer.BufferSize">
            <summary>
            The buffer size
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.JsonSerializer.OnSerialize">
            <summary>
            Gets or sets the on serialize.
            </summary>
            <value>The on serialize.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.JsonSerializer.DeserializeFromString``1(System.String)">
            <summary>
            Deserializes from string.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The value.</param>
            <returns>T.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.JsonSerializer.DeserializeFromSpan(System.Type,System.ReadOnlySpan{System.Char})">
            <summary>
            Deserializes from span.
            </summary>
            <param name="type">The type.</param>
            <param name="value">The value.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.JsonSerializer.DeserializeFromString(System.String,System.Type)">
            <summary>
            Deserializes from string.
            </summary>
            <param name="value">The value.</param>
            <param name="type">The type.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.JsonSerializer.SerializeToString``1(``0)">
            <summary>
            Serializes to string.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The value.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.JsonSerializer.SerializeToString(System.Object,System.Type)">
            <summary>
            Serializes to string.
            </summary>
            <param name="value">The value.</param>
            <param name="type">The type.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.JsonSerializer.SerializeToStream``1(``0,System.IO.Stream)">
            <summary>
            Serializes to stream.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The value.</param>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.JsonSerializer.SerializeToStream(System.Object,System.Type,System.IO.Stream)">
            <summary>
            Serializes to stream.
            </summary>
            <param name="value">The value.</param>
            <param name="type">The type.</param>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.JsonSerializer.WriteObjectToWriter(System.Object,ServiceStack.OrmLite.Base.Text.Common.WriteObjectDelegate,System.IO.TextWriter)">
            <summary>
            Writes the object to writer.
            </summary>
            <param name="value">The value.</param>
            <param name="serializeFn">The serialize function.</param>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.JsonSerializer.DeserializeFromStream``1(System.IO.Stream)">
            <summary>
            Deserializes from stream.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="stream">The stream.</param>
            <returns>T.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.JsonSerializer.DeserializeFromStream(System.Type,System.IO.Stream)">
            <summary>
            Deserializes from stream.
            </summary>
            <param name="type">The type.</param>
            <param name="stream">The stream.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.JsonSerializer.DeserializeResponse``1(System.Net.WebRequest)">
            <summary>
            Deserializes the response.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="webRequest">The web request.</param>
            <returns>T.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.JsonSerializer.DeserializeResponse``1(System.Type,System.Net.WebRequest)">
            <summary>
            Deserializes the response.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="type">The type.</param>
            <param name="webRequest">The web request.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.JsonSerializer.DeserializeRequest``1(System.Net.WebRequest)">
            <summary>
            Deserializes the request.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="webRequest">The web request.</param>
            <returns>T.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.JsonSerializer.DeserializeRequest(System.Type,System.Net.WebRequest)">
            <summary>
            Deserializes the request.
            </summary>
            <param name="type">The type.</param>
            <param name="webRequest">The web request.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.JsonSerializer.DeserializeResponse``1(System.Net.WebResponse)">
            <summary>
            Deserializes the response.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="webResponse">The web response.</param>
            <returns>T.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.JsonSerializer.DeserializeResponse(System.Type,System.Net.WebResponse)">
            <summary>
            Deserializes the response.
            </summary>
            <param name="type">The type.</param>
            <param name="webResponse">The web response.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.JsonStringSerializer">
            <summary>
            Class JsonStringSerializer.
            Implements the <see cref="T:ServiceStack.OrmLite.Base.Text.IStringSerializer" />
            </summary>
            <seealso cref="T:ServiceStack.OrmLite.Base.Text.IStringSerializer" />
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.JsonStringSerializer.DeserializeFromString``1(System.String)">
            <summary>
            Deserializes from string.
            </summary>
            <typeparam name="To">The type of to.</typeparam>
            <param name="serializedText">The serialized text.</param>
            <returns>To.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.JsonStringSerializer.DeserializeFromString(System.String,System.Type)">
            <summary>
            Deserializes from string.
            </summary>
            <param name="serializedText">The serialized text.</param>
            <param name="type">The type.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.JsonStringSerializer.SerializeToString``1(``0)">
            <summary>
            Serializes to string.
            </summary>
            <typeparam name="TFrom">The type of the t from.</typeparam>
            <param name="from">From.</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.JsonSerializer`1">
            <summary>
            Class JsonSerializer.
            Implements the <see cref="T:ServiceStack.OrmLite.Base.Text.ITypeSerializer`1" />
            </summary>
            <typeparam name="T"></typeparam>
            <seealso cref="T:ServiceStack.OrmLite.Base.Text.ITypeSerializer`1" />
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.JsonSerializer`1.DeserializeFromString(System.String)">
            <summary>
            Parses the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>T.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.JsonSerializer`1.SerializeToString(`0)">
            <summary>
            Serializes to string.
            </summary>
            <param name="value">The value.</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.Json.JsonReader">
            <summary>
            Class JsonReader.
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Json.JsonReader.Instance">
            <summary>
            The instance
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Json.JsonReader.ParseFnCache">
            <summary>
            The parse function cache
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Json.JsonReader.GetParseFn(System.Type)">
            <summary>
            Gets the parse function.
            </summary>
            <param name="type">The type.</param>
            <returns>ParseStringDelegate.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Json.JsonReader.GetParseSpanFn(System.Type)">
            <summary>
            Gets the parse span function.
            </summary>
            <param name="type">The type.</param>
            <returns>ParseStringSpanDelegate.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Json.JsonReader.GetParseStringSpanFn(System.Type)">
            <summary>
            Gets the parse string span function.
            </summary>
            <param name="type">The type.</param>
            <returns>ParseStringSpanDelegate.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Json.JsonReader.InitAot``1">
            <summary>
            Initializes the aot.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.Json.JsonReader`1">
            <summary>
            Class JsonReader.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Json.JsonReader`1.ReadFn">
            <summary>
            The read function
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Json.JsonReader`1.#cctor">
            <summary>
            Initializes static members of the <see cref="T:ServiceStack.OrmLite.Base.Text.Json.JsonReader`1" /> class.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Json.JsonReader`1.Refresh">
            <summary>
            Refreshes this instance.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Json.JsonReader`1.GetParseFn">
            <summary>
            Gets the parse function.
            </summary>
            <returns>ParseStringDelegate.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Json.JsonReader`1.GetParseStringSpanFn">
            <summary>
            Gets the parse string span function.
            </summary>
            <returns>ParseStringSpanDelegate.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Json.JsonReader`1.Parse(System.String)">
            <summary>
            Parses the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Json.JsonReader`1.Parse(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>System.Object.</returns>
            <exception cref="T:System.NotSupportedException">Can not deserialize interface type: "
                                                            + typeof(T).Name</exception>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.Json.SpanIndex">
            <summary>
            Struct SpanIndex
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Json.SpanIndex.#ctor(System.ReadOnlySpan{System.Char},System.Int32)">
            <summary>
            Struct SpanIndex
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.Json.SpanIndex.Span">
            <summary>
            Gets the span.
            </summary>
            <value>The span.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.Json.SpanIndex.Index">
            <summary>
            Gets the index.
            </summary>
            <value>The index.</value>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.Json.JsonTypeSerializer">
            <summary>
            Struct JsonTypeSerializer
            Implements the <see cref="T:ServiceStack.OrmLite.Base.Text.Common.ITypeSerializer" />
            </summary>
            <seealso cref="T:ServiceStack.OrmLite.Base.Text.Common.ITypeSerializer" />
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.Json.JsonTypeSerializer.Instance">
            <summary>
            The instance
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.Json.JsonTypeSerializer.ObjectDeserializer">
            <summary>
            Gets or sets the object deserializer.
            </summary>
            <value>The object deserializer.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.Json.JsonTypeSerializer.IncludeNullValues">
            <summary>
            Gets a value indicating whether [include null values].
            </summary>
            <value><c>true</c> if [include null values]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.Json.JsonTypeSerializer.IncludeNullValuesInDictionaries">
            <summary>
            Gets a value indicating whether [include null values in dictionaries].
            </summary>
            <value><c>true</c> if [include null values in dictionaries]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.Json.JsonTypeSerializer.TypeAttrInObject">
            <summary>
            Gets the type attribute in object.
            </summary>
            <value>The type attribute in object.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Json.JsonTypeSerializer.GetTypeAttrInObject(System.String)">
            <summary>
            Gets the type attribute in object.
            </summary>
            <param name="typeAttr">The type attribute.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Json.JsonTypeSerializer.GetWriteFn``1">
            <summary>
            Gets the write function.
            </summary>
            <typeparam name="T"></typeparam>
            <returns>WriteObjectDelegate.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Json.JsonTypeSerializer.GetWriteFn(System.Type)">
            <summary>
            Gets the write function.
            </summary>
            <param name="type">The type.</param>
            <returns>WriteObjectDelegate.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Json.JsonTypeSerializer.GetTypeInfo(System.Type)">
            <summary>
            Gets the type information.
            </summary>
            <param name="type">The type.</param>
            <returns>TypeInfo.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Json.JsonTypeSerializer.WriteRawString(System.IO.TextWriter,System.String)">
            <summary>
            Shortcut escape when we're sure value doesn't contain any escaped chars
            </summary>
            <param name="writer">The writer.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Json.JsonTypeSerializer.WritePropertyName(System.IO.TextWriter,System.String)">
            <summary>
            Writes the name of the property.
            </summary>
            <param name="writer">The writer.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Json.JsonTypeSerializer.WriteString(System.IO.TextWriter,System.String)">
            <summary>
            Writes the string.
            </summary>
            <param name="writer">The writer.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Json.JsonTypeSerializer.WriteBuiltIn(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the built in.
            </summary>
            <param name="writer">The writer.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Json.JsonTypeSerializer.WriteObjectString(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the object string.
            </summary>
            <param name="writer">The writer.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Json.JsonTypeSerializer.WriteFormattableObjectString(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the formattable object string.
            </summary>
            <param name="writer">The writer.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Json.JsonTypeSerializer.WriteException(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the exception.
            </summary>
            <param name="writer">The writer.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Json.JsonTypeSerializer.WriteDateTime(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the date time.
            </summary>
            <param name="writer">The writer.</param>
            <param name="oDateTime">The o date time.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Json.JsonTypeSerializer.WriteNullableDateTime(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the nullable date time.
            </summary>
            <param name="writer">The writer.</param>
            <param name="dateTime">The date time.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Json.JsonTypeSerializer.WriteDateTimeOffset(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the date time offset.
            </summary>
            <param name="writer">The writer.</param>
            <param name="oDateTimeOffset">The o date time offset.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Json.JsonTypeSerializer.WriteNullableDateTimeOffset(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the nullable date time offset.
            </summary>
            <param name="writer">The writer.</param>
            <param name="dateTimeOffset">The date time offset.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Json.JsonTypeSerializer.WriteTimeSpan(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the time span.
            </summary>
            <param name="writer">The writer.</param>
            <param name="oTimeSpan">The o time span.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Json.JsonTypeSerializer.WriteNullableTimeSpan(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the nullable time span.
            </summary>
            <param name="writer">The writer.</param>
            <param name="oTimeSpan">The o time span.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Json.JsonTypeSerializer.WriteDateOnly(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the date only.
            </summary>
            <param name="writer">The writer.</param>
            <param name="oDateOnly">The o date only.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Json.JsonTypeSerializer.WriteNullableDateOnly(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the nullable date only.
            </summary>
            <param name="writer">The writer.</param>
            <param name="oDateOnly">The o date only.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Json.JsonTypeSerializer.WriteTimeOnly(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the time only.
            </summary>
            <param name="writer">The writer.</param>
            <param name="oTimeOnly">The o time only.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Json.JsonTypeSerializer.WriteNullableTimeOnly(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the nullable time only.
            </summary>
            <param name="writer">The writer.</param>
            <param name="oTimeOnly">The o time only.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Json.JsonTypeSerializer.WriteGuid(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the unique identifier.
            </summary>
            <param name="writer">The writer.</param>
            <param name="oValue">The o value.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Json.JsonTypeSerializer.WriteNullableGuid(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the nullable unique identifier.
            </summary>
            <param name="writer">The writer.</param>
            <param name="oValue">The o value.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Json.JsonTypeSerializer.WriteBytes(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the bytes.
            </summary>
            <param name="writer">The writer.</param>
            <param name="oByteValue">The o byte value.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Json.JsonTypeSerializer.WriteChar(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the character.
            </summary>
            <param name="writer">The writer.</param>
            <param name="charValue">The character value.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Json.JsonTypeSerializer.WriteByte(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the byte.
            </summary>
            <param name="writer">The writer.</param>
            <param name="byteValue">The byte value.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Json.JsonTypeSerializer.WriteSByte(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the s byte.
            </summary>
            <param name="writer">The writer.</param>
            <param name="sbyteValue">The sbyte value.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Json.JsonTypeSerializer.WriteInt16(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the int16.
            </summary>
            <param name="writer">The writer.</param>
            <param name="intValue">The int value.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Json.JsonTypeSerializer.WriteUInt16(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the u int16.
            </summary>
            <param name="writer">The writer.</param>
            <param name="intValue">The int value.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Json.JsonTypeSerializer.WriteInt32(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the int32.
            </summary>
            <param name="writer">The writer.</param>
            <param name="intValue">The int value.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Json.JsonTypeSerializer.WriteUInt32(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the u int32.
            </summary>
            <param name="writer">The writer.</param>
            <param name="uintValue">The uint value.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Json.JsonTypeSerializer.WriteInt64(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the int64.
            </summary>
            <param name="writer">The writer.</param>
            <param name="integerValue">The integer value.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Json.JsonTypeSerializer.WriteUInt64(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the u int64.
            </summary>
            <param name="writer">The writer.</param>
            <param name="ulongValue">The ulong value.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Json.JsonTypeSerializer.WriteBool(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the bool.
            </summary>
            <param name="writer">The writer.</param>
            <param name="boolValue">The bool value.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Json.JsonTypeSerializer.WriteFloat(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the float.
            </summary>
            <param name="writer">The writer.</param>
            <param name="floatValue">The float value.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Json.JsonTypeSerializer.WriteDouble(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the double.
            </summary>
            <param name="writer">The writer.</param>
            <param name="doubleValue">The double value.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Json.JsonTypeSerializer.WriteDecimal(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the decimal.
            </summary>
            <param name="writer">The writer.</param>
            <param name="decimalValue">The decimal value.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Json.JsonTypeSerializer.WriteEnum(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the enum.
            </summary>
            <param name="writer">The writer.</param>
            <param name="enumValue">The enum value.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Json.JsonTypeSerializer.GetParseFn``1">
            <summary>
            Gets the parse function.
            </summary>
            <typeparam name="T"></typeparam>
            <returns>ParseStringDelegate.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Json.JsonTypeSerializer.GetParseStringSpanFn(System.Type)">
            <summary>
            Gets the parse string span function.
            </summary>
            <param name="type">The type.</param>
            <returns>ParseStringSpanDelegate.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Json.JsonTypeSerializer.ParseRawString(System.String)">
            <summary>
            Parses the raw string.
            </summary>
            <param name="value">The value.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Json.JsonTypeSerializer.ParseString(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses the string.
            </summary>
            <param name="value">The value.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Json.JsonTypeSerializer.ParseString(System.String)">
            <summary>
            Parses the string.
            </summary>
            <param name="value">The value.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Json.JsonTypeSerializer.IsEmptyMap(System.ReadOnlySpan{System.Char},System.Int32)">
            <summary>
            Determines whether [is empty map] [the specified value].
            </summary>
            <param name="value">The value.</param>
            <param name="i">The i.</param>
            <returns><c>true</c> if [is empty map] [the specified value]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Json.JsonTypeSerializer.ParseString(System.ReadOnlySpan{System.Char},System.Int32@)">
            <summary>
            Parses the string.
            </summary>
            <param name="json">The json.</param>
            <param name="index">The index.</param>
            <returns>ReadOnlySpan&lt;System.Char&gt;.</returns>
            <exception cref="P:ServiceStack.OrmLite.Base.Text.DiagnosticEvent.Exception">Invalid unquoted string starting with: " + json.SafeSubstring(50).ToString()</exception>
            <exception cref="P:ServiceStack.OrmLite.Base.Text.DiagnosticEvent.Exception">Invalid unquoted string ending with: " + json.SafeSubstring(json.Length - 50, 50).ToString()</exception>
            <exception cref="T:System.Exception">Invalid unquoted string starting with: " + json.SafeSubstring(50).ToString()</exception>
            <exception cref="T:System.Exception">Invalid unquoted string ending with: " + json.SafeSubstring(json.Length - 50, 50).ToString()</exception>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Json.JsonTypeSerializer.UnescapeString(System.String)">
            <summary>
            Unescapes the string.
            </summary>
            <param name="value">The value.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Json.JsonTypeSerializer.UnescapeString(System.ReadOnlySpan{System.Char})">
            <summary>
            Unescapes the string.
            </summary>
            <param name="value">The value.</param>
            <returns>ReadOnlySpan&lt;System.Char&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Json.JsonTypeSerializer.UnescapeStringAsObject(System.ReadOnlySpan{System.Char})">
            <summary>
            Unescapes the string as object.
            </summary>
            <param name="value">The value.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Json.JsonTypeSerializer.UnescapeSafeString(System.ReadOnlySpan{System.Char})">
            <summary>
            Unescapes the safe string.
            </summary>
            <param name="value">The value.</param>
            <returns>ReadOnlySpan&lt;System.Char&gt;.</returns>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Json.JsonTypeSerializer.IsSafeJsonChars">
            <summary>
            The is safe json chars
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Json.JsonTypeSerializer.UnescapeJsonString(System.String,System.Int32)">
            <summary>
            Unescapes the json string.
            </summary>
            <param name="json">The json.</param>
            <param name="index">The index.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Json.JsonTypeSerializer.UnescapeJsonString(System.ReadOnlySpan{System.Char},System.Int32)">
            <summary>
            Unescapes the json string.
            </summary>
            <param name="json">The json.</param>
            <param name="index">The index.</param>
            <returns>ReadOnlySpan&lt;System.Char&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Json.JsonTypeSerializer.UnescapeJsString(System.ReadOnlySpan{System.Char},System.Char,System.Boolean,System.Int32)">
            <summary>
            Unescapes the js string.
            </summary>
            <param name="json">The json.</param>
            <param name="quoteChar">The quote character.</param>
            <param name="removeQuotes">if set to <c>true</c> [remove quotes].</param>
            <param name="index">The index.</param>
            <returns>ReadOnlySpan&lt;System.Char&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Json.JsonTypeSerializer.Unescape(System.String)">
            <summary>
            Unescapes the specified input.
            </summary>
            <param name="input">The input.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Json.JsonTypeSerializer.Unescape(System.String,System.Boolean)">
            <summary>
            Unescapes the specified input.
            </summary>
            <param name="input">The input.</param>
            <param name="removeQuotes">if set to <c>true</c> [remove quotes].</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Json.JsonTypeSerializer.Unescape(System.ReadOnlySpan{System.Char})">
            <summary>
            Unescapes the specified input.
            </summary>
            <param name="input">The input.</param>
            <returns>ReadOnlySpan&lt;System.Char&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Json.JsonTypeSerializer.Unescape(System.ReadOnlySpan{System.Char},System.Boolean)">
            <summary>
            Unescapes the specified input.
            </summary>
            <param name="input">The input.</param>
            <param name="removeQuotes">if set to <c>true</c> [remove quotes].</param>
            <returns>ReadOnlySpan&lt;System.Char&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Json.JsonTypeSerializer.Unescape(System.ReadOnlySpan{System.Char},System.Boolean,System.Char)">
            <summary>
            Unescapes the specified input.
            </summary>
            <param name="input">The input.</param>
            <param name="removeQuotes">if set to <c>true</c> [remove quotes].</param>
            <param name="quoteChar">The quote character.</param>
            <returns>ReadOnlySpan&lt;System.Char&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Json.JsonTypeSerializer.ConvertFromUtf32(System.Int32)">
            <summary>
            Given a character as utf32, returns the equivalent string provided that the character
            is legal json.
            </summary>
            <param name="utf32">The utf32.</param>
            <returns>System.String.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">utf32 - The argument must be from 0 to 0x10FFFF.</exception>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Json.JsonTypeSerializer.EatTypeValue(System.ReadOnlySpan{System.Char},System.Int32@)">
            <summary>
            Eats the type value.
            </summary>
            <param name="value">The value.</param>
            <param name="i">The i.</param>
            <returns>ReadOnlySpan&lt;System.Char&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Json.JsonTypeSerializer.EatMapStartChar(System.ReadOnlySpan{System.Char},System.Int32@)">
            <summary>
            Eats the map start character.
            </summary>
            <param name="value">The value.</param>
            <param name="i">The i.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Json.JsonTypeSerializer.EatMapKey(System.ReadOnlySpan{System.Char},System.Int32@)">
            <summary>
            Eats the map key.
            </summary>
            <param name="value">The value.</param>
            <param name="i">The i.</param>
            <returns>ReadOnlySpan&lt;System.Char&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Json.JsonTypeSerializer.EatMapKeySeperator(System.ReadOnlySpan{System.Char},System.Int32@)">
            <summary>
            Eats the map key seperator.
            </summary>
            <param name="value">The value.</param>
            <param name="i">The i.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Json.JsonTypeSerializer.EatItemSeperatorOrMapEndChar(System.ReadOnlySpan{System.Char},System.Int32@)">
            <summary>
            Eats the item seperator or map end character.
            </summary>
            <param name="value">The value.</param>
            <param name="i">The i.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
            <exception cref="P:ServiceStack.OrmLite.Base.Text.DiagnosticEvent.Exception">Expected '{JsWriter.ItemSeperator}' or '{JsWriter.MapEndChar}'</exception>
            <exception cref="T:System.Exception">Expected '{JsWriter.ItemSeperator}' or '{JsWriter.MapEndChar}'</exception>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Json.JsonTypeSerializer.EatWhitespace(System.ReadOnlySpan{System.Char},System.Int32@)">
            <summary>
            Eats the whitespace.
            </summary>
            <param name="value">The value.</param>
            <param name="i">The i.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Json.JsonTypeSerializer.EatValue(System.ReadOnlySpan{System.Char},System.Int32@)">
            <summary>
            Eats the value.
            </summary>
            <param name="value">The value.</param>
            <param name="i">The i.</param>
            <returns>ReadOnlySpan&lt;System.Char&gt;.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.Json.JsonUtils">
            <summary>
            Class JsonUtils.
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Json.JsonUtils.MaxInteger">
            <summary>
            The maximum integer
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Json.JsonUtils.MinInteger">
            <summary>
            The minimum integer
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Json.JsonUtils.EscapeChar">
            <summary>
            The escape character
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Json.JsonUtils.QuoteChar">
            <summary>
            The quote character
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Json.JsonUtils.Null">
            <summary>
            The null
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Json.JsonUtils.True">
            <summary>
            The true
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Json.JsonUtils.False">
            <summary>
            The false
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Json.JsonUtils.SpaceChar">
            <summary>
            The space character
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Json.JsonUtils.TabChar">
            <summary>
            The tab character
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Json.JsonUtils.CarriageReturnChar">
            <summary>
            The carriage return character
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Json.JsonUtils.LineFeedChar">
            <summary>
            The line feed character
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Json.JsonUtils.FormFeedChar">
            <summary>
            The form feed character
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Json.JsonUtils.BackspaceChar">
            <summary>
            The backspace character
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Json.JsonUtils.EscapedBackslash">
            <summary>
            Micro-optimization keep pre-built char arrays saving a .ToCharArray() + function call (see .net implementation of .Write(string))
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Json.JsonUtils.EscapedTab">
            <summary>
            The escaped tab
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Json.JsonUtils.EscapedCarriageReturn">
            <summary>
            The escaped carriage return
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Json.JsonUtils.EscapedLineFeed">
            <summary>
            The escaped line feed
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Json.JsonUtils.EscapedFormFeed">
            <summary>
            The escaped form feed
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Json.JsonUtils.EscapedBackspace">
            <summary>
            The escaped backspace
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Json.JsonUtils.EscapedQuote">
            <summary>
            The escaped quote
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Json.JsonUtils.WhiteSpaceChars">
            <summary>
            The white space chars
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Json.JsonUtils.IsWhiteSpace(System.Char)">
            <summary>
            Determines whether [is white space] [the specified c].
            </summary>
            <param name="c">The c.</param>
            <returns><c>true</c> if [is white space] [the specified c]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Json.JsonUtils.WriteString(System.IO.TextWriter,System.String)">
            <summary>
            Writes the string.
            </summary>
            <param name="writer">The writer.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Json.JsonUtils.IsPrintable(System.Char)">
            <summary>
            Determines whether the specified c is printable.
            </summary>
            <param name="c">The c.</param>
            <returns><c>true</c> if the specified c is printable; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Json.JsonUtils.HasAnyEscapeChars(System.String,System.Boolean)">
            <summary>
            Searches the string for one or more non-printable characters.
            </summary>
            <param name="value">The string to search.</param>
            <param name="escapeHtmlChars">if set to <c>true</c> [escape HTML chars].</param>
            <returns>True if there are any characters that require escaping. False if the value can be written verbatim.</returns>
            <remarks>Micro optimizations: since quote and backslash are the only printable characters requiring escaping, removed previous optimization
            (using flags instead of value.IndexOfAny(EscapeChars)) in favor of two equality operations saving both memory and CPU time.
            Also slightly reduced code size by re-arranging conditions.
            TODO: Possible Linq-only solution requires profiling: return value.Any(c =&gt; !c.IsPrintable() || c == QuoteChar || c == EscapeChar);</remarks>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Json.JsonUtils.IntToHex(System.Int32,System.Char[])">
            <summary>
            Ints to hexadecimal.
            </summary>
            <param name="intValue">The int value.</param>
            <param name="hex">The hexadecimal.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Json.JsonUtils.IsJsObject(System.ReadOnlySpan{System.Char})">
            <summary>
            Determines whether [is js object] [the specified value].
            </summary>
            <param name="value">The value.</param>
            <returns><c>true</c> if [is js object] [the specified value]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Json.JsonUtils.IsJsArray(System.ReadOnlySpan{System.Char})">
            <summary>
            Determines whether [is js array] [the specified value].
            </summary>
            <param name="value">The value.</param>
            <returns><c>true</c> if [is js array] [the specified value]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.Json.JsonWriter">
            <summary>
            Class JsonWriter.
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Json.JsonWriter.Instance">
            <summary>
            The instance
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Json.JsonWriter.WriteFnCache">
            <summary>
            The write function cache
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Json.JsonWriter.RemoveCacheFn(System.Type)">
            <summary>
            Removes the cache function.
            </summary>
            <param name="forType">For type.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Json.JsonWriter.GetWriteFn(System.Type)">
            <summary>
            Gets the write function.
            </summary>
            <param name="type">The type.</param>
            <returns>WriteObjectDelegate.</returns>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Json.JsonWriter.JsonTypeInfoCache">
            <summary>
            The json type information cache
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Json.JsonWriter.GetTypeInfo(System.Type)">
            <summary>
            Gets the type information.
            </summary>
            <param name="type">The type.</param>
            <returns>TypeInfo.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Json.JsonWriter.WriteLateBoundObject(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the late bound object.
            </summary>
            <param name="writer">The writer.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Json.JsonWriter.InitAot``1">
            <summary>
            Initializes the aot.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.Json.TypeInfo">
            <summary>
            Class TypeInfo.
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Json.TypeInfo.EncodeMapKey">
            <summary>
            The encode map key
            </summary>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.Json.JsonWriter`1">
            <summary>
            Implement the serializer using a more static approach
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Json.JsonWriter`1.TypeInfo">
            <summary>
            The type information
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Json.JsonWriter`1.CacheFn">
            <summary>
            The cache function
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Json.JsonWriter`1.Reset">
            <summary>
            Resets this instance.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Json.JsonWriter`1.Refresh">
            <summary>
            Refreshes this instance.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Json.JsonWriter`1.WriteFn">
            <summary>
            Writes the function.
            </summary>
            <returns>WriteObjectDelegate.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Json.JsonWriter`1.GetTypeInfo">
            <summary>
            Gets the type information.
            </summary>
            <returns>TypeInfo.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Json.JsonWriter`1.#cctor">
            <summary>
            Initializes static members of the <see cref="T:ServiceStack.OrmLite.Base.Text.Json.JsonWriter`1" /> class.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Json.JsonWriter`1.WriteObject(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the object.
            </summary>
            <param name="writer">The writer.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Json.JsonWriter`1.GetRootObjectWriteFn(System.Object)">
            <summary>
            Gets the root object write function.
            </summary>
            <param name="value">The value.</param>
            <returns>WriteObjectDelegate.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.Jsv.JsvReader">
            <summary>
            Class JsvReader.
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Jsv.JsvReader.Instance">
            <summary>
            The instance
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Jsv.JsvReader.ParseFnCache">
            <summary>
            The parse function cache
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Jsv.JsvReader.GetParseFn(System.Type)">
            <summary>
            Gets the parse function.
            </summary>
            <param name="type">The type.</param>
            <returns>ParseStringDelegate.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Jsv.JsvReader.GetParseSpanFn(System.Type)">
            <summary>
            Gets the parse span function.
            </summary>
            <param name="type">The type.</param>
            <returns>ParseStringSpanDelegate.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Jsv.JsvReader.GetParseStringSpanFn(System.Type)">
            <summary>
            Gets the parse string span function.
            </summary>
            <param name="type">The type.</param>
            <returns>ParseStringSpanDelegate.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Jsv.JsvReader.InitAot``1">
            <summary>
            Initializes the aot.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.Jsv.JsvReader`1">
            <summary>
            Class JsvReader.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Jsv.JsvReader`1.ReadFn">
            <summary>
            The read function
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Jsv.JsvReader`1.#cctor">
            <summary>
            Initializes static members of the <see cref="T:ServiceStack.OrmLite.Base.Text.Jsv.JsvReader`1" /> class.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Jsv.JsvReader`1.Refresh">
            <summary>
            Refreshes this instance.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Jsv.JsvReader`1.GetParseFn">
            <summary>
            Gets the parse function.
            </summary>
            <returns>ParseStringDelegate.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Jsv.JsvReader`1.GetParseStringSpanFn">
            <summary>
            Gets the parse string span function.
            </summary>
            <returns>ParseStringSpanDelegate.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Jsv.JsvReader`1.Parse(System.String)">
            <summary>
            Parses the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Jsv.JsvReader`1.Parse(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>System.Object.</returns>
            <exception cref="T:System.NotSupportedException">Can not deserialize interface type: "
                                                            + typeof(T).Name</exception>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.Jsv.JsvTypeSerializer">
            <summary>
            Struct JsvTypeSerializer
            Implements the <see cref="T:ServiceStack.OrmLite.Base.Text.Common.ITypeSerializer" />
            </summary>
            <seealso cref="T:ServiceStack.OrmLite.Base.Text.Common.ITypeSerializer" />
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.Jsv.JsvTypeSerializer.Instance">
            <summary>
            The instance
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.Jsv.JsvTypeSerializer.ObjectDeserializer">
            <summary>
            Gets or sets the object deserializer.
            </summary>
            <value>The object deserializer.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.Jsv.JsvTypeSerializer.IncludeNullValues">
            <summary>
            Gets a value indicating whether [include null values].
            </summary>
            <value><c>true</c> if [include null values]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.Jsv.JsvTypeSerializer.IncludeNullValuesInDictionaries">
            <summary>
            Gets a value indicating whether [include null values in dictionaries].
            </summary>
            <value><c>true</c> if [include null values in dictionaries]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.Jsv.JsvTypeSerializer.TypeAttrInObject">
            <summary>
            Gets the type attribute in object.
            </summary>
            <value>The type attribute in object.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Jsv.JsvTypeSerializer.GetTypeAttrInObject(System.String)">
            <summary>
            Gets the type attribute in object.
            </summary>
            <param name="typeAttr">The type attribute.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Jsv.JsvTypeSerializer.GetWriteFn``1">
            <summary>
            Gets the write function.
            </summary>
            <typeparam name="T"></typeparam>
            <returns>WriteObjectDelegate.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Jsv.JsvTypeSerializer.GetWriteFn(System.Type)">
            <summary>
            Gets the write function.
            </summary>
            <param name="type">The type.</param>
            <returns>WriteObjectDelegate.</returns>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Jsv.JsvTypeSerializer.DefaultTypeInfo">
            <summary>
            The default type information
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Jsv.JsvTypeSerializer.GetTypeInfo(System.Type)">
            <summary>
            Gets the type information.
            </summary>
            <param name="type">The type.</param>
            <returns>TypeInfo.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Jsv.JsvTypeSerializer.WriteRawString(System.IO.TextWriter,System.String)">
            <summary>
            Writes the raw string.
            </summary>
            <param name="writer">The writer.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Jsv.JsvTypeSerializer.WritePropertyName(System.IO.TextWriter,System.String)">
            <summary>
            Writes the name of the property.
            </summary>
            <param name="writer">The writer.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Jsv.JsvTypeSerializer.WriteBuiltIn(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the built in.
            </summary>
            <param name="writer">The writer.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Jsv.JsvTypeSerializer.WriteObjectString(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the object string.
            </summary>
            <param name="writer">The writer.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Jsv.JsvTypeSerializer.WriteException(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the exception.
            </summary>
            <param name="writer">The writer.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Jsv.JsvTypeSerializer.WriteString(System.IO.TextWriter,System.String)">
            <summary>
            Writes the string.
            </summary>
            <param name="writer">The writer.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Jsv.JsvTypeSerializer.WriteFormattableObjectString(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the formattable object string.
            </summary>
            <param name="writer">The writer.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Jsv.JsvTypeSerializer.WriteDateTime(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the date time.
            </summary>
            <param name="writer">The writer.</param>
            <param name="oDateTime">The o date time.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Jsv.JsvTypeSerializer.WriteNullableDateTime(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the nullable date time.
            </summary>
            <param name="writer">The writer.</param>
            <param name="dateTime">The date time.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Jsv.JsvTypeSerializer.WriteDateTimeOffset(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the date time offset.
            </summary>
            <param name="writer">The writer.</param>
            <param name="oDateTimeOffset">The o date time offset.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Jsv.JsvTypeSerializer.WriteNullableDateTimeOffset(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the nullable date time offset.
            </summary>
            <param name="writer">The writer.</param>
            <param name="dateTimeOffset">The date time offset.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Jsv.JsvTypeSerializer.WriteTimeSpan(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the time span.
            </summary>
            <param name="writer">The writer.</param>
            <param name="oTimeSpan">The o time span.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Jsv.JsvTypeSerializer.WriteNullableTimeSpan(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the nullable time span.
            </summary>
            <param name="writer">The writer.</param>
            <param name="oTimeSpan">The o time span.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Jsv.JsvTypeSerializer.WriteGuid(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the unique identifier.
            </summary>
            <param name="writer">The writer.</param>
            <param name="oValue">The o value.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Jsv.JsvTypeSerializer.WriteNullableGuid(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the nullable unique identifier.
            </summary>
            <param name="writer">The writer.</param>
            <param name="oValue">The o value.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Jsv.JsvTypeSerializer.WriteBytes(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the bytes.
            </summary>
            <param name="writer">The writer.</param>
            <param name="oByteValue">The o byte value.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Jsv.JsvTypeSerializer.WriteChar(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the character.
            </summary>
            <param name="writer">The writer.</param>
            <param name="charValue">The character value.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Jsv.JsvTypeSerializer.WriteByte(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the byte.
            </summary>
            <param name="writer">The writer.</param>
            <param name="byteValue">The byte value.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Jsv.JsvTypeSerializer.WriteSByte(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the s byte.
            </summary>
            <param name="writer">The writer.</param>
            <param name="sbyteValue">The sbyte value.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Jsv.JsvTypeSerializer.WriteInt16(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the int16.
            </summary>
            <param name="writer">The writer.</param>
            <param name="intValue">The int value.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Jsv.JsvTypeSerializer.WriteUInt16(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the u int16.
            </summary>
            <param name="writer">The writer.</param>
            <param name="intValue">The int value.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Jsv.JsvTypeSerializer.WriteInt32(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the int32.
            </summary>
            <param name="writer">The writer.</param>
            <param name="intValue">The int value.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Jsv.JsvTypeSerializer.WriteUInt32(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the u int32.
            </summary>
            <param name="writer">The writer.</param>
            <param name="uintValue">The uint value.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Jsv.JsvTypeSerializer.WriteUInt64(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the u int64.
            </summary>
            <param name="writer">The writer.</param>
            <param name="ulongValue">The ulong value.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Jsv.JsvTypeSerializer.WriteInt64(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the int64.
            </summary>
            <param name="writer">The writer.</param>
            <param name="longValue">The long value.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Jsv.JsvTypeSerializer.WriteBool(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the bool.
            </summary>
            <param name="writer">The writer.</param>
            <param name="boolValue">The bool value.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Jsv.JsvTypeSerializer.WriteFloat(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the float.
            </summary>
            <param name="writer">The writer.</param>
            <param name="floatValue">The float value.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Jsv.JsvTypeSerializer.WriteDouble(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the double.
            </summary>
            <param name="writer">The writer.</param>
            <param name="doubleValue">The double value.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Jsv.JsvTypeSerializer.WriteDecimal(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the decimal.
            </summary>
            <param name="writer">The writer.</param>
            <param name="decimalValue">The decimal value.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Jsv.JsvTypeSerializer.WriteEnum(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the enum.
            </summary>
            <param name="writer">The writer.</param>
            <param name="enumValue">The enum value.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Jsv.JsvTypeSerializer.WriteDateOnly(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the date only.
            </summary>
            <param name="writer">The writer.</param>
            <param name="oDateOnly">The o date only.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Jsv.JsvTypeSerializer.WriteNullableDateOnly(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the nullable date only.
            </summary>
            <param name="writer">The writer.</param>
            <param name="oDateOnly">The o date only.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Jsv.JsvTypeSerializer.WriteTimeOnly(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the time only.
            </summary>
            <param name="writer">The writer.</param>
            <param name="oTimeOnly">The o time only.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Jsv.JsvTypeSerializer.WriteNullableTimeOnly(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the nullable time only.
            </summary>
            <param name="writer">The writer.</param>
            <param name="oTimeOnly">The o time only.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Jsv.JsvTypeSerializer.GetParseFn``1">
            <summary>
            Gets the parse function.
            </summary>
            <typeparam name="T"></typeparam>
            <returns>ParseStringDelegate.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Jsv.JsvTypeSerializer.GetParseStringSpanFn(System.Type)">
            <summary>
            Gets the parse string span function.
            </summary>
            <param name="type">The type.</param>
            <returns>ParseStringSpanDelegate.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Jsv.JsvTypeSerializer.UnescapeStringAsObject(System.ReadOnlySpan{System.Char})">
            <summary>
            Unescapes the string as object.
            </summary>
            <param name="value">The value.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Jsv.JsvTypeSerializer.UnescapeSafeString(System.ReadOnlySpan{System.Char})">
            <summary>
            Unescapes the safe string.
            </summary>
            <param name="value">The value.</param>
            <returns>ReadOnlySpan&lt;System.Char&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Jsv.JsvTypeSerializer.ParseRawString(System.String)">
            <summary>
            Parses the raw string.
            </summary>
            <param name="value">The value.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Jsv.JsvTypeSerializer.ParseString(System.String)">
            <summary>
            Parses the string.
            </summary>
            <param name="value">The value.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Jsv.JsvTypeSerializer.ParseString(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses the string.
            </summary>
            <param name="value">The value.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Jsv.JsvTypeSerializer.UnescapeString(System.String)">
            <summary>
            Unescapes the string.
            </summary>
            <param name="value">The value.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Jsv.JsvTypeSerializer.UnescapeString(System.ReadOnlySpan{System.Char})">
            <summary>
            Unescapes the string.
            </summary>
            <param name="value">The value.</param>
            <returns>ReadOnlySpan&lt;System.Char&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Jsv.JsvTypeSerializer.EatTypeValue(System.ReadOnlySpan{System.Char},System.Int32@)">
            <summary>
            Eats the type value.
            </summary>
            <param name="value">The value.</param>
            <param name="i">The i.</param>
            <returns>ReadOnlySpan&lt;System.Char&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Jsv.JsvTypeSerializer.EatMapStartChar(System.ReadOnlySpan{System.Char},System.Int32@)">
            <summary>
            Eats the map start character.
            </summary>
            <param name="value">The value.</param>
            <param name="i">The i.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Jsv.JsvTypeSerializer.EatMapKey(System.ReadOnlySpan{System.Char},System.Int32@)">
            <summary>
            Eats the map key.
            </summary>
            <param name="value">The value.</param>
            <param name="i">The i.</param>
            <returns>ReadOnlySpan&lt;System.Char&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Jsv.JsvTypeSerializer.EatMapKeySeperator(System.ReadOnlySpan{System.Char},System.Int32@)">
            <summary>
            Eats the map key seperator.
            </summary>
            <param name="value">The value.</param>
            <param name="i">The i.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Jsv.JsvTypeSerializer.EatItemSeperatorOrMapEndChar(System.ReadOnlySpan{System.Char},System.Int32@)">
            <summary>
            Eats the item seperator or map end character.
            </summary>
            <param name="value">The value.</param>
            <param name="i">The i.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
            <exception cref="P:ServiceStack.OrmLite.Base.Text.DiagnosticEvent.Exception">Expected '{JsWriter.ItemSeperator}' or '{JsWriter.MapEndChar}'</exception>
            <exception cref="T:System.Exception">Expected '{JsWriter.ItemSeperator}' or '{JsWriter.MapEndChar}'</exception>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Jsv.JsvTypeSerializer.EatWhitespace(System.ReadOnlySpan{System.Char},System.Int32@)">
            <summary>
            Eats the whitespace.
            </summary>
            <param name="value">The value.</param>
            <param name="i">The i.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Jsv.JsvTypeSerializer.EatValue(System.ReadOnlySpan{System.Char},System.Int32@)">
            <summary>
            Eats the value.
            </summary>
            <param name="value">The value.</param>
            <param name="i">The i.</param>
            <returns>ReadOnlySpan&lt;System.Char&gt;.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.Jsv.JsvWriter">
            <summary>
            Class JsvWriter.
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Jsv.JsvWriter.Instance">
            <summary>
            The instance
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Jsv.JsvWriter.WriteFnCache">
            <summary>
            The write function cache
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Jsv.JsvWriter.RemoveCacheFn(System.Type)">
            <summary>
            Removes the cache function.
            </summary>
            <param name="forType">For type.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Jsv.JsvWriter.GetWriteFn(System.Type)">
            <summary>
            Gets the write function.
            </summary>
            <param name="type">The type.</param>
            <returns>WriteObjectDelegate.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Jsv.JsvWriter.WriteLateBoundObject(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the late bound object.
            </summary>
            <param name="writer">The writer.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.Jsv.JsvWriter`1">
            <summary>
            Implement the serializer using a more static approach
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Jsv.JsvWriter`1.CacheFn">
            <summary>
            The cache function
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Jsv.JsvWriter`1.Reset">
            <summary>
            Resets this instance.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Jsv.JsvWriter`1.Refresh">
            <summary>
            Refreshes this instance.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Jsv.JsvWriter`1.WriteFn">
            <summary>
            Writes the function.
            </summary>
            <returns>WriteObjectDelegate.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Jsv.JsvWriter`1.#cctor">
            <summary>
            Initializes static members of the <see cref="T:ServiceStack.OrmLite.Base.Text.Jsv.JsvWriter`1" /> class.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Jsv.JsvWriter`1.WriteObject(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the object.
            </summary>
            <param name="writer">The writer.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Jsv.JsvWriter`1.WriteRootObject(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the root object.
            </summary>
            <param name="writer">The writer.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.LicenseException">
            <summary>
            Class LicenseException.
            Implements the <see cref="T:System.Exception" />
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.LicenseException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.OrmLite.Base.Text.LicenseException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.LicenseException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.OrmLite.Base.Text.LicenseException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (<see langword="Nothing" /> in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.LicenseType">
            <summary>
            Enum LicenseType
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.LicenseType.Free">
            <summary>
            The free
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.LicenseType.FreeIndividual">
            <summary>
            The free individual/
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.LicenseType.FreeOpenSource">
            <summary>
            The free open source
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.LicenseType.Indie">
            <summary>
            The indie
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.LicenseType.Business">
            <summary>
            The business
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.LicenseType.Enterprise">
            <summary>
            The enterprise
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.LicenseType.TextIndie">
            <summary>
            The text indie
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.LicenseType.TextBusiness">
            <summary>
            The text business
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.LicenseType.OrmLiteIndie">
            <summary>
            The ormlite indie
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.LicenseType.OrmLiteBusiness">
            <summary>
            The ormlite business
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.LicenseType.RedisIndie">
            <summary>
            The redis indie
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.LicenseType.RedisBusiness">
            <summary>
            The redis business
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.LicenseType.AwsIndie">
            <summary>
            The aws indie
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.LicenseType.AwsBusiness">
            <summary>
            The aws business/
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.LicenseType.Trial">
            <summary>
            The trial
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.LicenseType.Site">
            <summary>
            The site
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.LicenseType.TextSite">
            <summary>
            The text site
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.LicenseType.RedisSite">
            <summary>
            The redis site
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.LicenseType.OrmLiteSite">
            <summary>
            The ormlite site
            </summary>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.LicenseKey">
            <summary>
            Class LicenseKey.
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.LicenseKey.Ref">
            <summary>
            Gets or sets the reference.
            </summary>
            <value>The reference.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.LicenseKey.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.LicenseKey.Type">
            <summary>
            Gets or sets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.LicenseKey.Hash">
            <summary>
            Gets or sets the hash.
            </summary>
            <value>The hash.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.LicenseKey.Expiry">
            <summary>
            Gets or sets the expiry.
            </summary>
            <value>The expiry.</value>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.LicenseUtils">
            <summary>
            Internal Utilities to verify licensing
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.LicenseUtils.RuntimePublicKey">
            <summary>
            The runtime public key
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.LicenseUtils.LicensePublicKey">
            <summary>
            The license public key
            </summary>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.LicenseUtils.ActivatedLicense">
            <summary>
            Class __ActivatedLicense.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.LicenseUtils.RegisterLicense(System.String)">
            <summary>
            Registers the license.
            </summary>
            <param name="licenseKeyText">The license key text.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.LicenseUtils.AssertValidUsage">
            <summary>
            Asserts the valid usage.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.LicenseUtils.ToLicenseKey(System.String)">
            <summary>
            Converts to license key.
            </summary>
            <param name="licenseKeyText">The license key text.</param>
            <returns>ServiceStack.OrmLite.Base.Text.LicenseKey.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.LicenseUtils.ToLicenseKeyFallback(System.String)">
            <summary>
            Converts to license key fallback.
            </summary>
            <param name="licenseKeyText">The license key text.</param>
            <returns>ServiceStack.OrmLite.Base.Text.LicenseKey.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.LicenseUtils.VerifyLicenseKeyText(System.String)">
            <summary>
            Verifies the license key text.
            </summary>
            <param name="licenseKeyText">The license key text.</param>
            <returns>ServiceStack.OrmLite.Base.Text.LicenseKey.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.LicenseUtils.LicenseKeyRegex">
            <remarks>
            Pattern:<br/>
            <code>\\s+</code><br/>
            Explanation:<br/>
            <code>
            ○ Match a whitespace character atomically at least once.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.ListExtensions">
            <summary>
            Class ListExtensions.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.ListExtensions.Join``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Joins the specified seperator.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="values">The values.</param>
            <param name="seperator">The seperator.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.ListExtensions.AddIfNotExists``1(System.Collections.Generic.List{``0},``0)">
            <summary>
            Adds if not exists.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list">The list.</param>
            <param name="item">The item.</param>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.MemoryProvider">
            <summary>
            Class MemoryProvider.
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.MemoryProvider.Instance">
            <summary>
            The instance
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.MemoryProvider.BadFormat">
            <summary>
            The bad format
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.MemoryProvider.OverflowMessage">
            <summary>
            The overflow message
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.MemoryProvider.TryParseBoolean(System.ReadOnlySpan{System.Char},System.Boolean@)">
            <summary>
            Tries the parse boolean.
            </summary>
            <param name="value">The value.</param>
            <param name="result">if set to <c>true</c> [result].</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.MemoryProvider.ParseBoolean(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses the boolean.
            </summary>
            <param name="value">The value.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.MemoryProvider.TryParseDecimal(System.ReadOnlySpan{System.Char},System.Decimal@)">
            <summary>
            Tries the parse decimal.
            </summary>
            <param name="value">The value.</param>
            <param name="result">The result.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.MemoryProvider.ParseDecimal(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses the decimal.
            </summary>
            <param name="value">The value.</param>
            <returns>System.Decimal.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.MemoryProvider.ParseDecimal(System.ReadOnlySpan{System.Char},System.Boolean)">
            <summary>
            Parses the decimal.
            </summary>
            <param name="value">The value.</param>
            <param name="allowThousands">if set to <c>true</c> [allow thousands].</param>
            <returns>System.Decimal.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.MemoryProvider.TryParseFloat(System.ReadOnlySpan{System.Char},System.Single@)">
            <summary>
            Tries the parse float.
            </summary>
            <param name="value">The value.</param>
            <param name="result">The result.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.MemoryProvider.ParseFloat(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses the float.
            </summary>
            <param name="value">The value.</param>
            <returns>System.Single.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.MemoryProvider.TryParseDouble(System.ReadOnlySpan{System.Char},System.Double@)">
            <summary>
            Tries the parse double.
            </summary>
            <param name="value">The value.</param>
            <param name="result">The result.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.MemoryProvider.ParseDouble(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses the double.
            </summary>
            <param name="value">The value.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.MemoryProvider.ParseSByte(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses the s byte.
            </summary>
            <param name="value">The value.</param>
            <returns>System.SByte.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.MemoryProvider.ParseByte(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses the byte.
            </summary>
            <param name="value">The value.</param>
            <returns>System.Byte.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.MemoryProvider.ParseInt32(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses the int32.
            </summary>
            <param name="value">The value.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.MemoryProvider.ParseUInt32(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles)">
            <summary>
            Parses the u int32.
            </summary>
            <param name="value">The value.</param>
            <param name="style">The style.</param>
            <returns>System.UInt32.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.MemoryProvider.ParseBase64(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses the base64.
            </summary>
            <param name="value">The value.</param>
            <returns>System.Byte[].</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.MemoryProvider.Write(System.IO.Stream,System.ReadOnlyMemory{System.Char})">
            <summary>
            Writes the specified stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.MemoryProvider.Write(System.IO.Stream,System.ReadOnlyMemory{System.Byte})">
            <summary>
            Writes the specified stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.MemoryProvider.WriteAsync(System.IO.Stream,System.ReadOnlyMemory{System.Char},System.Threading.CancellationToken)">
            <summary>
            Writes the asynchronous.
            </summary>
            <param name="stream">The stream.</param>
            <param name="value">The value.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.MemoryProvider.WriteAsync(System.IO.Stream,System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Writes the asynchronous.
            </summary>
            <param name="stream">The stream.</param>
            <param name="value">The value.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.MemoryProvider.WriteAsync(System.IO.Stream,System.ReadOnlySpan{System.Char},System.Threading.CancellationToken)">
            <summary>
            Writes the asynchronous.
            </summary>
            <param name="stream">The stream.</param>
            <param name="value">The value.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.MemoryProvider.Deserialize(System.IO.Stream,System.Type,ServiceStack.OrmLite.Base.Text.Common.DeserializeStringSpanDelegate)">
            <summary>
            Deserializes the specified stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="type">The type.</param>
            <param name="deserializer">The deserializer.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.MemoryProvider.DeserializeAsync(System.IO.Stream,System.Type,ServiceStack.OrmLite.Base.Text.Common.DeserializeStringSpanDelegate)">
            <summary>
            Deserializes the asynchronous.
            </summary>
            <param name="stream">The stream.</param>
            <param name="type">The type.</param>
            <param name="deserializer">The deserializer.</param>
            <returns>Task&lt;System.Object&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.MemoryProvider.Append(System.Text.StringBuilder,System.ReadOnlySpan{System.Char})">
            <summary>
            Appends the specified sb.
            </summary>
            <param name="sb">The sb.</param>
            <param name="value">The value.</param>
            <returns>StringBuilder.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.MimeTypes">
            <summary>
            Class MimeTypes.
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.MimeTypes.ExtensionMimeTypes">
            <summary>
            The extension MIME types
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.MimeTypes.Html">
            <summary>
            The HTML
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.MimeTypes.Css">
            <summary>
            The CSS
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.MimeTypes.Xml">
            <summary>
            The XML
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.MimeTypes.XmlText">
            <summary>
            The XML text
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.MimeTypes.Json">
            <summary>
            The json
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.MimeTypes.JsonUtf8Suffix">
            <summary>
            The json UTF8 suffix
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.MimeTypes.Utf8Suffix">
            <summary>
            The UTF8 suffix
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.MimeTypes.JsonText">
            <summary>
            The json text
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.MimeTypes.Jsv">
            <summary>
            The JSV
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.MimeTypes.Csv">
            <summary>
            The CSV
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.MimeTypes.ProtoBuf">
            <summary>
            The proto buf
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.MimeTypes.JavaScript">
            <summary>
            The java script
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.MimeTypes.WebAssembly">
            <summary>
            The web assembly
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.MimeTypes.Jar">
            <summary>
            The jar
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.MimeTypes.Dmg">
            <summary>
            The DMG
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.MimeTypes.Pkg">
            <summary>
            The PKG
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.MimeTypes.JsonReport">
            <summary>
            The json report
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.MimeTypes.YamlText">
            <summary>
            The yaml text
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.MimeTypes.PlainText">
            <summary>
            The plain text
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.MimeTypes.MsgPack">
            <summary>
            The MSG pack
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.MimeTypes.Wire">
            <summary>
            The wire
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.MimeTypes.Compressed">
            <summary>
            The compressed
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.MimeTypes.NetSerializer">
            <summary>
            The net serializer
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.MimeTypes.Excel">
            <summary>
            The excel
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.MimeTypes.MsWord">
            <summary>
            The ms word
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.MimeTypes.Cert">
            <summary>
            The cert
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.MimeTypes.ImageSvg">
            <summary>
            The image SVG
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.MimeTypes.Bson">
            <summary>
            The bson
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.MimeTypes.Binary">
            <summary>
            The binary
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.MimeTypes.GetExtension(System.String)">
            <summary>
            Gets the extension.
            </summary>
            <param name="mimeType">Type of the MIME.</param>
            <returns>System.String.</returns>
            <exception cref="T:System.NotSupportedException">Unknown mimeType: " + mimeType</exception>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.MimeTypes.GetRealContentType(System.String)">
            <summary>
            Gets the type of the real content.
            </summary>
            <param name="contentType">Type of the content.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.MimeTypes.MatchesContentType(System.String,System.String)">
            <summary>
            Case-insensitive, trimmed compare of two content types from start to ';', i.e. without charset suffix
            </summary>
            <param name="contentType">Type of the content.</param>
            <param name="matchesContentType">Type of the matches content.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.MimeTypes.IsBinaryFilter">
            <summary>
            Gets or sets the is binary filter.
            </summary>
            <value>The is binary filter.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.MimeTypes.IsBinary(System.String)">
            <summary>
            Determines whether the specified content type is binary.
            </summary>
            <param name="contentType">Type of the content.</param>
            <returns><c>true</c> if the specified content type is binary; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.MimeTypes.GetMimeType(System.String)">
            <summary>
            Gets the type of the MIME.
            </summary>
            <param name="fileNameOrExt">The file name or ext.</param>
            <returns>System.String.</returns>
            <exception cref="T:System.ArgumentNullException">fileNameOrExt</exception>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.NetCoreMemory">
            <summary>
            Class NetCoreMemory. This class cannot be inherited.
            Implements the <see cref="T:ServiceStack.OrmLite.Base.Text.MemoryProvider" />
            </summary>
            <seealso cref="T:ServiceStack.OrmLite.Base.Text.MemoryProvider" />
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.NetCoreMemory.provider">
            <summary>
            The provider
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.NetCoreMemory.Provider">
            <summary>
            Gets the provider.
            </summary>
            <value>The provider.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.NetCoreMemory.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:ServiceStack.OrmLite.Base.Text.NetCoreMemory"/> class from being created.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.NetCoreMemory.Configure">
            <summary>
            Configures this instance.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.NetCoreMemory.ParseBoolean(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses the boolean.
            </summary>
            <param name="value">The value.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.NetCoreMemory.TryParseBoolean(System.ReadOnlySpan{System.Char},System.Boolean@)">
            <summary>
            Tries the parse boolean.
            </summary>
            <param name="value">The value.</param>
            <param name="result">if set to <c>true</c> [result].</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.NetCoreMemory.TryParseDecimal(System.ReadOnlySpan{System.Char},System.Decimal@)">
            <summary>
            Tries the parse decimal.
            </summary>
            <param name="value">The value.</param>
            <param name="result">The result.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.NetCoreMemory.ParseDecimal(System.ReadOnlySpan{System.Char},System.Boolean)">
            <summary>
            Parses the decimal.
            </summary>
            <param name="value">The value.</param>
            <param name="allowThousands">if set to <c>true</c> [allow thousands].</param>
            <returns>System.Decimal.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.NetCoreMemory.TryParseFloat(System.ReadOnlySpan{System.Char},System.Single@)">
            <summary>
            Tries the parse float.
            </summary>
            <param name="value">The value.</param>
            <param name="result">The result.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.NetCoreMemory.TryParseDouble(System.ReadOnlySpan{System.Char},System.Double@)">
            <summary>
            Tries the parse double.
            </summary>
            <param name="value">The value.</param>
            <param name="result">The result.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.NetCoreMemory.ParseDecimal(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses the decimal.
            </summary>
            <param name="value">The value.</param>
            <returns>System.Decimal.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.NetCoreMemory.ParseFloat(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses the float.
            </summary>
            <param name="value">The value.</param>
            <returns>System.Single.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.NetCoreMemory.ParseDouble(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses the double.
            </summary>
            <param name="value">The value.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.NetCoreMemory.ParseSByte(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses the s byte.
            </summary>
            <param name="value">The value.</param>
            <returns>System.SByte.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.NetCoreMemory.ParseByte(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses the byte.
            </summary>
            <param name="value">The value.</param>
            <returns>System.Byte.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.NetCoreMemory.ParseInt32(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses the int32.
            </summary>
            <param name="value">The value.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.NetCoreMemory.ParseUInt32(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles)">
            <summary>
            Parses the u int32.
            </summary>
            <param name="value">The value.</param>
            <param name="style">The style.</param>
            <returns>System.UInt32.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.NetCoreMemory.ParseBase64(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses the base64.
            </summary>
            <param name="value">The value.</param>
            <returns>System.Byte[].</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.NetCoreMemory.Write(System.IO.Stream,System.ReadOnlyMemory{System.Char})">
            <summary>
            Writes the specified stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.NetCoreMemory.Write(System.IO.Stream,System.ReadOnlyMemory{System.Byte})">
            <summary>
            Writes the specified stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.NetCoreMemory.WriteAsync(System.IO.Stream,System.ReadOnlyMemory{System.Char},System.Threading.CancellationToken)">
            <summary>
            Write as an asynchronous operation.
            </summary>
            <param name="stream">The stream.</param>
            <param name="value">The value.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>A Task representing the asynchronous operation.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.NetCoreMemory.WriteAsync(System.IO.Stream,System.ReadOnlySpan{System.Char},System.Threading.CancellationToken)">
            <summary>
            Writes the asynchronous.
            </summary>
            <param name="stream">The stream.</param>
            <param name="value">The value.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.NetCoreMemory.WriteAsync(System.IO.Stream,System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Write as an asynchronous operation.
            </summary>
            <param name="stream">The stream.</param>
            <param name="value">The value.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>A Task representing the asynchronous operation.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.NetCoreMemory.Deserialize(System.IO.Stream,System.Type,ServiceStack.OrmLite.Base.Text.Common.DeserializeStringSpanDelegate)">
            <summary>
            Deserializes the specified stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="type">The type.</param>
            <param name="deserializer">The deserializer.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.NetCoreMemory.DeserializeAsync(System.IO.Stream,System.Type,ServiceStack.OrmLite.Base.Text.Common.DeserializeStringSpanDelegate)">
            <summary>
            Deserialize as an asynchronous operation.
            </summary>
            <param name="stream">The stream.</param>
            <param name="type">The type.</param>
            <param name="deserializer">The deserializer.</param>
            <returns>A Task&lt;System.Object&gt; representing the asynchronous operation.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.NetCoreMemory.Deserialize(System.IO.MemoryStream,System.Boolean,System.Type,ServiceStack.OrmLite.Base.Text.Common.DeserializeStringSpanDelegate)">
            <summary>
            Deserializes the specified memory stream.
            </summary>
            <param name="memoryStream">The memory stream.</param>
            <param name="fromPool">if set to <c>true</c> [from pool].</param>
            <param name="type">The type.</param>
            <param name="deserializer">The deserializer.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.NetCoreMemory.Append(System.Text.StringBuilder,System.ReadOnlySpan{System.Char})">
            <summary>
            Appends the specified sb.
            </summary>
            <param name="sb">The sb.</param>
            <param name="value">The value.</param>
            <returns>StringBuilder.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.NetCoreMemory.ToUtf8(System.ReadOnlySpan{System.Char})">
            <summary>
            Converts to utf8.
            </summary>
            <param name="source">The source.</param>
            <returns>ReadOnlyMemory&lt;System.Byte&gt;.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.ObjectDictionary">
            <summary>
            UX friendly alternative alias of Dictionary&lt;string, object&gt;
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.ObjectDictionary.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.OrmLite.Base.Text.ObjectDictionary" /> class.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.ObjectDictionary.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.OrmLite.Base.Text.ObjectDictionary" /> class.
            </summary>
            <param name="capacity">The initial number of elements that the <see cref="T:System.Collections.Generic.Dictionary`2" /> can contain.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.ObjectDictionary.#ctor(System.Collections.Generic.IEqualityComparer{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.OrmLite.Base.Text.ObjectDictionary" /> class.
            </summary>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> implementation to use when comparing keys, or <see langword="null" /> to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1" /> for the type of the key.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.ObjectDictionary.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.OrmLite.Base.Text.ObjectDictionary" /> class.
            </summary>
            <param name="capacity">The initial number of elements that the <see cref="T:System.Collections.Generic.Dictionary`2" /> can contain.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> implementation to use when comparing keys, or <see langword="null" /> to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1" /> for the type of the key.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.ObjectDictionary.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.OrmLite.Base.Text.ObjectDictionary" /> class.
            </summary>
            <param name="dictionary">The <see cref="T:System.Collections.Generic.IDictionary`2" /> whose elements are copied to the new <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.ObjectDictionary.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IEqualityComparer{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.OrmLite.Base.Text.ObjectDictionary" /> class.
            </summary>
            <param name="dictionary">The <see cref="T:System.Collections.Generic.IDictionary`2" /> whose elements are copied to the new <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> implementation to use when comparing keys, or <see langword="null" /> to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1" /> for the type of the key.</param>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.StringDictionary">
            <summary>
            UX friendly alternative alias of Dictionary&lt;string, string&gt;
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringDictionary.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.OrmLite.Base.Text.StringDictionary" /> class.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringDictionary.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.OrmLite.Base.Text.StringDictionary" /> class.
            </summary>
            <param name="capacity">The initial number of elements that the <see cref="T:System.Collections.Generic.Dictionary`2" /> can contain.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringDictionary.#ctor(System.Collections.Generic.IEqualityComparer{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.OrmLite.Base.Text.StringDictionary" /> class.
            </summary>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> implementation to use when comparing keys, or <see langword="null" /> to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1" /> for the type of the key.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringDictionary.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.OrmLite.Base.Text.StringDictionary" /> class.
            </summary>
            <param name="capacity">The initial number of elements that the <see cref="T:System.Collections.Generic.Dictionary`2" /> can contain.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> implementation to use when comparing keys, or <see langword="null" /> to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1" /> for the type of the key.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringDictionary.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.OrmLite.Base.Text.StringDictionary" /> class.
            </summary>
            <param name="dictionary">The <see cref="T:System.Collections.Generic.IDictionary`2" /> whose elements are copied to the new <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringDictionary.#ctor(System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IEqualityComparer{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.OrmLite.Base.Text.StringDictionary" /> class.
            </summary>
            <param name="dictionary">The <see cref="T:System.Collections.Generic.IDictionary`2" /> whose elements are copied to the new <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> implementation to use when comparing keys, or <see langword="null" /> to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1" /> for the type of the key.</param>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.KeyValuePairs">
            <summary>
            UX friendly alternative alias of List&lt;KeyValuePair&lt;string, object&gt;gt;
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.KeyValuePairs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.OrmLite.Base.Text.KeyValuePairs" /> class.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.KeyValuePairs.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.OrmLite.Base.Text.KeyValuePairs" /> class.
            </summary>
            <param name="capacity">The number of elements that the new list can initially store.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.KeyValuePairs.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.OrmLite.Base.Text.KeyValuePairs" /> class.
            </summary>
            <param name="collection">The collection whose elements are copied to the new list.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.KeyValuePairs.Create(System.String,System.Object)">
            <summary>
            Creates the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns>KeyValuePair&lt;System.String, System.Object&gt;.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.KeyValueStrings">
            <summary>
            UX friendly alternative alias of List&lt;KeyValuePair&lt;string, string&gt;gt;
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.KeyValueStrings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.OrmLite.Base.Text.KeyValueStrings" /> class.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.KeyValueStrings.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.OrmLite.Base.Text.KeyValueStrings" /> class.
            </summary>
            <param name="capacity">The number of elements that the new list can initially store.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.KeyValueStrings.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.OrmLite.Base.Text.KeyValueStrings" /> class.
            </summary>
            <param name="collection">The collection whose elements are copied to the new list.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.KeyValueStrings.Create(System.String,System.String)">
            <summary>
            Creates the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns>KeyValuePair&lt;System.String, System.String&gt;.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.ParseAsType">
            <summary>
            Enum ParseAsType
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.ParseAsType.None">
            <summary>
            The none
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.ParseAsType.Bool">
            <summary>
            The bool
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.ParseAsType.Byte">
            <summary>
            The byte
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.ParseAsType.SByte">
            <summary>
            The s byte
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.ParseAsType.Int16">
            <summary>
            The int16
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.ParseAsType.Int32">
            <summary>
            The int32
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.ParseAsType.Int64">
            <summary>
            The int64
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.ParseAsType.UInt16">
            <summary>
            The u int16
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.ParseAsType.UInt32">
            <summary>
            The u int32
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.ParseAsType.UInt64">
            <summary>
            The u int64
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.ParseAsType.Decimal">
            <summary>
            The decimal
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.ParseAsType.Double">
            <summary>
            The double
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.ParseAsType.Single">
            <summary>
            The single
            </summary>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.DeserializeDynamic`1">
            <summary>
            Class DeserializeDynamic.
            </summary>
            <typeparam name="TSerializer">The type of the t serializer.</typeparam>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.DeserializeDynamic`1.Serializer">
            <summary>
            The serializer
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.DeserializeDynamic`1.CachedParseFn">
            <summary>
            The cached parse function
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DeserializeDynamic`1.#cctor">
            <summary>
            Initializes static members of the <see cref="T:ServiceStack.OrmLite.Base.Text.DeserializeDynamic`1" /> class.
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.DeserializeDynamic`1.Parse">
            <summary>
            Gets the parse.
            </summary>
            <value>The parse.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.DeserializeDynamic`1.ParseStringSpan">
            <summary>
            Gets the parse string span.
            </summary>
            <value>The parse string span.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DeserializeDynamic`1.ParseDynamic(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses the dynamic.
            </summary>
            <param name="value">The value.</param>
            <returns>IDynamicMetaObjectProvider.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DeserializeDynamic`1.VerifyAndGetStartIndex(System.ReadOnlySpan{System.Char},System.Type)">
            <summary>
            Verifies the start index of the and get.
            </summary>
            <param name="value">The value.</param>
            <param name="createMapType">Type of the create map.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.DynamicJson">
            <summary>
            Class DynamicJson.
            Implements the <see cref="T:System.Dynamic.DynamicObject" />
            </summary>
            <seealso cref="T:System.Dynamic.DynamicObject" />
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.DynamicJson._hash">
            <summary>
            The hash
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicJson.Serialize(System.Object)">
            <summary>
            Serializes the specified instance.
            </summary>
            <param name="instance">The instance.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicJson.Deserialize(System.String)">
            <summary>
            Deserializes the specified json.
            </summary>
            <param name="json">The json.</param>
            <returns>dynamic.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicJson.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.OrmLite.Base.Text.DynamicJson" /> class.
            </summary>
            <param name="hash">The hash.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicJson.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
            <summary>
            Provides the implementation for operations that set member values. Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations such as setting a value for a property.
            </summary>
            <param name="binder">Provides information about the object that called the dynamic operation. The binder.Name property provides the name of the member to which the value is being assigned. For example, for the statement sampleObject.SampleProperty = "Test", where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, binder.Name returns "SampleProperty". The binder.IgnoreCase property specifies whether the member name is case-sensitive.</param>
            <param name="value">The value to set to the member. For example, for sampleObject.SampleProperty = "Test", where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, the <paramref name="value" /> is "Test".</param>
            <returns><see langword="true" /> if the operation is successful; otherwise, <see langword="false" />. If this method returns <see langword="false" />, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicJson.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <summary>
            Provides the implementation for operations that get member values. Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations such as getting a value for a property.
            </summary>
            <param name="binder">Provides information about the object that called the dynamic operation. The binder.Name property provides the name of the member on which the dynamic operation is performed. For example, for the Console.WriteLine(sampleObject.SampleProperty) statement, where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, binder.Name returns "SampleProperty". The binder.IgnoreCase property specifies whether the member name is case-sensitive.</param>
            <param name="result">The result of the get operation. For example, if the method is called for a property, you can assign the property value to <paramref name="result" />.</param>
            <returns><see langword="true" /> if the operation is successful; otherwise, <see langword="false" />. If this method returns <see langword="false" />, the run-time binder of the language determines the behavior. (In most cases, a run-time exception is thrown.)</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicJson.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicJson.YieldMember(System.String,System.Object@)">
            <summary>
            Yields the member.
            </summary>
            <param name="name">The name.</param>
            <param name="result">The result.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicJson.Underscored(System.String)">
            <summary>
            Underscoreds the specified pascal case.
            </summary>
            <param name="pascalCase">The pascal case.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicJson.Underscored(System.Collections.Generic.IEnumerable{System.Char})">
            <summary>
            Underscoreds the specified pascal case.
            </summary>
            <param name="pascalCase">The pascal case.</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.PclExport">
            <summary>
            Class PclExport.
            </summary>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.PclExport.Platforms">
            <summary>
            Class Platforms.
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.PclExport.Platforms.NetStandard">
            <summary>
            The net standard
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.PclExport.Platforms.Net7">
            <summary>
            The net core
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.PclExport.Instance">
            <summary>
            The instance
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.PclExport.Reflection">
            <summary>
            Gets the reflection.
            </summary>
            <value>The reflection.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.PclExport.#cctor">
            <summary>
            Initializes static members of the <see cref="T:ServiceStack.OrmLite.Base.Text.PclExport" /> class.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.PclExport.ConfigureProvider(System.String)">
            <summary>
            Configures the provider.
            </summary>
            <param name="typeName">Name of the type.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.PclExport.Configure(ServiceStack.OrmLite.Base.Text.PclExport)">
            <summary>
            Configures the specified instance.
            </summary>
            <param name="instance">The instance.</param>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.PclExport.EmptyTask">
            <summary>
            The empty task
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.PclExport.DirSep">
            <summary>
            The dir sep
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.PclExport.AltDirSep">
            <summary>
            The alt dir sep
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.PclExport.DirSeps">
            <summary>
            The dir seps
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.PclExport.PlatformName">
            <summary>
            The platform name
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.PclExport.RegexOptions">
            <summary>
            The regex options
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.PclExport.InvariantComparison">
            <summary>
            The invariant comparison
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.PclExport.InvariantComparisonIgnoreCase">
            <summary>
            The invariant comparison ignore case
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.PclExport.InvariantComparerIgnoreCase">
            <summary>
            The invariant comparer ignore case
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.PclExport.FileExists(System.String)">
            <summary>
            Files the exists.
            </summary>
            <param name="filePath">The file path.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.PclExport.CreateDirectory(System.String)">
            <summary>
            Creates the directory.
            </summary>
            <param name="dirPath">The dir path.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.PclExport.GetFileNames(System.String,System.String)">
            <summary>
            Gets the file names.
            </summary>
            <param name="dirPath">The dir path.</param>
            <param name="searchPattern">The search pattern.</param>
            <returns>System.String[].</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.PclExport.WriteLine(System.String)">
            <summary>
            Writes the line.
            </summary>
            <param name="line">The line.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.PclExport.WriteLine(System.String,System.Object[])">
            <summary>
            Writes the line.
            </summary>
            <param name="line">The line.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.PclExport.Config(System.Net.HttpWebRequest,System.Nullable{System.Boolean},System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan},System.String,System.Nullable{System.Boolean})">
            <summary>
            Configurations the specified req.
            </summary>
            <param name="req">The req.</param>
            <param name="allowAutoRedirect">if set to <c>true</c> [allow automatic redirect].</param>
            <param name="timeout">The timeout.</param>
            <param name="readWriteTimeout">The read write timeout.</param>
            <param name="userAgent">The user agent.</param>
            <param name="preAuthenticate">if set to <c>true</c> [pre authenticate].</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.PclExport.GetRequestStream(System.Net.WebRequest)">
            <summary>
            Gets the request stream.
            </summary>
            <param name="webRequest">The web request.</param>
            <returns>Stream.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.PclExport.GetResponse(System.Net.WebRequest)">
            <summary>
            Gets the response.
            </summary>
            <param name="webRequest">The web request.</param>
            <returns>WebResponse.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.PclExport.GetResponseAsync(System.Net.WebRequest)">
            <summary>
            Gets the response asynchronous.
            </summary>
            <param name="webRequest">The web request.</param>
            <returns>Task&lt;WebResponse&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.PclExport.SetUserAgent(System.Net.HttpWebRequest,System.String)">
            <summary>
            Sets the user agent.
            </summary>
            <param name="httpReq">The HTTP req.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.PclExport.SetContentLength(System.Net.HttpWebRequest,System.Int64)">
            <summary>
            Sets the length of the content.
            </summary>
            <param name="httpReq">The HTTP req.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.PclExport.GetAllAssemblies">
            <summary>
            Gets all assemblies.
            </summary>
            <returns>Assembly[].</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.PclExport.FindType(System.String,System.String)">
            <summary>
            Finds the type.
            </summary>
            <param name="typeName">Name of the type.</param>
            <param name="assemblyName">Name of the assembly.</param>
            <returns>Type.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.PclExport.GetUTF8Encoding(System.Boolean)">
            <summary>
            Gets the ut f8 encoding.
            </summary>
            <param name="emitBom">if set to <c>true</c> [emit bom].</param>
            <returns>Encoding.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.PclExport.InSameAssembly(System.Type,System.Type)">
            <summary>
            Ins the same assembly.
            </summary>
            <param name="t1">The t1.</param>
            <param name="t2">The t2.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.PclExport.GetGenericCollectionType(System.Type)">
            <summary>
            Gets the type of the generic collection.
            </summary>
            <param name="type">The type.</param>
            <returns>Type.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.PclExport.ToXsdDateTimeString(System.DateTime)">
            <summary>
            Converts to xsddatetimestring.
            </summary>
            <param name="dateTime">The date time.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.PclExport.ToLocalXsdDateTimeString(System.DateTime)">
            <summary>
            Converts to localxsddatetimestring.
            </summary>
            <param name="dateTime">The date time.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.PclExport.ParseXsdDateTimeAsUtc(System.String)">
            <summary>
            Parses the XSD date time as UTC.
            </summary>
            <param name="dateTimeStr">The date time string.</param>
            <returns>DateTime.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.PclExport.ToStableUniversalTime(System.DateTime)">
            <summary>
            Converts to stableuniversaltime.
            </summary>
            <param name="dateTime">The date time.</param>
            <returns>DateTime.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.PclExport.GetDictionaryParseStringSpanMethod``1(System.Type)">
            <summary>
            Gets the dictionary parse string span method.
            </summary>
            <typeparam name="TSerializer">The type of the t serializer.</typeparam>
            <param name="type">The type.</param>
            <returns>ParseStringSpanDelegate.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.PclExport.GetSpecializedCollectionParseStringSpanMethod``1(System.Type)">
            <summary>
            Gets the specialized collection parse string span method.
            </summary>
            <typeparam name="TSerializer">The type of the t serializer.</typeparam>
            <param name="type">The type.</param>
            <returns>ParseStringSpanDelegate.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.PclExport.GetJsReaderParseStringSpanMethod``1(System.Type)">
            <summary>
            Gets the js reader parse string span method.
            </summary>
            <typeparam name="TSerializer">The type of the t serializer.</typeparam>
            <param name="type">The type.</param>
            <returns>ParseStringSpanDelegate.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.PclExport.CloseStream(System.IO.Stream)">
            <summary>
            Closes the stream.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.PclExport.ResetStream(System.IO.Stream)">
            <summary>
            Resets the stream.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.PclExport.VerifyLicenseKeyTextFallback(System.String)">
            <summary>
            Verifies the license key text fallback.
            </summary>
            <param name="licenseKeyText">The license key text.</param>
            <returns>LicenseKey.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.PclExport.BeginThreadAffinity">
            <summary>
            Begins the thread affinity.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.PclExport.EndThreadAffinity">
            <summary>
            Ends the thread affinity.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.PclExport.GetWeakDataContract(System.Type)">
            <summary>
            Gets the weak data contract.
            </summary>
            <param name="type">The type.</param>
            <returns>DataContractAttribute.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.PclExport.GetWeakDataMember(System.Reflection.PropertyInfo)">
            <summary>
            Gets the weak data member.
            </summary>
            <param name="pi">The pi.</param>
            <returns>DataMemberAttribute.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.PclExport.GetWeakDataMember(System.Reflection.FieldInfo)">
            <summary>
            Gets the weak data member.
            </summary>
            <param name="pi">The pi.</param>
            <returns>DataMemberAttribute.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.PclExport.RegisterForAot">
            <summary>
            Registers for aot.
            </summary>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.Net7PclExport">
            <summary>
            Class Net7PclExport.
            Implements the <see cref="T:ServiceStack.OrmLite.Base.Text.NetStandardPclExport" />
            </summary>
            <seealso cref="T:ServiceStack.OrmLite.Base.Text.NetStandardPclExport" />
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Net7PclExport.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.OrmLite.Base.Text.Net7PclExport"/> class.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Net7PclExport.GetJsReaderParseStringSpanMethod``1(System.Type)">
            <summary>
            Gets the js reader parse string span method.
            </summary>
            <typeparam name="TSerializer">The type of the t serializer.</typeparam>
            <param name="type">The type.</param>
            <returns>ParseStringSpanDelegate.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.NetStandardPclExport">
            <summary>
            Class NetStandardPclExport.
            Implements the <see cref="T:ServiceStack.OrmLite.Base.Text.PclExport" />
            </summary>
            <seealso cref="T:ServiceStack.OrmLite.Base.Text.PclExport" />
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.NetStandardPclExport.Provider">
            <summary>
            The provider
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.NetStandardPclExport.allDateTimeFormats">
            <summary>
            All date time formats
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.NetStandardPclExport.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.OrmLite.Base.Text.NetStandardPclExport"/> class.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.NetStandardPclExport.FileExists(System.String)">
            <summary>
            Files the exists.
            </summary>
            <param name="filePath">The file path.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.NetStandardPclExport.CreateDirectory(System.String)">
            <summary>
            Creates the directory.
            </summary>
            <param name="dirPath">The dir path.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.NetStandardPclExport.GetFileNames(System.String,System.String)">
            <summary>
            Gets the file names.
            </summary>
            <param name="dirPath">The dir path.</param>
            <param name="searchPattern">The search pattern.</param>
            <returns>System.String[].</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.NetStandardPclExport.Configure">
            <summary>
            Configures this instance.
            </summary>
            <returns>PclExport.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.NetStandardPclExport.WriteLine(System.String)">
            <summary>
            Writes the line.
            </summary>
            <param name="line">The line.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.NetStandardPclExport.WriteLine(System.String,System.Object[])">
            <summary>
            Writes the line.
            </summary>
            <param name="format">The format.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.NetStandardPclExport.GetAllAssemblies">
            <summary>
            Gets all assemblies.
            </summary>
            <returns>Assembly[].</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.NetStandardPclExport.InSameAssembly(System.Type,System.Type)">
            <summary>
            Ins the same assembly.
            </summary>
            <param name="t1">The t1.</param>
            <param name="t2">The t2.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.NetStandardPclExport.GetGenericCollectionType(System.Type)">
            <summary>
            Gets the type of the generic collection.
            </summary>
            <param name="type">The type.</param>
            <returns>Type.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.NetStandardPclExport.ParseXsdDateTimeAsUtc(System.String)">
            <summary>
            Parses the XSD date time as UTC.
            </summary>
            <param name="dateTimeStr">The date time string.</param>
            <returns>DateTime.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.NetStandardPclExport.GetSpecializedCollectionParseStringSpanMethod``1(System.Type)">
            <summary>
            Gets the specialized collection parse string span method.
            </summary>
            <typeparam name="TSerializer">The type of the t serializer.</typeparam>
            <param name="type">The type.</param>
            <returns>ParseStringSpanDelegate.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.NetStandardPclExport.ParseStringCollection``1(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses the string collection.
            </summary>
            <typeparam name="TSerializer">The type of the t serializer.</typeparam>
            <param name="value">The value.</param>
            <returns>StringCollection.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.NetStandardPclExport.SetUserAgent(System.Net.HttpWebRequest,System.String)">
            <summary>
            Sets the user agent.
            </summary>
            <param name="httpReq">The HTTP req.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.NetStandardPclExport.SetContentLength(System.Net.HttpWebRequest,System.Int64)">
            <summary>
            Sets the length of the content.
            </summary>
            <param name="httpReq">The HTTP req.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.NetStandardPclExport.Config(System.Net.HttpWebRequest,System.Nullable{System.Boolean},System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan},System.String,System.Nullable{System.Boolean})">
            <summary>
            Configurations the specified req.
            </summary>
            <param name="req">The req.</param>
            <param name="allowAutoRedirect">if set to <c>true</c> [allow automatic redirect].</param>
            <param name="timeout">The timeout.</param>
            <param name="readWriteTimeout">The read write timeout.</param>
            <param name="userAgent">The user agent.</param>
            <param name="preAuthenticate">if set to <c>true</c> [pre authenticate].</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.NetStandardPclExport.InitForAot">
            <summary>
            Initializes for aot.
            </summary>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.NetStandardPclExport.Poco">
            <summary>
            Class Poco.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.NetStandardPclExport.RegisterForAot">
            <summary>
            Registers for aot.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.NetStandardPclExport.RegisterTypeForAot``1">
            <summary>
            Registers the type for aot.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.NetStandardPclExport.RegisterElement``2">
            <summary>
            Registers the element.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TElement">The type of the t element.</typeparam>
            <returns>System.Int32.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.NetStandardPclExport.AotConfig">
            <summary>
            Class AotConfig.
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.NetStandardPclExport.AotConfig.jsonReader">
            <summary>
            The json reader
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.NetStandardPclExport.AotConfig.jsonWriter">
            <summary>
            The json writer
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.NetStandardPclExport.AotConfig.jsvReader">
            <summary>
            The JSV reader
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.NetStandardPclExport.AotConfig.jsvWriter">
            <summary>
            The JSV writer
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.NetStandardPclExport.AotConfig.jsonSerializer">
            <summary>
            The json serializer
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.NetStandardPclExport.AotConfig.jsvSerializer">
            <summary>
            The JSV serializer
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.NetStandardPclExport.AotConfig.#cctor">
            <summary>
            Initializes static members of the <see cref="T:ServiceStack.OrmLite.Base.Text.NetStandardPclExport.AotConfig"/> class.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.NetStandardPclExport.AotConfig.RegisterSerializers``1">
            <summary>
            Registers the serializers.
            </summary>
            <typeparam name="T"></typeparam>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.NetStandardPclExport.AotConfig.Register``2">
            <summary>
            Registers this instance.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TSerializer">The type of the t serializer.</typeparam>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.NetStandardPclExport.AotConfig.RegisterElement``3">
            <summary>
            Registers the element.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TElement">The type of the t element.</typeparam>
            <typeparam name="TSerializer">The type of the t serializer.</typeparam>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.PlatformExtensions">
            <summary>
            Class PlatformExtensions.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.PlatformExtensions.GetTypesPublicProperties(System.Type)">
            <summary>
            Gets the types public properties.
            </summary>
            <param name="subType">Type of the sub.</param>
            <returns>PropertyInfo[].</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.PlatformExtensions.GetTypesProperties(System.Type)">
            <summary>
            Gets the types properties.
            </summary>
            <param name="subType">Type of the sub.</param>
            <returns>PropertyInfo[].</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.PlatformExtensions.Fields(System.Type)">
            <summary>
            Fieldses the specified type.
            </summary>
            <param name="type">The type.</param>
            <returns>FieldInfo[].</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.PlatformExtensions.GetAllFields(System.Type)">
            <summary>
            Gets all fields.
            </summary>
            <param name="type">The type.</param>
            <returns>FieldInfo[].</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.PlatformExtensions.GetPublicFields(System.Type)">
            <summary>
            Gets the public fields.
            </summary>
            <param name="type">The type.</param>
            <returns>FieldInfo[].</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.PlatformExtensions.GetPublicMembers(System.Type)">
            <summary>
            Gets the public members.
            </summary>
            <param name="type">The type.</param>
            <returns>MemberInfo[].</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.PlatformExtensions.GetAllPublicMembers(System.Type)">
            <summary>
            Gets all public members.
            </summary>
            <param name="type">The type.</param>
            <returns>MemberInfo[].</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.PlatformExtensions.GetStaticMethod(System.Type,System.String)">
            <summary>
            Gets the static method.
            </summary>
            <param name="type">The type.</param>
            <param name="methodName">Name of the method.</param>
            <returns>MethodInfo.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.PlatformExtensions.GetInstanceMethod(System.Type,System.String)">
            <summary>
            Gets the instance method.
            </summary>
            <param name="type">The type.</param>
            <param name="methodName">Name of the method.</param>
            <returns>MethodInfo.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.PlatformExtensions.HasAttribute``1(System.Type)">
            <summary>
            Determines whether the specified type has attribute.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="type">The type.</param>
            <returns><c>true</c> if the specified type has attribute; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.PlatformExtensions.HasAttribute``1(System.Reflection.PropertyInfo)">
            <summary>
            Determines whether the specified pi has attribute.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="pi">The pi.</param>
            <returns><c>true</c> if the specified pi has attribute; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.PlatformExtensions.HasAttribute``1(System.Reflection.FieldInfo)">
            <summary>
            Determines whether the specified fi has attribute.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fi">The fi.</param>
            <returns><c>true</c> if the specified fi has attribute; otherwise, <c>false</c>.</returns>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.PlatformExtensions.hasAttributeCache">
            <summary>
            The has attribute cache
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.PlatformExtensions.HasAttributeCached``1(System.Reflection.MemberInfo)">
            <summary>
            Determines whether [has attribute cached] [the specified member information].
            </summary>
            <typeparam name="T"></typeparam>
            <param name="memberInfo">The member information.</param>
            <returns><c>true</c> if [has attribute cached] [the specified member information]; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.PlatformExtensions.HasAttributeNamed(System.Reflection.PropertyInfo,System.String)">
            <summary>
            Determines whether [has attribute named] [the specified name].
            </summary>
            <param name="pi">The pi.</param>
            <param name="name">The name.</param>
            <returns><c>true</c> if [has attribute named] [the specified name]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.PlatformExtensions.DataContract">
            <summary>
            The data contract
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.PlatformExtensions.IsDto(System.Type)">
            <summary>
            Determines whether the specified type is dto.
            </summary>
            <param name="type">The type.</param>
            <returns><c>true</c> if the specified type is dto; otherwise, <c>false</c>.</returns>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.PlatformExtensions.propertyAttributesMap">
            <summary>
            The property attributes map
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.PlatformExtensions.typeAttributesMap">
            <summary>
            The type attributes map
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.PlatformExtensions.ClearRuntimeAttributes">
            <summary>
            Clears the runtime attributes.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.PlatformExtensions.UniqueKey(System.Reflection.PropertyInfo)">
            <summary>
            Uniques the key.
            </summary>
            <param name="pi">The pi.</param>
            <returns>System.String.</returns>
            <exception cref="T:System.ArgumentException">Property '{0}' has no DeclaringType".Fmt(pi.Name)</exception>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.PlatformExtensions.AddAttributes(System.Type,System.Attribute[])">
            <summary>
            Adds the attributes.
            </summary>
            <param name="type">The type.</param>
            <param name="attrs">The attrs.</param>
            <returns>Type.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.PlatformExtensions.AddAttributes(System.Reflection.PropertyInfo,System.Attribute[])">
            <summary>
            Add a Property attribute at runtime.
            <para>Not threadsafe, should only add attributes on Startup.</para>
            </summary>
            <param name="propertyInfo">The property information.</param>
            <param name="attrs">The attrs.</param>
            <returns>PropertyInfo.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.PlatformExtensions.ReplaceAttribute(System.Reflection.PropertyInfo,System.Attribute)">
            <summary>
            Add a Property attribute at runtime.
            <para>Not threadsafe, should only add attributes on Startup.</para>
            </summary>
            <param name="propertyInfo">The property information.</param>
            <param name="attr">The attribute.</param>
            <returns>PropertyInfo.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.PlatformExtensions.GetAttributes``1(System.Reflection.PropertyInfo)">
            <summary>
            Gets the attributes.
            </summary>
            <typeparam name="TAttr">The type of the t attribute.</typeparam>
            <param name="propertyInfo">The property information.</param>
            <returns>List&lt;TAttr&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.PlatformExtensions.GetAttributes(System.Reflection.PropertyInfo)">
            <summary>
            Gets the attributes.
            </summary>
            <param name="propertyInfo">The property information.</param>
            <returns>List&lt;Attribute&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.PlatformExtensions.GetAttributes(System.Reflection.PropertyInfo,System.Type)">
            <summary>
            Gets the attributes.
            </summary>
            <param name="propertyInfo">The property information.</param>
            <param name="attrType">Type of the attribute.</param>
            <returns>List&lt;Attribute&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.PlatformExtensions.AllAttributes(System.Reflection.PropertyInfo)">
            <summary>
            Alls the attributes.
            </summary>
            <param name="propertyInfo">The property information.</param>
            <returns>System.Object[].</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.PlatformExtensions.AllAttributesLazy(System.Reflection.PropertyInfo)">
            <summary>
            Alls the attributes lazy.
            </summary>
            <param name="propertyInfo">The property information.</param>
            <returns>IEnumerable&lt;System.Object&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.PlatformExtensions.AllAttributes(System.Reflection.PropertyInfo,System.Type)">
            <summary>
            Alls the attributes.
            </summary>
            <param name="propertyInfo">The property information.</param>
            <param name="attrType">Type of the attribute.</param>
            <returns>System.Object[].</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.PlatformExtensions.AllAttributesLazy(System.Reflection.PropertyInfo,System.Type)">
            <summary>
            Alls the attributes lazy.
            </summary>
            <param name="propertyInfo">The property information.</param>
            <param name="attrType">Type of the attribute.</param>
            <returns>IEnumerable&lt;System.Object&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.PlatformExtensions.AllAttributes(System.Reflection.ParameterInfo)">
            <summary>
            Alls the attributes.
            </summary>
            <param name="paramInfo">The parameter information.</param>
            <returns>System.Object[].</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.PlatformExtensions.AllAttributes(System.Reflection.FieldInfo)">
            <summary>
            Alls the attributes.
            </summary>
            <param name="fieldInfo">The field information.</param>
            <returns>System.Object[].</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.PlatformExtensions.AllAttributes(System.Reflection.MemberInfo)">
            <summary>
            Alls the attributes.
            </summary>
            <param name="memberInfo">The member information.</param>
            <returns>System.Object[].</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.PlatformExtensions.AllAttributes(System.Reflection.ParameterInfo,System.Type)">
            <summary>
            Alls the attributes.
            </summary>
            <param name="paramInfo">The parameter information.</param>
            <param name="attrType">Type of the attribute.</param>
            <returns>System.Object[].</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.PlatformExtensions.AllAttributes(System.Reflection.MemberInfo,System.Type)">
            <summary>
            Alls the attributes.
            </summary>
            <param name="memberInfo">The member information.</param>
            <param name="attrType">Type of the attribute.</param>
            <returns>System.Object[].</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.PlatformExtensions.AllAttributes(System.Reflection.FieldInfo,System.Type)">
            <summary>
            Alls the attributes.
            </summary>
            <param name="fieldInfo">The field information.</param>
            <param name="attrType">Type of the attribute.</param>
            <returns>System.Object[].</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.PlatformExtensions.AllAttributes(System.Type)">
            <summary>
            Alls the attributes.
            </summary>
            <param name="type">The type.</param>
            <returns>System.Object[].</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.PlatformExtensions.AllAttributes(System.Reflection.Assembly)">
            <summary>
            Alls the attributes.
            </summary>
            <param name="assembly">The assembly.</param>
            <returns>System.Object[].</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.PlatformExtensions.AllAttributes``1(System.Reflection.ParameterInfo)">
            <summary>
            Alls the attributes.
            </summary>
            <typeparam name="TAttr">The type of the t attribute.</typeparam>
            <param name="pi">The pi.</param>
            <returns>TAttr[].</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.PlatformExtensions.AllAttributes``1(System.Reflection.MemberInfo)">
            <summary>
            Alls the attributes.
            </summary>
            <typeparam name="TAttr">The type of the t attribute.</typeparam>
            <param name="mi">The mi.</param>
            <returns>TAttr[].</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.PlatformExtensions.AllAttributes``1(System.Reflection.FieldInfo)">
            <summary>
            Alls the attributes.
            </summary>
            <typeparam name="TAttr">The type of the t attribute.</typeparam>
            <param name="fi">The fi.</param>
            <returns>TAttr[].</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.PlatformExtensions.AllAttributes``1(System.Reflection.PropertyInfo)">
            <summary>
            Alls the attributes.
            </summary>
            <typeparam name="TAttr">The type of the t attribute.</typeparam>
            <param name="pi">The pi.</param>
            <returns>TAttr[].</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.PlatformExtensions.AllAttributesLazy``1(System.Reflection.PropertyInfo)">
            <summary>
            Alls the attributes lazy.
            </summary>
            <typeparam name="TAttr">The type of the t attribute.</typeparam>
            <param name="pi">The pi.</param>
            <returns>IEnumerable&lt;TAttr&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.PlatformExtensions.GetRuntimeAttributes``1(System.Type)">
            <summary>
            Gets the runtime attributes.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="type">The type.</param>
            <returns>IEnumerable&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.PlatformExtensions.GetRuntimeAttributes(System.Type,System.Type)">
            <summary>
            Gets the runtime attributes.
            </summary>
            <param name="type">The type.</param>
            <param name="attrType">Type of the attribute.</param>
            <returns>IEnumerable&lt;Attribute&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.PlatformExtensions.AllAttributes``1(System.Type)">
            <summary>
            Alls the attributes.
            </summary>
            <typeparam name="TAttr">The type of the t attribute.</typeparam>
            <param name="type">The type.</param>
            <returns>TAttr[].</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.PlatformExtensions.FirstAttribute``1(System.Type)">
            <summary>
            Firsts the attribute.
            </summary>
            <typeparam name="TAttr">The type of the t attribute.</typeparam>
            <param name="type">The type.</param>
            <returns>TAttr.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.PlatformExtensions.FirstAttribute``1(System.Reflection.MemberInfo)">
            <summary>
            Firsts the attribute.
            </summary>
            <typeparam name="TAttribute">The type of the t attribute.</typeparam>
            <param name="memberInfo">The member information.</param>
            <returns>TAttribute.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.PlatformExtensions.FirstAttribute``1(System.Reflection.ParameterInfo)">
            <summary>
            Firsts the attribute.
            </summary>
            <typeparam name="TAttribute">The type of the t attribute.</typeparam>
            <param name="paramInfo">The parameter information.</param>
            <returns>TAttribute.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.PlatformExtensions.FirstAttribute``1(System.Reflection.PropertyInfo)">
            <summary>
            Firsts the attribute.
            </summary>
            <typeparam name="TAttribute">The type of the t attribute.</typeparam>
            <param name="propertyInfo">The property information.</param>
            <returns>TAttribute.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.PlatformExtensions.GetStaticMethod(System.Type,System.String,System.Type[])">
            <summary>
            Gets the static method.
            </summary>
            <param name="type">The type.</param>
            <param name="methodName">Name of the method.</param>
            <param name="types">The types.</param>
            <returns>MethodInfo.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.PlatformExtensions.GetMethodInfo(System.Type,System.String,System.Type[])">
            <summary>
            Gets the method information.
            </summary>
            <param name="type">The type.</param>
            <param name="methodName">Name of the method.</param>
            <param name="types">The types.</param>
            <returns>MethodInfo.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.PlatformExtensions.GetPublicStaticField(System.Type,System.String)">
            <summary>
            Gets the public static field.
            </summary>
            <param name="type">The type.</param>
            <param name="fieldName">Name of the field.</param>
            <returns>FieldInfo.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.PlatformExtensions.MakeDelegate(System.Reflection.MethodInfo,System.Type,System.Boolean)">
            <summary>
            Makes the delegate.
            </summary>
            <param name="mi">The mi.</param>
            <param name="delegateType">Type of the delegate.</param>
            <param name="throwOnBindFailure">if set to <c>true</c> [throw on bind failure].</param>
            <returns>Delegate.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.PlatformExtensions.IsStandardClass(System.Type)">
            <summary>
            Determines whether [is standard class] [the specified type].
            </summary>
            <param name="type">The type.</param>
            <returns><c>true</c> if [is standard class] [the specified type]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.PlatformExtensions.GetWritableFields(System.Type)">
            <summary>
            Gets the writable fields.
            </summary>
            <param name="type">The type.</param>
            <returns>FieldInfo[].</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.PlatformExtensions.IsEnumFlags(System.Type)">
            <summary>
            Determines whether [is enum flags] [the specified type].
            </summary>
            <param name="type">The type.</param>
            <returns><c>true</c> if [is enum flags] [the specified type]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.PlatformExtensions.GetInstanceMethods(System.Type)">
            <summary>
            Gets the instance methods.
            </summary>
            <param name="type">The type.</param>
            <returns>MethodInfo[].</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.PlatformExtensions.GetDeclaringTypeName(System.Type)">
            <summary>
            Gets the name of the declaring type.
            </summary>
            <param name="type">The type.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.PlatformExtensions.GetDeclaringTypeName(System.Reflection.MemberInfo)">
            <summary>
            Gets the name of the declaring type.
            </summary>
            <param name="mi">The mi.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.PlatformExtensions.CreateDelegate(System.Reflection.MethodInfo,System.Type)">
            <summary>
            Creates the delegate.
            </summary>
            <param name="methodInfo">The method information.</param>
            <param name="delegateType">Type of the delegate.</param>
            <returns>Delegate.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.PlatformExtensions.CreateDelegate(System.Reflection.MethodInfo,System.Type,System.Object)">
            <summary>
            Creates the delegate.
            </summary>
            <param name="methodInfo">The method information.</param>
            <param name="delegateType">Type of the delegate.</param>
            <param name="target">The target.</param>
            <returns>Delegate.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.PlatformExtensions.GetCollectionType(System.Type)">
            <summary>
            Gets the type of the collection.
            </summary>
            <param name="type">The type.</param>
            <returns>Type.</returns>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.PlatformExtensions.GenericTypeCache">
            <summary>
            The generic type cache
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.PlatformExtensions.GetCachedGenericType(System.Type,System.Type[])">
            <summary>
            Gets the type of the cached generic.
            </summary>
            <param name="type">The type.</param>
            <param name="argTypes">The argument types.</param>
            <returns>Type.</returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.PlatformExtensions.toObjectMapCache">
            <summary>
            To object map cache
            </summary>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.PlatformExtensions.ObjectDictionaryDefinition">
            <summary>
            Class ObjectDictionaryDefinition.
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.PlatformExtensions.ObjectDictionaryDefinition.Type">
            <summary>
            The type
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.PlatformExtensions.ObjectDictionaryDefinition.Fields">
            <summary>
            The fields
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.PlatformExtensions.ObjectDictionaryDefinition.FieldsMap">
            <summary>
            The fields map
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.PlatformExtensions.ObjectDictionaryDefinition.Add(System.String,ServiceStack.OrmLite.Base.Text.PlatformExtensions.ObjectDictionaryFieldDefinition)">
            <summary>
            Adds the specified name.
            </summary>
            <param name="name">The name.</param>
            <param name="fieldDef">The field definition.</param>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.PlatformExtensions.ObjectDictionaryFieldDefinition">
            <summary>
            Class ObjectDictionaryFieldDefinition.
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.PlatformExtensions.ObjectDictionaryFieldDefinition.Name">
            <summary>
            The name
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.PlatformExtensions.ObjectDictionaryFieldDefinition.Type">
            <summary>
            The type
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.PlatformExtensions.ObjectDictionaryFieldDefinition.GetValueFn">
            <summary>
            The get value function
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.PlatformExtensions.ObjectDictionaryFieldDefinition.SetValueFn">
            <summary>
            The set value function
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.PlatformExtensions.ObjectDictionaryFieldDefinition.ConvertType">
            <summary>
            The convert type
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.PlatformExtensions.ObjectDictionaryFieldDefinition.ConvertValueFn">
            <summary>
            The convert value function
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.PlatformExtensions.ObjectDictionaryFieldDefinition.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value.
            </summary>
            <param name="instance">The instance.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.PlatformExtensions.ConvertToDictionary``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,``0}},System.Func{System.String,System.Object,System.Object})">
            <summary>
            Converts to dictionary.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection">The collection.</param>
            <param name="mapper">The mapper.</param>
            <returns>Dictionary&lt;System.String, System.Object&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.PlatformExtensions.MapToDictionary``1(System.Func{System.String,System.Object,System.Object},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,``0}})">
            <summary>
            Maps to dictionary.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="mapper">The mapper.</param>
            <param name="collection">The collection.</param>
            <returns>Dictionary&lt;System.String, System.Object&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.PlatformExtensions.ToObjectDictionary(System.Object)">
            <summary>
            Converts to objectdictionary.
            </summary>
            <param name="obj">The object.</param>
            <returns>Dictionary&lt;System.String, System.Object&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.PlatformExtensions.ToObjectDictionary(System.Object,System.Func{System.String,System.Object,System.Object})">
            <summary>
            Converts to objectdictionary.
            </summary>
            <param name="obj">The object.</param>
            <param name="mapper">The mapper.</param>
            <returns>Dictionary&lt;System.String, System.Object&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.PlatformExtensions.GetKeyValuePairsTypeDef(System.Type)">
            <summary>
            Gets the key value pairs type definition.
            </summary>
            <param name="dictType">Type of the dictionary.</param>
            <returns>Type.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.PlatformExtensions.GetKeyValuePairTypeDef(System.Type)">
            <summary>
            Gets the key value pair type definition.
            </summary>
            <param name="genericEnumType">Type of the generic enum.</param>
            <returns>Type.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.PlatformExtensions.GetKeyValuePairsTypes(System.Type,System.Type@,System.Type@)">
            <summary>
            Gets the key value pairs types.
            </summary>
            <param name="dictType">Type of the dictionary.</param>
            <param name="keyType">Type of the key.</param>
            <param name="valueType">Type of the value.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.PlatformExtensions.GetKeyValuePairsTypes(System.Type,System.Type@,System.Type@,System.Type@)">
            <summary>
            Gets the key value pairs types.
            </summary>
            <param name="dictType">Type of the dictionary.</param>
            <param name="keyType">Type of the key.</param>
            <param name="valueType">Type of the value.</param>
            <param name="kvpType">Type of the KVP.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.PlatformExtensions.GetKeyValuePairTypes(System.Type,System.Type@,System.Type@)">
            <summary>
            Gets the key value pair types.
            </summary>
            <param name="kvpType">Type of the KVP.</param>
            <param name="keyType">Type of the key.</param>
            <param name="valueType">Type of the value.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.PlatformExtensions.FromObjectDictionary(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.Type)">
            <summary>
            Froms the object dictionary.
            </summary>
            <param name="values">The values.</param>
            <param name="type">The type.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.PlatformExtensions.PopulateInstance(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.Object)">
            <summary>
            Populates the instance.
            </summary>
            <param name="values">The values.</param>
            <param name="instance">The instance.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.PlatformExtensions.PopulateInstanceInternal(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.Object,System.Type)">
            <summary>
            Populates the instance internal.
            </summary>
            <param name="values">The values.</param>
            <param name="to">To.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.PlatformExtensions.PopulateInstance(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Object)">
            <summary>
            Populates the instance.
            </summary>
            <param name="values">The values.</param>
            <param name="instance">The instance.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.PlatformExtensions.PopulateInstanceInternal(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Object,System.Type)">
            <summary>
            Populates the instance internal.
            </summary>
            <param name="values">The values.</param>
            <param name="to">To.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.PlatformExtensions.FromObjectDictionary``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Froms the object dictionary.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="values">The values.</param>
            <returns>T.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.PlatformExtensions.CreateObjectDictionaryDefinition(System.Type)">
            <summary>
            Creates the object dictionary definition.
            </summary>
            <param name="type">The type.</param>
            <returns>ObjectDictionaryDefinition.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.PlatformExtensions.ToSafePartialObjectDictionary``1(``0)">
            <summary>
            Converts to safepartialobjectdictionary.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="instance">The instance.</param>
            <returns>Dictionary&lt;System.String, System.Object&gt;.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.Pools.BufferPool">
            <summary>
            Courtesy of @marcgravell
            https://github.com/mgravell/protobuf-net/blob/master/src/protobuf-net/BufferPool.cs
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Pools.BufferPool.Flush">
            <summary>
            Flushes this instance.
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Pools.BufferPool.POOL_SIZE">
            <summary>
            The pool size
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Pools.BufferPool.Pool">
            <summary>
            The pool
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Pools.BufferPool.GetBuffer(System.Int32)">
            <summary>
            Gets the buffer.
            </summary>
            <param name="minSize">The minimum size.</param>
            <returns>System.Byte[].</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Pools.BufferPool.GetCachedBuffer(System.Int32)">
            <summary>
            Gets the cached buffer.
            </summary>
            <param name="minSize">The minimum size.</param>
            <returns>System.Byte[].</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Pools.BufferPool.ReleaseBufferToPool(System.Byte[]@)">
            <summary>
            Releases the buffer to pool.
            </summary>
            <param name="buffer">The buffer.</param>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.Pools.BufferPool.CachedBuffer">
            <summary>
            Class CachedBuffer.
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Pools.BufferPool.CachedBuffer._reference">
            <summary>
            The reference
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.Pools.BufferPool.CachedBuffer.Size">
            <summary>
            Gets the size.
            </summary>
            <value>The size.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.Pools.BufferPool.CachedBuffer.IsAlive">
            <summary>
            Gets a value indicating whether this instance is alive.
            </summary>
            <value><c>true</c> if this instance is alive; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.Pools.BufferPool.CachedBuffer.Buffer">
            <summary>
            Gets the buffer.
            </summary>
            <value>The buffer.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Pools.BufferPool.CachedBuffer.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.OrmLite.Base.Text.Pools.BufferPool.CachedBuffer" /> class.
            </summary>
            <param name="buffer">The buffer.</param>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.Pools.Helpers">
            <summary>
            Class Helpers. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Pools.Helpers.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:ServiceStack.OrmLite.Base.Text.Pools.Helpers" /> class from being created.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Pools.Helpers.DebugAssert(System.Boolean)">
            <summary>
            Debugs the assert.
            </summary>
            <param name="condition">if set to <c>true</c> [condition].</param>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.Pools.CharPool">
            <summary>
            Class CharPool. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Pools.CharPool.Flush">
            <summary>
            Flushes this instance.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Pools.CharPool.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:ServiceStack.OrmLite.Base.Text.Pools.CharPool" /> class from being created.
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Pools.CharPool.POOL_SIZE">
            <summary>
            The pool size
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Pools.CharPool.Pool">
            <summary>
            The pool
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Pools.CharPool.GetBuffer(System.Int32)">
            <summary>
            Gets the buffer.
            </summary>
            <param name="minSize">The minimum size.</param>
            <returns>System.Char[].</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Pools.CharPool.GetCachedBuffer(System.Int32)">
            <summary>
            Gets the cached buffer.
            </summary>
            <param name="minSize">The minimum size.</param>
            <returns>System.Char[].</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Pools.CharPool.ReleaseBufferToPool(System.Char[]@)">
            <summary>
            Releases the buffer to pool.
            </summary>
            <param name="buffer">The buffer.</param>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.Pools.CharPool.CachedBuffer">
            <summary>
            Class CachedBuffer.
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Pools.CharPool.CachedBuffer._reference">
            <summary>
            The reference
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.Pools.CharPool.CachedBuffer.Size">
            <summary>
            Gets the size.
            </summary>
            <value>The size.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.Pools.CharPool.CachedBuffer.IsAlive">
            <summary>
            Gets a value indicating whether this instance is alive.
            </summary>
            <value><c>true</c> if this instance is alive; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.Pools.CharPool.CachedBuffer.Buffer">
            <summary>
            Gets the buffer.
            </summary>
            <value>The buffer.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Pools.CharPool.CachedBuffer.#ctor(System.Char[])">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.OrmLite.Base.Text.Pools.CharPool.CachedBuffer" /> class.
            </summary>
            <param name="buffer">The buffer.</param>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.Pools.ObjectPool`1">
            <summary>
            Generic implementation of object pooling pattern with predefined pool size limit. The main
            purpose is that limited number of frequently used objects can be kept in the pool for
            further recycling.
            Notes:
            1) it is not the goal to keep all returned objects. Pool is not meant for storage. If there
            is no space in the pool, extra returned objects will be dropped.
            2) it is implied that if object was obtained from a pool, the caller will return it back in
            a relatively short time. Keeping checked out objects for long durations is ok, but
            reduces usefulness of pooling. Just new up your own.
            Not returning objects to the pool in not detrimental to the pool's work, but is a bad practice.
            Rationale:
            If there is no intent for reusing the object, do not use pool - just use "new".
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.Pools.ObjectPool`1.Element">
            <summary>
            Struct Element
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Pools.ObjectPool`1.Element.Value">
            <summary>
            The value
            </summary>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.Pools.ObjectPool`1.Factory">
            <summary>
            Delegate Factory
            </summary>
            <returns>T.</returns>
            <remarks>Not using System.Func{T} because this file is linked into the (debugger) Formatter,
            which does not have that type (since it compiles against .NET 2.0).</remarks>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Pools.ObjectPool`1._firstItem">
            <summary>
            The first item
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Pools.ObjectPool`1._items">
            <summary>
            The items
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Pools.ObjectPool`1._factory">
            <summary>
            The factory
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Pools.ObjectPool`1.#ctor(ServiceStack.OrmLite.Base.Text.Pools.ObjectPool{`0}.Factory,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.OrmLite.Base.Text.Pools.ObjectPool`1" /> class.
            </summary>
            <param name="factory">The factory.</param>
            <param name="size">The size.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Pools.ObjectPool`1.CreateInstance">
            <summary>
            Creates the instance.
            </summary>
            <returns>T.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Pools.ObjectPool`1.Allocate">
            <summary>
            Produces an instance.
            </summary>
            <returns>T.</returns>
            <remarks>Search strategy is a simple linear probing which is chosen for it cache-friendliness.
            Note that Free will try to store recycled objects close to the start thus statistically
            reducing how far we will typically search.</remarks>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Pools.ObjectPool`1.AllocateSlow">
            <summary>
            Allocates the slow.
            </summary>
            <returns>T.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Pools.ObjectPool`1.Free(`0)">
            <summary>
            Returns objects to the pool.
            </summary>
            <param name="obj">The object.</param>
            <remarks>Search strategy is a simple linear probing which is chosen for it cache-friendliness.
            Note that Free will try to store recycled objects close to the start thus statistically
            reducing how far we will typically search in Allocate.</remarks>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Pools.ObjectPool`1.FreeSlow(`0)">
            <summary>
            Frees the slow.
            </summary>
            <param name="obj">The object.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Pools.ObjectPool`1.ForgetTrackedObject(`0,`0)">
            <summary>
            Removes an object from leak tracking.
            This is called when an object is returned to the pool.  It may also be explicitly
            called if an object allocated from the pool is intentionally not being returned
            to the pool.  This can be of use with pooled arrays if the consumer wants to
            return a larger array to the pool than was originally allocated.
            </summary>
            <param name="old">The old.</param>
            <param name="replacement">The replacement.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Pools.ObjectPool`1.Validate(System.Object)">
            <summary>
            Validates the specified object.
            </summary>
            <param name="obj">The object.</param>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.Pools.PooledObject`1">
            <summary>
            this is RAII object to automatically release pooled object when its owning pool
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Pools.PooledObject`1._releaser">
            <summary>
            The releaser
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Pools.PooledObject`1._pool">
            <summary>
            The pool
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Pools.PooledObject`1._pooledObject">
            <summary>
            The pooled object
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Pools.PooledObject`1.#ctor(ServiceStack.OrmLite.Base.Text.Pools.ObjectPool{`0},System.Func{ServiceStack.OrmLite.Base.Text.Pools.ObjectPool{`0},`0},System.Action{ServiceStack.OrmLite.Base.Text.Pools.ObjectPool{`0},`0})">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.OrmLite.Base.Text.Pools.PooledObject`1" /> struct.
            </summary>
            <param name="pool">The pool.</param>
            <param name="allocator">The allocator.</param>
            <param name="releaser">The releaser.</param>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.Pools.PooledObject`1.Object">
            <summary>
            Gets the object.
            </summary>
            <value>The object.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Pools.PooledObject`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Pools.PooledObject`1.Create(ServiceStack.OrmLite.Base.Text.Pools.ObjectPool{System.Text.StringBuilder})">
            <summary>
            Creates the specified pool.
            </summary>
            <param name="pool">The pool.</param>
            <returns>PooledObject&lt;StringBuilder&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Pools.PooledObject`1.Create``1(ServiceStack.OrmLite.Base.Text.Pools.ObjectPool{System.Collections.Generic.Stack{``0}})">
            <summary>
            Creates the specified pool.
            </summary>
            <typeparam name="TItem">The type of the t item.</typeparam>
            <param name="pool">The pool.</param>
            <returns>PooledObject&lt;Stack&lt;TItem&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Pools.PooledObject`1.Create``1(ServiceStack.OrmLite.Base.Text.Pools.ObjectPool{System.Collections.Generic.Queue{``0}})">
            <summary>
            Creates the specified pool.
            </summary>
            <typeparam name="TItem">The type of the t item.</typeparam>
            <param name="pool">The pool.</param>
            <returns>PooledObject&lt;Queue&lt;TItem&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Pools.PooledObject`1.Create``1(ServiceStack.OrmLite.Base.Text.Pools.ObjectPool{System.Collections.Generic.HashSet{``0}})">
            <summary>
            Creates the specified pool.
            </summary>
            <typeparam name="TItem">The type of the t item.</typeparam>
            <param name="pool">The pool.</param>
            <returns>PooledObject&lt;HashSet&lt;TItem&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Pools.PooledObject`1.Create``2(ServiceStack.OrmLite.Base.Text.Pools.ObjectPool{System.Collections.Generic.Dictionary{``0,``1}})">
            <summary>
            Creates the specified pool.
            </summary>
            <typeparam name="TKey">The type of the t key.</typeparam>
            <typeparam name="TValue">The type of the t value.</typeparam>
            <param name="pool">The pool.</param>
            <returns>PooledObject&lt;Dictionary&lt;TKey, TValue&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Pools.PooledObject`1.Create``1(ServiceStack.OrmLite.Base.Text.Pools.ObjectPool{System.Collections.Generic.List{``0}})">
            <summary>
            Creates the specified pool.
            </summary>
            <typeparam name="TItem">The type of the t item.</typeparam>
            <param name="pool">The pool.</param>
            <returns>PooledObject&lt;List&lt;TItem&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Pools.PooledObject`1.Allocator(ServiceStack.OrmLite.Base.Text.Pools.ObjectPool{System.Text.StringBuilder})">
            <summary>
            Allocators the specified pool.
            </summary>
            <param name="pool">The pool.</param>
            <returns>StringBuilder.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Pools.PooledObject`1.Releaser(ServiceStack.OrmLite.Base.Text.Pools.ObjectPool{System.Text.StringBuilder},System.Text.StringBuilder)">
            <summary>
            Releasers the specified pool.
            </summary>
            <param name="pool">The pool.</param>
            <param name="sb">The sb.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Pools.PooledObject`1.Allocator``1(ServiceStack.OrmLite.Base.Text.Pools.ObjectPool{System.Collections.Generic.Stack{``0}})">
            <summary>
            Allocators the specified pool.
            </summary>
            <typeparam name="TItem">The type of the t item.</typeparam>
            <param name="pool">The pool.</param>
            <returns>Stack&lt;TItem&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Pools.PooledObject`1.Releaser``1(ServiceStack.OrmLite.Base.Text.Pools.ObjectPool{System.Collections.Generic.Stack{``0}},System.Collections.Generic.Stack{``0})">
            <summary>
            Releasers the specified pool.
            </summary>
            <typeparam name="TItem">The type of the t item.</typeparam>
            <param name="pool">The pool.</param>
            <param name="obj">The object.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Pools.PooledObject`1.Allocator``1(ServiceStack.OrmLite.Base.Text.Pools.ObjectPool{System.Collections.Generic.Queue{``0}})">
            <summary>
            Allocators the specified pool.
            </summary>
            <typeparam name="TItem">The type of the t item.</typeparam>
            <param name="pool">The pool.</param>
            <returns>Queue&lt;TItem&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Pools.PooledObject`1.Releaser``1(ServiceStack.OrmLite.Base.Text.Pools.ObjectPool{System.Collections.Generic.Queue{``0}},System.Collections.Generic.Queue{``0})">
            <summary>
            Releasers the specified pool.
            </summary>
            <typeparam name="TItem">The type of the t item.</typeparam>
            <param name="pool">The pool.</param>
            <param name="obj">The object.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Pools.PooledObject`1.Allocator``1(ServiceStack.OrmLite.Base.Text.Pools.ObjectPool{System.Collections.Generic.HashSet{``0}})">
            <summary>
            Allocators the specified pool.
            </summary>
            <typeparam name="TItem">The type of the t item.</typeparam>
            <param name="pool">The pool.</param>
            <returns>HashSet&lt;TItem&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Pools.PooledObject`1.Releaser``1(ServiceStack.OrmLite.Base.Text.Pools.ObjectPool{System.Collections.Generic.HashSet{``0}},System.Collections.Generic.HashSet{``0})">
            <summary>
            Releasers the specified pool.
            </summary>
            <typeparam name="TItem">The type of the t item.</typeparam>
            <param name="pool">The pool.</param>
            <param name="obj">The object.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Pools.PooledObject`1.Allocator``2(ServiceStack.OrmLite.Base.Text.Pools.ObjectPool{System.Collections.Generic.Dictionary{``0,``1}})">
            <summary>
            Allocators the specified pool.
            </summary>
            <typeparam name="TKey">The type of the t key.</typeparam>
            <typeparam name="TValue">The type of the t value.</typeparam>
            <param name="pool">The pool.</param>
            <returns>Dictionary&lt;TKey, TValue&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Pools.PooledObject`1.Releaser``2(ServiceStack.OrmLite.Base.Text.Pools.ObjectPool{System.Collections.Generic.Dictionary{``0,``1}},System.Collections.Generic.Dictionary{``0,``1})">
            <summary>
            Releasers the specified pool.
            </summary>
            <typeparam name="TKey">The type of the t key.</typeparam>
            <typeparam name="TValue">The type of the t value.</typeparam>
            <param name="pool">The pool.</param>
            <param name="obj">The object.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Pools.PooledObject`1.Allocator``1(ServiceStack.OrmLite.Base.Text.Pools.ObjectPool{System.Collections.Generic.List{``0}})">
            <summary>
            Allocators the specified pool.
            </summary>
            <typeparam name="TItem">The type of the t item.</typeparam>
            <param name="pool">The pool.</param>
            <returns>List&lt;TItem&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Pools.PooledObject`1.Releaser``1(ServiceStack.OrmLite.Base.Text.Pools.ObjectPool{System.Collections.Generic.List{``0}},System.Collections.Generic.List{``0})">
            <summary>
            Releasers the specified pool.
            </summary>
            <typeparam name="TItem">The type of the t item.</typeparam>
            <param name="pool">The pool.</param>
            <param name="obj">The object.</param>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.Pools.SharedPoolExtensions">
            <summary>
            Class SharedPoolExtensions.
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Pools.SharedPoolExtensions.Threshold">
            <summary>
            The threshold
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Pools.SharedPoolExtensions.AllocateAndClear(ServiceStack.OrmLite.Base.Text.Pools.ObjectPool{System.Text.StringBuilder})">
            <summary>
            Allocates the and clear.
            </summary>
            <param name="pool">The pool.</param>
            <returns>System.Text.StringBuilder.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Pools.SharedPoolExtensions.AllocateAndClear``1(ServiceStack.OrmLite.Base.Text.Pools.ObjectPool{System.Collections.Generic.Stack{``0}})">
            <summary>
            Allocates the and clear.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="pool">The pool.</param>
            <returns>System.Collections.Generic.Stack&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Pools.SharedPoolExtensions.AllocateAndClear``1(ServiceStack.OrmLite.Base.Text.Pools.ObjectPool{System.Collections.Generic.Queue{``0}})">
            <summary>
            Allocates the and clear.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="pool">The pool.</param>
            <returns>System.Collections.Generic.Queue&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Pools.SharedPoolExtensions.AllocateAndClear``1(ServiceStack.OrmLite.Base.Text.Pools.ObjectPool{System.Collections.Generic.HashSet{``0}})">
            <summary>
            Allocates the and clear.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="pool">The pool.</param>
            <returns>System.Collections.Generic.HashSet&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Pools.SharedPoolExtensions.AllocateAndClear``2(ServiceStack.OrmLite.Base.Text.Pools.ObjectPool{System.Collections.Generic.Dictionary{``0,``1}})">
            <summary>
            Allocates the and clear.
            </summary>
            <typeparam name="TKey">The type of the t key.</typeparam>
            <typeparam name="TValue">The type of the t value.</typeparam>
            <param name="pool">The pool.</param>
            <returns>System.Collections.Generic.Dictionary&lt;TKey, TValue&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Pools.SharedPoolExtensions.AllocateAndClear``1(ServiceStack.OrmLite.Base.Text.Pools.ObjectPool{System.Collections.Generic.List{``0}})">
            <summary>
            Allocates the and clear.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="pool">The pool.</param>
            <returns>System.Collections.Generic.List&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Pools.SharedPoolExtensions.ClearAndFree(ServiceStack.OrmLite.Base.Text.Pools.ObjectPool{System.Text.StringBuilder},System.Text.StringBuilder)">
            <summary>
            Clears the and free.
            </summary>
            <param name="pool">The pool.</param>
            <param name="sb">The sb.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Pools.SharedPoolExtensions.ClearAndFree``1(ServiceStack.OrmLite.Base.Text.Pools.ObjectPool{System.Collections.Generic.HashSet{``0}},System.Collections.Generic.HashSet{``0})">
            <summary>
            Clears the and free.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="pool">The pool.</param>
            <param name="set">The set.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Pools.SharedPoolExtensions.ClearAndFree``1(ServiceStack.OrmLite.Base.Text.Pools.ObjectPool{System.Collections.Generic.Stack{``0}},System.Collections.Generic.Stack{``0})">
            <summary>
            Clears the and free.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="pool">The pool.</param>
            <param name="set">The set.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Pools.SharedPoolExtensions.ClearAndFree``1(ServiceStack.OrmLite.Base.Text.Pools.ObjectPool{System.Collections.Generic.Queue{``0}},System.Collections.Generic.Queue{``0})">
            <summary>
            Clears the and free.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="pool">The pool.</param>
            <param name="set">The set.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Pools.SharedPoolExtensions.ClearAndFree``2(ServiceStack.OrmLite.Base.Text.Pools.ObjectPool{System.Collections.Generic.Dictionary{``0,``1}},System.Collections.Generic.Dictionary{``0,``1})">
            <summary>
            Clears the and free.
            </summary>
            <typeparam name="TKey">The type of the t key.</typeparam>
            <typeparam name="TValue">The type of the t value.</typeparam>
            <param name="pool">The pool.</param>
            <param name="map">The map.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Pools.SharedPoolExtensions.ClearAndFree``1(ServiceStack.OrmLite.Base.Text.Pools.ObjectPool{System.Collections.Generic.List{``0}},System.Collections.Generic.List{``0})">
            <summary>
            Clears the and free.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="pool">The pool.</param>
            <param name="list">The list.</param>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.Pools.SharedPools">
            <summary>
            Shared object pool for roslyn
            Use this shared pool if only concern is reducing object allocations.
            if perf of an object pool itself is also a concern, use ObjectPool directly.
            For example, if you want to create a million of small objects within a second,
            use the ObjectPool directly. it should have much less overhead than using this.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Pools.SharedPools.Default``1">
            <summary>
            pool that uses default constructor with 20 elements pooled
            </summary>
            <typeparam name="T"></typeparam>
            <returns>ServiceStack.Text.Pools.ObjectPool&lt;T&gt;.</returns>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Pools.SharedPools.ByteArray">
            <summary>
            Used to reduce the # of temporary byte[]s created to satisfy serialization and
            other I/O requests
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Pools.SharedPools.ByteBufferSize">
            <summary>
            The byte buffer size
            </summary>
            pooled memory : 4K * 512 = 4MB
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Pools.SharedPools.ByteBufferCount">
            <summary>
            The byte buffer count
            </summary>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.Pools.SharedPools.DefaultNormalPool`1">
            <summary>
            Class DefaultNormalPool.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Pools.SharedPools.DefaultNormalPool`1.Instance">
            <summary>
            The instance
            </summary>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.Pools.StringBuilderPool">
            <summary>
            Class StringBuilderPool.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Pools.StringBuilderPool.Allocate">
            <summary>
            Allocates this instance.
            </summary>
            <returns>StringBuilder.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Pools.StringBuilderPool.Free(System.Text.StringBuilder)">
            <summary>
            Frees the specified builder.
            </summary>
            <param name="builder">The builder.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Pools.StringBuilderPool.ReturnAndFree(System.Text.StringBuilder)">
            <summary>
            Returns the and free.
            </summary>
            <param name="builder">The builder.</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.MemoryStreamFactory">
            <summary>
            Class MemoryStreamFactory.
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.MemoryStreamFactory.UseRecyclableMemoryStream">
            <summary>
            Gets or sets the use recyclable memory stream.
            </summary>
            <value>The use recyclable memory stream.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.MemoryStreamFactory.RecyclableInstance">
            <summary>
            The recyclable instance
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.MemoryStreamFactory.GetStream">
            <summary>
            Gets the stream.
            </summary>
            <returns>System.IO.MemoryStream.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.MemoryStreamFactory.GetStream(System.Int32)">
            <summary>
            Gets the stream.
            </summary>
            <param name="capacity">The capacity.</param>
            <returns>System.IO.MemoryStream.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.MemoryStreamFactory.GetStream(System.Byte[])">
            <summary>
            Gets the stream.
            </summary>
            <param name="bytes">The bytes.</param>
            <returns>System.IO.MemoryStream.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.MemoryStreamFactory.GetStream(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Gets the stream.
            </summary>
            <param name="bytes">The bytes.</param>
            <param name="index">The index.</param>
            <param name="count">The count.</param>
            <returns>System.IO.MemoryStream.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStreamManager">
            <summary>
            Class RecyclableMemoryStreamManager. This class cannot be inherited.
            </summary>
            <summary>
            Manages pools of RecyclableMemoryStream objects.
            </summary>
            <remarks>There are two pools managed in here. The small pool contains same-sized buffers that are handed to streams
            as they write more data.
            For scenarios that need to call GetBuffer(), the large pool contains buffers of various sizes, all
            multiples/exponentials of LargeBufferMultiple (1 MB by default). They are split by size to avoid overly-wasteful buffer
            usage. There should be far fewer 8 MB buffers than 1 MB buffers, for example.</remarks>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStreamManager.Events">
            <summary>
            ETW events for RecyclableMemoryStream
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStreamManager.Events.Writer">
            <summary>
            Static log object, through which all events are written.
            </summary>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStreamManager.Events.MemoryStreamBufferType">
            <summary>
            Type of buffer
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStreamManager.Events.MemoryStreamBufferType.Small">
            <summary>
            Small block buffer
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStreamManager.Events.MemoryStreamBufferType.Large">
            <summary>
            Large pool buffer
            </summary>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStreamManager.Events.MemoryStreamDiscardReason">
            <summary>
            The possible reasons for discarding a buffer
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStreamManager.Events.MemoryStreamDiscardReason.TooLarge">
            <summary>
            Buffer was too large to be re-pooled
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStreamManager.Events.MemoryStreamDiscardReason.EnoughFree">
            <summary>
            There are enough free bytes in the pool
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStreamManager.Events.MemoryStreamCreated(System.Guid,System.String,System.Int32)">
            <summary>
            Logged when a stream object is created.
            </summary>
            <param name="guid">A unique ID for this stream.</param>
            <param name="tag">A temporary ID for this stream, usually indicates current usage.</param>
            <param name="requestedSize">Requested size of the stream</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStreamManager.Events.MemoryStreamDisposed(System.Guid,System.String)">
            <summary>
            Logged when the stream is disposed
            </summary>
            <param name="guid">A unique ID for this stream.</param>
            <param name="tag">A temporary ID for this stream, usually indicates current usage.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStreamManager.Events.MemoryStreamDoubleDispose(System.Guid,System.String,System.String,System.String,System.String)">
            <summary>
            Logged when the stream is disposed for the second time.
            </summary>
            <param name="guid">A unique ID for this stream.</param>
            <param name="tag">A temporary ID for this stream, usually indicates current usage.</param>
            <param name="allocationStack">Call stack of initial allocation.</param>
            <param name="disposeStack1">Call stack of the first dispose.</param>
            <param name="disposeStack2">Call stack of the second dispose.</param>
            <remarks>Note: Stacks will only be populated if RecyclableMemoryStreamManager.GenerateCallStacks is true.</remarks>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStreamManager.Events.MemoryStreamFinalized(System.Guid,System.String,System.String)">
            <summary>
            Logged when a stream is finalized.
            </summary>
            <param name="guid">A unique ID for this stream.</param>
            <param name="tag">A temporary ID for this stream, usually indicates current usage.</param>
            <param name="allocationStack">Call stack of initial allocation.</param>
            <remarks>Note: Stacks will only be populated if RecyclableMemoryStreamManager.GenerateCallStacks is true.</remarks>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStreamManager.Events.MemoryStreamManagerInitialized(System.Int32,System.Int32,System.Int32)">
            <summary>
            Logged when the RecyclableMemoryStreamManager is initialized.
            </summary>
            <param name="blockSize">Size of blocks, in bytes.</param>
            <param name="largeBufferMultiple">Size of the large buffer multiple, in bytes.</param>
            <param name="maximumBufferSize">Maximum buffer size, in bytes.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStreamManager.Events.MemoryStreamNewBlockCreated(System.Int64)">
            <summary>
            Logged when a new block is created.
            </summary>
            <param name="smallPoolInUseBytes">Number of bytes in the small pool currently in use.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStreamManager.Events.MemoryStreamNewLargeBufferCreated(System.Int32,System.Int64)">
            <summary>
            Logged when a new large buffer is created.
            </summary>
            <param name="requiredSize">Requested size</param>
            <param name="largePoolInUseBytes">Number of bytes in the large pool in use.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStreamManager.Events.MemoryStreamNonPooledLargeBufferCreated(System.Int32,System.String,System.String)">
            <summary>
            Logged when a buffer is created that is too large to pool.
            </summary>
            <param name="requiredSize">Size requested by the caller</param>
            <param name="tag">A temporary ID for this stream, usually indicates current usage.</param>
            <param name="allocationStack">Call stack of the requested stream.</param>
            <remarks>Note: Stacks will only be populated if RecyclableMemoryStreamManager.GenerateCallStacks is true.</remarks>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStreamManager.Events.MemoryStreamDiscardBuffer(ServiceStack.OrmLite.Base.Text.RecyclableMemoryStreamManager.Events.MemoryStreamBufferType,System.String,ServiceStack.OrmLite.Base.Text.RecyclableMemoryStreamManager.Events.MemoryStreamDiscardReason)">
            <summary>
            Logged when a buffer is discarded (not put back in the pool, but given to GC to clean up).
            </summary>
            <param name="bufferType">Type of the buffer being discarded.</param>
            <param name="tag">A temporary ID for this stream, usually indicates current usage.</param>
            <param name="reason">Reason for the discard.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStreamManager.Events.MemoryStreamOverCapacity(System.Int32,System.Int64,System.String,System.String)">
            <summary>
            Logged when a stream grows beyond the maximum capacity.
            </summary>
            <param name="requestedCapacity">The requested capacity.</param>
            <param name="maxCapacity">Maximum capacity, as configured by RecyclableMemoryStreamManager.</param>
            <param name="tag">A temporary ID for this stream, usually indicates current usage.</param>
            <param name="allocationStack">Call stack for the capacity request.</param>
            <remarks>Note: Stacks will only be populated if RecyclableMemoryStreamManager.GenerateCallStacks is true.</remarks>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStreamManager.EventHandler">
            <summary>
            Generic delegate for handling events without any arguments.
            </summary>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStreamManager.LargeBufferDiscardedEventHandler">
            <summary>
            Delegate for handling large buffer discard reports.
            </summary>
            <param name="reason">Reason the buffer was discarded.</param>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStreamManager.StreamLengthReportHandler">
            <summary>
            Delegate for handling reports of stream size when streams are allocated
            </summary>
            <param name="bytes">Bytes allocated.</param>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStreamManager.UsageReportEventHandler">
            <summary>
            Delegate for handling periodic reporting of memory use statistics.
            </summary>
            <param name="smallPoolInUseBytes">Bytes currently in use in the small pool.</param>
            <param name="smallPoolFreeBytes">Bytes currently free in the small pool.</param>
            <param name="largePoolInUseBytes">Bytes currently in use in the large pool.</param>
            <param name="largePoolFreeBytes">Bytes currently free in the large pool.</param>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStreamManager.DefaultBlockSize">
            <summary>
            Default block size, in bytes
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStreamManager.DefaultLargeBufferMultiple">
            <summary>
            Default large buffer multiple, in bytes
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStreamManager.DefaultMaximumBufferSize">
            <summary>
            Default maximum buffer size, in bytes
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStreamManager.largeBufferFreeSize">
            <summary>
            The large buffer free size
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStreamManager.largeBufferInUseSize">
            <summary>
            The large buffer in use size
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStreamManager.largePools">
            <summary>
            The large pools
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStreamManager.smallPool">
            <summary>
            The small pool
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStreamManager.smallPoolFreeSize">
            <summary>
            The small pool free size
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStreamManager.smallPoolInUseSize">
            <summary>
            The small pool in use size
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStreamManager.#ctor">
            <summary>
            Initializes the memory manager with the default block/buffer specifications.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStreamManager.#ctor(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Initializes the memory manager with the given block requiredSize.
            </summary>
            <param name="blockSize">Size of each block that is pooled. Must be &gt; 0.</param>
            <param name="largeBufferMultiple">Each large buffer will be a multiple/exponential of this value.</param>
            <param name="maximumBufferSize">Buffers larger than this are not pooled</param>
            <param name="useExponentialLargeBuffer">Switch to exponential large buffer allocation strategy</param>
            <exception cref="T:System.ArgumentOutOfRangeException">nameof(blockSize), blockSize, blockSize must be a positive number</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">nameof(blockSize), blockSize, blockSize must be a positive number</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">nameof(blockSize), blockSize, blockSize must be a positive number</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">nameof(blockSize), blockSize, blockSize must be a positive number</exception>
            <exception cref="T:System.ArgumentException">blockSize is not a positive number, or largeBufferMultiple is not a positive number, or maximumBufferSize is less than blockSize.</exception>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStreamManager.BlockSize">
            <summary>
            The size of each block. It must be set at creation and cannot be changed.
            </summary>
            <value>The size of the block.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStreamManager.LargeBufferMultiple">
            <summary>
            All buffers are multiples/exponentials of this number. It must be set at creation and cannot be changed.
            </summary>
            <value>The large buffer multiple.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStreamManager.UseExponentialLargeBuffer">
            <summary>
            Use exponential large buffer allocation strategy. It must be set at creation and cannot be changed.
            </summary>
            <value>The use exponential large buffer.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStreamManager.MaximumBufferSize">
            <summary>
            Gets the maximum buffer size.
            </summary>
            <value>The maximum size of the buffer.</value>
            <remarks>Any buffer that is returned to the pool that is larger than this will be
            discarded and garbage collected.</remarks>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStreamManager.SmallPoolFreeSize">
            <summary>
            Number of bytes in small pool not currently in use
            </summary>
            <value>The size of the small pool free.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStreamManager.LargePoolFreeSize">
            <summary>
            Number of bytes in large pool not currently in use
            </summary>
            <value>The size of the large pool free.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStreamManager.LargePoolInUseSize">
            <summary>
            Number of bytes currently in use by streams from the large pool
            </summary>
            <value>The size of the large pool in use.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStreamManager.MaximumFreeSmallPoolBytes">
            <summary>
            How many bytes of small free blocks to allow before we start dropping
            those returned to us.
            </summary>
            <value>The maximum free small pool bytes.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStreamManager.MaximumFreeLargePoolBytes">
            <summary>
            How many bytes of large free buffers to allow before we start dropping
            those returned to us.
            </summary>
            <value>The maximum free large pool bytes.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStreamManager.MaximumStreamCapacity">
            <summary>
            Maximum stream capacity in bytes. Attempts to set a larger capacity will
            result in an exception.
            </summary>
            <value>The maximum stream capacity.</value>
            <remarks>A value of 0 indicates no limit.</remarks>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStreamManager.GenerateCallStacks">
            <summary>
            Whether to save callstacks for stream allocations. This can help in debugging.
            It should NEVER be turned on generally in production.
            </summary>
            <value>The generate call stacks.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStreamManager.AggressiveBufferReturn">
            <summary>
            Whether dirty buffers can be immediately returned to the buffer pool. E.g. when GetBuffer() is called on
            a stream and creates a single large buffer, if this setting is enabled, the other blocks will be returned
            to the buffer pool immediately.
            Note when enabling this setting that the user is responsible for ensuring that any buffer previously
            retrieved from a stream which is subsequently modified is not used after modification (as it may no longer
            be valid).
            </summary>
            <value>The aggressive buffer return.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStreamManager.GetBlock">
            <summary>
            Removes and returns a single block from the pool.
            </summary>
            <returns>A byte[] array</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStreamManager.GetLargeBuffer(System.Int32,System.String)">
            <summary>
            Returns a buffer of arbitrary size from the large buffer pool. This buffer
            will be at least the requiredSize and always be a multiple/exponential of largeBufferMultiple.
            </summary>
            <param name="requiredSize">The minimum length of the buffer</param>
            <param name="tag">The tag of the stream returning this buffer, for logging if necessary.</param>
            <returns>A buffer of at least the required size.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStreamManager.RoundToLargeBufferSize(System.Int32)">
            <summary>
            Rounds the size of to large buffer.
            </summary>
            <param name="requiredSize">Size of the required.</param>
            <returns>int.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStreamManager.IsLargeBufferSize(System.Int32)">
            <summary>
            Determines whether [is large buffer size] [the specified value].
            </summary>
            <param name="value">The value.</param>
            <returns>bool.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStreamManager.GetPoolIndex(System.Int32)">
            <summary>
            Gets the index of the pool.
            </summary>
            <param name="length">The length.</param>
            <returns>int.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStreamManager.ReturnLargeBuffer(System.Byte[],System.String)">
            <summary>
            Returns the buffer to the large pool
            </summary>
            <param name="buffer">The buffer to return.</param>
            <param name="tag">The tag of the stream returning this buffer, for logging if necessary.</param>
            <exception cref="T:System.ArgumentNullException">nameof(buffer)</exception>
            <exception cref="T:System.ArgumentNullException">nameof(buffer)</exception>
            <exception cref="T:System.ArgumentException">buffer is null</exception>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStreamManager.ReturnBlocks(System.Collections.Generic.ICollection{System.Byte[]},System.String)">
            <summary>
            Returns the blocks to the pool
            </summary>
            <param name="blocks">Collection of blocks to return to the pool</param>
            <param name="tag">The tag of the stream returning these blocks, for logging if necessary.</param>
            <exception cref="T:System.ArgumentNullException">nameof(blocks)</exception>
            <exception cref="T:System.ArgumentNullException">nameof(blocks)</exception>
            <exception cref="T:System.ArgumentException">blocks is null</exception>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStreamManager.ReportBlockCreated">
            <summary>
            Reports the block created.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStreamManager.ReportBlockDiscarded">
            <summary>
            Reports the block discarded.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStreamManager.ReportLargeBufferCreated">
            <summary>
            Reports the large buffer created.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStreamManager.ReportLargeBufferDiscarded(ServiceStack.OrmLite.Base.Text.RecyclableMemoryStreamManager.Events.MemoryStreamDiscardReason)">
            <summary>
            Reports the large buffer discarded.
            </summary>
            <param name="reason">The reason.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStreamManager.ReportStreamCreated">
            <summary>
            Reports the stream created.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStreamManager.ReportStreamDisposed">
            <summary>
            Reports the stream disposed.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStreamManager.ReportStreamFinalized">
            <summary>
            Reports the stream finalized.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStreamManager.ReportStreamLength(System.Int64)">
            <summary>
            Reports the length of the stream.
            </summary>
            <param name="bytes">The bytes.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStreamManager.ReportUsageReport(System.Int64,System.Int64,System.Int64,System.Int64)">
            <summary>
            Reports the usage report.
            </summary>
            <param name="smallPoolInUseBytes">The small pool in use bytes.</param>
            <param name="smallPoolFreeBytes">The small pool free bytes.</param>
            <param name="largePoolInUseBytes">The large pool in use bytes.</param>
            <param name="largePoolFreeBytes">The large pool free bytes.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStreamManager.GetStream">
            <summary>
            Retrieve a new MemoryStream object with no tag and a default initial capacity.
            </summary>
            <returns>A MemoryStream.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStreamManager.GetStream(System.Guid)">
            <summary>
            Retrieve a new MemoryStream object with no tag and a default initial capacity.
            </summary>
            <param name="id">A unique identifier which can be used to trace usages of the stream.</param>
            <returns>A MemoryStream.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStreamManager.GetStream(System.String)">
            <summary>
            Retrieve a new MemoryStream object with the given tag and a default initial capacity.
            </summary>
            <param name="tag">A tag which can be used to track the source of the stream.</param>
            <returns>A MemoryStream.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStreamManager.GetStream(System.Guid,System.String)">
            <summary>
            Retrieve a new MemoryStream object with the given tag and a default initial capacity.
            </summary>
            <param name="id">A unique identifier which can be used to trace usages of the stream.</param>
            <param name="tag">A tag which can be used to track the source of the stream.</param>
            <returns>A MemoryStream.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStreamManager.GetStream(System.String,System.Int32)">
            <summary>
            Retrieve a new MemoryStream object with the given tag and at least the given capacity.
            </summary>
            <param name="tag">A tag which can be used to track the source of the stream.</param>
            <param name="requiredSize">The minimum desired capacity for the stream.</param>
            <returns>A MemoryStream.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStreamManager.GetStream(System.Guid,System.String,System.Int32)">
            <summary>
            Retrieve a new MemoryStream object with the given tag and at least the given capacity.
            </summary>
            <param name="id">A unique identifier which can be used to trace usages of the stream.</param>
            <param name="tag">A tag which can be used to track the source of the stream.</param>
            <param name="requiredSize">The minimum desired capacity for the stream.</param>
            <returns>A MemoryStream.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStreamManager.GetStream(System.Guid,System.String,System.Int32,System.Boolean)">
            <summary>
            Retrieve a new MemoryStream object with the given tag and at least the given capacity, possibly using
            a single contiguous underlying buffer.
            </summary>
            <param name="id">A unique identifier which can be used to trace usages of the stream.</param>
            <param name="tag">A tag which can be used to track the source of the stream.</param>
            <param name="requiredSize">The minimum desired capacity for the stream.</param>
            <param name="asContiguousBuffer">Whether to attempt to use a single contiguous buffer.</param>
            <returns>A MemoryStream.</returns>
            <remarks>Retrieving a MemoryStream which provides a single contiguous buffer can be useful in situations
            where the initial size is known and it is desirable to avoid copying data between the smaller underlying
            buffers to a single large one. This is most helpful when you know that you will always call GetBuffer
            on the underlying stream.</remarks>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStreamManager.GetStream(System.String,System.Int32,System.Boolean)">
            <summary>
            Retrieve a new MemoryStream object with the given tag and at least the given capacity, possibly using
            a single contiguous underlying buffer.
            </summary>
            <param name="tag">A tag which can be used to track the source of the stream.</param>
            <param name="requiredSize">The minimum desired capacity for the stream.</param>
            <param name="asContiguousBuffer">Whether to attempt to use a single contiguous buffer.</param>
            <returns>A MemoryStream.</returns>
            <remarks>Retrieving a MemoryStream which provides a single contiguous buffer can be useful in situations
            where the initial size is known and it is desirable to avoid copying data between the smaller underlying
            buffers to a single large one. This is most helpful when you know that you will always call GetBuffer
            on the underlying stream.</remarks>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStreamManager.GetStream(System.Guid,System.String,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Retrieve a new MemoryStream object with the given tag and with contents copied from the provided
            buffer. The provided buffer is not wrapped or used after construction.
            </summary>
            <param name="id">A unique identifier which can be used to trace usages of the stream.</param>
            <param name="tag">A tag which can be used to track the source of the stream.</param>
            <param name="buffer">The byte buffer to copy data from.</param>
            <param name="offset">The offset from the start of the buffer to copy from.</param>
            <param name="count">The number of bytes to copy from the buffer.</param>
            <returns>A MemoryStream.</returns>
            <exception cref="T:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStream">this, id, tag, count</exception>
            <remarks>The new stream's position is set to the beginning of the stream when returned.</remarks>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStreamManager.GetStream(System.Byte[])">
            <summary>
            Retrieve a new MemoryStream object with the contents copied from the provided
            buffer. The provided buffer is not wrapped or used after construction.
            </summary>
            <param name="buffer">The byte buffer to copy data from.</param>
            <returns>A MemoryStream.</returns>
            <remarks>The new stream's position is set to the beginning of the stream when returned.</remarks>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStreamManager.GetStream(System.String,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Retrieve a new MemoryStream object with the given tag and with contents copied from the provided
            buffer. The provided buffer is not wrapped or used after construction.
            </summary>
            <param name="tag">A tag which can be used to track the source of the stream.</param>
            <param name="buffer">The byte buffer to copy data from.</param>
            <param name="offset">The offset from the start of the buffer to copy from.</param>
            <param name="count">The number of bytes to copy from the buffer.</param>
            <returns>A MemoryStream.</returns>
            <remarks>The new stream's position is set to the beginning of the stream when returned.</remarks>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStreamManager.GetStream(System.Guid,System.String,System.Memory{System.Byte})">
            <summary>
            Retrieve a new MemoryStream object with the given tag and with contents copied from the provided
            buffer. The provided buffer is not wrapped or used after construction.
            </summary>
            <remarks>The new stream's position is set to the beginning of the stream when returned.</remarks>
            <param name="id">A unique identifier which can be used to trace usages of the stream.</param>
            <param name="tag">A tag which can be used to track the source of the stream.</param>
            <param name="buffer">The byte buffer to copy data from.</param>
            <returns>A MemoryStream.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStreamManager.GetStream(System.Memory{System.Byte})">
            <summary>
            Retrieve a new MemoryStream object with the contents copied from the provided
            buffer. The provided buffer is not wrapped or used after construction.
            </summary>
            <remarks>The new stream's position is set to the beginning of the stream when returned.</remarks>
            <param name="buffer">The byte buffer to copy data from.</param>
            <returns>A MemoryStream.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStreamManager.GetStream(System.String,System.Memory{System.Byte})">
            <summary>
            Retrieve a new MemoryStream object with the given tag and with contents copied from the provided
            buffer. The provided buffer is not wrapped or used after construction.
            </summary>
            <remarks>The new stream's position is set to the beginning of the stream when returned.</remarks>
            <param name="tag">A tag which can be used to track the source of the stream.</param>
            <param name="buffer">The byte buffer to copy data from.</param>
            <returns>A MemoryStream.</returns>
        </member>
        <member name="E:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStreamManager.BlockCreated">
            <summary>
            Triggered when a new block is created.
            </summary>
        </member>
        <member name="E:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStreamManager.BlockDiscarded">
            <summary>
            Triggered when a new block is created.
            </summary>
        </member>
        <member name="E:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStreamManager.LargeBufferCreated">
            <summary>
            Triggered when a new large buffer is created.
            </summary>
        </member>
        <member name="E:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStreamManager.StreamCreated">
            <summary>
            Triggered when a new stream is created.
            </summary>
        </member>
        <member name="E:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStreamManager.StreamDisposed">
            <summary>
            Triggered when a stream is disposed.
            </summary>
        </member>
        <member name="E:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStreamManager.StreamFinalized">
            <summary>
            Triggered when a stream is finalized.
            </summary>
        </member>
        <member name="E:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStreamManager.StreamLength">
            <summary>
            Triggered when a stream is finalized.
            </summary>
        </member>
        <member name="E:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStreamManager.LargeBufferDiscarded">
            <summary>
            Triggered when a large buffer is discarded, along with the reason for the discard.
            </summary>
        </member>
        <member name="E:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStreamManager.UsageReport">
            <summary>
            Periodically triggered to report usage statistics.
            </summary>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStream">
            <summary>
            MemoryStream implementation that deals with pooling and managing memory streams which use potentially large
            buffers.
            </summary>
            <remarks>This class works in tandem with the RecyclableMemoryStreamManager to supply MemoryStream
            objects to callers, while avoiding these specific problems:
            1. LOH allocations - since all large buffers are pooled, they will never incur a Gen2 GC
            2. Memory waste - A standard memory stream doubles its size when it runs out of room. This
            leads to continual memory growth as each stream approaches the maximum allowed size.
            3. Memory copying - Each time a MemoryStream grows, all the bytes are copied into new buffers.
            This implementation only copies the bytes when GetBuffer is called.
            4. Memory fragmentation - By using homogeneous buffer sizes, it ensures that blocks of memory
            can be easily reused.
            The stream is implemented on top of a series of uniformly-sized blocks. As the stream's length grows,
            additional blocks are retrieved from the memory manager. It is these blocks that are pooled, not the stream
            object itself.
            The biggest wrinkle in this implementation is when GetBuffer() is called. This requires a single
            contiguous buffer. If only a single block is in use, then that block is returned. If multiple blocks
            are in use, we retrieve a larger buffer from the memory manager. These large buffers are also pooled,
            split by size--they are multiples/exponentials of a chunk size (1 MB by default).
            Once a large buffer is assigned to the stream the small blocks are NEVER again used for this stream. All operations take place on the
            large buffer. The large buffer can be replaced by a larger buffer from the pool as needed. All blocks and large buffers
            are maintained in the stream until the stream is disposed (unless AggressiveBufferReturn is enabled in the stream manager).
            </remarks>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStream.MaxStreamLength">
            <summary>
            The maximum stream length
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStream.emptyArray">
            <summary>
            The empty array
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStream.blocks">
            <summary>
            All of these blocks must be the same size
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStream.id">
            <summary>
            The identifier
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStream.memoryManager">
            <summary>
            The memory manager
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStream.tag">
            <summary>
            The tag
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStream.dirtyBuffers">
            <summary>
            This list is used to store buffers once they're replaced by something larger.
            This is for the cases where you have users of this class that may hold onto the buffers longer
            than they should and you want to prevent race conditions which could corrupt the data.
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStream.disposedState">
            <summary>
            The disposed state
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStream.largeBuffer">
            <summary>
            This is only set by GetBuffer() if the necessary buffer is larger than a single block size, or on
            construction if the caller immediately requests a single large buffer.
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStream.Id">
            <summary>
            Unique identifier for this stream across its entire lifetime
            </summary>
            <value>The identifier.</value>
            <exception cref="T:System.ObjectDisposedException">Object has been disposed</exception>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStream.Tag">
            <summary>
            A temporary identifier for the current usage of this stream.
            </summary>
            <value>The tag.</value>
            <exception cref="T:System.ObjectDisposedException">Object has been disposed</exception>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStream.AllocationStack">
            <summary>
            Callstack of the constructor. It is only set if MemoryManager.GenerateCallStacks is true,
            which should only be in debugging situations.
            </summary>
            <value>The allocation stack.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStream.DisposeStack">
            <summary>
            Callstack of the Dispose call. It is only set if MemoryManager.GenerateCallStacks is true,
            which should only be in debugging situations.
            </summary>
            <value>The dispose stack.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStream.#ctor(ServiceStack.OrmLite.Base.Text.RecyclableMemoryStreamManager)">
            <summary>
            Allocate a new RecyclableMemoryStream object.
            </summary>
            <param name="memoryManager">The memory manager</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStream.#ctor(ServiceStack.OrmLite.Base.Text.RecyclableMemoryStreamManager,System.Guid)">
            <summary>
            Allocate a new RecyclableMemoryStream object.
            </summary>
            <param name="memoryManager">The memory manager</param>
            <param name="id">A unique identifier which can be used to trace usages of the stream.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStream.#ctor(ServiceStack.OrmLite.Base.Text.RecyclableMemoryStreamManager,System.String)">
            <summary>
            Allocate a new RecyclableMemoryStream object
            </summary>
            <param name="memoryManager">The memory manager</param>
            <param name="tag">A string identifying this stream for logging and debugging purposes</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStream.#ctor(ServiceStack.OrmLite.Base.Text.RecyclableMemoryStreamManager,System.Guid,System.String)">
            <summary>
            Allocate a new RecyclableMemoryStream object
            </summary>
            <param name="memoryManager">The memory manager</param>
            <param name="id">A unique identifier which can be used to trace usages of the stream.</param>
            <param name="tag">A string identifying this stream for logging and debugging purposes</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStream.#ctor(ServiceStack.OrmLite.Base.Text.RecyclableMemoryStreamManager,System.String,System.Int32)">
            <summary>
            Allocate a new RecyclableMemoryStream object
            </summary>
            <param name="memoryManager">The memory manager</param>
            <param name="tag">A string identifying this stream for logging and debugging purposes</param>
            <param name="requestedSize">The initial requested size to prevent future allocations</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStream.#ctor(ServiceStack.OrmLite.Base.Text.RecyclableMemoryStreamManager,System.Guid,System.String,System.Int32)">
            <summary>
            Allocate a new RecyclableMemoryStream object
            </summary>
            <param name="memoryManager">The memory manager</param>
            <param name="id">A unique identifier which can be used to trace usages of the stream.</param>
            <param name="tag">A string identifying this stream for logging and debugging purposes</param>
            <param name="requestedSize">The initial requested size to prevent future allocations</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStream.#ctor(ServiceStack.OrmLite.Base.Text.RecyclableMemoryStreamManager,System.Guid,System.String,System.Int32,System.Byte[])">
            <summary>
            Allocate a new RecyclableMemoryStream object
            </summary>
            <param name="memoryManager">The memory manager</param>
            <param name="id">A unique identifier which can be used to trace usages of the stream.</param>
            <param name="tag">A string identifying this stream for logging and debugging purposes</param>
            <param name="requestedSize">The initial requested size to prevent future allocations</param>
            <param name="initialLargeBuffer">An initial buffer to use. This buffer will be owned by the stream and returned to the memory manager upon Dispose.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStream.Finalize">
            <summary>
            The finalizer will be called when a stream is not disposed properly.
            </summary>
            <remarks>Failing to dispose indicates a bug in the code using streams. Care should be taken to properly account for stream lifetime.</remarks>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStream.Dispose(System.Boolean)">
            <summary>
            Returns the memory used by this stream back to the pool.
            </summary>
            <param name="disposing">Whether we're disposing (true), or being called by the finalizer (false)</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStream.Close">
            <summary>
            Equivalent to Dispose
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStream.Capacity">
            <summary>
            Gets or sets the capacity
            </summary>
            <value>The capacity.</value>
            <exception cref="T:System.ObjectDisposedException">Object has been disposed</exception>
            <remarks>Capacity is always in multiples of the memory manager's block size, unless
            the large buffer is in use.  Capacity never decreases during a stream's lifetime.
            Explicitly setting the capacity to a lower value than the current value will have no effect.
            This is because the buffers are all pooled by chunks and there's little reason to
            allow stream truncation.
            Writing past the current capacity will cause Capacity to automatically increase, until MaximumStreamCapacity is reached.</remarks>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStream.length">
            <summary>
            The length
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStream.Length">
            <summary>
            Gets the number of bytes written to this stream.
            </summary>
            <value>The length.</value>
            <exception cref="T:System.ObjectDisposedException">Object has been disposed</exception>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStream.position">
            <summary>
            The position
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStream.Position">
            <summary>
            Gets the current position in the stream
            </summary>
            <value>The position.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">value, value must be non-negative</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">value, value must be non-negative</exception>
            <exception cref="T:System.ObjectDisposedException">Object has been disposed</exception>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStream.CanRead">
            <summary>
            Whether the stream can currently read
            </summary>
            <value>The can read.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStream.CanSeek">
            <summary>
            Whether the stream can currently seek
            </summary>
            <value>The can seek.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStream.CanTimeout">
            <summary>
            Always false
            </summary>
            <value>The can timeout.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStream.CanWrite">
            <summary>
            Whether the stream can currently write
            </summary>
            <value>The can write.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStream.GetBuffer">
            <summary>
            Returns a single buffer containing the contents of the stream.
            The buffer may be longer than the stream length.
            </summary>
            <returns>A byte[] buffer</returns>
            <exception cref="T:System.ObjectDisposedException">Object has been disposed</exception>
            <remarks>IMPORTANT: Doing a Write() after calling GetBuffer() invalidates the buffer. The old buffer is held onto
            until Dispose is called, but the next time GetBuffer() is called, a new buffer from the pool will be required.</remarks>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads from the current position into the provided buffer
            </summary>
            <param name="buffer">Destination buffer</param>
            <param name="offset">Offset into buffer at which to start placing the read bytes.</param>
            <param name="count">Number of bytes to read.</param>
            <returns>The number of bytes read</returns>
            <exception cref="T:System.ArgumentNullException">buffer is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">offset or count is less than 0</exception>
            <exception cref="T:System.ArgumentException">offset subtracted from the buffer length is less than count</exception>
            <exception cref="T:System.ObjectDisposedException">Object has been disposed</exception>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStream.SafeRead(System.Byte[],System.Int32,System.Int32,System.Int32@)">
            <summary>
            Reads from the specified position into the provided buffer
            </summary>
            <param name="buffer">Destination buffer</param>
            <param name="offset">Offset into buffer at which to start placing the read bytes.</param>
            <param name="count">Number of bytes to read.</param>
            <param name="streamPosition">Position in the stream to start reading from</param>
            <returns>The number of bytes read</returns>
            <exception cref="T:System.ArgumentNullException">nameof(buffer)</exception>
            <exception cref="T:System.ArgumentNullException">nameof(buffer)</exception>
            <exception cref="T:System.ArgumentNullException">nameof(buffer)</exception>
            <exception cref="T:System.ArgumentNullException">nameof(buffer)</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">buffer is null</exception>
            <exception cref="T:System.ArgumentException">offset or count is less than 0</exception>
            <exception cref="T:System.ObjectDisposedException">offset subtracted from the buffer length is less than count</exception>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStream.Read(System.Span{System.Byte})">
            <summary>
            Reads from the current position into the provided buffer
            </summary>
            <param name="buffer">Destination buffer</param>
            <returns>The number of bytes read</returns>
            <exception cref="T:System.ObjectDisposedException">Object has been disposed</exception>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStream.SafeRead(System.Span{System.Byte},System.Int32@)">
            <summary>
            Reads from the specified position into the provided buffer
            </summary>
            <param name="buffer">Destination buffer</param>
            <param name="streamPosition">Position in the stream to start reading from</param>
            <returns>The number of bytes read</returns>
            <exception cref="T:System.ObjectDisposedException">Object has been disposed</exception>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes the buffer to the stream
            </summary>
            <param name="buffer">Source buffer</param>
            <param name="offset">Start position</param>
            <param name="count">Number of bytes to write</param>
            <exception cref="T:System.ArgumentNullException">nameof(buffer)</exception>
            <exception cref="T:System.ArgumentNullException">nameof(buffer)</exception>
            <exception cref="T:System.ArgumentNullException">nameof(buffer)</exception>
            <exception cref="T:System.ArgumentNullException">nameof(buffer)</exception>
            <exception cref="T:System.ArgumentNullException">nameof(buffer)</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">buffer is null</exception>
            <exception cref="T:System.ArgumentException">offset or count is negative</exception>
            <exception cref="T:System.ObjectDisposedException">buffer.Length - offset is not less than count</exception>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStream.Write(System.ReadOnlySpan{System.Byte})">
            <summary>
            Writes the buffer to the stream
            </summary>
            <param name="source">Source buffer</param>
            <exception cref="T:System.ArgumentNullException">buffer is null</exception>
            <exception cref="T:System.ObjectDisposedException">Object has been disposed</exception>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStream.ToString">
            <summary>
            Returns a useful string for debugging. This should not normally be called in actual production code.
            </summary>
            <returns>string.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStream.WriteByte(System.Byte)">
            <summary>
            Writes a single byte to the current position in the stream.
            </summary>
            <param name="value">byte value to write</param>
            <exception cref="T:System.IO.IOException">Maximum capacity exceeded</exception>
            <exception cref="T:System.ObjectDisposedException">Object has been disposed</exception>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStream.ReadByte">
            <summary>
            Reads a single byte from the current position in the stream.
            </summary>
            <returns>The byte at the current position, or -1 if the position is at the end of the stream.</returns>
            <exception cref="T:System.ObjectDisposedException">Object has been disposed</exception>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStream.SafeReadByte(System.Int32@)">
            <summary>
            Reads a single byte from the specified position in the stream.
            </summary>
            <param name="streamPosition">The position in the stream to read from</param>
            <returns>The byte at the current position, or -1 if the position is at the end of the stream.</returns>
            <exception cref="T:System.ObjectDisposedException">Object has been disposed</exception>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the stream
            </summary>
            <param name="value">The value.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">nameof(value), value must be non-negative and at most " + MaxStreamLength</exception>
            <exception cref="T:System.ObjectDisposedException">value is negative or larger than MaxStreamLength</exception>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position to the offset from the seek location
            </summary>
            <param name="offset">How many bytes to move</param>
            <param name="loc">From where</param>
            <returns>The new position</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">nameof(offset), offset cannot be larger than " + MaxStreamLength</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">nameof(offset), offset cannot be larger than " + MaxStreamLength</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">nameof(offset), offset cannot be larger than " + MaxStreamLength</exception>
            <exception cref="T:System.ObjectDisposedException">Object has been disposed</exception>
            <exception cref="T:System.ArgumentException">offset is larger than MaxStreamLength</exception>
            <exception cref="T:System.IO.IOException">Invalid seek origin</exception>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStream.WriteTo(System.IO.Stream)">
            <summary>
            Synchronously writes this stream's bytes to the argument stream.
            </summary>
            <param name="stream">Destination stream</param>
            <exception cref="T:System.ArgumentNullException">stream is null</exception>
            <remarks>Important: This does a synchronous write, which may not be desired in some situations</remarks>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStream.WriteTo(System.IO.Stream,System.Int32,System.Int32)">
            <summary>
            Synchronously writes this stream's bytes, starting at offset, for count bytes, to the argument stream.
            </summary>
            <param name="stream">Destination stream</param>
            <param name="offset">Offset in source</param>
            <param name="count">Number of bytes to write</param>
            <exception cref="T:System.ArgumentNullException">nameof(stream)</exception>
            <exception cref="T:System.ArgumentNullException">nameof(stream)</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">stream is null</exception>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStream.Disposed">
            <summary>
            Sets the disposed.
            </summary>
            <value>The disposed.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStream.CheckDisposed">
            <summary>
            Checks the disposed.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStream.ThrowDisposedException">
            <summary>
            Throws the disposed exception.
            </summary>
            <exception cref="T:System.ObjectDisposedException">$"The stream with Id {this.id} and Tag {this.tag} is disposed.</exception>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStream.InternalRead(System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Internals the read.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="count">The count.</param>
            <param name="fromPosition">From position.</param>
            <returns>int.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStream.BlockAndOffset">
            <summary>
            Struct BlockAndOffset
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStream.BlockAndOffset.Block">
            <summary>
            The block
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStream.BlockAndOffset.Offset">
            <summary>
            The offset
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStream.BlockAndOffset.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStream.BlockAndOffset"/> struct.
            </summary>
            <param name="block">The block.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStream.GetBlockAndRelativeOffset(System.Int32)">
            <summary>
            Gets the block and relative offset.
            </summary>
            <param name="offset">The offset.</param>
            <returns>ServiceStack.Text.RecyclableMemoryStream.BlockAndOffset.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStream.EnsureCapacity(System.Int32)">
            <summary>
            Ensures the capacity.
            </summary>
            <param name="newCapacity">The new capacity.</param>
            <exception cref="T:System.InvalidOperationException">Requested capacity is too large: " + newCapacity + ". Limit is " +
                                                                this.memoryManager.MaximumStreamCapacity</exception>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.RecyclableMemoryStream.ReleaseLargeBuffer">
            <summary>
            Release the large buffer (either stores it for eventual release or returns it immediately).
            </summary>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.EmptyCtorFactoryDelegate">
            <summary>
            Delegate EmptyCtorFactoryDelegate
            </summary>
            <param name="type">The type.</param>
            <returns>EmptyCtorDelegate.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.EmptyCtorDelegate">
            <summary>
            Delegate EmptyCtorDelegate
            </summary>
            <returns>System.Object.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.ReflectionExtensions">
            <summary>
            Class ReflectionExtensions.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.ReflectionExtensions.GetTypeCode(System.Type)">
            <summary>
            Gets the type code.
            </summary>
            <param name="type">The type.</param>
            <returns>TypeCode.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.ReflectionExtensions.IsInstanceOf(System.Type,System.Type)">
            <summary>
            Determines whether [is instance of] [the specified this or base type].
            </summary>
            <param name="type">The type.</param>
            <param name="thisOrBaseType">Type of the this or base.</param>
            <returns><c>true</c> if [is instance of] [the specified this or base type]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.ReflectionExtensions.HasGenericType(System.Type)">
            <summary>
            Determines whether [has generic type] [the specified type].
            </summary>
            <param name="type">The type.</param>
            <returns><c>true</c> if [has generic type] [the specified type]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.ReflectionExtensions.FirstGenericType(System.Type)">
            <summary>
            Firsts the type of the generic.
            </summary>
            <param name="type">The type.</param>
            <returns>Type.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.ReflectionExtensions.GetTypeWithGenericTypeDefinitionOfAny(System.Type,System.Type[])">
            <summary>
            Gets the type with generic type definition of any.
            </summary>
            <param name="type">The type.</param>
            <param name="genericTypeDefinitions">The generic type definitions.</param>
            <returns>Type.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.ReflectionExtensions.IsOrHasGenericInterfaceTypeOf(System.Type,System.Type)">
            <summary>
            Determines whether [is or has generic interface type of] [the specified generic type definition].
            </summary>
            <param name="type">The type.</param>
            <param name="genericTypeDefinition">The generic type definition.</param>
            <returns><c>true</c> if [is or has generic interface type of] [the specified generic type definition]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.ReflectionExtensions.GetTypeWithGenericTypeDefinitionOf(System.Type,System.Type)">
            <summary>
            Gets the type with generic type definition of.
            </summary>
            <param name="type">The type.</param>
            <param name="genericTypeDefinition">The generic type definition.</param>
            <returns>Type.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.ReflectionExtensions.HasInterface(System.Type,System.Type)">
            <summary>
            Determines whether the specified interface type has interface.
            </summary>
            <param name="type">The type.</param>
            <param name="interfaceType">Type of the interface.</param>
            <returns><c>true</c> if the specified interface type has interface; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.ReflectionExtensions.IsNullableType(System.Type)">
            <summary>
            Determines whether [is nullable type] [the specified type].
            </summary>
            <param name="type">The type.</param>
            <returns><c>true</c> if [is nullable type] [the specified type]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.ReflectionExtensions.GetUnderlyingTypeCode(System.Type)">
            <summary>
            Gets the underlying type code.
            </summary>
            <param name="type">The type.</param>
            <returns>TypeCode.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.ReflectionExtensions.IsNumericType(System.Type)">
            <summary>
            Determines whether [is numeric type] [the specified type].
            </summary>
            <param name="type">The type.</param>
            <returns><c>true</c> if [is numeric type] [the specified type]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.ReflectionExtensions.IsIntegerType(System.Type)">
            <summary>
            Determines whether [is integer type] [the specified type].
            </summary>
            <param name="type">The type.</param>
            <returns><c>true</c> if [is integer type] [the specified type]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.ReflectionExtensions.IsRealNumberType(System.Type)">
            <summary>
            Determines whether [is real number type] [the specified type].
            </summary>
            <param name="type">The type.</param>
            <returns><c>true</c> if [is real number type] [the specified type]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.ReflectionExtensions.GetTypeWithGenericInterfaceOf(System.Type,System.Type)">
            <summary>
            Gets the type with generic interface of.
            </summary>
            <param name="type">The type.</param>
            <param name="genericInterfaceType">Type of the generic interface.</param>
            <returns>Type.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.ReflectionExtensions.HasAnyTypeDefinitionsOf(System.Type,System.Type[])">
            <summary>
            Determines whether [has any type definitions of] [the specified these generic types].
            </summary>
            <param name="genericType">Type of the generic.</param>
            <param name="theseGenericTypes">The these generic types.</param>
            <returns><c>true</c> if [has any type definitions of] [the specified these generic types]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.ReflectionExtensions.GetGenericArgumentsIfBothHaveSameGenericDefinitionTypeAndArguments(System.Type,System.Type,System.Type)">
            <summary>
            Gets the generic arguments if both have same generic definition type and arguments.
            </summary>
            <param name="assignableFromType">Type of the assignable from.</param>
            <param name="typeA">The type a.</param>
            <param name="typeB">The type b.</param>
            <returns>Type[].</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.ReflectionExtensions.GetGenericArgumentsIfBothHaveConvertibleGenericDefinitionTypeAndArguments(System.Type,System.Type,System.Type)">
            <summary>
            Gets the generic arguments if both have convertible generic definition type and arguments.
            </summary>
            <param name="assignableFromType">Type of the assignable from.</param>
            <param name="typeA">The type a.</param>
            <param name="typeB">The type b.</param>
            <returns>TypePair.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.ReflectionExtensions.AreAllStringOrValueTypes(System.Type[])">
            <summary>
            Ares all string or value types.
            </summary>
            <param name="types">The types.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.ReflectionExtensions.ConstructorMethods">
            <summary>
            The constructor methods
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.ReflectionExtensions.TypeNamesMap">
            <summary>
            The type names map
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.ReflectionExtensions.GetConstructorMethod(System.Type)">
            <summary>
            Gets the constructor method.
            </summary>
            <param name="type">The type.</param>
            <returns>EmptyCtorDelegate.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.ReflectionExtensions.GetConstructorMethod(System.String)">
            <summary>
            Gets the constructor method.
            </summary>
            <param name="typeName">Name of the type.</param>
            <returns>EmptyCtorDelegate.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.ReflectionExtensions.GetConstructorMethodToCache(System.Type)">
            <summary>
            Gets the constructor method to cache.
            </summary>
            <param name="type">The type.</param>
            <returns>EmptyCtorDelegate.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.ReflectionExtensions.TypeMeta`1">
            <summary>
            Class TypeMeta.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.ReflectionExtensions.TypeMeta`1.EmptyCtorFn">
            <summary>
            The empty ctor function
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.ReflectionExtensions.TypeMeta`1.#cctor">
            <summary>
            Initializes static members of the <see cref="T:ServiceStack.OrmLite.Base.Text.ReflectionExtensions.TypeMeta`1" /> class.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.ReflectionExtensions.New``1(System.Type)">
            <summary>
            Creates a new instance of type.
            First looks at JsConfig.ModelFactory before falling back to CreateInstance
            </summary>
            <typeparam name="T"></typeparam>
            <param name="type">The type.</param>
            <returns>T.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.ReflectionExtensions.New(System.Type)">
            <summary>
            Creates a new instance of type.
            First looks at JsConfig.ModelFactory before falling back to CreateInstance
            </summary>
            <param name="type">The type.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.ReflectionExtensions.CreateInstance``1">
            <summary>
            Creates the instance.
            </summary>
            <typeparam name="T"></typeparam>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.ReflectionExtensions.CreateInstance(System.Type)">
            <summary>
            Creates a new instance from the default constructor of type
            </summary>
            <param name="type">The type.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.ReflectionExtensions.CreateInstance``1(System.Type)">
            <summary>
            Creates the instance.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="type">The type.</param>
            <returns>T.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.ReflectionExtensions.CreateInstance(System.String)">
            <summary>
            Creates the instance.
            </summary>
            <param name="typeName">Name of the type.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.ReflectionExtensions.GetModule(System.Type)">
            <summary>
            Gets the module.
            </summary>
            <param name="type">The type.</param>
            <returns>Module.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.ReflectionExtensions.GetAllProperties(System.Type)">
            <summary>
            Gets all properties.
            </summary>
            <param name="type">The type.</param>
            <returns>PropertyInfo[].</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.ReflectionExtensions.GetPublicProperties(System.Type)">
            <summary>
            Gets the public properties.
            </summary>
            <param name="type">The type.</param>
            <returns>PropertyInfo[].</returns>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.ReflectionExtensions.DataMember">
            <summary>
            The data member
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.ReflectionExtensions.IgnoreAttributesNamed">
            <summary>
            The ignore attributes named
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.ReflectionExtensions.Reset">
            <summary>
            Resets this instance.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.ReflectionExtensions.GetSerializableProperties(System.Type)">
            <summary>
            Gets the serializable properties.
            </summary>
            <param name="type">The type.</param>
            <returns>PropertyInfo[].</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.ReflectionExtensions.OnlySerializableProperties(System.Reflection.PropertyInfo[],System.Type)">
            <summary>
            Called when [serializable properties].
            </summary>
            <param name="properties">The properties.</param>
            <param name="type">The type.</param>
            <returns>PropertyInfo[].</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.ReflectionExtensions.GetOnDeserializing``1">
            <summary>
            Gets the on deserializing.
            </summary>
            <typeparam name="T"></typeparam>
            <returns>Func&lt;System.Object, System.String, System.Object, System.Object&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.ReflectionExtensions.GetSerializableFields(System.Type)">
            <summary>
            Gets the serializable fields.
            </summary>
            <param name="type">The type.</param>
            <returns>FieldInfo[].</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.ReflectionExtensions.GetDataContract(System.Type)">
            <summary>
            Gets the data contract.
            </summary>
            <param name="type">The type.</param>
            <returns>DataContractAttribute.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.ReflectionExtensions.GetDataMember(System.Reflection.PropertyInfo)">
            <summary>
            Gets the data member.
            </summary>
            <param name="pi">The pi.</param>
            <returns>DataMemberAttribute.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.ReflectionExtensions.GetDataMember(System.Reflection.FieldInfo)">
            <summary>
            Gets the data member.
            </summary>
            <param name="pi">The pi.</param>
            <returns>DataMemberAttribute.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.ReflectionExtensions.GetDataMemberName(System.Reflection.PropertyInfo)">
            <summary>
            Gets the name of the data member.
            </summary>
            <param name="pi">The pi.</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.ReflectionOptimizer">
            <summary>
            Class ReflectionOptimizer.
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.ReflectionOptimizer.Instance">
            <summary>
            The instance
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.ReflectionOptimizer.UseType(System.Type)">
            <summary>
            Uses the type.
            </summary>
            <param name="type">The type.</param>
            <returns>Type.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.ReflectionOptimizer.CreateGetter(System.Reflection.PropertyInfo)">
            <summary>
            Creates the getter.
            </summary>
            <param name="propertyInfo">The property information.</param>
            <returns>GetMemberDelegate.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.ReflectionOptimizer.CreateGetter``1(System.Reflection.PropertyInfo)">
            <summary>
            Creates the getter.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="propertyInfo">The property information.</param>
            <returns>GetMemberDelegate&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.ReflectionOptimizer.CreateSetter(System.Reflection.PropertyInfo)">
            <summary>
            Creates the setter.
            </summary>
            <param name="propertyInfo">The property information.</param>
            <returns>SetMemberDelegate.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.ReflectionOptimizer.CreateSetter``1(System.Reflection.PropertyInfo)">
            <summary>
            Creates the setter.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="propertyInfo">The property information.</param>
            <returns>SetMemberDelegate&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.ReflectionOptimizer.CreateGetter(System.Reflection.FieldInfo)">
            <summary>
            Creates the getter.
            </summary>
            <param name="fieldInfo">The field information.</param>
            <returns>GetMemberDelegate.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.ReflectionOptimizer.CreateGetter``1(System.Reflection.FieldInfo)">
            <summary>
            Creates the getter.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fieldInfo">The field information.</param>
            <returns>GetMemberDelegate&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.ReflectionOptimizer.CreateSetter(System.Reflection.FieldInfo)">
            <summary>
            Creates the setter.
            </summary>
            <param name="fieldInfo">The field information.</param>
            <returns>SetMemberDelegate.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.ReflectionOptimizer.CreateSetter``1(System.Reflection.FieldInfo)">
            <summary>
            Creates the setter.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fieldInfo">The field information.</param>
            <returns>SetMemberDelegate&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.ReflectionOptimizer.CreateSetterRef``1(System.Reflection.FieldInfo)">
            <summary>
            Creates the setter reference.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fieldInfo">The field information.</param>
            <returns>SetMemberRefDelegate&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.ReflectionOptimizer.IsDynamic(System.Reflection.Assembly)">
            <summary>
            Determines whether the specified assembly is dynamic.
            </summary>
            <param name="assembly">The assembly.</param>
            <returns><c>true</c> if the specified assembly is dynamic; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.ReflectionOptimizer.CreateConstructor(System.Type)">
            <summary>
            Creates the constructor.
            </summary>
            <param name="type">The type.</param>
            <returns>EmptyCtorDelegate.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.RuntimeReflectionOptimizer">
            <summary>
            Class RuntimeReflectionOptimizer. This class cannot be inherited.
            Implements the <see cref="T:ServiceStack.OrmLite.Base.Text.ReflectionOptimizer" />
            </summary>
            <seealso cref="T:ServiceStack.OrmLite.Base.Text.ReflectionOptimizer" />
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.RuntimeReflectionOptimizer.provider">
            <summary>
            The provider
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.RuntimeReflectionOptimizer.Provider">
            <summary>
            Gets the provider.
            </summary>
            <value>The provider.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.RuntimeReflectionOptimizer.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:ServiceStack.OrmLite.Base.Text.RuntimeReflectionOptimizer" /> class from being created.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.RuntimeReflectionOptimizer.UseType(System.Type)">
            <summary>
            Uses the type.
            </summary>
            <param name="type">The type.</param>
            <returns>Type.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.RuntimeReflectionOptimizer.CreateGetter(System.Reflection.PropertyInfo)">
            <summary>
            Creates the getter.
            </summary>
            <param name="propertyInfo">The property information.</param>
            <returns>GetMemberDelegate.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.RuntimeReflectionOptimizer.CreateGetter``1(System.Reflection.PropertyInfo)">
            <summary>
            Creates the getter.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="propertyInfo">The property information.</param>
            <returns>GetMemberDelegate&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.RuntimeReflectionOptimizer.CreateSetter(System.Reflection.PropertyInfo)">
            <summary>
            Creates the setter.
            </summary>
            <param name="propertyInfo">The property information.</param>
            <returns>SetMemberDelegate.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.RuntimeReflectionOptimizer.CreateSetter``1(System.Reflection.PropertyInfo)">
            <summary>
            Creates the setter.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="propertyInfo">The property information.</param>
            <returns>SetMemberDelegate&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.RuntimeReflectionOptimizer.CreateGetter(System.Reflection.FieldInfo)">
            <summary>
            Creates the getter.
            </summary>
            <param name="fieldInfo">The field information.</param>
            <returns>GetMemberDelegate.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.RuntimeReflectionOptimizer.CreateGetter``1(System.Reflection.FieldInfo)">
            <summary>
            Creates the getter.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fieldInfo">The field information.</param>
            <returns>GetMemberDelegate&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.RuntimeReflectionOptimizer.CreateSetter(System.Reflection.FieldInfo)">
            <summary>
            Creates the setter.
            </summary>
            <param name="fieldInfo">The field information.</param>
            <returns>SetMemberDelegate.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.RuntimeReflectionOptimizer.CreateSetter``1(System.Reflection.FieldInfo)">
            <summary>
            Creates the setter.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fieldInfo">The field information.</param>
            <returns>SetMemberDelegate&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.RuntimeReflectionOptimizer.CreateSetterRef``1(System.Reflection.FieldInfo)">
            <summary>
            Creates the setter reference.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fieldInfo">The field information.</param>
            <returns>SetMemberRefDelegate&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.RuntimeReflectionOptimizer.IsDynamic(System.Reflection.Assembly)">
            <summary>
            Determines whether the specified assembly is dynamic.
            </summary>
            <param name="assembly">The assembly.</param>
            <returns><c>true</c> if the specified assembly is dynamic; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.RuntimeReflectionOptimizer.CreateConstructor(System.Type)">
            <summary>
            Creates the constructor.
            </summary>
            <param name="type">The type.</param>
            <returns>EmptyCtorDelegate.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.ExpressionReflectionOptimizer">
            <summary>
            Class ExpressionReflectionOptimizer. This class cannot be inherited.
            Implements the <see cref="T:ServiceStack.OrmLite.Base.Text.ReflectionOptimizer" />
            </summary>
            <seealso cref="T:ServiceStack.OrmLite.Base.Text.ReflectionOptimizer" />
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.ExpressionReflectionOptimizer.provider">
            <summary>
            The provider
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.ExpressionReflectionOptimizer.Provider">
            <summary>
            Gets the provider.
            </summary>
            <value>The provider.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.ExpressionReflectionOptimizer.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:ServiceStack.OrmLite.Base.Text.ExpressionReflectionOptimizer" /> class from being created.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.ExpressionReflectionOptimizer.UseType(System.Type)">
            <summary>
            Uses the type.
            </summary>
            <param name="type">The type.</param>
            <returns>Type.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.ExpressionReflectionOptimizer.CreateGetter(System.Reflection.PropertyInfo)">
            <summary>
            Creates the getter.
            </summary>
            <param name="propertyInfo">The property information.</param>
            <returns>GetMemberDelegate.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.ExpressionReflectionOptimizer.GetExpressionLambda(System.Reflection.PropertyInfo)">
            <summary>
            Gets the expression lambda.
            </summary>
            <param name="propertyInfo">The property information.</param>
            <returns>Expression&lt;GetMemberDelegate&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.ExpressionReflectionOptimizer.CreateGetter``1(System.Reflection.PropertyInfo)">
            <summary>
            Creates the getter.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="propertyInfo">The property information.</param>
            <returns>GetMemberDelegate&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.ExpressionReflectionOptimizer.GetExpressionLambda``1(System.Reflection.PropertyInfo)">
            <summary>
            Gets the expression lambda.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="propertyInfo">The property information.</param>
            <returns>Expression&lt;GetMemberDelegate&lt;T&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.ExpressionReflectionOptimizer.CreateSetter(System.Reflection.PropertyInfo)">
            <summary>
            Creates the setter.
            </summary>
            <param name="propertyInfo">The property information.</param>
            <returns>SetMemberDelegate.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.ExpressionReflectionOptimizer.CreateSetter``1(System.Reflection.PropertyInfo)">
            <summary>
            Creates the setter.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="propertyInfo">The property information.</param>
            <returns>SetMemberDelegate&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.ExpressionReflectionOptimizer.SetExpressionLambda``1(System.Reflection.PropertyInfo)">
            <summary>
            Sets the expression lambda.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="propertyInfo">The property information.</param>
            <returns>Expression&lt;SetMemberDelegate&lt;T&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.ExpressionReflectionOptimizer.CreateGetter(System.Reflection.FieldInfo)">
            <summary>
            Creates the getter.
            </summary>
            <param name="fieldInfo">The field information.</param>
            <returns>GetMemberDelegate.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.ExpressionReflectionOptimizer.GetCastOrConvertExpression(System.Linq.Expressions.Expression,System.Type)">
            <summary>
            Gets the cast or convert expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="targetType">Type of the target.</param>
            <returns>Expression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.ExpressionReflectionOptimizer.CreateGetter``1(System.Reflection.FieldInfo)">
            <summary>
            Creates the getter.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fieldInfo">The field information.</param>
            <returns>GetMemberDelegate&lt;T&gt;.</returns>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.ExpressionReflectionOptimizer.setFieldMethod">
            <summary>
            The set field method
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.ExpressionReflectionOptimizer.SetField``1(``0@,``0)">
            <summary>
            Sets the field.
            </summary>
            <typeparam name="TValue">The type of the t value.</typeparam>
            <param name="field">The field.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.ExpressionReflectionOptimizer.CreateSetter(System.Reflection.FieldInfo)">
            <summary>
            Creates the setter.
            </summary>
            <param name="fieldInfo">The field information.</param>
            <returns>SetMemberDelegate.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.ExpressionReflectionOptimizer.CreateSetter``1(System.Reflection.FieldInfo)">
            <summary>
            Creates the setter.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fieldInfo">The field information.</param>
            <returns>SetMemberDelegate&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.ExpressionReflectionOptimizer.CreateSetterRef``1(System.Reflection.FieldInfo)">
            <summary>
            Creates the setter reference.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fieldInfo">The field information.</param>
            <returns>SetMemberRefDelegate&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.ExpressionReflectionOptimizer.IsDynamic(System.Reflection.Assembly)">
            <summary>
            Determines whether the specified assembly is dynamic.
            </summary>
            <param name="assembly">The assembly.</param>
            <returns><c>true</c> if the specified assembly is dynamic; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.ExpressionReflectionOptimizer.CreateConstructor(System.Type)">
            <summary>
            Creates the constructor.
            </summary>
            <param name="type">The type.</param>
            <returns>EmptyCtorDelegate.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.EmitReflectionOptimizer">
            <summary>
            Class EmitReflectionOptimizer. This class cannot be inherited.
            Implements the <see cref="T:ServiceStack.OrmLite.Base.Text.ReflectionOptimizer" />
            </summary>
            <seealso cref="T:ServiceStack.OrmLite.Base.Text.ReflectionOptimizer" />
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.EmitReflectionOptimizer.provider">
            <summary>
            The provider
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.EmitReflectionOptimizer.Provider">
            <summary>
            Gets the provider.
            </summary>
            <value>The provider.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.EmitReflectionOptimizer.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:ServiceStack.OrmLite.Base.Text.EmitReflectionOptimizer"/> class from being created.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.EmitReflectionOptimizer.UseType(System.Type)">
            <summary>
            Uses the type.
            </summary>
            <param name="type">The type.</param>
            <returns>Type.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.EmitReflectionOptimizer.CreateDynamicGetMethod``1(System.Reflection.MemberInfo)">
            <summary>
            Creates the dynamic get method.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="memberInfo">The member information.</param>
            <returns>DynamicMethod.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.EmitReflectionOptimizer.CreateGetter(System.Reflection.PropertyInfo)">
            <summary>
            Creates the getter.
            </summary>
            <param name="propertyInfo">The property information.</param>
            <returns>GetMemberDelegate.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.EmitReflectionOptimizer.CreateGetter``1(System.Reflection.PropertyInfo)">
            <summary>
            Creates the getter.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="propertyInfo">The property information.</param>
            <returns>GetMemberDelegate&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.EmitReflectionOptimizer.CreateSetter(System.Reflection.PropertyInfo)">
            <summary>
            Creates the setter.
            </summary>
            <param name="propertyInfo">The property information.</param>
            <returns>SetMemberDelegate.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.EmitReflectionOptimizer.CreateSetter``1(System.Reflection.PropertyInfo)">
            <summary>
            Creates the setter.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="propertyInfo">The property information.</param>
            <returns>SetMemberDelegate&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.EmitReflectionOptimizer.CreateGetter(System.Reflection.FieldInfo)">
            <summary>
            Creates the getter.
            </summary>
            <param name="fieldInfo">The field information.</param>
            <returns>GetMemberDelegate.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.EmitReflectionOptimizer.CreateGetter``1(System.Reflection.FieldInfo)">
            <summary>
            Creates the getter.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fieldInfo">The field information.</param>
            <returns>GetMemberDelegate&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.EmitReflectionOptimizer.CreateSetter(System.Reflection.FieldInfo)">
            <summary>
            Creates the setter.
            </summary>
            <param name="fieldInfo">The field information.</param>
            <returns>SetMemberDelegate.</returns>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.EmitReflectionOptimizer.DynamicGetMethodArgs">
            <summary>
            The dynamic get method arguments
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.EmitReflectionOptimizer.CreateDynamicGetMethod(System.Reflection.MemberInfo)">
            <summary>
            Creates the dynamic get method.
            </summary>
            <param name="memberInfo">The member information.</param>
            <returns>DynamicMethod.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.EmitReflectionOptimizer.CreateSetter``1(System.Reflection.FieldInfo)">
            <summary>
            Creates the setter.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fieldInfo">The field information.</param>
            <returns>SetMemberDelegate&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.EmitReflectionOptimizer.CreateSetterRef``1(System.Reflection.FieldInfo)">
            <summary>
            Creates the setter reference.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fieldInfo">The field information.</param>
            <returns>SetMemberRefDelegate&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.EmitReflectionOptimizer.IsDynamic(System.Reflection.Assembly)">
            <summary>
            Determines whether the specified assembly is dynamic.
            </summary>
            <param name="assembly">The assembly.</param>
            <returns><c>true</c> if the specified assembly is dynamic; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.EmitReflectionOptimizer.CreateConstructor(System.Type)">
            <summary>
            Creates the constructor.
            </summary>
            <param name="type">The type.</param>
            <returns>EmptyCtorDelegate.</returns>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.EmitReflectionOptimizer.DynamicSetMethodArgs">
            <summary>
            The dynamic set method arguments
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.EmitReflectionOptimizer.CreateDynamicSetMethod(System.Reflection.MemberInfo)">
            <summary>
            Creates the dynamic set method.
            </summary>
            <param name="memberInfo">The member information.</param>
            <returns>DynamicMethod.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.DynamicProxy">
            <summary>
            Class DynamicProxy.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicProxy.GetInstanceFor``1">
            <summary>
            Gets the instance for.
            </summary>
            <typeparam name="T"></typeparam>
            <returns>T.</returns>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.DynamicProxy.ModuleBuilder">
            <summary>
            The module builder
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.DynamicProxy.DynamicAssembly">
            <summary>
            The dynamic assembly
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.DynamicProxy.EmptyTypes">
            <summary>
            The empty types
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicProxy.GetInstanceFor(System.Type)">
            <summary>
            Gets the instance for.
            </summary>
            <param name="targetType">Type of the target.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicProxy.ProxyName(System.Type)">
            <summary>
            Proxies the name.
            </summary>
            <param name="targetType">Type of the target.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicProxy.#cctor">
            <summary>
            Initializes static members of the <see cref="T:ServiceStack.OrmLite.Base.Text.DynamicProxy"/> class.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicProxy.GetConstructedType(System.Type)">
            <summary>
            Gets the type of the constructed.
            </summary>
            <param name="targetType">Type of the target.</param>
            <returns>Type.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicProxy.IncludeType(System.Type,System.Reflection.Emit.TypeBuilder)">
            <summary>
            Includes the type.
            </summary>
            <param name="typeOfT">The type of t.</param>
            <param name="typeBuilder">The type builder.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicProxy.BindMethod(System.Reflection.Emit.TypeBuilder,System.Reflection.MethodInfo)">
            <summary>
            Binds the method.
            </summary>
            <param name="typeBuilder">The type builder.</param>
            <param name="methodInfo">The method information.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.DynamicProxy.BindProperty(System.Reflection.Emit.TypeBuilder,System.Reflection.MethodInfo)">
            <summary>
            Binds the property.
            </summary>
            <param name="typeBuilder">The type builder.</param>
            <param name="methodInfo">The method information.</param>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.RuntimeSerializableAttribute">
            <summary>
            Allow Type to be deserialized into late-bound object Types using __type info
            </summary>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.StreamExtensions">
            <summary>
            Class StreamExtensions.
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.StreamExtensions.DefaultBufferSize">
            <summary>
            @jonskeet: Collection of utility methods which operate on streams.
            r285, February 26th 2009: http://www.yoda.arachsys.com/csharp/miscutil/
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StreamExtensions.ReadToEnd(System.IO.MemoryStream)">
            <summary>
            Reads to end.
            </summary>
            <param name="ms">The ms.</param>
            <returns>string.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StreamExtensions.ReadToEnd(System.IO.MemoryStream,System.Text.Encoding)">
            <summary>
            Reads to end.
            </summary>
            <param name="ms">The ms.</param>
            <param name="encoding">The encoding.</param>
            <returns>string.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StreamExtensions.GetBufferAsSpan(System.IO.MemoryStream)">
            <summary>
            Gets the buffer as span.
            </summary>
            <param name="ms">The ms.</param>
            <returns>ReadOnlySpan&lt;System.Byte&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StreamExtensions.GetBufferAsBytes(System.IO.MemoryStream)">
            <summary>
            Gets the buffer as bytes.
            </summary>
            <param name="ms">The ms.</param>
            <returns>byte[].</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StreamExtensions.ReadToEnd(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Reads to end.
            </summary>
            <param name="stream">The stream.</param>
            <param name="encoding">The encoding.</param>
            <returns>string.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StreamExtensions.CopyToNewMemoryStream(System.IO.Stream)">
            <summary>
            Copies to new memory stream.
            </summary>
            <param name="stream">The stream.</param>
            <returns>System.IO.MemoryStream.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StreamExtensions.CopyToNewMemoryStreamAsync(System.IO.Stream)">
            <summary>
            Copy to new memory stream as an asynchronous operation.
            </summary>
            <param name="stream">The stream.</param>
            <returns>A Task representing the asynchronous operation.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.StringBuilderCache">
            <summary>
            Reusable StringBuilder ThreadStatic Cache
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.StringBuilderCache.cache">
            <summary>
            The cache
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringBuilderCache.Allocate">
            <summary>
            Allocates this instance.
            </summary>
            <returns>StringBuilder.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringBuilderCache.Free(System.Text.StringBuilder)">
            <summary>
            Frees the specified sb.
            </summary>
            <param name="sb">The sb.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringBuilderCache.ReturnAndFree(System.Text.StringBuilder)">
            <summary>
            Returns the and free.
            </summary>
            <param name="sb">The sb.</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.StringBuilderCacheAlt">
            <summary>
            Alternative Reusable StringBuilder ThreadStatic Cache
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.StringBuilderCacheAlt.cache">
            <summary>
            The cache
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringBuilderCacheAlt.Allocate">
            <summary>
            Allocates this instance.
            </summary>
            <returns>StringBuilder.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringBuilderCacheAlt.Free(System.Text.StringBuilder)">
            <summary>
            Frees the specified sb.
            </summary>
            <param name="sb">The sb.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringBuilderCacheAlt.ReturnAndFree(System.Text.StringBuilder)">
            <summary>
            Returns the and free.
            </summary>
            <param name="sb">The sb.</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.StringBuilderThreadStatic">
            <summary>
            Class StringBuilderThreadStatic.
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.StringBuilderThreadStatic.cache">
            <summary>
            The cache
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringBuilderThreadStatic.Allocate">
            <summary>
            Allocates this instance.
            </summary>
            <returns>StringBuilder.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringBuilderThreadStatic.Free(System.Text.StringBuilder)">
            <summary>
            Frees the specified sb.
            </summary>
            <param name="sb">The sb.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringBuilderThreadStatic.ReturnAndFree(System.Text.StringBuilder)">
            <summary>
            Returns the and free.
            </summary>
            <param name="sb">The sb.</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.StringExtensions">
            <summary>
            Class StringExtensions.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringExtensions.EncodeJsv(System.String)">
            <summary>
            Encodes the JSV.
            </summary>
            <param name="value">The value.</param>
            <returns>string.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringExtensions.UrlEncode(System.String,System.Boolean)">
            <summary>
            URLs the encode.
            </summary>
            <param name="text">The text.</param>
            <param name="upperCase">The upper case.</param>
            <returns>string.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringExtensions.FromUtf8Bytes(System.Byte[])">
            <summary>
            Froms the UTF8 bytes.
            </summary>
            <param name="bytes">The bytes.</param>
            <returns>string.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringExtensions.ToUtf8Bytes(System.String)">
            <summary>
            Converts to utf8bytes.
            </summary>
            <param name="value">The value.</param>
            <returns>byte[].</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringExtensions.LeftPart(System.String,System.Char)">
            <summary>
            Lefts the part.
            </summary>
            <param name="strVal">The string value.</param>
            <param name="needle">The needle.</param>
            <returns>string.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringExtensions.LeftPart(System.String,System.String)">
            <summary>
            Lefts the part.
            </summary>
            <param name="strVal">The string value.</param>
            <param name="needle">The needle.</param>
            <returns>string.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringExtensions.RightPart(System.String,System.Char)">
            <summary>
            Rights the part.
            </summary>
            <param name="strVal">The string value.</param>
            <param name="needle">The needle.</param>
            <returns>string.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringExtensions.RightPart(System.String,System.String)">
            <summary>
            Rights the part.
            </summary>
            <param name="strVal">The string value.</param>
            <param name="needle">The needle.</param>
            <returns>string.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringExtensions.LastLeftPart(System.String,System.Char)">
            <summary>
            Lasts the left part.
            </summary>
            <param name="strVal">The string value.</param>
            <param name="needle">The needle.</param>
            <returns>string.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringExtensions.LastRightPart(System.String,System.Char)">
            <summary>
            Lasts the right part.
            </summary>
            <param name="strVal">The string value.</param>
            <param name="needle">The needle.</param>
            <returns>string.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringExtensions.LastRightPart(System.String,System.String)">
            <summary>
            Lasts the right part.
            </summary>
            <param name="strVal">The string value.</param>
            <param name="needle">The needle.</param>
            <returns>string.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringExtensions.SplitOnFirst(System.String,System.Char)">
            <summary>
            Splits the on first.
            </summary>
            <param name="strVal">The string value.</param>
            <param name="needle">The needle.</param>
            <returns>string[].</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringExtensions.SplitOnFirst(System.String,System.String)">
            <summary>
            Splits the on first.
            </summary>
            <param name="strVal">The string value.</param>
            <param name="needle">The needle.</param>
            <returns>string[].</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringExtensions.SplitOnLast(System.String,System.Char)">
            <summary>
            Splits the on last.
            </summary>
            <param name="strVal">The string value.</param>
            <param name="needle">The needle.</param>
            <returns>string[].</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringExtensions.SplitOnLast(System.String,System.String)">
            <summary>
            Splits the on last.
            </summary>
            <param name="strVal">The string value.</param>
            <param name="needle">The needle.</param>
            <returns>string[].</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringExtensions.WithoutExtension(System.String)">
            <summary>
            Withouts the extension.
            </summary>
            <param name="filePath">The file path.</param>
            <returns>string.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringExtensions.ToJsv``1(``0)">
            <summary>
            Converts to jsv.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj">The object.</param>
            <returns>string.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringExtensions.FromJsv``1(System.String)">
            <summary>
            Froms the JSV.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="jsv">The JSV.</param>
            <returns>T.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringExtensions.FromJson``1(System.String)">
            <summary>
            Froms the json.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="json">The json.</param>
            <returns>T.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringExtensions.ToCsv``1(``0)">
            <summary>
            Converts to csv.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj">The object.</param>
            <returns>string.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringExtensions.ToCsv``1(``0,System.Action{ServiceStack.OrmLite.Base.Text.Config})">
            <summary>
            Converts to csv.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj">The object.</param>
            <param name="configure">The configure.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringExtensions.FromCsv``1(System.String)">
            <summary>
            Froms the CSV.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="csv">The CSV.</param>
            <returns>T.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringExtensions.FormatWith(System.String,System.Object[])">
            <summary>
            Formats the with.
            </summary>
            <param name="text">The text.</param>
            <param name="args">The arguments.</param>
            <returns>string.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringExtensions.Fmt(System.String,System.Object)">
            <summary>
            FMTs the specified text.
            </summary>
            <param name="text">The text.</param>
            <param name="arg1">The arg1.</param>
            <returns>string.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringExtensions.Fmt(System.String,System.Object,System.Object)">
            <summary>
            FMTs the specified text.
            </summary>
            <param name="text">The text.</param>
            <param name="arg1">The arg1.</param>
            <param name="arg2">The arg2.</param>
            <returns>string.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringExtensions.Fmt(System.String,System.Object,System.Object,System.Object)">
            <summary>
            FMTs the specified text.
            </summary>
            <param name="text">The text.</param>
            <param name="arg1">The arg1.</param>
            <param name="arg2">The arg2.</param>
            <param name="arg3">The arg3.</param>
            <returns>string.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringExtensions.StartsWithIgnoreCase(System.String,System.String)">
            <summary>
            Starts the with ignore case.
            </summary>
            <param name="text">The text.</param>
            <param name="startsWith">The starts with.</param>
            <returns>bool.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringExtensions.EndsWithIgnoreCase(System.String,System.String)">
            <summary>
            Ends the with ignore case.
            </summary>
            <param name="text">The text.</param>
            <param name="endsWith">The ends with.</param>
            <returns>bool.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringExtensions.FileExists(System.String)">
            <summary>
            Files the exists.
            </summary>
            <param name="filePath">The file path.</param>
            <returns>bool.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringExtensions.CreateDirectory(System.String)">
            <summary>
            Creates the directory.
            </summary>
            <param name="dirPath">The dir path.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringExtensions.IndexOfAny(System.String,System.String[])">
            <summary>
            Indexes the of any.
            </summary>
            <param name="text">The text.</param>
            <param name="needles">The needles.</param>
            <returns>int.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringExtensions.IndexOfAny(System.String,System.Int32,System.String[])">
            <summary>
            Indexes the of any.
            </summary>
            <param name="text">The text.</param>
            <param name="startIndex">The start index.</param>
            <param name="needles">The needles.</param>
            <returns>int.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringExtensions.StripQuotes(System.String)">
            <summary>
            Strips the quotes.
            </summary>
            <param name="text">The text.</param>
            <returns>string.</returns>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.StringExtensions.LowerCaseOffset">
            <summary>
            The lower case offset
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringExtensions.ToCamelCase(System.String)">
            <summary>
            Converts to camelcase.
            </summary>
            <param name="value">The value.</param>
            <returns>string.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringExtensions.ToPascalCase(System.String)">
            <summary>
            Converts to pascalcase.
            </summary>
            <param name="value">The value.</param>
            <returns>string.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringExtensions.ToTitleCase(System.String)">
            <summary>
            Converts to titlecase.
            </summary>
            <param name="value">The value.</param>
            <returns>string.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringExtensions.ToUppercaseUnderscore(System.String)">
            <summary>
            Converts to uppercaseunderscore.
            </summary>
            <param name="value">The value.</param>
            <returns>string.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringExtensions.ToKebabCase(System.String)">
            <summary>
            Converts to kebabcase.
            </summary>
            <param name="value">The value.</param>
            <returns>string.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringExtensions.ToLowercaseUnderscore(System.String)">
            <summary>
            Converts to lowercaseunderscore.
            </summary>
            <param name="value">The value.</param>
            <returns>string.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringExtensions.SafeSubstring(System.String,System.Int32,System.Int32)">
            <summary>
            Safes the substring.
            </summary>
            <param name="value">The value.</param>
            <param name="startIndex">The start index.</param>
            <param name="length">The length.</param>
            <returns>string.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringExtensions.SubstringWithEllipsis(System.String,System.Int32,System.Int32)">
            <summary>
            Substrings the with ellipsis.
            </summary>
            <param name="value">The value.</param>
            <param name="startIndex">The start index.</param>
            <param name="length">The length.</param>
            <returns>string.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringExtensions.CompareIgnoreCase(System.String,System.String)">
            <summary>
            Compares the ignore case.
            </summary>
            <param name="strA">The string a.</param>
            <param name="strB">The string b.</param>
            <returns>int.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringExtensions.EndsWithInvariant(System.String,System.String)">
            <summary>
            Endses the with invariant.
            </summary>
            <param name="str">The string.</param>
            <param name="endsWith">The ends with.</param>
            <returns>bool.</returns>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.StringExtensions.InvalidVarCharsRegex">
            <summary>
            The invalid variable chars regex
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringExtensions.IsEmpty(System.String)">
            <summary>
            Determines whether the specified value is empty.
            </summary>
            <param name="value">The value.</param>
            <returns>bool.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringExtensions.IsNullOrEmpty(System.String)">
            <summary>
            Determines whether [is null or empty] [the specified value].
            </summary>
            <param name="value">The value.</param>
            <returns>bool.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringExtensions.EqualsIgnoreCase(System.String,System.String)">
            <summary>
            Equalses the ignore case.
            </summary>
            <param name="value">The value.</param>
            <param name="other">The other.</param>
            <returns>bool.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringExtensions.ReplaceFirst(System.String,System.String,System.String)">
            <summary>
            Replaces the first.
            </summary>
            <param name="haystack">The haystack.</param>
            <param name="needle">The needle.</param>
            <param name="replacement">The replacement.</param>
            <returns>string.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringExtensions.ContainsAny(System.String,System.String[])">
            <summary>
            Determines whether the specified text contains any.
            </summary>
            <param name="text">The text.</param>
            <param name="testMatches">The test matches.</param>
            <returns>bool.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringExtensions.ContainsAny(System.String,System.String[],System.StringComparison)">
            <summary>
            Determines whether the specified text contains any.
            </summary>
            <param name="text">The text.</param>
            <param name="testMatches">The test matches.</param>
            <param name="comparisonType">Type of the comparison.</param>
            <returns>bool.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringExtensions.SafeVarName(System.String)">
            <summary>
            Safes the name of the variable.
            </summary>
            <param name="text">The text.</param>
            <returns>string.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringExtensions.Join(System.Collections.Generic.List{System.String})">
            <summary>
            Joins the specified items.
            </summary>
            <param name="items">The items.</param>
            <returns>string.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringExtensions.Join(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Joins the specified items.
            </summary>
            <param name="items">The items.</param>
            <param name="delimeter">The delimeter.</param>
            <returns>string.</returns>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.StringExtensions.SystemTypeChars">
            <summary>
            The system type chars
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringExtensions.IsUserType(System.Type)">
            <summary>
            Determines whether [is user type] [the specified type].
            </summary>
            <param name="type">The type.</param>
            <returns>bool.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringExtensions.IsSystemType(System.Type)">
            <summary>
            Determines whether [is system type] [the specified type].
            </summary>
            <param name="type">The type.</param>
            <returns>bool.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringExtensions.IsTuple(System.Type)">
            <summary>
            Determines whether the specified type is tuple.
            </summary>
            <param name="type">The type.</param>
            <returns>bool.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringExtensions.IsInt(System.String)">
            <summary>
            Determines whether the specified text is int.
            </summary>
            <param name="text">The text.</param>
            <returns>bool.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringExtensions.ToInt(System.String)">
            <summary>
            Converts the string representation of a number to an integer.
            </summary>
            <param name="text">The text.</param>
            <returns>int.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringExtensions.ToInt(System.String,System.Int32)">
            <summary>
            Converts the string representation of a number to an integer.
            </summary>
            <param name="text">The text.</param>
            <param name="defaultValue">The default value.</param>
            <returns>int.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringExtensions.ToLong(System.String)">
            <summary>
            Converts to long.
            </summary>
            <param name="text">The text.</param>
            <returns>long.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringExtensions.ToLong(System.String,System.Int64)">
            <summary>
            Converts to long.
            </summary>
            <param name="text">The text.</param>
            <param name="defaultValue">The default value.</param>
            <returns>long.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringExtensions.ToDouble(System.String)">
            <summary>
            Converts to double.
            </summary>
            <param name="text">The text.</param>
            <returns>double.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringExtensions.ToDouble(System.String,System.Double)">
            <summary>
            Converts to double.
            </summary>
            <param name="text">The text.</param>
            <param name="defaultValue">The default value.</param>
            <returns>double.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringExtensions.ToDecimal(System.String)">
            <summary>
            Converts to decimal.
            </summary>
            <param name="text">The text.</param>
            <returns>decimal.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringExtensions.ToDecimal(System.String,System.Decimal)">
            <summary>
            Converts to decimal.
            </summary>
            <param name="text">The text.</param>
            <param name="defaultValue">The default value.</param>
            <returns>decimal.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringExtensions.Matches(System.String,System.String)">
            <summary>
            Matcheses the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="pattern">The pattern.</param>
            <returns>bool.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringExtensions.Glob(System.String,System.String)">
            <summary>
            Globs the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="pattern">The pattern.</param>
            <returns>bool.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringExtensions.TrimPrefixes(System.String,System.String[])">
            <summary>
            Trims the prefixes.
            </summary>
            <param name="fromString">From string.</param>
            <param name="prefixes">The prefixes.</param>
            <returns>string.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringExtensions.ReadLines(System.String)">
            <summary>
            Reads the lines.
            </summary>
            <param name="text">The text.</param>
            <returns>System.Collections.Generic.IEnumerable&lt;string&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringExtensions.ToHex(System.Byte[],System.Boolean)">
            <summary>
            Converts to hex.
            </summary>
            <param name="hashBytes">The hash bytes.</param>
            <param name="upper">The upper.</param>
            <returns>string.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringExtensions.GetHexValue(System.Int32,System.Boolean)">
            <summary>
            Gets the hexadecimal value.
            </summary>
            <param name="i">The i.</param>
            <param name="upper">The upper.</param>
            <returns>char.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">i - must be between 0 and 15</exception>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.StringSpanExtensions">
            <summary>
            Helpful extensions on ReadOnlySpan&lt;char&gt;
            Previous extensions on StringSegment available from: https://gist.github.com/mythz/9825689f0db7464d1d541cb62954614c
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringSpanExtensions.Value(System.ReadOnlySpan{System.Char})">
            <summary>
            Returns null if Length == 0, string.Empty if value[0] == NonWidthWhitespace, otherwise returns value.ToString()
            </summary>
            <param name="value">The value.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringSpanExtensions.Value(System.Object)">
            <summary>
            Values the specified object.
            </summary>
            <param name="obj">The object.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringSpanExtensions.IsNullOrEmpty(System.ReadOnlySpan{System.Char})">
            <summary>
            Determines whether [is null or empty] [the specified value].
            </summary>
            <param name="value">The value.</param>
            <returns><c>true</c> if [is null or empty] [the specified value]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringSpanExtensions.Substring(System.ReadOnlySpan{System.Char},System.Int32)">
            <summary>
            Substrings the specified position.
            </summary>
            <param name="value">The value.</param>
            <param name="pos">The position.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringSpanExtensions.Substring(System.ReadOnlySpan{System.Char},System.Int32,System.Int32)">
            <summary>
            Substrings the specified position.
            </summary>
            <param name="value">The value.</param>
            <param name="pos">The position.</param>
            <param name="length">The length.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringSpanExtensions.CompareIgnoreCase(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
            <summary>
            Compares the ignore case.
            </summary>
            <param name="value">The value.</param>
            <param name="text">The text.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringSpanExtensions.FromCsvField(System.ReadOnlySpan{System.Char})">
            <summary>
            Froms the CSV field.
            </summary>
            <param name="text">The text.</param>
            <returns>ReadOnlySpan&lt;System.Char&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringSpanExtensions.ParseBoolean(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses the boolean.
            </summary>
            <param name="value">The value.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringSpanExtensions.TryParseBoolean(System.ReadOnlySpan{System.Char},System.Boolean@)">
            <summary>
            Tries the parse boolean.
            </summary>
            <param name="value">The value.</param>
            <param name="result">if set to <c>true</c> [result].</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringSpanExtensions.TryParseDecimal(System.ReadOnlySpan{System.Char},System.Decimal@)">
            <summary>
            Tries the parse decimal.
            </summary>
            <param name="value">The value.</param>
            <param name="result">The result.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringSpanExtensions.TryParseFloat(System.ReadOnlySpan{System.Char},System.Single@)">
            <summary>
            Tries the parse float.
            </summary>
            <param name="value">The value.</param>
            <param name="result">The result.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringSpanExtensions.TryParseDouble(System.ReadOnlySpan{System.Char},System.Double@)">
            <summary>
            Tries the parse double.
            </summary>
            <param name="value">The value.</param>
            <param name="result">The result.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringSpanExtensions.ParseDecimal(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses the decimal.
            </summary>
            <param name="value">The value.</param>
            <returns>System.Decimal.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringSpanExtensions.ParseFloat(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses the float.
            </summary>
            <param name="value">The value.</param>
            <returns>System.Single.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringSpanExtensions.ParseDouble(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses the double.
            </summary>
            <param name="value">The value.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringSpanExtensions.ParseInt32(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses the int32.
            </summary>
            <param name="value">The value.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringSpanExtensions.ParseGuid(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses the unique identifier.
            </summary>
            <param name="value">The value.</param>
            <returns>Guid.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringSpanExtensions.AdvancePastWhitespace(System.ReadOnlySpan{System.Char})">
            <summary>
            Advances the past whitespace.
            </summary>
            <param name="literal">The literal.</param>
            <returns>ReadOnlySpan&lt;System.Char&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringSpanExtensions.RightPart(System.ReadOnlySpan{System.Char},System.Char)">
            <summary>
            Rights the part.
            </summary>
            <param name="strVal">The string value.</param>
            <param name="needle">The needle.</param>
            <returns>ReadOnlySpan&lt;System.Char&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringSpanExtensions.RightPart(System.ReadOnlySpan{System.Char},System.String)">
            <summary>
            Rights the part.
            </summary>
            <param name="strVal">The string value.</param>
            <param name="needle">The needle.</param>
            <returns>ReadOnlySpan&lt;System.Char&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringSpanExtensions.LastRightPart(System.ReadOnlySpan{System.Char},System.Char)">
            <summary>
            Lasts the right part.
            </summary>
            <param name="strVal">The string value.</param>
            <param name="needle">The needle.</param>
            <returns>ReadOnlySpan&lt;System.Char&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringSpanExtensions.LastRightPart(System.ReadOnlySpan{System.Char},System.String)">
            <summary>
            Lasts the right part.
            </summary>
            <param name="strVal">The string value.</param>
            <param name="needle">The needle.</param>
            <returns>ReadOnlySpan&lt;System.Char&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringSpanExtensions.SplitOnFirst(System.ReadOnlySpan{System.Char},System.Char,System.ReadOnlySpan{System.Char}@,System.ReadOnlySpan{System.Char}@)">
            <summary>
            Splits the on first.
            </summary>
            <param name="strVal">The string value.</param>
            <param name="needle">The needle.</param>
            <param name="first">The first.</param>
            <param name="last">The last.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringSpanExtensions.SplitOnFirst(System.ReadOnlySpan{System.Char},System.String,System.ReadOnlySpan{System.Char}@,System.ReadOnlySpan{System.Char}@)">
            <summary>
            Splits the on first.
            </summary>
            <param name="strVal">The string value.</param>
            <param name="needle">The needle.</param>
            <param name="first">The first.</param>
            <param name="last">The last.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringSpanExtensions.SplitOnLast(System.ReadOnlySpan{System.Char},System.Char,System.ReadOnlySpan{System.Char}@,System.ReadOnlySpan{System.Char}@)">
            <summary>
            Splits the on last.
            </summary>
            <param name="strVal">The string value.</param>
            <param name="needle">The needle.</param>
            <param name="first">The first.</param>
            <param name="last">The last.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringSpanExtensions.SplitOnLast(System.ReadOnlySpan{System.Char},System.String,System.ReadOnlySpan{System.Char}@,System.ReadOnlySpan{System.Char}@)">
            <summary>
            Splits the on last.
            </summary>
            <param name="strVal">The string value.</param>
            <param name="needle">The needle.</param>
            <param name="first">The first.</param>
            <param name="last">The last.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringSpanExtensions.WithoutExtension(System.ReadOnlySpan{System.Char})">
            <summary>
            Withouts the extension.
            </summary>
            <param name="filePath">The file path.</param>
            <returns>ReadOnlySpan&lt;System.Char&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringSpanExtensions.GetExtension(System.ReadOnlySpan{System.Char})">
            <summary>
            Gets the extension.
            </summary>
            <param name="filePath">The file path.</param>
            <returns>ReadOnlySpan&lt;System.Char&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringSpanExtensions.ParentDirectory(System.ReadOnlySpan{System.Char})">
            <summary>
            Parents the directory.
            </summary>
            <param name="filePath">The file path.</param>
            <returns>ReadOnlySpan&lt;System.Char&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringSpanExtensions.TrimEnd(System.ReadOnlySpan{System.Char},System.Char[])">
            <summary>
            Trims the end.
            </summary>
            <param name="value">The value.</param>
            <param name="trimChars">The trim chars.</param>
            <returns>ReadOnlySpan&lt;System.Char&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringSpanExtensions.TrimHelper(System.ReadOnlySpan{System.Char},System.Int32)">
            <summary>
            Trims the helper.
            </summary>
            <param name="value">The value.</param>
            <param name="trimType">Type of the trim.</param>
            <returns>ReadOnlySpan&lt;System.Char&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringSpanExtensions.TrimHelper(System.ReadOnlySpan{System.Char},System.Collections.Generic.IReadOnlyList{System.Char},System.Int32)">
            <summary>
            Trims the helper.
            </summary>
            <param name="value">The value.</param>
            <param name="trimChars">The trim chars.</param>
            <param name="trimType">Type of the trim.</param>
            <returns>ReadOnlySpan&lt;System.Char&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringSpanExtensions.CreateTrimmedString(System.ReadOnlySpan{System.Char},System.Int32,System.Int32)">
            <summary>
            Creates the trimmed string.
            </summary>
            <param name="value">The value.</param>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <returns>ReadOnlySpan&lt;System.Char&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringSpanExtensions.IndexOf(System.ReadOnlySpan{System.Char},System.String)">
            <summary>
            Indexes the of.
            </summary>
            <param name="value">The value.</param>
            <param name="other">The other.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringSpanExtensions.IndexOf(System.ReadOnlySpan{System.Char},System.String,System.Int32,System.StringComparison)">
            <summary>
            Indexes the of.
            </summary>
            <param name="value">The value.</param>
            <param name="needle">The needle.</param>
            <param name="start">The start.</param>
            <param name="comparisonType">Type of the comparison.</param>
            <returns>int.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringSpanExtensions.LastIndexOf(System.ReadOnlySpan{System.Char},System.String)">
            <summary>
            Lasts the index of.
            </summary>
            <param name="value">The value.</param>
            <param name="other">The other.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringSpanExtensions.LastIndexOf(System.ReadOnlySpan{System.Char},System.String,System.Int32)">
            <summary>
            Lasts the index of.
            </summary>
            <param name="value">The value.</param>
            <param name="needle">The needle.</param>
            <param name="start">The start.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringSpanExtensions.EqualTo(System.ReadOnlySpan{System.Char},System.String)">
            <summary>
            Equals to.
            </summary>
            <param name="value">The value.</param>
            <param name="other">The other.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringSpanExtensions.EqualTo(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
            <summary>
            Equals to.
            </summary>
            <param name="value">The value.</param>
            <param name="other">The other.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringSpanExtensions.EqualsOrdinal(System.ReadOnlySpan{System.Char},System.String)">
            <summary>
            Equalses the ordinal.
            </summary>
            <param name="value">The value.</param>
            <param name="other">The other.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringSpanExtensions.StartsWith(System.ReadOnlySpan{System.Char},System.String)">
            <summary>
            Startses the with.
            </summary>
            <param name="value">The value.</param>
            <param name="other">The other.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringSpanExtensions.StartsWith(System.ReadOnlySpan{System.Char},System.String,System.StringComparison)">
            <summary>
            Startses the with.
            </summary>
            <param name="value">The value.</param>
            <param name="other">The other.</param>
            <param name="comparison">The comparison.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringSpanExtensions.EndsWith(System.ReadOnlySpan{System.Char},System.String,System.StringComparison)">
            <summary>
            Endses the with.
            </summary>
            <param name="value">The value.</param>
            <param name="other">The other.</param>
            <param name="comparison">The comparison.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringSpanExtensions.EndsWith(System.ReadOnlySpan{System.Char},System.String)">
            <summary>
            Endses the with.
            </summary>
            <param name="value">The value.</param>
            <param name="other">The other.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringSpanExtensions.EqualsIgnoreCase(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
            <summary>
            Equalses the ignore case.
            </summary>
            <param name="value">The value.</param>
            <param name="other">The other.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringSpanExtensions.WriteAsync(System.IO.Stream,System.ReadOnlySpan{System.Char},System.Threading.CancellationToken)">
            <summary>
            Writes the asynchronous.
            </summary>
            <param name="stream">The stream.</param>
            <param name="value">The value.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringSpanExtensions.SafeSubstring(System.ReadOnlySpan{System.Char},System.Int32)">
            <summary>
            Safes the substring.
            </summary>
            <param name="value">The value.</param>
            <param name="startIndex">The start index.</param>
            <returns>ReadOnlySpan&lt;System.Char&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringSpanExtensions.SafeSubstring(System.ReadOnlySpan{System.Char},System.Int32,System.Int32)">
            <summary>
            Safes the substring.
            </summary>
            <param name="value">The value.</param>
            <param name="startIndex">The start index.</param>
            <param name="length">The length.</param>
            <returns>ReadOnlySpan&lt;System.Char&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringSpanExtensions.Append(System.Text.StringBuilder,System.ReadOnlySpan{System.Char})">
            <summary>
            Appends the specified value.
            </summary>
            <param name="sb">The sb.</param>
            <param name="value">The value.</param>
            <returns>StringBuilder.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringSpanExtensions.ParseBase64(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses the base64.
            </summary>
            <param name="value">The value.</param>
            <returns>System.Byte[].</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringSpanExtensions.WithoutBom(System.ReadOnlySpan{System.Char})">
            <summary>
            Withouts the bom.
            </summary>
            <param name="value">The value.</param>
            <returns>ReadOnlySpan&lt;System.Char&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringSpanExtensions.WithoutBom(System.ReadOnlySpan{System.Byte})">
            <summary>
            Withouts the bom.
            </summary>
            <param name="value">The value.</param>
            <returns>ReadOnlySpan&lt;System.Byte&gt;.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.StringWriterCache">
            <summary>
            Reusable StringWriter ThreadStatic Cache
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.StringWriterCache.cache">
            <summary>
            The cache
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringWriterCache.Allocate">
            <summary>
            Allocates this instance.
            </summary>
            <returns>StringWriter.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringWriterCache.Free(System.IO.StringWriter)">
            <summary>
            Frees the specified writer.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringWriterCache.ReturnAndFree(System.IO.StringWriter)">
            <summary>
            Returns the and free.
            </summary>
            <param name="writer">The writer.</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.StringWriterCacheAlt">
            <summary>
            Alternative Reusable StringWriter ThreadStatic Cache
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.StringWriterCacheAlt.cache">
            <summary>
            The cache
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringWriterCacheAlt.Allocate">
            <summary>
            Allocates this instance.
            </summary>
            <returns>StringWriter.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringWriterCacheAlt.Free(System.IO.StringWriter)">
            <summary>
            Frees the specified writer.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringWriterCacheAlt.ReturnAndFree(System.IO.StringWriter)">
            <summary>
            Returns the and free.
            </summary>
            <param name="writer">The writer.</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.StringWriterThreadStatic">
            <summary>
            Class StringWriterThreadStatic.
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.StringWriterThreadStatic.cache">
            <summary>
            The cache
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringWriterThreadStatic.Allocate">
            <summary>
            Allocates this instance.
            </summary>
            <returns>StringWriter.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringWriterThreadStatic.Free(System.IO.StringWriter)">
            <summary>
            Frees the specified writer.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.StringWriterThreadStatic.ReturnAndFree(System.IO.StringWriter)">
            <summary>
            Returns the and free.
            </summary>
            <param name="writer">The writer.</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.Support.AssemblyTypeDefinition">
            <summary>
            Class AssemblyTypeDefinition.
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Support.AssemblyTypeDefinition.TypeDefinitionSeperator">
            <summary>
            The type definition seperator
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Support.AssemblyTypeDefinition.TypeNameIndex">
            <summary>
            The type name index
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Support.AssemblyTypeDefinition.AssemblyNameIndex">
            <summary>
            The assembly name index
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Support.AssemblyTypeDefinition.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.OrmLite.Base.Text.Support.AssemblyTypeDefinition" /> class.
            </summary>
            <param name="typeDefinition">The type definition.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.Support.AssemblyTypeDefinition.TypeName">
            <summary>
            Gets or sets the name of the type.
            </summary>
            <value>The name of the type.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.Support.AssemblyTypeDefinition.AssemblyName">
            <summary>
            Gets or sets the name of the assembly.
            </summary>
            <value>The name of the assembly.</value>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.Support.TimeSpanConverter">
            <summary>
            Class TimeSpanConverter.
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Support.TimeSpanConverter.MinSerializedValue">
            <summary>
            The minimum serialized value
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.Support.TimeSpanConverter.MaxSerializedValue">
            <summary>
            The maximum serialized value
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Support.TimeSpanConverter.ToXsdDuration(System.TimeSpan)">
            <summary>
            Converts to xsdduration.
            </summary>
            <param name="timeSpan">The time span.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Support.TimeSpanConverter.FromXsdDuration(System.String)">
            <summary>
            Froms the duration of the XSD.
            </summary>
            <param name="xsdDuration">Duration of the XSD.</param>
            <returns>TimeSpan.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.Support.TypePair">
            <summary>
            Class TypePair.
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.Support.TypePair.Args1">
            <summary>
            Gets or sets the args1.
            </summary>
            <value>The args1.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.Support.TypePair.Arg2">
            <summary>
            Gets or sets the arg2.
            </summary>
            <value>The arg2.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Support.TypePair.#ctor(System.Type[],System.Type[])">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.OrmLite.Base.Text.Support.TypePair" /> class.
            </summary>
            <param name="arg1">The arg1.</param>
            <param name="arg2">The arg2.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Support.TypePair.Equals(ServiceStack.OrmLite.Base.Text.Support.TypePair)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Support.TypePair.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Support.TypePair.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.SystemJson.DataContractResolver">
            <summary>
            Class DataContractResolver.
            https://github.com/dotnet/runtime/blob/v8.0.1/src/libraries/System.Text.Json/tests/System.Text.Json.Tests/Serialization/TypeInfoResolverFunctionalTests.cs#L671
            Implements the <see cref="T:System.Text.Json.Serialization.Metadata.DefaultJsonTypeInfoResolver" />
            </summary>
            <seealso cref="T:System.Text.Json.Serialization.Metadata.DefaultJsonTypeInfoResolver" />
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.SystemJson.DataContractResolver.Instance">
            <summary>
            Gets the instance.
            </summary>
            <value>The instance.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.SystemJson.DataContractResolver.NamingPolicyConverters">
            <summary>
            Gets the naming policy converters.
            </summary>
            <value>The naming policy converters.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.SystemJson.DataContractResolver.GetTypeInfo(System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Gets the type information.
            </summary>
            <param name="type">The type.</param>
            <param name="options">The options.</param>
            <returns>System.Text.Json.Serialization.Metadata.JsonTypeInfo.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.SystemJson.JsonEnumMemberStringEnumConverter">
            <summary>
            Class JsonEnumMemberStringEnumConverter.
            Implements the <see cref="T:System.Text.Json.Serialization.JsonConverterFactory" />
            </summary>
            <seealso cref="T:System.Text.Json.Serialization.JsonConverterFactory" />
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.SystemJson.JsonEnumMemberStringEnumConverter.#ctor(System.Text.Json.JsonNamingPolicy,System.Boolean)">
            <summary>
            Class JsonEnumMemberStringEnumConverter.
            Implements the <see cref="T:System.Text.Json.Serialization.JsonConverterFactory" />
            </summary>
            <seealso cref="T:System.Text.Json.Serialization.JsonConverterFactory" />
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.SystemJson.JsonEnumMemberStringEnumConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.OrmLite.Base.Text.SystemJson.JsonEnumMemberStringEnumConverter"/> class.
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.SystemJson.JsonEnumMemberStringEnumConverter.stringConverter">
            <summary>
            The string converter
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.SystemJson.JsonEnumMemberStringEnumConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified type to convert.
            </summary>
            <param name="typeToConvert">The type to convert.</param>
            <returns>bool.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.SystemJson.JsonEnumMemberStringEnumConverter.CreateConverter(System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Creates the converter.
            </summary>
            <param name="typeToConvert">The type to convert.</param>
            <param name="options">The options.</param>
            <returns>System.Text.Json.Serialization.JsonConverter.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.SystemJson.JsonNamingPolicyDecorator">
            <summary>
            Class JsonNamingPolicyDecorator.
            Implements the <see cref="T:System.Text.Json.JsonNamingPolicy" />
            </summary>
            <seealso cref="T:System.Text.Json.JsonNamingPolicy" />
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.SystemJson.JsonNamingPolicyDecorator.#ctor(System.Text.Json.JsonNamingPolicy)">
            <summary>
            Class JsonNamingPolicyDecorator.
            Implements the <see cref="T:System.Text.Json.JsonNamingPolicy" />
            </summary>
            <seealso cref="T:System.Text.Json.JsonNamingPolicy" />
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.SystemJson.JsonNamingPolicyDecorator.ConvertName(System.String)">
            <summary>
            Converts the name.
            </summary>
            <param name="name">The name.</param>
            <returns>string.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.SystemJson.DictionaryLookupNamingPolicy">
            <summary>
            Class DictionaryLookupNamingPolicy.
            Implements the <see cref="T:ServiceStack.OrmLite.Base.Text.SystemJson.JsonNamingPolicyDecorator" />
            </summary>
            <seealso cref="T:ServiceStack.OrmLite.Base.Text.SystemJson.JsonNamingPolicyDecorator" />
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.SystemJson.DictionaryLookupNamingPolicy.#ctor(System.Collections.Generic.Dictionary{System.String,System.String},System.Text.Json.JsonNamingPolicy)">
            <summary>
            Class DictionaryLookupNamingPolicy.
            Implements the <see cref="T:ServiceStack.OrmLite.Base.Text.SystemJson.JsonNamingPolicyDecorator" />
            </summary>
            <seealso cref="T:ServiceStack.OrmLite.Base.Text.SystemJson.JsonNamingPolicyDecorator" />
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.SystemJson.DictionaryLookupNamingPolicy.dictionary">
            <summary>
            The dictionary
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.SystemJson.DictionaryLookupNamingPolicy.ConvertName(System.String)">
            <summary>
            Converts the name.
            </summary>
            <param name="name">The name.</param>
            <returns>string.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.SystemJson.XsdTimeOnlyJsonConverter">
            <summary>
            Class XsdTimeOnlyJsonConverter.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.SystemJson.XsdTimeOnlyJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Reads the specified reader.
            </summary>
            <param name="reader">The reader.</param>
            <param name="typeToConvert">The type to convert.</param>
            <param name="options">The options.</param>
            <returns>System.TimeOnly.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.SystemJson.XsdTimeOnlyJsonConverter.Write(System.Text.Json.Utf8JsonWriter,System.TimeOnly,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Writes the specified writer.
            </summary>
            <param name="writer">The writer.</param>
            <param name="value">The value.</param>
            <param name="options">The options.</param>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.SystemJson.XsdTimeSpanJsonConverter">
            <summary>
            Class XsdTimeSpanJsonConverter.
            Implements the <see cref="T:System.TimeSpan" />
            </summary>
            <seealso cref="T:System.TimeSpan" />
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.SystemJson.XsdTimeSpanJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Reads and converts the JSON to type T
            </summary>
            <param name="reader">The reader.</param>
            <param name="typeToConvert">The type to convert.</param>
            <param name="options">An object that specifies serialization options to use.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.SystemJson.XsdTimeSpanJsonConverter.Write(System.Text.Json.Utf8JsonWriter,System.TimeSpan,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Writes a specified value as JSON.
            </summary>
            <param name="writer">The writer to write to.</param>
            <param name="value">The value to convert to JSON.</param>
            <param name="options">An object that specifies serialization options to use.</param>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.TaskExtensions">
            <summary>
            Class TaskExtensions.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.TaskExtensions.UnwrapIfSingleException(System.Exception)">
            <summary>
            Unwraps if single exception.
            </summary>
            <param name="ex">The ex.</param>
            <returns>Exception.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.TaskResult">
            <summary>
            Class TaskResult.
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.TaskResult.Zero">
            <summary>
            The zero
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.TaskResult.One">
            <summary>
            The one
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.TaskResult.True">
            <summary>
            The true
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.TaskResult.False">
            <summary>
            The false
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.TaskResult.Finished">
            <summary>
            The finished
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.TaskResult.Canceled">
            <summary>
            The canceled
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.TaskResult.#cctor">
            <summary>
            Initializes static members of the <see cref="T:ServiceStack.OrmLite.Base.Text.TaskResult" /> class.
            </summary>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.TaskResult`1">
            <summary>
            Class TaskResult.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.TaskResult`1.Canceled">
            <summary>
            The canceled
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.TaskResult`1.Default">
            <summary>
            The default
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.TaskResult`1.#cctor">
            <summary>
            Initializes static members of the <see cref="T:ServiceStack.OrmLite.Base.Text.TaskResult`1" /> class.
            </summary>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.TaskUtils">
            <summary>
            Class TaskUtils.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.TaskUtils.InTask``1(``0)">
            <summary>
            Ins the task.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="result">The result.</param>
            <returns>Task&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.TaskUtils.InTask``1(System.Exception)">
            <summary>
            Ins the task.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ex">The ex.</param>
            <returns>Task&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.TaskUtils.Then``2(System.Threading.Tasks.Task{``0},System.Func{``0,``1})">
            <summary>
            Thens the specified function.
            </summary>
            <typeparam name="From">The type of from.</typeparam>
            <typeparam name="To">The type of to.</typeparam>
            <param name="task">The task.</param>
            <param name="fn">The function.</param>
            <returns>Task&lt;To&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.TaskUtils.Sleep(System.Int32)">
            <summary>
            Sleeps the specified time ms.
            </summary>
            <param name="timeMs">The time ms.</param>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.TextConfig">
            <summary>
            Class TextConfig.
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.TextConfig.CreateSha">
            <summary>
            Gets or sets the create sha.
            </summary>
            <value>The create sha.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.TextConfig.SystemJsonOptionFilters">
            <summary>
            Gets the system json option filters.
            </summary>
            <value>The system json option filters.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.TextConfig.DefaultConfigureSystemJsonOptions(System.Text.Json.JsonSerializerOptions)">
            <summary>
            Defaults the configure system json options.
            </summary>
            <param name="options">The options.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.TextConfig.ApplySystemJsonOptions(System.Text.Json.JsonSerializerOptions)">
            <summary>
            Applies the system json options.
            </summary>
            <param name="options">The options.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.TextConfig.CreateSystemJsonOptions">
            <summary>
            Creates the system json options.
            </summary>
            <returns>System.Text.Json.JsonSerializerOptions.</returns>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.TextConfig.SystemJsonOptions">
            <summary>
            Gets or sets the system json options.
            </summary>
            <value>The system json options.</value>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.TextExtensions">
            <summary>
            Class TextExtensions.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.TextExtensions.ToCsvField(System.String)">
            <summary>
            Converts to csvfield.
            </summary>
            <param name="text">The text.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.TextExtensions.ToCsvField(System.Object)">
            <summary>
            Converts to csvfield.
            </summary>
            <param name="text">The text.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.TextExtensions.FromCsvField(System.String)">
            <summary>
            Froms the CSV field.
            </summary>
            <param name="text">The text.</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.Tracer">
            <summary>
            Class Tracer.
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.Tracer.Instance">
            <summary>
            The instance
            </summary>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.Tracer.NullTracer">
            <summary>
            Class NullTracer.
            Implements the <see cref="T:ServiceStack.OrmLite.Base.Text.ITracer" />
            </summary>
            <seealso cref="T:ServiceStack.OrmLite.Base.Text.ITracer" />
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Tracer.NullTracer.WriteDebug(System.String)">
            <summary>
            Writes the debug.
            </summary>
            <param name="error">The error.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Tracer.NullTracer.WriteDebug(System.String,System.Object[])">
            <summary>
            Writes the debug.
            </summary>
            <param name="format">The format.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Tracer.NullTracer.WriteWarning(System.String)">
            <summary>
            Writes the warning.
            </summary>
            <param name="warning">The warning.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Tracer.NullTracer.WriteWarning(System.String,System.Object[])">
            <summary>
            Writes the warning.
            </summary>
            <param name="format">The format.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Tracer.NullTracer.WriteError(System.Exception)">
            <summary>
            Writes the error.
            </summary>
            <param name="ex">The ex.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Tracer.NullTracer.WriteError(System.String)">
            <summary>
            Writes the error.
            </summary>
            <param name="error">The error.</param>
            <exception cref="P:ServiceStack.OrmLite.Base.Text.DiagnosticEvent.Exception"></exception>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Tracer.NullTracer.WriteError(System.String,System.Object[])">
            <summary>
            Writes the error.
            </summary>
            <param name="format">The format.</param>
            <param name="args">The arguments.</param>
            <exception cref="P:ServiceStack.OrmLite.Base.Text.DiagnosticEvent.Exception"></exception>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.Tracer.ConsoleTracer">
            <summary>
            Class ConsoleTracer.
            Implements the <see cref="T:ServiceStack.OrmLite.Base.Text.ITracer" />
            </summary>
            <seealso cref="T:ServiceStack.OrmLite.Base.Text.ITracer" />
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Tracer.ConsoleTracer.WriteDebug(System.String)">
            <summary>
            Writes the debug.
            </summary>
            <param name="error">The error.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Tracer.ConsoleTracer.WriteDebug(System.String,System.Object[])">
            <summary>
            Writes the debug.
            </summary>
            <param name="format">The format.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Tracer.ConsoleTracer.WriteWarning(System.String)">
            <summary>
            Writes the warning.
            </summary>
            <param name="warning">The warning.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Tracer.ConsoleTracer.WriteWarning(System.String,System.Object[])">
            <summary>
            Writes the warning.
            </summary>
            <param name="format">The format.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Tracer.ConsoleTracer.WriteError(System.Exception)">
            <summary>
            Writes the error.
            </summary>
            <param name="ex">The ex.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Tracer.ConsoleTracer.WriteError(System.String)">
            <summary>
            Writes the error.
            </summary>
            <param name="error">The error.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.Tracer.ConsoleTracer.WriteError(System.String,System.Object[])">
            <summary>
            Writes the error.
            </summary>
            <param name="format">The format.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.TracerExceptions">
            <summary>
            Class TracerExceptions.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.TracerExceptions.Trace``1(``0)">
            <summary>
            Traces the specified ex.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ex">The ex.</param>
            <returns>T.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.TranslateListWithElements">
            <summary>
            Class TranslateListWithElements.
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.TranslateListWithElements.TranslateICollectionCache">
            <summary>
            The translate i collection cache
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.TranslateListWithElements.TranslateToGenericICollectionCache(System.Object,System.Type,System.Type)">
            <summary>
            Translates to generic i collection cache.
            </summary>
            <param name="from">From.</param>
            <param name="toInstanceOfType">Type of to instance of.</param>
            <param name="elementType">Type of the element.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.TranslateListWithElements.TranslateConvertibleICollectionCache">
            <summary>
            The translate convertible i collection cache
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.TranslateListWithElements.TranslateToConvertibleGenericICollectionCache(System.Object,System.Type,System.Type)">
            <summary>
            Translates to convertible generic i collection cache.
            </summary>
            <param name="from">From.</param>
            <param name="toInstanceOfType">Type of to instance of.</param>
            <param name="fromElementType">Type of from element.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.TranslateListWithElements.TryTranslateCollections(System.Type,System.Type,System.Object)">
            <summary>
            Tries the translate collections.
            </summary>
            <param name="fromPropertyType">Type of from property.</param>
            <param name="toPropertyType">Type of to property.</param>
            <param name="fromValue">From value.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.ConvertibleTypeKey">
            <summary>
            Class ConvertibleTypeKey.
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.ConvertibleTypeKey.ToInstanceType">
            <summary>
            Converts to instancetype.
            </summary>
            <value>The type of to instance.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.ConvertibleTypeKey.FromElementType">
            <summary>
            Gets or sets the type of from element.
            </summary>
            <value>The type of from element.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.ConvertibleTypeKey.#ctor(System.Type,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.OrmLite.Base.Text.ConvertibleTypeKey" /> class.
            </summary>
            <param name="toInstanceType">Type of to instance.</param>
            <param name="fromElementType">Type of from element.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.ConvertibleTypeKey.Equals(ServiceStack.OrmLite.Base.Text.ConvertibleTypeKey)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.ConvertibleTypeKey.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.ConvertibleTypeKey.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.TranslateListWithElements`1">
            <summary>
            Class TranslateListWithElements.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.TranslateListWithElements`1.CreateInstance(System.Type)">
            <summary>
            Creates the instance.
            </summary>
            <param name="toInstanceOfType">Type of to instance of.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.TranslateListWithElements`1.LateBoundTranslateToGenericICollection(System.Object,System.Type)">
            <summary>
            Lates the bound translate to generic i collection.
            </summary>
            <param name="fromList">From list.</param>
            <param name="toInstanceOfType">Type of to instance of.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.TranslateListWithElements`1.TranslateToGenericICollection(System.Collections.IEnumerable,System.Type)">
            <summary>
            Translates to generic i collection.
            </summary>
            <param name="fromList">From list.</param>
            <param name="toInstanceOfType">Type of to instance of.</param>
            <returns>ICollection&lt;T&gt;.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.TranslateListWithConvertibleElements`2">
            <summary>
            Class TranslateListWithConvertibleElements.
            </summary>
            <typeparam name="TFrom">The type of the t from.</typeparam>
            <typeparam name="TTo">The type of the t to.</typeparam>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.TranslateListWithConvertibleElements`2.ConvertFn">
            <summary>
            The convert function
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.TranslateListWithConvertibleElements`2.#cctor">
            <summary>
            Initializes static members of the <see cref="T:ServiceStack.OrmLite.Base.Text.TranslateListWithConvertibleElements`2" /> class.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.TranslateListWithConvertibleElements`2.LateBoundTranslateToGenericICollection(System.Object,System.Type)">
            <summary>
            Lates the bound translate to generic i collection.
            </summary>
            <param name="fromList">From list.</param>
            <param name="toInstanceOfType">Type of to instance of.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.TranslateListWithConvertibleElements`2.TranslateToGenericICollection(System.Collections.Generic.ICollection{`0},System.Type)">
            <summary>
            Translates to generic i collection.
            </summary>
            <param name="fromList">From list.</param>
            <param name="toInstanceOfType">Type of to instance of.</param>
            <returns>ICollection&lt;TTo&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.TranslateListWithConvertibleElements`2.GetConvertFn">
            <summary>
            Gets the convert function.
            </summary>
            <returns>Func&lt;TFrom, TTo&gt;.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.TypeConfig">
            <summary>
            Class TypeConfig.
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.TypeConfig.Type">
            <summary>
            The type
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.TypeConfig.EnableAnonymousFieldSetters">
            <summary>
            The enable anonymous field setters
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.TypeConfig.Properties">
            <summary>
            The properties
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.TypeConfig.Fields">
            <summary>
            The fields
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.TypeConfig.OnDeserializing">
            <summary>
            The on deserializing
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.TypeConfig.IsUserType">
            <summary>
            Gets or sets a value indicating whether this instance is user type.
            </summary>
            <value><c>true</c> if this instance is user type; otherwise, <c>false</c>.</value>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.TypeConfig.TextCaseResolver">
            <summary>
            The text case resolver
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.TypeConfig.TextCase">
            <summary>
            Gets the text case.
            </summary>
            <value>The text case.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.TypeConfig.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.OrmLite.Base.Text.TypeConfig" /> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.TypeConfig`1">
            <summary>
            Class TypeConfig.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.TypeConfig`1.config">
            <summary>
            The configuration
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.TypeConfig`1.Config">
            <summary>
            Gets the configuration.
            </summary>
            <value>The configuration.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.TypeConfig`1.Properties">
            <summary>
            Gets or sets the properties.
            </summary>
            <value>The properties.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.TypeConfig`1.Fields">
            <summary>
            Gets or sets the fields.
            </summary>
            <value>The fields.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.TypeConfig`1.IsUserType">
            <summary>
            Gets or sets a value indicating whether this instance is user type.
            </summary>
            <value><c>true</c> if this instance is user type; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.TypeConfig`1.#cctor">
            <summary>
            Initializes static members of the <see cref="T:ServiceStack.OrmLite.Base.Text.TypeConfig`1" /> class.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.TypeConfig`1.Init">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.TypeConfig`1.OnDeserializing">
            <summary>
            Gets or sets the on deserializing.
            </summary>
            <value>The on deserializing.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.TypeConfig`1.Create">
            <summary>
            Creates this instance.
            </summary>
            <returns>TypeConfig.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.TypeConfig`1.Reset">
            <summary>
            Resets this instance.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.TypeConfig`1.GetState">
            <summary>
            Gets the state.
            </summary>
            <returns>TypeConfig.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.TypeConstants">
            <summary>
            Class TypeConstants.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.TypeConstants.#cctor">
            <summary>
            Cctors this instance.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.TypeConstants.InTask``1(``0)">
            <summary>
            Ins the task.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="result">The result.</param>
            <returns>System.Threading.Tasks.Task&lt;T&gt;.</returns>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.TypeConstants.ZeroTask">
            <summary>
            The zero task
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.TypeConstants.TrueTask">
            <summary>
            The true task
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.TypeConstants.FalseTask">
            <summary>
            The false task
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.TypeConstants.EmptyTask">
            <summary>
            The empty task
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.TypeConstants.NonWidthWhiteSpace">
            <summary>
            The non width white space
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.TypeConstants.NonWidthWhiteSpaceChars">
            <summary>
            The non width white space chars
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.TypeConstants.NullStringSpan">
            <summary>
            Gets the null string span.
            </summary>
            <value>The null string span.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.TypeConstants.EmptyStringSpan">
            <summary>
            Gets the empty string span.
            </summary>
            <value>The empty string span.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.TypeConstants.NullStringMemory">
            <summary>
            Gets the null string memory.
            </summary>
            <value>The null string memory.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.TypeConstants.EmptyStringMemory">
            <summary>
            Gets the empty string memory.
            </summary>
            <value>The empty string memory.</value>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.TypeConstants.EmptyStringArray">
            <summary>
            The empty string array
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.TypeConstants.EmptyByteArray">
            <summary>
            The empty byte array
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.TypeConstants.EmptyObjectArray">
            <summary>
            The empty object array
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.TypeConstants.EmptyTypeArray">
            <summary>
            The empty type array
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.TypeConstants.EmptyFieldInfoArray">
            <summary>
            The empty field information array
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.TypeConstants.EmptyPropertyInfoArray">
            <summary>
            The empty property information array
            </summary>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.TypeConstants`1">
            <summary>
            Class TypeConstants.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.TypeConstants`1.EmptyArray">
            <summary>
            The empty array
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.TypeConstants`1.EmptyList">
            <summary>
            The empty list
            </summary>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.FieldAccessor">
            <summary>
            Class FieldAccessor.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.FieldAccessor.#ctor(System.Reflection.FieldInfo,ServiceStack.OrmLite.Base.Text.GetMemberDelegate,ServiceStack.OrmLite.Base.Text.SetMemberDelegate,ServiceStack.OrmLite.Base.Text.SetMemberRefDelegate)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.OrmLite.Base.Text.FieldAccessor" /> class.
            </summary>
            <param name="fieldInfo">The field information.</param>
            <param name="publicGetter">The public getter.</param>
            <param name="publicSetter">The public setter.</param>
            <param name="publicSetterRef">The public setter reference.</param>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.FieldAccessor.FieldInfo">
            <summary>
            Gets the field information.
            </summary>
            <value>The field information.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.FieldAccessor.PublicGetter">
            <summary>
            Gets the public getter.
            </summary>
            <value>The public getter.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.FieldAccessor.PublicSetter">
            <summary>
            Gets the public setter.
            </summary>
            <value>The public setter.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.FieldAccessor.PublicSetterRef">
            <summary>
            Gets the public setter reference.
            </summary>
            <value>The public setter reference.</value>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.TypeFields`1">
            <summary>
            Class TypeFields.
            Implements the <see cref="T:ServiceStack.OrmLite.Base.Text.TypeFields" />
            </summary>
            <typeparam name="T"></typeparam>
            <seealso cref="T:ServiceStack.OrmLite.Base.Text.TypeFields" />
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.TypeFields`1.Instance">
            <summary>
            The instance
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.TypeFields`1.#cctor">
            <summary>
            Initializes static members of the <see cref="T:ServiceStack.OrmLite.Base.Text.TypeFields`1" /> class.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.TypeFields`1.GetAccessor(System.String)">
            <summary>
            Gets the accessor.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>FieldAccessor.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.TypeFields">
            <summary>
            Class TypeFields.
            Implements the <see cref="T:ServiceStack.OrmLite.Base.Text.TypeFields" />
            </summary>
            <seealso cref="T:ServiceStack.OrmLite.Base.Text.TypeFields" />
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.TypeFields.CacheMap">
            <summary>
            The cache map
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.TypeFields.FactoryType">
            <summary>
            The factory type
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.TypeFields.Get(System.Type)">
            <summary>
            Gets the specified type.
            </summary>
            <param name="type">The type.</param>
            <returns>TypeFields.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.TypeFields.GetAccessor(System.String)">
            <summary>
            Gets the accessor.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>FieldAccessor.</returns>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.TypeFields.Type">
            <summary>
            Gets or sets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.TypeFields.FieldsMap">
            <summary>
            The fields map
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.TypeFields.PublicFieldInfos">
            <summary>
            Gets or sets the public field infos.
            </summary>
            <value>The public field infos.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.TypeFields.GetPublicSetter(System.Reflection.FieldInfo)">
            <summary>
            Gets the public setter.
            </summary>
            <param name="fi">The fi.</param>
            <returns>SetMemberDelegate.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.TypeFields.GetPublicSetter(System.String)">
            <summary>
            Gets the public setter.
            </summary>
            <param name="name">The name.</param>
            <returns>SetMemberDelegate.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.FieldInvoker">
            <summary>
            Class FieldInvoker.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.FieldInvoker.CreateGetter(System.Reflection.FieldInfo)">
            <summary>
            Creates the getter.
            </summary>
            <param name="fieldInfo">The field information.</param>
            <returns>GetMemberDelegate.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.FieldInvoker.CreateGetter``1(System.Reflection.FieldInfo)">
            <summary>
            Creates the getter.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fieldInfo">The field information.</param>
            <returns>GetMemberDelegate&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.FieldInvoker.CreateSetter(System.Reflection.FieldInfo)">
            <summary>
            Creates the setter.
            </summary>
            <param name="fieldInfo">The field information.</param>
            <returns>SetMemberDelegate.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.FieldInvoker.CreateSetter``1(System.Reflection.FieldInfo)">
            <summary>
            Creates the setter.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fieldInfo">The field information.</param>
            <returns>SetMemberDelegate&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.FieldInvoker.SetExpressionRef``1(System.Reflection.FieldInfo)">
            <summary>
            Sets the expression reference.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fieldInfo">The field information.</param>
            <returns>SetMemberRefDelegate&lt;T&gt;.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.PropertyAccessor">
            <summary>
            Class PropertyAccessor.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.PropertyAccessor.#ctor(System.Reflection.PropertyInfo,ServiceStack.OrmLite.Base.Text.GetMemberDelegate,ServiceStack.OrmLite.Base.Text.SetMemberDelegate)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.OrmLite.Base.Text.PropertyAccessor" /> class.
            </summary>
            <param name="propertyInfo">The property information.</param>
            <param name="publicGetter">The public getter.</param>
            <param name="publicSetter">The public setter.</param>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.PropertyAccessor.PropertyInfo">
            <summary>
            Gets the property information.
            </summary>
            <value>The property information.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.PropertyAccessor.PublicGetter">
            <summary>
            Gets the public getter.
            </summary>
            <value>The public getter.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.PropertyAccessor.PublicSetter">
            <summary>
            Gets the public setter.
            </summary>
            <value>The public setter.</value>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.TypeProperties`1">
            <summary>
            Class TypeProperties.
            Implements the <see cref="T:ServiceStack.OrmLite.Base.Text.TypeProperties" />
            </summary>
            <typeparam name="T"></typeparam>
            <seealso cref="T:ServiceStack.OrmLite.Base.Text.TypeProperties" />
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.TypeProperties`1.Instance">
            <summary>
            The instance
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.TypeProperties`1.#cctor">
            <summary>
            Initializes static members of the <see cref="T:ServiceStack.OrmLite.Base.Text.TypeProperties`1" /> class.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.TypeProperties`1.GetAccessor(System.String)">
            <summary>
            Gets the accessor.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>PropertyAccessor.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.TypeProperties">
            <summary>
            Class TypeProperties.
            Implements the <see cref="T:ServiceStack.OrmLite.Base.Text.TypeProperties" />
            </summary>
            <seealso cref="T:ServiceStack.OrmLite.Base.Text.TypeProperties" />
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.TypeProperties.cacheMap">
            <summary>
            The cache map
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.TypeProperties.FactoryType">
            <summary>
            The factory type
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.TypeProperties.Get(System.Type)">
            <summary>
            Gets the specified type.
            </summary>
            <param name="type">The type.</param>
            <returns>TypeProperties.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.TypeProperties.GetAccessor(System.String)">
            <summary>
            Gets the accessor.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>PropertyAccessor.</returns>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.TypeProperties.Type">
            <summary>
            Gets or sets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.TypeProperties.PropertyMap">
            <summary>
            The property map
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.TypeProperties.PublicPropertyInfos">
            <summary>
            Gets or sets the public property infos.
            </summary>
            <value>The public property infos.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.TypeProperties.GetPublicProperty(System.String)">
            <summary>
            Gets the public property.
            </summary>
            <param name="name">The name.</param>
            <returns>PropertyInfo.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.TypeProperties.GetPublicGetter(System.String)">
            <summary>
            Gets the public getter.
            </summary>
            <param name="name">The name.</param>
            <returns>GetMemberDelegate.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.TypeProperties.GetPublicSetter(System.Reflection.PropertyInfo)">
            <summary>
            Gets the public setter.
            </summary>
            <param name="pi">The pi.</param>
            <returns>SetMemberDelegate.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.TypeProperties.GetPublicSetter(System.String)">
            <summary>
            Gets the public setter.
            </summary>
            <param name="name">The name.</param>
            <returns>SetMemberDelegate.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.PropertyInvoker">
            <summary>
            Class PropertyInvoker.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.PropertyInvoker.CreateGetter(System.Reflection.PropertyInfo)">
            <summary>
            Creates the getter.
            </summary>
            <param name="propertyInfo">The property information.</param>
            <returns>GetMemberDelegate.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.PropertyInvoker.CreateGetter``1(System.Reflection.PropertyInfo)">
            <summary>
            Creates the getter.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="propertyInfo">The property information.</param>
            <returns>GetMemberDelegate&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.PropertyInvoker.CreateSetter(System.Reflection.PropertyInfo)">
            <summary>
            Creates the setter.
            </summary>
            <param name="propertyInfo">The property information.</param>
            <returns>SetMemberDelegate.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.PropertyInvoker.CreateSetter``1(System.Reflection.PropertyInfo)">
            <summary>
            Creates the setter.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="propertyInfo">The property information.</param>
            <returns>SetMemberDelegate&lt;T&gt;.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.TypeSerializer">
            <summary>
            Creates an instance of a Type from a string value
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.TypeSerializer.#cctor">
            <summary>
            Initializes static members of the <see cref="T:ServiceStack.OrmLite.Base.Text.TypeSerializer" /> class.
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.TypeSerializer.OnSerialize">
            <summary>
            Gets or sets the on serialize.
            </summary>
            <value>The on serialize.</value>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.TypeSerializer.DoubleQuoteString">
            <summary>
            The double quote string
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.TypeSerializer.CanCreateFromString(System.Type)">
            <summary>
            Determines whether the specified type is convertible from string.
            </summary>
            <param name="type">The type.</param>
            <returns><c>true</c> if the specified type is convertible from string; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.TypeSerializer.DeserializeFromString``1(System.String)">
            <summary>
            Parses the specified value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The value.</param>
            <returns>T.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.TypeSerializer.DeserializeFromString(System.String,System.Type)">
            <summary>
            Parses the specified type.
            </summary>
            <param name="value">The value.</param>
            <param name="type">The type.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.TypeSerializer.DeserializeFromSpan(System.Type,System.ReadOnlySpan{System.Char})">
            <summary>
            Deserializes from span.
            </summary>
            <param name="type">The type.</param>
            <param name="value">The value.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.TypeSerializer.SerializeToString``1(``0)">
            <summary>
            Serializes to string.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The value.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.TypeSerializer.SerializeToString(System.Object,System.Type)">
            <summary>
            Serializes to string.
            </summary>
            <param name="value">The value.</param>
            <param name="type">The type.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.TypeSerializer.SerializeToStream(System.Object,System.Type,System.IO.Stream)">
            <summary>
            Serializes to stream.
            </summary>
            <param name="value">The value.</param>
            <param name="type">The type.</param>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.TypeSerializer.Print(System.String,System.Object[])">
            <summary>
            Print string.Format to Console.WriteLine
            </summary>
            <param name="text">The text.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.TypeSerializer.Print(System.Int32)">
            <summary>
            Prints the specified int value.
            </summary>
            <param name="intValue">The int value.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.TypeSerializer.Print(System.Int64)">
            <summary>
            Prints the specified long value.
            </summary>
            <param name="longValue">The long value.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.TypeSerializer.HasCircularReferences(System.Object)">
            <summary>
            Determines whether [has circular references] [the specified value].
            </summary>
            <param name="value">The value.</param>
            <returns><c>true</c> if [has circular references] [the specified value]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.TypeSerializer.HasCircularReferences(System.Object,System.Collections.Generic.Stack{System.Object})">
            <summary>
            Determines whether [has circular references] [the specified value].
            </summary>
            <param name="value">The value.</param>
            <param name="parentValues">The parent values.</param>
            <returns><c>true</c> if [has circular references] [the specified value]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.TypeSerializer.times(System.Int32,System.Action)">
            <summary>
            Timeses the specified count.
            </summary>
            <param name="count">The count.</param>
            <param name="fn">The function.</param>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.TypeSerializer.Indent">
            <summary>
            The indent
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.TypeSerializer.IndentJson(System.String)">
            <summary>
            Indents the json.
            </summary>
            <param name="json">The json.</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.JsvStringSerializer">
            <summary>
            Class JsvStringSerializer.
            Implements the <see cref="T:ServiceStack.OrmLite.Base.Text.IStringSerializer" />
            </summary>
            <seealso cref="T:ServiceStack.OrmLite.Base.Text.IStringSerializer" />
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.JsvStringSerializer.DeserializeFromString``1(System.String)">
            <summary>
            Deserializes from string.
            </summary>
            <typeparam name="To">The type of to.</typeparam>
            <param name="serializedText">The serialized text.</param>
            <returns>To.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.JsvStringSerializer.DeserializeFromString(System.String,System.Type)">
            <summary>
            Deserializes from string.
            </summary>
            <param name="serializedText">The serialized text.</param>
            <param name="type">The type.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.JsvStringSerializer.SerializeToString``1(``0)">
            <summary>
            Serializes to string.
            </summary>
            <typeparam name="TFrom">The type of the t from.</typeparam>
            <param name="from">From.</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.TypeSerializer`1">
            <summary>
            Class TypeSerializer.
            Implements the <see cref="T:ServiceStack.OrmLite.Base.Text.ITypeSerializer`1" />
            </summary>
            <typeparam name="T"></typeparam>
            <seealso cref="T:ServiceStack.OrmLite.Base.Text.ITypeSerializer`1" />
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.TypeSerializer`1.DeserializeFromString(System.String)">
            <summary>
            Parses the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>T.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.TypeSerializer`1.SerializeToString(`0)">
            <summary>
            Serializes to string.
            </summary>
            <param name="value">The value.</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.X">
            <summary>
            Avoid polluting extension methods on every type with a 'X.*' short-hand
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.X.Map``2(``0,System.Func{``0,``1})">
            <summary>
            Maps the specified from.
            </summary>
            <typeparam name="From">The type of from.</typeparam>
            <typeparam name="To">The type of to.</typeparam>
            <param name="from">From.</param>
            <param name="fn">The function.</param>
            <returns>System.Nullable&lt;To&gt;.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Base.Text.XmlSerializer">
            <summary>
            Class XmlSerializer.
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.XmlSerializer.XmlWriterSettings">
            <summary>
            The XML writer settings
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Base.Text.XmlSerializer.XmlReaderSettings">
            <summary>
            The XML reader settings
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Base.Text.XmlSerializer.Instance">
            <summary>
            The instance
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.XmlSerializer.#ctor(System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.OrmLite.Base.Text.XmlSerializer" /> class.
            </summary>
            <param name="omitXmlDeclaration">if set to <c>true</c> [omit XML declaration].</param>
            <param name="maxCharsInDocument">The maximum chars in document.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Base.Text.XmlSerializer.SerializeToString``1(``0)">
            <summary>
            Serializes to string.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="from">From.</param>
            <returns>System.String.</returns>
            <exception cref="T:System.Runtime.Serialization.SerializationException">Error serializing object of type {from.GetType().FullName}</exception>
        </member>
        <member name="T:ServiceStack.OrmLite.BulkInsertMode">
            <summary>
            Enum BulkInsertMode
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.BulkInsertMode.Binary">
            <summary>
            The binary
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.BulkInsertMode.Csv">
            <summary>
            The CSV
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.BulkInsertMode.Sql">
            <summary>
            The SQL
            </summary>
        </member>
        <member name="T:ServiceStack.OrmLite.BulkInsertConfig">
            <summary>
            Class BulkInsertConfig.
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.BulkInsertConfig.BatchSize">
            <summary>
            Gets or sets the size of the batch.
            </summary>
            <value>The size of the batch.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.BulkInsertConfig.Mode">
            <summary>
            Gets or sets the mode.
            </summary>
            <value>The mode.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.BulkInsertConfig.InsertFields">
            <summary>
            Gets or sets the insert fields.
            </summary>
            <value>The insert fields.</value>
        </member>
        <member name="T:ServiceStack.OrmLite.ColumnSchema">
            <summary>
            Class ColumnSchema.
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.ColumnSchema.ColumnName">
            <summary>
            Gets or sets the name of the column.
            </summary>
            <value>The name of the column.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.ColumnSchema.ColumnOrdinal">
            <summary>
            Gets or sets the column ordinal.
            </summary>
            <value>The column ordinal.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.ColumnSchema.ColumnSize">
            <summary>
            Gets or sets the size of the column.
            </summary>
            <value>The size of the column.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.ColumnSchema.NumericPrecision">
            <summary>
            Gets or sets the numeric precision.
            </summary>
            <value>The numeric precision.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.ColumnSchema.NumericScale">
            <summary>
            Gets or sets the numeric scale.
            </summary>
            <value>The numeric scale.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.ColumnSchema.IsUnique">
            <summary>
            Gets or sets a value indicating whether this instance is unique.
            </summary>
            <value><c>true</c> if this instance is unique; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.ColumnSchema.IsKey">
            <summary>
            Gets or sets a value indicating whether this instance is key.
            </summary>
            <value><c>true</c> if this instance is key; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.ColumnSchema.BaseServerName">
            <summary>
            Gets or sets the name of the base server.
            </summary>
            <value>The name of the base server.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.ColumnSchema.BaseCatalogName">
            <summary>
            Gets or sets the name of the base catalog.
            </summary>
            <value>The name of the base catalog.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.ColumnSchema.BaseColumnName">
            <summary>
            Gets or sets the name of the base column.
            </summary>
            <value>The name of the base column.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.ColumnSchema.BaseSchemaName">
            <summary>
            Gets or sets the name of the base schema.
            </summary>
            <value>The name of the base schema.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.ColumnSchema.BaseTableName">
            <summary>
            Gets or sets the name of the base table.
            </summary>
            <value>The name of the base table.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.ColumnSchema.DataType">
            <summary>
            Gets or sets the type of the data.
            </summary>
            <value>The type of the data.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.ColumnSchema.AllowDBNull">
            <summary>
            Gets or sets a value indicating whether [allow database null].
            </summary>
            <value><c>true</c> if [allow database null]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.ColumnSchema.ProviderType">
            <summary>
            Gets or sets the type of the provider.
            </summary>
            <value>The type of the provider.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.ColumnSchema.IsAliased">
            <summary>
            Gets or sets a value indicating whether this instance is aliased.
            </summary>
            <value><c>true</c> if this instance is aliased; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.ColumnSchema.IsExpression">
            <summary>
            Gets or sets a value indicating whether this instance is expression.
            </summary>
            <value><c>true</c> if this instance is expression; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.ColumnSchema.IsAutoIncrement">
            <summary>
            Gets or sets a value indicating whether this instance is automatic increment.
            </summary>
            <value><c>true</c> if this instance is automatic increment; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.ColumnSchema.IsRowVersion">
            <summary>
            Gets or sets a value indicating whether this instance is row version.
            </summary>
            <value><c>true</c> if this instance is row version; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.ColumnSchema.IsHidden">
            <summary>
            Gets or sets a value indicating whether this instance is hidden.
            </summary>
            <value><c>true</c> if this instance is hidden; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.ColumnSchema.IsLong">
            <summary>
            Gets or sets a value indicating whether this instance is long.
            </summary>
            <value><c>true</c> if this instance is long; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.ColumnSchema.IsReadOnly">
            <summary>
            Gets or sets a value indicating whether this instance is read only.
            </summary>
            <value><c>true</c> if this instance is read only; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.ColumnSchema.ProviderSpecificDataType">
            <summary>
            Gets or sets the type of the provider specific data.
            </summary>
            <value>The type of the provider specific data.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.ColumnSchema.DefaultValue">
            <summary>
            Gets or sets the default value.
            </summary>
            <value>The default value.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.ColumnSchema.DataTypeName">
            <summary>
            Gets or sets the name of the data type.
            </summary>
            <value>The name of the data type.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.ColumnSchema.CollationType">
            <summary>
            Gets or sets the type of the collation.
            </summary>
            <value>The type of the collation.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.ColumnSchema.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="P:ServiceStack.OrmLite.ColumnSchema.ColumnDefinition">
            <summary>
            Gets the column definition.
            </summary>
            <value>The column definition.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.ColumnSchema.AppendDefinition(System.Text.StringBuilder)">
            <summary>
            Appends the definition.
            </summary>
            <param name="sql">The SQL.</param>
            <returns>StringBuilder.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Converters.BoolConverter">
            <summary>
            Class BoolConverter.
            Implements the <see cref="T:ServiceStack.OrmLite.NativeValueOrmLiteConverter" />
            </summary>
            <seealso cref="T:ServiceStack.OrmLite.NativeValueOrmLiteConverter" />
        </member>
        <member name="P:ServiceStack.OrmLite.Converters.BoolConverter.ColumnDefinition">
            <summary>
            SQL Column Definition used in CREATE Table.
            </summary>
            <value>The column definition.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Converters.BoolConverter.DbType">
            <summary>
            Used in DB Params. Defaults to DbType.String
            </summary>
            <value>The type of the database.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.Converters.BoolConverter.FromDbValue(System.Type,System.Object)">
            <summary>
            Value from DB to Populate on POCO Data Model with
            </summary>
            <param name="fieldType">Type of the field.</param>
            <param name="value">The value.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Converters.BoolAsIntConverter">
            <summary>
            Class BoolAsIntConverter.
            Implements the <see cref="T:ServiceStack.OrmLite.Converters.BoolConverter" />
            </summary>
            <seealso cref="T:ServiceStack.OrmLite.Converters.BoolConverter" />
        </member>
        <member name="M:ServiceStack.OrmLite.Converters.BoolAsIntConverter.ToDbValue(System.Type,System.Object)">
            <summary>
            Parameterized value in parameterized queries
            </summary>
            <param name="fieldType">Type of the field.</param>
            <param name="value">The value.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Converters.BoolAsIntConverter.ToQuotedString(System.Type,System.Object)">
            <summary>
            Converts to quotedstring.
            </summary>
            <param name="fieldType">Type of the field.</param>
            <param name="value">The value.</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Converters.ByteArrayConverter">
            <summary>
            Class ByteArrayConverter.
            Implements the <see cref="T:ServiceStack.OrmLite.OrmLiteConverter" />
            </summary>
            <seealso cref="T:ServiceStack.OrmLite.OrmLiteConverter" />
        </member>
        <member name="P:ServiceStack.OrmLite.Converters.ByteArrayConverter.ColumnDefinition">
            <summary>
            SQL Column Definition used in CREATE Table.
            </summary>
            <value>The column definition.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Converters.ByteArrayConverter.DbType">
            <summary>
            Gets the type of the database.
            </summary>
            <value>The type of the database.</value>
        </member>
        <member name="T:ServiceStack.OrmLite.Converters.DateOnlyConverter">
            <summary>
            Class DateOnlyConverter.
            Implements the <see cref="T:ServiceStack.OrmLite.Converters.DateTimeConverter" />
            </summary>
            <seealso cref="T:ServiceStack.OrmLite.Converters.DateTimeConverter" />
        </member>
        <member name="M:ServiceStack.OrmLite.Converters.DateOnlyConverter.ToQuotedString(System.Type,System.Object)">
            <summary>
            Quoted Value in SQL Statement
            </summary>
            <param name="fieldType">Type of the field.</param>
            <param name="value">The value.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Converters.DateOnlyConverter.ToDbValue(System.Type,System.Object)">
            <summary>
            Parameterized value in parameterized queries
            </summary>
            <param name="fieldType">Type of the field.</param>
            <param name="value">The value.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Converters.DateOnlyConverter.FromDbValue(System.Object)">
            <summary>
            From the database value.
            </summary>
            <param name="value">The value.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Converters.DateTimeConverter">
            <summary>
            Class DateTimeConverter.
            Implements the <see cref="T:ServiceStack.OrmLite.OrmLiteConverter" />
            </summary>
            <seealso cref="T:ServiceStack.OrmLite.OrmLiteConverter" />
        </member>
        <member name="P:ServiceStack.OrmLite.Converters.DateTimeConverter.ColumnDefinition">
            <summary>
            SQL Column Definition used in CREATE Table.
            </summary>
            <value>The column definition.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Converters.DateTimeConverter.DbType">
            <summary>
            Used in DB Params. Defaults to DbType.String
            </summary>
            <value>The type of the database.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Converters.DateTimeConverter.DateStyle">
            <summary>
            Gets or sets the date style.
            </summary>
            <value>The date style.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.Converters.DateTimeConverter.ToQuotedString(System.Type,System.Object)">
            <summary>
            Quoted Value in SQL Statement
            </summary>
            <param name="fieldType">Type of the field.</param>
            <param name="value">The value.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Converters.DateTimeConverter.DateTimeFmt(System.DateTime,System.String)">
            <summary>
            Dates the time FMT.
            </summary>
            <param name="dateTime">The date time.</param>
            <param name="dateTimeFormat">The date time format.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Converters.DateTimeConverter.ToDbValue(System.Type,System.Object)">
            <summary>
            Parameterized value in parameterized queries
            </summary>
            <param name="fieldType">Type of the field.</param>
            <param name="value">The value.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Converters.DateTimeConverter.FromDbValue(System.Type,System.Object)">
            <summary>
            Value from DB to Populate on POCO Data Model with
            </summary>
            <param name="fieldType">Type of the field.</param>
            <param name="value">The value.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Converters.DateTimeConverter.FromDbValue(System.Object)">
            <summary>
            Froms the database value.
            </summary>
            <param name="value">The value.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Converters.DateTimeOffsetConverter">
            <summary>
            Class DateTimeOffsetConverter.
            Implements the <see cref="T:ServiceStack.OrmLite.OrmLiteConverter" />
            </summary>
            <seealso cref="T:ServiceStack.OrmLite.OrmLiteConverter" />
        </member>
        <member name="P:ServiceStack.OrmLite.Converters.DateTimeOffsetConverter.ColumnDefinition">
            <summary>
            SQL Column Definition used in CREATE Table.
            </summary>
            <value>The column definition.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Converters.DateTimeOffsetConverter.DbType">
            <summary>
            Used in DB Params. Defaults to DbType.String
            </summary>
            <value>The type of the database.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.Converters.DateTimeOffsetConverter.FromDbValue(System.Type,System.Object)">
            <summary>
            Froms the database value.
            </summary>
            <param name="fieldType">Type of the field.</param>
            <param name="value">The value.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Converters.FloatConverter">
            <summary>
            Class FloatConverter.
            </summary>
            <seealso cref="T:ServiceStack.OrmLite.NativeValueOrmLiteConverter" />
        </member>
        <member name="P:ServiceStack.OrmLite.Converters.FloatConverter.ColumnDefinition">
            <summary>
            SQL Column Definition used in CREATE Table.
            </summary>
            <value>The column definition.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Converters.FloatConverter.DbType">
            <summary>
            Used in DB Params. Defaults to DbType.String
            </summary>
            <value>The type of the database.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.Converters.FloatConverter.ToDbValue(System.Type,System.Object)">
            <summary>
            Converts to dbvalue.
            </summary>
            <param name="fieldType">Type of the field.</param>
            <param name="value">The value.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Converters.FloatConverter.FromDbValue(System.Type,System.Object)">
            <summary>
            Value from DB to Populate on POCO Data Model with
            </summary>
            <param name="fieldType">Type of the field.</param>
            <param name="value">The value.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Converters.FloatConverter.ToQuotedString(System.Type,System.Object)">
            <summary>
            Converts to Quoted string.
            </summary>
            <param name="fieldType">Type of the field.</param>
            <param name="value">The value.</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Converters.DoubleConverter">
            <summary>
            Class DoubleConverter.
            </summary>
            <seealso cref="T:ServiceStack.OrmLite.Converters.FloatConverter" />
        </member>
        <member name="P:ServiceStack.OrmLite.Converters.DoubleConverter.DbType">
            <summary>
            Used in DB Params. Defaults to DbType.String
            </summary>
            <value>The type of the database.</value>
        </member>
        <member name="T:ServiceStack.OrmLite.Converters.DecimalConverter">
            <summary>
            Class DecimalConverter.
            </summary>
            <seealso cref="T:ServiceStack.OrmLite.Converters.FloatConverter" />
            <seealso cref="T:ServiceStack.OrmLite.IHasColumnDefinitionPrecision" />
        </member>
        <member name="P:ServiceStack.OrmLite.Converters.DecimalConverter.Precision">
            <summary>
            Gets or sets the precision.
            </summary>
            <value>The precision.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Converters.DecimalConverter.Scale">
            <summary>
            Gets or sets the scale.
            </summary>
            <value>The scale.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.Converters.DecimalConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.OrmLite.Converters.DecimalConverter" /> class.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Converters.DecimalConverter.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.OrmLite.Converters.DecimalConverter" /> class.
            </summary>
            <param name="precision">The precision.</param>
            <param name="scale">The scale.</param>
        </member>
        <member name="P:ServiceStack.OrmLite.Converters.DecimalConverter.ColumnDefinition">
            <summary>
            SQL Column Definition used in CREATE Table.
            </summary>
            <value>The column definition.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Converters.DecimalConverter.DbType">
            <summary>
            Used in DB Params. Defaults to DbType.String
            </summary>
            <value>The type of the database.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.Converters.DecimalConverter.GetColumnDefinition(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Gets the column definition.
            </summary>
            <param name="precision">The precision.</param>
            <param name="scale">The scale.</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Converters.GuidConverter">
            <summary>
            Class GuidConverter.
            Implements the <see cref="T:ServiceStack.OrmLite.OrmLiteConverter" />
            </summary>
            <seealso cref="T:ServiceStack.OrmLite.OrmLiteConverter" />
        </member>
        <member name="P:ServiceStack.OrmLite.Converters.GuidConverter.ColumnDefinition">
            <summary>
            SQL Column Definition used in CREATE Table.
            </summary>
            <value>The column definition.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Converters.GuidConverter.DbType">
            <summary>
            Gets the type of the database.
            </summary>
            <value>The type of the database.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.Converters.GuidConverter.FromDbValue(System.Type,System.Object)">
            <summary>
            Value from DB to Populate on POCO Data Model with
            </summary>
            <param name="fieldType">Type of the field.</param>
            <param name="value">The value.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Converters.IntegerConverter">
            <summary>
            Class IntegerConverter.
            Implements the <see cref="T:ServiceStack.OrmLite.NativeValueOrmLiteConverter" />
            </summary>
            <seealso cref="T:ServiceStack.OrmLite.NativeValueOrmLiteConverter" />
        </member>
        <member name="P:ServiceStack.OrmLite.Converters.IntegerConverter.ColumnDefinition">
            <summary>
            SQL Column Definition used in CREATE Table.
            </summary>
            <value>The column definition.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Converters.IntegerConverter.DbType">
            <summary>
            Used in DB Params. Defaults to DbType.String
            </summary>
            <value>The type of the database.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.Converters.IntegerConverter.ToDbValue(System.Type,System.Object)">
            <summary>
            Parameterized value in parameterized queries
            </summary>
            <param name="fieldType">Type of the field.</param>
            <param name="value">The value.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Converters.IntegerConverter.FromDbValue(System.Type,System.Object)">
            <summary>
            Value from DB to Populate on POCO Data Model with
            </summary>
            <param name="fieldType">Type of the field.</param>
            <param name="value">The value.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Converters.ByteConverter">
            <summary>
            Class ByteConverter.
            Implements the <see cref="T:ServiceStack.OrmLite.Converters.IntegerConverter" />
            </summary>
            <seealso cref="T:ServiceStack.OrmLite.Converters.IntegerConverter" />
        </member>
        <member name="P:ServiceStack.OrmLite.Converters.ByteConverter.DbType">
            <summary>
            Gets the type of the database.
            </summary>
            <value>The type of the database.</value>
        </member>
        <member name="T:ServiceStack.OrmLite.Converters.SByteConverter">
            <summary>
            Class SByteConverter.
            Implements the <see cref="T:ServiceStack.OrmLite.Converters.IntegerConverter" />
            </summary>
            <seealso cref="T:ServiceStack.OrmLite.Converters.IntegerConverter" />
        </member>
        <member name="P:ServiceStack.OrmLite.Converters.SByteConverter.DbType">
            <summary>
            Gets the type of the database.
            </summary>
            <value>The type of the database.</value>
        </member>
        <member name="T:ServiceStack.OrmLite.Converters.Int16Converter">
            <summary>
            Class Int16Converter.
            Implements the <see cref="T:ServiceStack.OrmLite.Converters.IntegerConverter" />
            </summary>
            <seealso cref="T:ServiceStack.OrmLite.Converters.IntegerConverter" />
        </member>
        <member name="P:ServiceStack.OrmLite.Converters.Int16Converter.DbType">
            <summary>
            Gets the type of the database.
            </summary>
            <value>The type of the database.</value>
        </member>
        <member name="T:ServiceStack.OrmLite.Converters.UInt16Converter">
            <summary>
            Class UInt16Converter.
            Implements the <see cref="T:ServiceStack.OrmLite.Converters.IntegerConverter" />
            </summary>
            <seealso cref="T:ServiceStack.OrmLite.Converters.IntegerConverter" />
        </member>
        <member name="P:ServiceStack.OrmLite.Converters.UInt16Converter.DbType">
            <summary>
            Gets the type of the database.
            </summary>
            <value>The type of the database.</value>
        </member>
        <member name="T:ServiceStack.OrmLite.Converters.Int32Converter">
            <summary>
            Class Int32Converter.
            Implements the <see cref="T:ServiceStack.OrmLite.Converters.IntegerConverter" />
            </summary>
            <seealso cref="T:ServiceStack.OrmLite.Converters.IntegerConverter" />
        </member>
        <member name="T:ServiceStack.OrmLite.Converters.UInt32Converter">
            <summary>
            Class UInt32Converter.
            Implements the <see cref="T:ServiceStack.OrmLite.Converters.IntegerConverter" />
            </summary>
            <seealso cref="T:ServiceStack.OrmLite.Converters.IntegerConverter" />
        </member>
        <member name="P:ServiceStack.OrmLite.Converters.UInt32Converter.DbType">
            <summary>
            Gets the type of the database.
            </summary>
            <value>The type of the database.</value>
        </member>
        <member name="T:ServiceStack.OrmLite.Converters.Int64Converter">
            <summary>
            Class Int64Converter.
            Implements the <see cref="T:ServiceStack.OrmLite.Converters.IntegerConverter" />
            </summary>
            <seealso cref="T:ServiceStack.OrmLite.Converters.IntegerConverter" />
        </member>
        <member name="P:ServiceStack.OrmLite.Converters.Int64Converter.DbType">
            <summary>
            Gets the type of the database.
            </summary>
            <value>The type of the database.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Converters.Int64Converter.ColumnDefinition">
            <summary>
            Gets the column definition.
            </summary>
            <value>The column definition.</value>
        </member>
        <member name="T:ServiceStack.OrmLite.Converters.UInt64Converter">
            <summary>
            Class UInt64Converter.
            Implements the <see cref="T:ServiceStack.OrmLite.Converters.IntegerConverter" />
            </summary>
            <seealso cref="T:ServiceStack.OrmLite.Converters.IntegerConverter" />
        </member>
        <member name="P:ServiceStack.OrmLite.Converters.UInt64Converter.DbType">
            <summary>
            Gets the type of the database.
            </summary>
            <value>The type of the database.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Converters.UInt64Converter.ColumnDefinition">
            <summary>
            Gets the column definition.
            </summary>
            <value>The column definition.</value>
        </member>
        <member name="T:ServiceStack.OrmLite.Converters.EnumKind">
            <summary>
            Enum EnumKind
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Converters.EnumKind.String">
            <summary>
            The string
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Converters.EnumKind.Int">
            <summary>
            The int
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Converters.EnumKind.Char">
            <summary>
            The character
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Converters.EnumKind.EnumMember">
            <summary>
            The enum member
            </summary>
        </member>
        <member name="T:ServiceStack.OrmLite.Converters.EnumConverter">
            <summary>
            Class EnumConverter.
            Implements the <see cref="T:ServiceStack.OrmLite.Converters.StringConverter" />
            </summary>
            <seealso cref="T:ServiceStack.OrmLite.Converters.StringConverter" />
        </member>
        <member name="M:ServiceStack.OrmLite.Converters.EnumConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.OrmLite.Converters.EnumConverter" /> class.
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Converters.EnumConverter.enumTypeCache">
            <summary>
            The enum type cache
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Converters.EnumConverter.GetEnumKind(System.Type)">
            <summary>
            Gets the kind of the enum.
            </summary>
            <param name="enumType">Type of the enum.</param>
            <returns>EnumKind.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Converters.EnumConverter.InitDbParam(System.Data.IDbDataParameter,System.Type)">
            <summary>
            Initializes the database parameter.
            </summary>
            <param name="p">The p.</param>
            <param name="fieldType">Type of the field.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Converters.EnumConverter.ToQuotedString(System.Type,System.Object)">
            <summary>
            Quoted Value in SQL Statement
            </summary>
            <param name="fieldType">Type of the field.</param>
            <param name="value">The value.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Converters.EnumConverter.ToDbValue(System.Type,System.Object)">
            <summary>
            Parameterized value in parameterized queries
            </summary>
            <param name="fieldType">Type of the field.</param>
            <param name="value">The value.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Converters.EnumConverter.ToCharValue(System.Object)">
            <summary>
            Converts to charvalue.
            </summary>
            <param name="value">The value.</param>
            <returns>System.Char.</returns>
        </member>
        <member name="F:ServiceStack.OrmLite.Converters.EnumConverter.intEnums">
            <summary>
            The int enums
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Converters.EnumConverter.IsIntEnum(System.Type)">
            <summary>
            Determines whether [is int enum] [the specified field type].
            </summary>
            <param name="fieldType">Type of the field.</param>
            <returns><c>true</c> if [is int enum] [the specified field type]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Converters.EnumConverter.HasEnumMembers(System.Type)">
            <summary>
            Determines whether [has enum members] [the specified enum type].
            </summary>
            <param name="enumType">Type of the enum.</param>
            <returns><c>true</c> if [has enum members] [the specified enum type]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Converters.EnumConverter.FromDbValue(System.Type,System.Object)">
            <summary>
            Froms the database value.
            </summary>
            <param name="fieldType">Type of the field.</param>
            <param name="value">The value.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Converters.RowVersionConverter">
            <summary>
            Class RowVersionConverter.
            Implements the <see cref="T:ServiceStack.OrmLite.OrmLiteConverter" />
            </summary>
            <seealso cref="T:ServiceStack.OrmLite.OrmLiteConverter" />
        </member>
        <member name="P:ServiceStack.OrmLite.Converters.RowVersionConverter.ColumnDefinition">
            <summary>
            SQL Column Definition used in CREATE Table.
            </summary>
            <value>The column definition.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Converters.RowVersionConverter.DbType">
            <summary>
            Used in DB Params. Defaults to DbType.String
            </summary>
            <value>The type of the database.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.Converters.RowVersionConverter.FromDbValue(System.Type,System.Object)">
            <summary>
            Value from DB to Populate on POCO Data Model with
            </summary>
            <param name="fieldType">Type of the field.</param>
            <param name="value">The value.</param>
            <returns>System.Object.</returns>
            <exception cref="P:ServiceStack.OrmLite.Base.Text.DiagnosticEvent.Exception">Rowversion property must be declared as either byte[] or ulong</exception>
            <exception cref="T:System.Exception">Rowversion property must be declared as either byte[] or ulong</exception>
        </member>
        <member name="T:ServiceStack.OrmLite.Converters.ReferenceTypeConverter">
            <summary>
            Class ReferenceTypeConverter.
            Implements the <see cref="T:ServiceStack.OrmLite.Converters.StringConverter" />
            </summary>
            <seealso cref="T:ServiceStack.OrmLite.Converters.StringConverter" />
        </member>
        <member name="P:ServiceStack.OrmLite.Converters.ReferenceTypeConverter.ColumnDefinition">
            <summary>
            Gets the column definition.
            </summary>
            <value>The column definition.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Converters.ReferenceTypeConverter.MaxColumnDefinition">
            <summary>
            Gets the maximum column definition.
            </summary>
            <value>The maximum column definition.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.Converters.ReferenceTypeConverter.GetColumnDefinition(System.Nullable{System.Int32})">
            <summary>
            Gets the column definition.
            </summary>
            <param name="stringLength">Length of the string.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Converters.ReferenceTypeConverter.ToQuotedString(System.Type,System.Object)">
            <summary>
            Quoted Value in SQL Statement
            </summary>
            <param name="fieldType">Type of the field.</param>
            <param name="value">The value.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Converters.ReferenceTypeConverter.ToDbValue(System.Type,System.Object)">
            <summary>
            Parameterized value in parameterized queries
            </summary>
            <param name="fieldType">Type of the field.</param>
            <param name="value">The value.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Converters.ReferenceTypeConverter.FromDbValue(System.Type,System.Object)">
            <summary>
            Froms the database value.
            </summary>
            <param name="fieldType">Type of the field.</param>
            <param name="value">The value.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Converters.ValueTypeConverter">
            <summary>
            Class ValueTypeConverter.
            Implements the <see cref="T:ServiceStack.OrmLite.Converters.StringConverter" />
            </summary>
            <seealso cref="T:ServiceStack.OrmLite.Converters.StringConverter" />
        </member>
        <member name="P:ServiceStack.OrmLite.Converters.ValueTypeConverter.ColumnDefinition">
            <summary>
            Gets the column definition.
            </summary>
            <value>The column definition.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Converters.ValueTypeConverter.MaxColumnDefinition">
            <summary>
            Gets the maximum column definition.
            </summary>
            <value>The maximum column definition.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.Converters.ValueTypeConverter.GetColumnDefinition(System.Nullable{System.Int32})">
            <summary>
            Gets the column definition.
            </summary>
            <param name="stringLength">Length of the string.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Converters.ValueTypeConverter.ToQuotedString(System.Type,System.Object)">
            <summary>
            Quoted Value in SQL Statement
            </summary>
            <param name="fieldType">Type of the field.</param>
            <param name="value">The value.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Converters.ValueTypeConverter.ToDbValue(System.Type,System.Object)">
            <summary>
            Parameterized value in parameterized queries
            </summary>
            <param name="fieldType">Type of the field.</param>
            <param name="value">The value.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Converters.ValueTypeConverter.FromDbValue(System.Type,System.Object)">
            <summary>
            Froms the database value.
            </summary>
            <param name="fieldType">Type of the field.</param>
            <param name="value">The value.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Converters.StringConverter">
            <summary>
            Class StringConverter.
            Implements the <see cref="T:ServiceStack.OrmLite.OrmLiteConverter" />
            Implements the <see cref="T:ServiceStack.OrmLite.IHasColumnDefinitionLength" />
            </summary>
            <seealso cref="T:ServiceStack.OrmLite.OrmLiteConverter" />
            <seealso cref="T:ServiceStack.OrmLite.IHasColumnDefinitionLength" />
        </member>
        <member name="M:ServiceStack.OrmLite.Converters.StringConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.OrmLite.Converters.StringConverter" /> class.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Converters.StringConverter.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.OrmLite.Converters.StringConverter" /> class.
            </summary>
            <param name="stringLength">Length of the string.</param>
        </member>
        <member name="P:ServiceStack.OrmLite.Converters.StringConverter.UseUnicode">
            <summary>
            Gets or sets a value indicating whether [use unicode].
            </summary>
            <value><c>true</c> if [use unicode]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Converters.StringConverter.StringLength">
            <summary>
            Gets or sets the length of the string.
            </summary>
            <value>The length of the string.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Converters.StringConverter.MaxVarCharLength">
            <summary>
            Gets the maximum length of the variable character.
            </summary>
            <value>The maximum length of the variable character.</value>
        </member>
        <member name="F:ServiceStack.OrmLite.Converters.StringConverter.maxColumnDefinition">
            <summary>
            The maximum column definition
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Converters.StringConverter.MaxColumnDefinition">
            <summary>
            Gets or sets the maximum column definition.
            </summary>
            <value>The maximum column definition.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Converters.StringConverter.ColumnDefinition">
            <summary>
            SQL Column Definition used in CREATE Table.
            </summary>
            <value>The column definition.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.Converters.StringConverter.GetColumnDefinition(System.Nullable{System.Int32})">
            <summary>
            Gets the column definition.
            </summary>
            <param name="stringLength">Length of the string.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Converters.StringConverter.InitDbParam(System.Data.IDbDataParameter,System.Type)">
            <summary>
            Customize how DB Param is initialized. Useful for supporting RDBMS-specific Types.
            </summary>
            <param name="p">The p.</param>
            <param name="fieldType">Type of the field.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Converters.StringConverter.FromDbValue(System.Type,System.Object)">
            <summary>
            Value from DB to Populate on POCO Data Model with
            </summary>
            <param name="fieldType">Type of the field.</param>
            <param name="value">The value.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Converters.CharConverter">
            <summary>
            Class CharConverter.
            Implements the <see cref="T:ServiceStack.OrmLite.Converters.StringConverter" />
            </summary>
            <seealso cref="T:ServiceStack.OrmLite.Converters.StringConverter" />
        </member>
        <member name="P:ServiceStack.OrmLite.Converters.CharConverter.ColumnDefinition">
            <summary>
            Gets the column definition.
            </summary>
            <value>The column definition.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Converters.CharConverter.DbType">
            <summary>
            Used in DB Params. Defaults to DbType.String
            </summary>
            <value>The type of the database.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.Converters.CharConverter.GetColumnDefinition(System.Nullable{System.Int32})">
            <summary>
            Gets the column definition.
            </summary>
            <param name="stringLength">Length of the string.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Converters.CharConverter.FromDbValue(System.Type,System.Object)">
            <summary>
            Froms the database value.
            </summary>
            <param name="fieldType">Type of the field.</param>
            <param name="value">The value.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Converters.CharConverter.ToDbValue(System.Type,System.Object)">
            <summary>
            Parameterized value in parameterized queries
            </summary>
            <param name="fieldType">Type of the field.</param>
            <param name="value">The value.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Converters.CharArrayConverter">
            <summary>
            Class CharArrayConverter.
            Implements the <see cref="T:ServiceStack.OrmLite.Converters.StringConverter" />
            </summary>
            <seealso cref="T:ServiceStack.OrmLite.Converters.StringConverter" />
        </member>
        <member name="M:ServiceStack.OrmLite.Converters.CharArrayConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.OrmLite.Converters.CharArrayConverter" /> class.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Converters.CharArrayConverter.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.OrmLite.Converters.CharArrayConverter" /> class.
            </summary>
            <param name="stringLength">Length of the string.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Converters.CharArrayConverter.ToDbValue(System.Type,System.Object)">
            <summary>
            Parameterized value in parameterized queries
            </summary>
            <param name="fieldType">Type of the field.</param>
            <param name="value">The value.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Converters.CharArrayConverter.FromDbValue(System.Type,System.Object)">
            <summary>
            Froms the database value.
            </summary>
            <param name="fieldType">Type of the field.</param>
            <param name="value">The value.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Converters.TimeOnlyConverter">
            <summary>
            Class TimeOnlyConverter.
            Implements the <see cref="T:ServiceStack.OrmLite.Converters.TimeSpanAsIntConverter" />
            </summary>
            <seealso cref="T:ServiceStack.OrmLite.Converters.TimeSpanAsIntConverter" />
        </member>
        <member name="M:ServiceStack.OrmLite.Converters.TimeOnlyConverter.ToQuotedString(System.Type,System.Object)">
            <summary>
            Quoted Value in SQL Statement
            </summary>
            <param name="fieldType">Type of the field.</param>
            <param name="value">The value.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Converters.TimeOnlyConverter.ToDbValue(System.Type,System.Object)">
            <summary>
            Parameterized value in parameterized queries
            </summary>
            <param name="fieldType">Type of the field.</param>
            <param name="value">The value.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Converters.TimeOnlyConverter.FromDbValue(System.Type,System.Object)">
            <summary>
            From the database value.
            </summary>
            <param name="fieldType">Type of the field.</param>
            <param name="value">The value.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Converters.TimeSpanAsIntConverter">
            <summary>
            Class TimeSpanAsIntConverter.
            Implements the <see cref="T:ServiceStack.OrmLite.OrmLiteConverter" />
            </summary>
            <seealso cref="T:ServiceStack.OrmLite.OrmLiteConverter" />
        </member>
        <member name="P:ServiceStack.OrmLite.Converters.TimeSpanAsIntConverter.ColumnDefinition">
            <summary>
            SQL Column Definition used in CREATE Table.
            </summary>
            <value>The column definition.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Converters.TimeSpanAsIntConverter.DbType">
            <summary>
            Used in DB Params. Defaults to DbType.String
            </summary>
            <value>The type of the database.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.Converters.TimeSpanAsIntConverter.ToQuotedString(System.Type,System.Object)">
            <summary>
            Quoted Value in SQL Statement
            </summary>
            <param name="fieldType">Type of the field.</param>
            <param name="value">The value.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Converters.TimeSpanAsIntConverter.ToDbValue(System.Type,System.Object)">
            <summary>
            Parameterized value in parameterized queries
            </summary>
            <param name="fieldType">Type of the field.</param>
            <param name="value">The value.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Converters.TimeSpanAsIntConverter.FromDbValue(System.Type,System.Object)">
            <summary>
            Froms the database value.
            </summary>
            <param name="fieldType">Type of the field.</param>
            <param name="value">The value.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.DbTypes`1">
            <summary>
            Class DbTypes.
            </summary>
            <typeparam name="TDialect">The type of the t dialect.</typeparam>
        </member>
        <member name="F:ServiceStack.OrmLite.DbTypes`1.DbType">
            <summary>
            The database type
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.DbTypes`1.TextDefinition">
            <summary>
            The text definition
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.DbTypes`1.ShouldQuoteValue">
            <summary>
            The should quote value
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.DbTypes`1.ColumnTypeMap">
            <summary>
            The column type map
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.DbTypes`1.ColumnDbTypeMap">
            <summary>
            The column database type map
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.DbTypes`1.Set``1(System.Data.DbType,System.String)">
            <summary>
            Sets the specified database type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbType">Type of the database.</param>
            <param name="fieldDefinition">The field definition.</param>
        </member>
        <member name="T:ServiceStack.OrmLite.XmlValue">
            <summary>
            Struct XmlValue
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.XmlValue.Xml">
            <summary>
            Gets the XML.
            </summary>
            <value>The XML.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.XmlValue.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.OrmLite.XmlValue" /> struct.
            </summary>
            <param name="xml">The XML.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.XmlValue.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.XmlValue.Equals(ServiceStack.OrmLite.XmlValue)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.XmlValue.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The object to compare with the current instance.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.XmlValue.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.XmlValue.op_Implicit(System.String)~ServiceStack.OrmLite.XmlValue">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String" /> to <see cref="T:ServiceStack.OrmLite.XmlValue" />.
            </summary>
            <param name="expandedName">Name of the expanded.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.IDynamicRow">
            <summary>
            Interface IDynamicRow
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.IDynamicRow.Type">
            <summary>
            Gets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="T:ServiceStack.OrmLite.IDynamicRow`1">
            <summary>
            Interface IDynamicRow
            Implements the <see cref="T:ServiceStack.OrmLite.IDynamicRow" />
            </summary>
            <typeparam name="T"></typeparam>
            <seealso cref="T:ServiceStack.OrmLite.IDynamicRow" />
        </member>
        <member name="P:ServiceStack.OrmLite.IDynamicRow`1.Fields">
            <summary>
            Gets the fields.
            </summary>
            <value>The fields.</value>
        </member>
        <member name="T:ServiceStack.OrmLite.DictionaryRow">
            <summary>
            Struct DictionaryRow
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.DictionaryRow.Type">
            <summary>
            Gets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.DictionaryRow.Fields">
            <summary>
            Gets the fields.
            </summary>
            <value>The fields.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.DictionaryRow.#ctor(System.Type,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.OrmLite.DictionaryRow" /> struct.
            </summary>
            <param name="type">The type.</param>
            <param name="fields">The fields.</param>
        </member>
        <member name="T:ServiceStack.OrmLite.ObjectRow">
            <summary>
            Struct ObjectRow
            Implements the <see cref="T:System.Object" />
            </summary>
            <seealso cref="T:System.Object" />
        </member>
        <member name="P:ServiceStack.OrmLite.ObjectRow.Type">
            <summary>
            Gets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.ObjectRow.Fields">
            <summary>
            Gets the fields.
            </summary>
            <value>The fields.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.ObjectRow.#ctor(System.Type,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.OrmLite.ObjectRow" /> struct.
            </summary>
            <param name="type">The type.</param>
            <param name="fields">The fields.</param>
        </member>
        <member name="T:ServiceStack.OrmLite.DynamicRowUtils">
            <summary>
            Class DynamicRowUtils.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.DynamicRowUtils.ToFilterType``1(System.Object)">
            <summary>
            Converts to filtertype.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="row">The row.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.DynamicRowUtils.ToFilterType(System.Object,System.Type)">
            <summary>
            Converts to filtertype.
            </summary>
            <param name="row">The row.</param>
            <param name="type">The type.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.IHasUntypedSqlExpression">
            <summary>
            Interface IHasUntypedSqlExpression
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.IHasUntypedSqlExpression.GetUntyped">
            <summary>
            Gets the untyped.
            </summary>
            <returns>IUntypedSqlExpression.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.IUntypedSqlExpression">
            <summary>
            Interface IUntypedSqlExpression
            Implements the <see cref="T:ServiceStack.OrmLite.ISqlExpression" />
            </summary>
            <seealso cref="T:ServiceStack.OrmLite.ISqlExpression" />
        </member>
        <member name="P:ServiceStack.OrmLite.IUntypedSqlExpression.TableAlias">
            <summary>
            Gets or sets the table alias.
            </summary>
            <value>The table alias.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.IUntypedSqlExpression.PrefixFieldWithTableName">
            <summary>
            Gets or sets a value indicating whether [prefix field with table name].
            </summary>
            <value><c>true</c> if [prefix field with table name]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.IUntypedSqlExpression.WhereStatementWithoutWhereString">
            <summary>
            Gets or sets a value indicating whether [where statement without where string].
            </summary>
            <value><c>true</c> if [where statement without where string]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.IUntypedSqlExpression.DialectProvider">
            <summary>
            Gets or sets the dialect provider.
            </summary>
            <value>The dialect provider.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.IUntypedSqlExpression.SelectExpression">
            <summary>
            Gets or sets the select expression.
            </summary>
            <value>The select expression.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.IUntypedSqlExpression.FromExpression">
            <summary>
            Gets or sets from expression.
            </summary>
            <value>From expression.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.IUntypedSqlExpression.BodyExpression">
            <summary>
            Gets the body expression.
            </summary>
            <value>The body expression.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.IUntypedSqlExpression.WhereExpression">
            <summary>
            Gets or sets the where expression.
            </summary>
            <value>The where expression.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.IUntypedSqlExpression.GroupByExpression">
            <summary>
            Gets or sets the group by expression.
            </summary>
            <value>The group by expression.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.IUntypedSqlExpression.HavingExpression">
            <summary>
            Gets or sets the having expression.
            </summary>
            <value>The having expression.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.IUntypedSqlExpression.OrderByExpression">
            <summary>
            Gets or sets the order by expression.
            </summary>
            <value>The order by expression.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.IUntypedSqlExpression.Rows">
            <summary>
            Gets or sets the rows.
            </summary>
            <value>The rows.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.IUntypedSqlExpression.Offset">
            <summary>
            Gets or sets the offset.
            </summary>
            <value>The offset.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.IUntypedSqlExpression.UpdateFields">
            <summary>
            Gets or sets the update fields.
            </summary>
            <value>The update fields.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.IUntypedSqlExpression.InsertFields">
            <summary>
            Gets or sets the insert fields.
            </summary>
            <value>The insert fields.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.IUntypedSqlExpression.ModelDef">
            <summary>
            Gets the model definition.
            </summary>
            <value>The model definition.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.IUntypedSqlExpression.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>IUntypedSqlExpression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IUntypedSqlExpression.Select">
            <summary>
            Selects this instance.
            </summary>
            <returns>IUntypedSqlExpression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IUntypedSqlExpression.Select(System.String)">
            <summary>
            Selects the specified select expression.
            </summary>
            <param name="selectExpression">The select expression.</param>
            <returns>IUntypedSqlExpression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IUntypedSqlExpression.UnsafeSelect(System.String)">
            <summary>
            Unsafes the select.
            </summary>
            <param name="rawSelect">The raw select.</param>
            <returns>IUntypedSqlExpression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IUntypedSqlExpression.Select``2(System.Linq.Expressions.Expression{System.Func{``0,``1,System.Object}})">
            <summary>
            Selects the specified fields.
            </summary>
            <typeparam name="Table1">The type of the table1.</typeparam>
            <typeparam name="Table2">The type of the table2.</typeparam>
            <param name="fields">The fields.</param>
            <returns>IUntypedSqlExpression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IUntypedSqlExpression.Select``3(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,System.Object}})">
            <summary>
            Selects the specified fields.
            </summary>
            <typeparam name="Table1">The type of the table1.</typeparam>
            <typeparam name="Table2">The type of the table2.</typeparam>
            <typeparam name="Table3">The type of the table3.</typeparam>
            <param name="fields">The fields.</param>
            <returns>IUntypedSqlExpression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IUntypedSqlExpression.SelectDistinct``2(System.Linq.Expressions.Expression{System.Func{``0,``1,System.Object}})">
            <summary>
            Selects the distinct.
            </summary>
            <typeparam name="Table1">The type of the table1.</typeparam>
            <typeparam name="Table2">The type of the table2.</typeparam>
            <param name="fields">The fields.</param>
            <returns>IUntypedSqlExpression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IUntypedSqlExpression.SelectDistinct``3(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,System.Object}})">
            <summary>
            Selects the distinct.
            </summary>
            <typeparam name="Table1">The type of the table1.</typeparam>
            <typeparam name="Table2">The type of the table2.</typeparam>
            <typeparam name="Table3">The type of the table3.</typeparam>
            <param name="fields">The fields.</param>
            <returns>IUntypedSqlExpression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IUntypedSqlExpression.SelectDistinct">
            <summary>
            Selects the distinct.
            </summary>
            <returns>IUntypedSqlExpression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IUntypedSqlExpression.From(System.String)">
            <summary>
            Froms the specified tables.
            </summary>
            <param name="tables">The tables.</param>
            <returns>IUntypedSqlExpression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IUntypedSqlExpression.UnsafeFrom(System.String)">
            <summary>
            Unsafes from.
            </summary>
            <param name="rawFrom">The raw from.</param>
            <returns>IUntypedSqlExpression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IUntypedSqlExpression.Where">
            <summary>
            Wheres this instance.
            </summary>
            <returns>IUntypedSqlExpression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IUntypedSqlExpression.UnsafeWhere(System.String,System.Object[])">
            <summary>
            Unsafes the where.
            </summary>
            <param name="rawSql">The raw SQL.</param>
            <param name="filterParams">The filter parameters.</param>
            <returns>IUntypedSqlExpression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IUntypedSqlExpression.Ensure(System.String,System.Object[])">
            <summary>
            Ensures the specified SQL filter.
            </summary>
            <param name="sqlFilter">The SQL filter.</param>
            <param name="filterParams">The filter parameters.</param>
            <returns>IUntypedSqlExpression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IUntypedSqlExpression.Where(System.String,System.Object[])">
            <summary>
            Wheres the specified SQL filter.
            </summary>
            <param name="sqlFilter">The SQL filter.</param>
            <param name="filterParams">The filter parameters.</param>
            <returns>IUntypedSqlExpression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IUntypedSqlExpression.UnsafeAnd(System.String,System.Object[])">
            <summary>
            Unsafes the and.
            </summary>
            <param name="rawSql">The raw SQL.</param>
            <param name="filterParams">The filter parameters.</param>
            <returns>IUntypedSqlExpression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IUntypedSqlExpression.And(System.String,System.Object[])">
            <summary>
            Ands the specified SQL filter.
            </summary>
            <param name="sqlFilter">The SQL filter.</param>
            <param name="filterParams">The filter parameters.</param>
            <returns>IUntypedSqlExpression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IUntypedSqlExpression.UnsafeOr(System.String,System.Object[])">
            <summary>
            Unsafes the or.
            </summary>
            <param name="rawSql">The raw SQL.</param>
            <param name="filterParams">The filter parameters.</param>
            <returns>IUntypedSqlExpression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IUntypedSqlExpression.Or(System.String,System.Object[])">
            <summary>
            Ors the specified SQL filter.
            </summary>
            <param name="sqlFilter">The SQL filter.</param>
            <param name="filterParams">The filter parameters.</param>
            <returns>IUntypedSqlExpression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IUntypedSqlExpression.AddCondition(System.String,System.String,System.Object[])">
            <summary>
            Adds the condition.
            </summary>
            <param name="condition">The condition.</param>
            <param name="sqlFilter">The SQL filter.</param>
            <param name="filterParams">The filter parameters.</param>
            <returns>IUntypedSqlExpression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IUntypedSqlExpression.GroupBy">
            <summary>
            Groups the by.
            </summary>
            <returns>IUntypedSqlExpression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IUntypedSqlExpression.GroupBy(System.String)">
            <summary>
            Groups the by.
            </summary>
            <param name="groupBy">The group by.</param>
            <returns>IUntypedSqlExpression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IUntypedSqlExpression.Having">
            <summary>
            Havings this instance.
            </summary>
            <returns>IUntypedSqlExpression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IUntypedSqlExpression.Having(System.String,System.Object[])">
            <summary>
            Havings the specified SQL filter.
            </summary>
            <param name="sqlFilter">The SQL filter.</param>
            <param name="filterParams">The filter parameters.</param>
            <returns>IUntypedSqlExpression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IUntypedSqlExpression.OrderBy">
            <summary>
            Orders the by.
            </summary>
            <returns>IUntypedSqlExpression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IUntypedSqlExpression.OrderBy(System.String)">
            <summary>
            Orders the by.
            </summary>
            <param name="orderBy">The order by.</param>
            <returns>IUntypedSqlExpression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IUntypedSqlExpression.GetModelDefinition(ServiceStack.OrmLite.FieldDefinition)">
            <summary>
            Gets the model definition.
            </summary>
            <param name="fieldDef">The field definition.</param>
            <returns>ModelDefinition.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IUntypedSqlExpression.OrderByFields(ServiceStack.OrmLite.FieldDefinition[])">
            <summary>
            Orders the by fields.
            </summary>
            <param name="fields">The fields.</param>
            <returns>IUntypedSqlExpression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IUntypedSqlExpression.OrderByFieldsDescending(ServiceStack.OrmLite.FieldDefinition[])">
            <summary>
            Orders the by fields descending.
            </summary>
            <param name="fields">The fields.</param>
            <returns>IUntypedSqlExpression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IUntypedSqlExpression.OrderByFields(System.String[])">
            <summary>
            Orders the by fields.
            </summary>
            <param name="fieldNames">The field names.</param>
            <returns>IUntypedSqlExpression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IUntypedSqlExpression.OrderByFieldsDescending(System.String[])">
            <summary>
            Orders the by fields descending.
            </summary>
            <param name="fieldNames">The field names.</param>
            <returns>IUntypedSqlExpression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IUntypedSqlExpression.OrderBy``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Orders the by.
            </summary>
            <typeparam name="Table">The type of the table.</typeparam>
            <param name="keySelector">The key selector.</param>
            <returns>IUntypedSqlExpression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IUntypedSqlExpression.ThenBy(System.String)">
            <summary>
            Thens the by.
            </summary>
            <param name="orderBy">The order by.</param>
            <returns>IUntypedSqlExpression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IUntypedSqlExpression.ThenBy``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Thens the by.
            </summary>
            <typeparam name="Table">The type of the table.</typeparam>
            <param name="keySelector">The key selector.</param>
            <returns>IUntypedSqlExpression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IUntypedSqlExpression.OrderByDescending``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Orders the by descending.
            </summary>
            <typeparam name="Table">The type of the table.</typeparam>
            <param name="keySelector">The key selector.</param>
            <returns>IUntypedSqlExpression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IUntypedSqlExpression.OrderByDescending(System.String)">
            <summary>
            Orders the by descending.
            </summary>
            <param name="orderBy">The order by.</param>
            <returns>IUntypedSqlExpression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IUntypedSqlExpression.ThenByDescending(System.String)">
            <summary>
            Thens the by descending.
            </summary>
            <param name="orderBy">The order by.</param>
            <returns>IUntypedSqlExpression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IUntypedSqlExpression.ThenByDescending``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Thens the by descending.
            </summary>
            <typeparam name="Table">The type of the table.</typeparam>
            <param name="keySelector">The key selector.</param>
            <returns>IUntypedSqlExpression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IUntypedSqlExpression.Skip(System.Nullable{System.Int32})">
            <summary>
            Skips the specified skip.
            </summary>
            <param name="skip">The skip.</param>
            <returns>IUntypedSqlExpression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IUntypedSqlExpression.Take(System.Nullable{System.Int32})">
            <summary>
            Takes the specified take.
            </summary>
            <param name="take">The take.</param>
            <returns>IUntypedSqlExpression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IUntypedSqlExpression.Limit(System.Int32,System.Int32)">
            <summary>
            Limits the specified skip.
            </summary>
            <param name="skip">The skip.</param>
            <param name="rows">The rows.</param>
            <returns>IUntypedSqlExpression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IUntypedSqlExpression.Limit(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Limits the specified skip.
            </summary>
            <param name="skip">The skip.</param>
            <param name="rows">The rows.</param>
            <returns>IUntypedSqlExpression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IUntypedSqlExpression.Limit(System.Int32)">
            <summary>
            Limits the specified rows.
            </summary>
            <param name="rows">The rows.</param>
            <returns>IUntypedSqlExpression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IUntypedSqlExpression.Limit">
            <summary>
            Limits this instance.
            </summary>
            <returns>IUntypedSqlExpression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IUntypedSqlExpression.ClearLimits">
            <summary>
            Clears the limits.
            </summary>
            <returns>IUntypedSqlExpression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IUntypedSqlExpression.Update(System.Collections.Generic.List{System.String})">
            <summary>
            Updates the specified update fields.
            </summary>
            <param name="updateFields">The update fields.</param>
            <returns>IUntypedSqlExpression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IUntypedSqlExpression.Update">
            <summary>
            Updates this instance.
            </summary>
            <returns>IUntypedSqlExpression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IUntypedSqlExpression.Insert(System.Collections.Generic.List{System.String})">
            <summary>
            Inserts the specified insert fields.
            </summary>
            <param name="insertFields">The insert fields.</param>
            <returns>IUntypedSqlExpression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IUntypedSqlExpression.Insert">
            <summary>
            Inserts this instance.
            </summary>
            <returns>IUntypedSqlExpression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IUntypedSqlExpression.CreateParam(System.String,System.Object,System.Data.ParameterDirection,System.Nullable{System.Data.DbType})">
            <summary>
            Creates the parameter.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <param name="direction">The direction.</param>
            <param name="dbType">Type of the database.</param>
            <returns>IDbDataParameter.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IUntypedSqlExpression.Join``2(System.Linq.Expressions.Expression{System.Func{``0,``1,System.Boolean}})">
            <summary>
            Joins the specified join expr.
            </summary>
            <typeparam name="Source">The type of the source.</typeparam>
            <typeparam name="Target">The type of the target.</typeparam>
            <param name="joinExpr">The join expr.</param>
            <returns>IUntypedSqlExpression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IUntypedSqlExpression.Join(System.Type,System.Type,System.Linq.Expressions.Expression)">
            <summary>
            Joins the specified source type.
            </summary>
            <param name="sourceType">Type of the source.</param>
            <param name="targetType">Type of the target.</param>
            <param name="joinExpr">The join expr.</param>
            <returns>IUntypedSqlExpression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IUntypedSqlExpression.LeftJoin``2(System.Linq.Expressions.Expression{System.Func{``0,``1,System.Boolean}})">
            <summary>
            Lefts the join.
            </summary>
            <typeparam name="Source">The type of the source.</typeparam>
            <typeparam name="Target">The type of the target.</typeparam>
            <param name="joinExpr">The join expr.</param>
            <returns>IUntypedSqlExpression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IUntypedSqlExpression.LeftJoin(System.Type,System.Type,System.Linq.Expressions.Expression)">
            <summary>
            Lefts the join.
            </summary>
            <param name="sourceType">Type of the source.</param>
            <param name="targetType">Type of the target.</param>
            <param name="joinExpr">The join expr.</param>
            <returns>IUntypedSqlExpression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IUntypedSqlExpression.RightJoin``2(System.Linq.Expressions.Expression{System.Func{``0,``1,System.Boolean}})">
            <summary>
            Rights the join.
            </summary>
            <typeparam name="Source">The type of the source.</typeparam>
            <typeparam name="Target">The type of the target.</typeparam>
            <param name="joinExpr">The join expr.</param>
            <returns>IUntypedSqlExpression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IUntypedSqlExpression.FullJoin``2(System.Linq.Expressions.Expression{System.Func{``0,``1,System.Boolean}})">
            <summary>
            Fulls the join.
            </summary>
            <typeparam name="Source">The type of the source.</typeparam>
            <typeparam name="Target">The type of the target.</typeparam>
            <param name="joinExpr">The join expr.</param>
            <returns>IUntypedSqlExpression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IUntypedSqlExpression.CrossJoin``2(System.Linq.Expressions.Expression{System.Func{``0,``1,System.Boolean}})">
            <summary>
            Crosses the join.
            </summary>
            <typeparam name="Source">The type of the source.</typeparam>
            <typeparam name="Target">The type of the target.</typeparam>
            <param name="joinExpr">The join expr.</param>
            <returns>IUntypedSqlExpression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IUntypedSqlExpression.CustomJoin(System.String)">
            <summary>
            Customs the join.
            </summary>
            <param name="joinString">The join string.</param>
            <returns>IUntypedSqlExpression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IUntypedSqlExpression.Ensure``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Ensures the specified predicate.
            </summary>
            <typeparam name="Target">The type of the target.</typeparam>
            <param name="predicate">The predicate.</param>
            <returns>IUntypedSqlExpression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IUntypedSqlExpression.Ensure``2(System.Linq.Expressions.Expression{System.Func{``0,``1,System.Boolean}})">
            <summary>
            Ensures the specified predicate.
            </summary>
            <typeparam name="Source">The type of the source.</typeparam>
            <typeparam name="Target">The type of the target.</typeparam>
            <param name="predicate">The predicate.</param>
            <returns>IUntypedSqlExpression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IUntypedSqlExpression.Where``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Wheres the specified predicate.
            </summary>
            <typeparam name="Target">The type of the target.</typeparam>
            <param name="predicate">The predicate.</param>
            <returns>IUntypedSqlExpression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IUntypedSqlExpression.Where``2(System.Linq.Expressions.Expression{System.Func{``0,``1,System.Boolean}})">
            <summary>
            Wheres the specified predicate.
            </summary>
            <typeparam name="Source">The type of the source.</typeparam>
            <typeparam name="Target">The type of the target.</typeparam>
            <param name="predicate">The predicate.</param>
            <returns>IUntypedSqlExpression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IUntypedSqlExpression.And``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Ands the specified predicate.
            </summary>
            <typeparam name="Target">The type of the target.</typeparam>
            <param name="predicate">The predicate.</param>
            <returns>IUntypedSqlExpression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IUntypedSqlExpression.And``2(System.Linq.Expressions.Expression{System.Func{``0,``1,System.Boolean}})">
            <summary>
            Ands the specified predicate.
            </summary>
            <typeparam name="Source">The type of the source.</typeparam>
            <typeparam name="Target">The type of the target.</typeparam>
            <param name="predicate">The predicate.</param>
            <returns>IUntypedSqlExpression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IUntypedSqlExpression.Or``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Ors the specified predicate.
            </summary>
            <typeparam name="Target">The type of the target.</typeparam>
            <param name="predicate">The predicate.</param>
            <returns>IUntypedSqlExpression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IUntypedSqlExpression.Or``2(System.Linq.Expressions.Expression{System.Func{``0,``1,System.Boolean}})">
            <summary>
            Ors the specified predicate.
            </summary>
            <typeparam name="Source">The type of the source.</typeparam>
            <typeparam name="Target">The type of the target.</typeparam>
            <param name="predicate">The predicate.</param>
            <returns>IUntypedSqlExpression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IUntypedSqlExpression.SqlTable(ServiceStack.OrmLite.ModelDefinition)">
            <summary>
            SQLs the table.
            </summary>
            <param name="modelDef">The model definition.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IUntypedSqlExpression.SqlColumn(System.String)">
            <summary>
            SQLs the column.
            </summary>
            <param name="columnName">Name of the column.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IUntypedSqlExpression.ToDeleteRowStatement">
            <summary>
            Converts to deleterowstatement.
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IUntypedSqlExpression.ToCountStatement">
            <summary>
            Converts to countstatement.
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IUntypedSqlExpression.GetAllFields">
            <summary>
            Gets all fields.
            </summary>
            <returns>IList&lt;System.String&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IUntypedSqlExpression.FirstMatchingField(System.String)">
            <summary>
            Firsts the matching field.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <returns>Tuple&lt;ModelDefinition, FieldDefinition&gt;.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.UntypedSqlExpressionProxy`1">
            <summary>
            Class UntypedSqlExpressionProxy.
            Implements the <see cref="T:ServiceStack.OrmLite.IUntypedSqlExpression" />
            </summary>
            <typeparam name="T"></typeparam>
            <seealso cref="T:ServiceStack.OrmLite.IUntypedSqlExpression" />
        </member>
        <member name="F:ServiceStack.OrmLite.UntypedSqlExpressionProxy`1.q">
            <summary>
            The q
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.UntypedSqlExpressionProxy`1.#ctor(ServiceStack.OrmLite.SqlExpression{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.OrmLite.UntypedSqlExpressionProxy`1" /> class.
            </summary>
            <param name="q">The q.</param>
        </member>
        <member name="P:ServiceStack.OrmLite.UntypedSqlExpressionProxy`1.TableAlias">
            <summary>
            Gets or sets the table alias.
            </summary>
            <value>The table alias.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.UntypedSqlExpressionProxy`1.PrefixFieldWithTableName">
            <summary>
            Gets or sets a value indicating whether [prefix field with table name].
            </summary>
            <value><c>true</c> if [prefix field with table name]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.UntypedSqlExpressionProxy`1.WhereStatementWithoutWhereString">
            <summary>
            Gets or sets a value indicating whether [where statement without where string].
            </summary>
            <value><c>true</c> if [where statement without where string]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.UntypedSqlExpressionProxy`1.DialectProvider">
            <summary>
            Gets or sets the dialect provider.
            </summary>
            <value>The dialect provider.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.UntypedSqlExpressionProxy`1.Params">
            <summary>
            Gets or sets the parameters.
            </summary>
            <value>The parameters.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.UntypedSqlExpressionProxy`1.SelectExpression">
            <summary>
            Gets or sets the select expression.
            </summary>
            <value>The select expression.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.UntypedSqlExpressionProxy`1.FromExpression">
            <summary>
            Gets or sets from expression.
            </summary>
            <value>From expression.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.UntypedSqlExpressionProxy`1.BodyExpression">
            <summary>
            Gets the body expression.
            </summary>
            <value>The body expression.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.UntypedSqlExpressionProxy`1.WhereExpression">
            <summary>
            Gets or sets the where expression.
            </summary>
            <value>The where expression.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.UntypedSqlExpressionProxy`1.GroupByExpression">
            <summary>
            Gets or sets the group by expression.
            </summary>
            <value>The group by expression.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.UntypedSqlExpressionProxy`1.HavingExpression">
            <summary>
            Gets or sets the having expression.
            </summary>
            <value>The having expression.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.UntypedSqlExpressionProxy`1.OrderByExpression">
            <summary>
            Gets or sets the order by expression.
            </summary>
            <value>The order by expression.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.UntypedSqlExpressionProxy`1.Rows">
            <summary>
            Gets or sets the rows.
            </summary>
            <value>The rows.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.UntypedSqlExpressionProxy`1.Offset">
            <summary>
            Gets or sets the offset.
            </summary>
            <value>The offset.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.UntypedSqlExpressionProxy`1.UpdateFields">
            <summary>
            Gets or sets the update fields.
            </summary>
            <value>The update fields.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.UntypedSqlExpressionProxy`1.InsertFields">
            <summary>
            Gets or sets the insert fields.
            </summary>
            <value>The insert fields.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.UntypedSqlExpressionProxy`1.ModelDef">
            <summary>
            Gets the model definition.
            </summary>
            <value>The model definition.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.UntypedSqlExpressionProxy`1.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>IUntypedSqlExpression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.UntypedSqlExpressionProxy`1.Select">
            <summary>
            Selects this instance.
            </summary>
            <returns>IUntypedSqlExpression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.UntypedSqlExpressionProxy`1.Select(System.String)">
            <summary>
            Selects the specified select expression.
            </summary>
            <param name="selectExpression">The select expression.</param>
            <returns>IUntypedSqlExpression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.UntypedSqlExpressionProxy`1.UnsafeSelect(System.String)">
            <summary>
            Unsafes the select.
            </summary>
            <param name="rawSelect">The raw select.</param>
            <returns>IUntypedSqlExpression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.UntypedSqlExpressionProxy`1.Select``2(System.Linq.Expressions.Expression{System.Func{``0,``1,System.Object}})">
            <summary>
            Selects the specified fields.
            </summary>
            <typeparam name="Table1">The type of the table1.</typeparam>
            <typeparam name="Table2">The type of the table2.</typeparam>
            <param name="fields">The fields.</param>
            <returns>IUntypedSqlExpression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.UntypedSqlExpressionProxy`1.Select``3(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,System.Object}})">
            <summary>
            Selects the specified fields.
            </summary>
            <typeparam name="Table1">The type of the table1.</typeparam>
            <typeparam name="Table2">The type of the table2.</typeparam>
            <typeparam name="Table3">The type of the table3.</typeparam>
            <param name="fields">The fields.</param>
            <returns>IUntypedSqlExpression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.UntypedSqlExpressionProxy`1.SelectDistinct``2(System.Linq.Expressions.Expression{System.Func{``0,``1,System.Object}})">
            <summary>
            Selects the distinct.
            </summary>
            <typeparam name="Table1">The type of the table1.</typeparam>
            <typeparam name="Table2">The type of the table2.</typeparam>
            <param name="fields">The fields.</param>
            <returns>IUntypedSqlExpression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.UntypedSqlExpressionProxy`1.SelectDistinct``3(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,System.Object}})">
            <summary>
            Selects the distinct.
            </summary>
            <typeparam name="Table1">The type of the table1.</typeparam>
            <typeparam name="Table2">The type of the table2.</typeparam>
            <typeparam name="Table3">The type of the table3.</typeparam>
            <param name="fields">The fields.</param>
            <returns>IUntypedSqlExpression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.UntypedSqlExpressionProxy`1.SelectDistinct">
            <summary>
            Selects the distinct.
            </summary>
            <returns>IUntypedSqlExpression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.UntypedSqlExpressionProxy`1.From(System.String)">
            <summary>
            Froms the specified tables.
            </summary>
            <param name="tables">The tables.</param>
            <returns>IUntypedSqlExpression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.UntypedSqlExpressionProxy`1.UnsafeFrom(System.String)">
            <summary>
            Unsafes from.
            </summary>
            <param name="rawFrom">The raw from.</param>
            <returns>IUntypedSqlExpression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.UntypedSqlExpressionProxy`1.Where">
            <summary>
            Wheres this instance.
            </summary>
            <returns>IUntypedSqlExpression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.UntypedSqlExpressionProxy`1.UnsafeWhere(System.String,System.Object[])">
            <summary>
            Unsafes the where.
            </summary>
            <param name="rawSql">The raw SQL.</param>
            <param name="filterParams">The filter parameters.</param>
            <returns>IUntypedSqlExpression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.UntypedSqlExpressionProxy`1.Ensure(System.String,System.Object[])">
            <summary>
            Ensures the specified SQL filter.
            </summary>
            <param name="sqlFilter">The SQL filter.</param>
            <param name="filterParams">The filter parameters.</param>
            <returns>IUntypedSqlExpression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.UntypedSqlExpressionProxy`1.Where(System.String,System.Object[])">
            <summary>
            Wheres the specified SQL filter.
            </summary>
            <param name="sqlFilter">The SQL filter.</param>
            <param name="filterParams">The filter parameters.</param>
            <returns>IUntypedSqlExpression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.UntypedSqlExpressionProxy`1.UnsafeAnd(System.String,System.Object[])">
            <summary>
            Unsafes the and.
            </summary>
            <param name="rawSql">The raw SQL.</param>
            <param name="filterParams">The filter parameters.</param>
            <returns>IUntypedSqlExpression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.UntypedSqlExpressionProxy`1.And(System.String,System.Object[])">
            <summary>
            Ands the specified SQL filter.
            </summary>
            <param name="sqlFilter">The SQL filter.</param>
            <param name="filterParams">The filter parameters.</param>
            <returns>IUntypedSqlExpression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.UntypedSqlExpressionProxy`1.UnsafeOr(System.String,System.Object[])">
            <summary>
            Unsafes the or.
            </summary>
            <param name="rawSql">The raw SQL.</param>
            <param name="filterParams">The filter parameters.</param>
            <returns>IUntypedSqlExpression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.UntypedSqlExpressionProxy`1.Or(System.String,System.Object[])">
            <summary>
            Ors the specified SQL filter.
            </summary>
            <param name="sqlFilter">The SQL filter.</param>
            <param name="filterParams">The filter parameters.</param>
            <returns>IUntypedSqlExpression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.UntypedSqlExpressionProxy`1.AddCondition(System.String,System.String,System.Object[])">
            <summary>
            Adds the condition.
            </summary>
            <param name="condition">The condition.</param>
            <param name="sqlFilter">The SQL filter.</param>
            <param name="filterParams">The filter parameters.</param>
            <returns>IUntypedSqlExpression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.UntypedSqlExpressionProxy`1.GroupBy">
            <summary>
            Groups the by.
            </summary>
            <returns>IUntypedSqlExpression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.UntypedSqlExpressionProxy`1.GroupBy(System.String)">
            <summary>
            Groups the by.
            </summary>
            <param name="groupBy">The group by.</param>
            <returns>IUntypedSqlExpression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.UntypedSqlExpressionProxy`1.Having">
            <summary>
            Havings this instance.
            </summary>
            <returns>IUntypedSqlExpression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.UntypedSqlExpressionProxy`1.Having(System.String,System.Object[])">
            <summary>
            Havings the specified SQL filter.
            </summary>
            <param name="sqlFilter">The SQL filter.</param>
            <param name="filterParams">The filter parameters.</param>
            <returns>IUntypedSqlExpression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.UntypedSqlExpressionProxy`1.OrderBy">
            <summary>
            Orders the by.
            </summary>
            <returns>IUntypedSqlExpression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.UntypedSqlExpressionProxy`1.OrderBy(System.String)">
            <summary>
            Orders the by.
            </summary>
            <param name="orderBy">The order by.</param>
            <returns>IUntypedSqlExpression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.UntypedSqlExpressionProxy`1.GetModelDefinition(ServiceStack.OrmLite.FieldDefinition)">
            <summary>
            Gets the model definition.
            </summary>
            <param name="fieldDef">The field definition.</param>
            <returns>ModelDefinition.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.UntypedSqlExpressionProxy`1.OrderByFields(ServiceStack.OrmLite.FieldDefinition[])">
            <summary>
            Orders the by fields.
            </summary>
            <param name="fields">The fields.</param>
            <returns>IUntypedSqlExpression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.UntypedSqlExpressionProxy`1.OrderByFieldsDescending(ServiceStack.OrmLite.FieldDefinition[])">
            <summary>
            Orders the by fields descending.
            </summary>
            <param name="fields">The fields.</param>
            <returns>IUntypedSqlExpression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.UntypedSqlExpressionProxy`1.OrderByFields(System.String[])">
            <summary>
            Orders the by fields.
            </summary>
            <param name="fieldNames">The field names.</param>
            <returns>IUntypedSqlExpression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.UntypedSqlExpressionProxy`1.OrderByFieldsDescending(System.String[])">
            <summary>
            Orders the by fields descending.
            </summary>
            <param name="fieldNames">The field names.</param>
            <returns>IUntypedSqlExpression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.UntypedSqlExpressionProxy`1.OrderBy``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Orders the by.
            </summary>
            <typeparam name="Table">The type of the table.</typeparam>
            <param name="keySelector">The key selector.</param>
            <returns>IUntypedSqlExpression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.UntypedSqlExpressionProxy`1.ThenBy(System.String)">
            <summary>
            Thens the by.
            </summary>
            <param name="orderBy">The order by.</param>
            <returns>IUntypedSqlExpression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.UntypedSqlExpressionProxy`1.ThenBy``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Thens the by.
            </summary>
            <typeparam name="Table">The type of the table.</typeparam>
            <param name="keySelector">The key selector.</param>
            <returns>IUntypedSqlExpression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.UntypedSqlExpressionProxy`1.OrderByDescending``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Orders the by descending.
            </summary>
            <typeparam name="Table">The type of the table.</typeparam>
            <param name="keySelector">The key selector.</param>
            <returns>IUntypedSqlExpression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.UntypedSqlExpressionProxy`1.OrderByDescending(System.String)">
            <summary>
            Orders the by descending.
            </summary>
            <param name="orderBy">The order by.</param>
            <returns>IUntypedSqlExpression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.UntypedSqlExpressionProxy`1.ThenByDescending(System.String)">
            <summary>
            Thens the by descending.
            </summary>
            <param name="orderBy">The order by.</param>
            <returns>IUntypedSqlExpression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.UntypedSqlExpressionProxy`1.ThenByDescending``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Thens the by descending.
            </summary>
            <typeparam name="Table">The type of the table.</typeparam>
            <param name="keySelector">The key selector.</param>
            <returns>IUntypedSqlExpression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.UntypedSqlExpressionProxy`1.Skip(System.Nullable{System.Int32})">
            <summary>
            Skips the specified skip.
            </summary>
            <param name="skip">The skip.</param>
            <returns>IUntypedSqlExpression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.UntypedSqlExpressionProxy`1.Take(System.Nullable{System.Int32})">
            <summary>
            Takes the specified take.
            </summary>
            <param name="take">The take.</param>
            <returns>IUntypedSqlExpression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.UntypedSqlExpressionProxy`1.Limit(System.Int32,System.Int32)">
            <summary>
            Limits the specified skip.
            </summary>
            <param name="skip">The skip.</param>
            <param name="rows">The rows.</param>
            <returns>IUntypedSqlExpression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.UntypedSqlExpressionProxy`1.Limit(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Limits the specified skip.
            </summary>
            <param name="skip">The skip.</param>
            <param name="rows">The rows.</param>
            <returns>IUntypedSqlExpression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.UntypedSqlExpressionProxy`1.Limit(System.Int32)">
            <summary>
            Limits the specified rows.
            </summary>
            <param name="rows">The rows.</param>
            <returns>IUntypedSqlExpression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.UntypedSqlExpressionProxy`1.Limit">
            <summary>
            Limits this instance.
            </summary>
            <returns>IUntypedSqlExpression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.UntypedSqlExpressionProxy`1.ClearLimits">
            <summary>
            Clears the limits.
            </summary>
            <returns>IUntypedSqlExpression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.UntypedSqlExpressionProxy`1.Update(System.Collections.Generic.List{System.String})">
            <summary>
            Updates the specified update fields.
            </summary>
            <param name="updateFields">The update fields.</param>
            <returns>IUntypedSqlExpression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.UntypedSqlExpressionProxy`1.Update">
            <summary>
            Updates this instance.
            </summary>
            <returns>IUntypedSqlExpression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.UntypedSqlExpressionProxy`1.Insert(System.Collections.Generic.List{System.String})">
            <summary>
            Inserts the specified insert fields.
            </summary>
            <param name="insertFields">The insert fields.</param>
            <returns>IUntypedSqlExpression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.UntypedSqlExpressionProxy`1.Insert">
            <summary>
            Inserts this instance.
            </summary>
            <returns>IUntypedSqlExpression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.UntypedSqlExpressionProxy`1.CreateParam(System.String,System.Object,System.Data.ParameterDirection,System.Nullable{System.Data.DbType})">
            <summary>
            Creates the parameter.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <param name="direction">The direction.</param>
            <param name="dbType">Type of the database.</param>
            <returns>IDbDataParameter.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.UntypedSqlExpressionProxy`1.Join``2(System.Linq.Expressions.Expression{System.Func{``0,``1,System.Boolean}})">
            <summary>
            Joins the specified join expr.
            </summary>
            <typeparam name="Source">The type of the source.</typeparam>
            <typeparam name="Target">The type of the target.</typeparam>
            <param name="joinExpr">The join expr.</param>
            <returns>IUntypedSqlExpression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.UntypedSqlExpressionProxy`1.Join(System.Type,System.Type,System.Linq.Expressions.Expression)">
            <summary>
            Joins the specified source type.
            </summary>
            <param name="sourceType">Type of the source.</param>
            <param name="targetType">Type of the target.</param>
            <param name="joinExpr">The join expr.</param>
            <returns>IUntypedSqlExpression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.UntypedSqlExpressionProxy`1.LeftJoin``2(System.Linq.Expressions.Expression{System.Func{``0,``1,System.Boolean}})">
            <summary>
            Lefts the join.
            </summary>
            <typeparam name="Source">The type of the source.</typeparam>
            <typeparam name="Target">The type of the target.</typeparam>
            <param name="joinExpr">The join expr.</param>
            <returns>IUntypedSqlExpression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.UntypedSqlExpressionProxy`1.LeftJoin(System.Type,System.Type,System.Linq.Expressions.Expression)">
            <summary>
            Lefts the join.
            </summary>
            <param name="sourceType">Type of the source.</param>
            <param name="targetType">Type of the target.</param>
            <param name="joinExpr">The join expr.</param>
            <returns>IUntypedSqlExpression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.UntypedSqlExpressionProxy`1.RightJoin``2(System.Linq.Expressions.Expression{System.Func{``0,``1,System.Boolean}})">
            <summary>
            Rights the join.
            </summary>
            <typeparam name="Source">The type of the source.</typeparam>
            <typeparam name="Target">The type of the target.</typeparam>
            <param name="joinExpr">The join expr.</param>
            <returns>IUntypedSqlExpression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.UntypedSqlExpressionProxy`1.FullJoin``2(System.Linq.Expressions.Expression{System.Func{``0,``1,System.Boolean}})">
            <summary>
            Fulls the join.
            </summary>
            <typeparam name="Source">The type of the source.</typeparam>
            <typeparam name="Target">The type of the target.</typeparam>
            <param name="joinExpr">The join expr.</param>
            <returns>IUntypedSqlExpression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.UntypedSqlExpressionProxy`1.CrossJoin``2(System.Linq.Expressions.Expression{System.Func{``0,``1,System.Boolean}})">
            <summary>
            Crosses the join.
            </summary>
            <typeparam name="Source">The type of the source.</typeparam>
            <typeparam name="Target">The type of the target.</typeparam>
            <param name="joinExpr">The join expr.</param>
            <returns>IUntypedSqlExpression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.UntypedSqlExpressionProxy`1.CustomJoin(System.String)">
            <summary>
            Customs the join.
            </summary>
            <param name="joinString">The join string.</param>
            <returns>IUntypedSqlExpression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.UntypedSqlExpressionProxy`1.Where``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Wheres the specified predicate.
            </summary>
            <typeparam name="Target">The type of the target.</typeparam>
            <param name="predicate">The predicate.</param>
            <returns>IUntypedSqlExpression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.UntypedSqlExpressionProxy`1.Ensure``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Ensures the specified predicate.
            </summary>
            <typeparam name="Target">The type of the target.</typeparam>
            <param name="predicate">The predicate.</param>
            <returns>IUntypedSqlExpression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.UntypedSqlExpressionProxy`1.Where``2(System.Linq.Expressions.Expression{System.Func{``0,``1,System.Boolean}})">
            <summary>
            Wheres the specified predicate.
            </summary>
            <typeparam name="Source">The type of the source.</typeparam>
            <typeparam name="Target">The type of the target.</typeparam>
            <param name="predicate">The predicate.</param>
            <returns>IUntypedSqlExpression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.UntypedSqlExpressionProxy`1.Ensure``2(System.Linq.Expressions.Expression{System.Func{``0,``1,System.Boolean}})">
            <summary>
            Ensures the specified predicate.
            </summary>
            <typeparam name="Source">The type of the source.</typeparam>
            <typeparam name="Target">The type of the target.</typeparam>
            <param name="predicate">The predicate.</param>
            <returns>IUntypedSqlExpression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.UntypedSqlExpressionProxy`1.And``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Ands the specified predicate.
            </summary>
            <typeparam name="Target">The type of the target.</typeparam>
            <param name="predicate">The predicate.</param>
            <returns>IUntypedSqlExpression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.UntypedSqlExpressionProxy`1.And``2(System.Linq.Expressions.Expression{System.Func{``0,``1,System.Boolean}})">
            <summary>
            Ands the specified predicate.
            </summary>
            <typeparam name="Source">The type of the source.</typeparam>
            <typeparam name="Target">The type of the target.</typeparam>
            <param name="predicate">The predicate.</param>
            <returns>IUntypedSqlExpression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.UntypedSqlExpressionProxy`1.Or``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Ors the specified predicate.
            </summary>
            <typeparam name="Target">The type of the target.</typeparam>
            <param name="predicate">The predicate.</param>
            <returns>IUntypedSqlExpression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.UntypedSqlExpressionProxy`1.Or``2(System.Linq.Expressions.Expression{System.Func{``0,``1,System.Boolean}})">
            <summary>
            Ors the specified predicate.
            </summary>
            <typeparam name="Source">The type of the source.</typeparam>
            <typeparam name="Target">The type of the target.</typeparam>
            <param name="predicate">The predicate.</param>
            <returns>IUntypedSqlExpression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.UntypedSqlExpressionProxy`1.SqlTable(ServiceStack.OrmLite.ModelDefinition)">
            <summary>
            SQLs the table.
            </summary>
            <param name="modelDef">The model definition.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.UntypedSqlExpressionProxy`1.SqlColumn(System.String)">
            <summary>
            SQLs the column.
            </summary>
            <param name="columnName">Name of the column.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.UntypedSqlExpressionProxy`1.ToDeleteRowStatement">
            <summary>
            Converts to deleterowstatement.
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.UntypedSqlExpressionProxy`1.ToSelectStatement">
            <summary>
            Converts to selectstatement.
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.UntypedSqlExpressionProxy`1.ToSelectStatement(ServiceStack.OrmLite.QueryType)">
            <summary>
            Converts to selectstatement.
            </summary>
            <param name="forType">For type.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.UntypedSqlExpressionProxy`1.ToCountStatement">
            <summary>
            Converts to countstatement.
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.UntypedSqlExpressionProxy`1.GetAllFields">
            <summary>
            Gets all fields.
            </summary>
            <returns>IList&lt;System.String&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.UntypedSqlExpressionProxy`1.FirstMatchingField(System.String)">
            <summary>
            Firsts the matching field.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <returns>Tuple&lt;ModelDefinition, FieldDefinition&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.UntypedSqlExpressionProxy`1.SelectInto``1">
            <summary>
            Selects the into.
            </summary>
            <typeparam name="TModel">The type of the t model.</typeparam>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.UntypedSqlExpressionProxy`1.SelectInto``1(ServiceStack.OrmLite.QueryType)">
            <summary>
            Selects the into.
            </summary>
            <typeparam name="TModel">The type of the t model.</typeparam>
            <param name="queryType">Type of the query.</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.SqlExpressionExtensions">
            <summary>
            Class SqlExpressionExtensions.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpressionExtensions.GetUntypedSqlExpression(ServiceStack.OrmLite.ISqlExpression)">
            <summary>
            Gets the untyped SQL expression.
            </summary>
            <param name="sqlExpression">The SQL expression.</param>
            <returns>IUntypedSqlExpression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpressionExtensions.ToDialectProvider(ServiceStack.OrmLite.ISqlExpression)">
            <summary>
            Converts to dialectprovider.
            </summary>
            <param name="sqlExpression">The SQL expression.</param>
            <returns>IOrmLiteDialectProvider.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpressionExtensions.Table``1(ServiceStack.OrmLite.ISqlExpression)">
            <summary>
            Tables the specified SQL expression.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sqlExpression">The SQL expression.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpressionExtensions.Table``1(ServiceStack.OrmLite.IOrmLiteDialectProvider)">
            <summary>
            Tables the specified dialect.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dialect">The dialect.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpressionExtensions.TableName``1(ServiceStack.OrmLite.ISqlExpression)">
            <summary>
            Gets the table name
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sqlExpression">The SQL expression.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpressionExtensions.Column``1(ServiceStack.OrmLite.ISqlExpression,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Boolean)">
            <summary>
            Columns the specified property expression.
            </summary>
            <typeparam name="Table">The type of the table.</typeparam>
            <param name="sqlExpression">The SQL expression.</param>
            <param name="propertyExpression">The property expression.</param>
            <param name="prefixTable">if set to <c>true</c> [prefix table].</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpressionExtensions.ColumnDbType``1(ServiceStack.OrmLite.IOrmLiteDialectProvider,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Boolean)">
            <summary>
            Columns the type of the database.
            </summary>
            <typeparam name="Table">The type of the table.</typeparam>
            <param name="dialect">The dialect.</param>
            <param name="propertyExpression">The property expression.</param>
            <param name="prefixTable">if set to <c>true</c> [prefix table].</param>
            <returns>Type.</returns>
            <exception cref="T:System.ArgumentException">Expected Lambda MemberExpression but received: " + propertyExpression.Name</exception>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpressionExtensions.Column``1(ServiceStack.OrmLite.IOrmLiteDialectProvider,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Boolean)">
            <summary>
            Columns the specified property expression.
            </summary>
            <typeparam name="Table">The type of the table.</typeparam>
            <param name="dialect">The dialect.</param>
            <param name="propertyExpression">The property expression.</param>
            <param name="prefixTable">if set to <c>true</c> [prefix table].</param>
            <returns>System.String.</returns>
            <exception cref="T:System.ArgumentException">Expected Lambda MemberExpression but received: " + propertyExpression.Name</exception>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpressionExtensions.Column``1(ServiceStack.OrmLite.ISqlExpression,System.String,System.Boolean)">
            <summary>
            Columns the specified property name.
            </summary>
            <typeparam name="Table">The type of the table.</typeparam>
            <param name="sqlExpression">The SQL expression.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="prefixTable">if set to <c>true</c> [prefix table].</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpressionExtensions.ColumnDbType``1(ServiceStack.OrmLite.IOrmLiteDialectProvider,System.String,System.Boolean)">
            <summary>
            Columns the type of the database.
            </summary>
            <typeparam name="Table">The type of the table.</typeparam>
            <param name="dialect">The dialect.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="prefixTable">if set to <c>true</c> [prefix table].</param>
            <returns>Type.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpressionExtensions.Column``1(ServiceStack.OrmLite.IOrmLiteDialectProvider,System.String,System.Boolean)">
            <summary>
            Columns the specified property name.
            </summary>
            <typeparam name="Table">The type of the table.</typeparam>
            <param name="dialect">The dialect.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="prefixTable">if set to <c>true</c> [prefix table].</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.ParameterRebinder">
            <summary>
            Class ParameterRebinder.
            Implements the <see cref="T:ServiceStack.OrmLite.SqlExpressionVisitor" />
            </summary>
            <seealso cref="T:ServiceStack.OrmLite.SqlExpressionVisitor" />
        </member>
        <member name="F:ServiceStack.OrmLite.ParameterRebinder.map">
            <summary>
            The map
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.ParameterRebinder.#ctor(System.Collections.Generic.Dictionary{System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.ParameterExpression})">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.OrmLite.ParameterRebinder" /> class.
            </summary>
            <param name="map">The map.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.ParameterRebinder.ReplaceParameters(System.Collections.Generic.Dictionary{System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression)">
            <summary>
            Replaces the parameters.
            </summary>
            <param name="map">The map.</param>
            <param name="exp">The exp.</param>
            <returns>Expression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.ParameterRebinder.VisitParameter(System.Linq.Expressions.ParameterExpression)">
            <summary>
            Visits the parameter.
            </summary>
            <param name="p">The p.</param>
            <returns>Expression.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.PredicateBuilder">
            <summary>
            Enables the efficient, dynamic composition of query predicates.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.PredicateBuilder.True``1">
            <summary>
            Creates a predicate that evaluates to true.
            </summary>
            <typeparam name="T"></typeparam>
            <returns>Expression&lt;Func&lt;T, System.Boolean&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.PredicateBuilder.False``1">
            <summary>
            Creates a predicate that evaluates to false.
            </summary>
            <typeparam name="T"></typeparam>
            <returns>Expression&lt;Func&lt;T, System.Boolean&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.PredicateBuilder.Create``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Creates a predicate expression from the specified lambda expression.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="predicate">The predicate.</param>
            <returns>Expression&lt;Func&lt;T, System.Boolean&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.PredicateBuilder.And``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Combines the first predicate with the second using the logical "and".
            </summary>
            <typeparam name="T"></typeparam>
            <param name="first">The first.</param>
            <param name="second">The second.</param>
            <returns>Expression&lt;Func&lt;T, System.Boolean&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.PredicateBuilder.Or``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Combines the first predicate with the second using the logical "or".
            </summary>
            <typeparam name="T"></typeparam>
            <param name="first">The first.</param>
            <param name="second">The second.</param>
            <returns>Expression&lt;Func&lt;T, System.Boolean&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.PredicateBuilder.Not``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Negates the predicate.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="expression">The expression.</param>
            <returns>Expression&lt;Func&lt;T, System.Boolean&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.PredicateBuilder.Compose``1(System.Linq.Expressions.Expression{``0},System.Linq.Expressions.Expression{``0},System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})">
            <summary>
            Combines the first expression with the second using the specified merge function.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="first">The first.</param>
            <param name="second">The second.</param>
            <param name="merge">The merge.</param>
            <returns>Expression&lt;T&gt;.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.ReadExpressionCommandExtensions">
            <summary>
            Class ReadExpressionCommandExtensions.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.ReadExpressionCommandExtensions.Select``1(System.Data.IDbCommand,ServiceStack.OrmLite.SqlExpression{``0})">
            <summary>
            Selects the specified q.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="q">The q.</param>
            <returns>List&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.ReadExpressionCommandExtensions.Select``1(System.Data.IDbCommand,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Selects the specified predicate.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="predicate">The predicate.</param>
            <returns>List&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.ReadExpressionCommandExtensions.SelectMulti``2(System.Data.IDbCommand,ServiceStack.OrmLite.SqlExpression{``0})">
            <summary>
            Selects the multi.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="T2">The type of the t2.</typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="q">The q.</param>
            <returns>List&lt;Tuple&lt;T, T2&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.ReadExpressionCommandExtensions.SelectMulti``3(System.Data.IDbCommand,ServiceStack.OrmLite.SqlExpression{``0})">
            <summary>
            Selects the multi.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="T2">The type of the t2.</typeparam>
            <typeparam name="T3">The type of the t3.</typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="q">The q.</param>
            <returns>List&lt;Tuple&lt;T, T2, T3&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.ReadExpressionCommandExtensions.SelectMulti``4(System.Data.IDbCommand,ServiceStack.OrmLite.SqlExpression{``0})">
            <summary>
            Selects the multi.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="T2">The type of the t2.</typeparam>
            <typeparam name="T3">The type of the t3.</typeparam>
            <typeparam name="T4">The type of the t4.</typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="q">The q.</param>
            <returns>List&lt;Tuple&lt;T, T2, T3, T4&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.ReadExpressionCommandExtensions.SelectMulti``5(System.Data.IDbCommand,ServiceStack.OrmLite.SqlExpression{``0})">
            <summary>
            Selects the multi.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="T2">The type of the t2.</typeparam>
            <typeparam name="T3">The type of the t3.</typeparam>
            <typeparam name="T4">The type of the t4.</typeparam>
            <typeparam name="T5">The type of the t5.</typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="q">The q.</param>
            <returns>List&lt;Tuple&lt;T, T2, T3, T4, T5&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.ReadExpressionCommandExtensions.SelectMulti``6(System.Data.IDbCommand,ServiceStack.OrmLite.SqlExpression{``0})">
            <summary>
            Selects the multi.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="T2">The type of the t2.</typeparam>
            <typeparam name="T3">The type of the t3.</typeparam>
            <typeparam name="T4">The type of the t4.</typeparam>
            <typeparam name="T5">The type of the t5.</typeparam>
            <typeparam name="T6">The type of the t6.</typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="q">The q.</param>
            <returns>List&lt;Tuple&lt;T, T2, T3, T4, T5, T6&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.ReadExpressionCommandExtensions.SelectMulti``7(System.Data.IDbCommand,ServiceStack.OrmLite.SqlExpression{``0})">
            <summary>
            Selects the multi.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="T2">The type of the t2.</typeparam>
            <typeparam name="T3">The type of the t3.</typeparam>
            <typeparam name="T4">The type of the t4.</typeparam>
            <typeparam name="T5">The type of the t5.</typeparam>
            <typeparam name="T6">The type of the t6.</typeparam>
            <typeparam name="T7">The type of the t7.</typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="q">The q.</param>
            <returns>List&lt;Tuple&lt;T, T2, T3, T4, T5, T6, T7&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.ReadExpressionCommandExtensions.SelectMulti``8(System.Data.IDbCommand,ServiceStack.OrmLite.SqlExpression{``0})">
            <summary>
            Selects the multi.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="T2">The type of the t2.</typeparam>
            <typeparam name="T3">The type of the t3.</typeparam>
            <typeparam name="T4">The type of the t4.</typeparam>
            <typeparam name="T5">The type of the t5.</typeparam>
            <typeparam name="T6">The type of the t6.</typeparam>
            <typeparam name="T7">The type of the t7.</typeparam>
            <typeparam name="T8">The type of the t8.</typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="q">The q.</param>
            <returns>List&lt;Tuple&lt;T, T2, T3, T4, T5, T6, T7, T8&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.ReadExpressionCommandExtensions.CreateMultiSelect``8(ServiceStack.OrmLite.SqlExpression{``0},ServiceStack.OrmLite.IOrmLiteDialectProvider)">
            <summary>
            Creates the multi select.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="T2">The type of the t2.</typeparam>
            <typeparam name="T3">The type of the t3.</typeparam>
            <typeparam name="T4">The type of the t4.</typeparam>
            <typeparam name="T5">The type of the t5.</typeparam>
            <typeparam name="T6">The type of the t6.</typeparam>
            <typeparam name="T7">The type of the t7.</typeparam>
            <typeparam name="T8">The type of the t8.</typeparam>
            <param name="q">The q.</param>
            <param name="dialectProvider">The dialect provider.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.ReadExpressionCommandExtensions.CreateMultiSelect(ServiceStack.OrmLite.ISqlExpression,System.String[])">
            <summary>
            Creates the multi select.
            </summary>
            <param name="q">The q.</param>
            <param name="tableSelects">The table selects.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.ReadExpressionCommandExtensions.SelectMulti``2(System.Data.IDbCommand,ServiceStack.OrmLite.SqlExpression{``0},System.String[])">
            <summary>
            Selects the multi.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="T2">The type of the t2.</typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="q">The q.</param>
            <param name="tableSelects">The table selects.</param>
            <returns>List&lt;Tuple&lt;T, T2&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.ReadExpressionCommandExtensions.SelectMulti``3(System.Data.IDbCommand,ServiceStack.OrmLite.SqlExpression{``0},System.String[])">
            <summary>
            Selects the multi.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="T2">The type of the t2.</typeparam>
            <typeparam name="T3">The type of the t3.</typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="q">The q.</param>
            <param name="tableSelects">The table selects.</param>
            <returns>List&lt;Tuple&lt;T, T2, T3&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.ReadExpressionCommandExtensions.SelectMulti``4(System.Data.IDbCommand,ServiceStack.OrmLite.SqlExpression{``0},System.String[])">
            <summary>
            Selects the multi.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="T2">The type of the t2.</typeparam>
            <typeparam name="T3">The type of the t3.</typeparam>
            <typeparam name="T4">The type of the t4.</typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="q">The q.</param>
            <param name="tableSelects">The table selects.</param>
            <returns>List&lt;Tuple&lt;T, T2, T3, T4&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.ReadExpressionCommandExtensions.SelectMulti``5(System.Data.IDbCommand,ServiceStack.OrmLite.SqlExpression{``0},System.String[])">
            <summary>
            Selects the multi.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="T2">The type of the t2.</typeparam>
            <typeparam name="T3">The type of the t3.</typeparam>
            <typeparam name="T4">The type of the t4.</typeparam>
            <typeparam name="T5">The type of the t5.</typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="q">The q.</param>
            <param name="tableSelects">The table selects.</param>
            <returns>List&lt;Tuple&lt;T, T2, T3, T4, T5&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.ReadExpressionCommandExtensions.SelectMulti``6(System.Data.IDbCommand,ServiceStack.OrmLite.SqlExpression{``0},System.String[])">
            <summary>
            Selects the multi.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="T2">The type of the t2.</typeparam>
            <typeparam name="T3">The type of the t3.</typeparam>
            <typeparam name="T4">The type of the t4.</typeparam>
            <typeparam name="T5">The type of the t5.</typeparam>
            <typeparam name="T6">The type of the t6.</typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="q">The q.</param>
            <param name="tableSelects">The table selects.</param>
            <returns>List&lt;Tuple&lt;T, T2, T3, T4, T5, T6&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.ReadExpressionCommandExtensions.SelectMulti``7(System.Data.IDbCommand,ServiceStack.OrmLite.SqlExpression{``0},System.String[])">
            <summary>
            Selects the multi.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="T2">The type of the t2.</typeparam>
            <typeparam name="T3">The type of the t3.</typeparam>
            <typeparam name="T4">The type of the t4.</typeparam>
            <typeparam name="T5">The type of the t5.</typeparam>
            <typeparam name="T6">The type of the t6.</typeparam>
            <typeparam name="T7">The type of the t7.</typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="q">The q.</param>
            <param name="tableSelects">The table selects.</param>
            <returns>List&lt;Tuple&lt;T, T2, T3, T4, T5, T6, T7&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.ReadExpressionCommandExtensions.SelectMulti``8(System.Data.IDbCommand,ServiceStack.OrmLite.SqlExpression{``0},System.String[])">
            <summary>
            Selects the multi.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="T2">The type of the t2.</typeparam>
            <typeparam name="T3">The type of the t3.</typeparam>
            <typeparam name="T4">The type of the t4.</typeparam>
            <typeparam name="T5">The type of the t5.</typeparam>
            <typeparam name="T6">The type of the t6.</typeparam>
            <typeparam name="T7">The type of the t7.</typeparam>
            <typeparam name="T8">The type of the t8.</typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="q">The q.</param>
            <param name="tableSelects">The table selects.</param>
            <returns>List&lt;Tuple&lt;T, T2, T3, T4, T5, T6, T7, T8&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.ReadExpressionCommandExtensions.Single``1(System.Data.IDbCommand,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Singles the specified predicate.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="predicate">The predicate.</param>
            <returns>T.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.ReadExpressionCommandExtensions.Single``1(System.Data.IDbCommand,ServiceStack.OrmLite.SqlExpression{``0})">
            <summary>
            Singles the specified q.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="q">The q.</param>
            <returns>T.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.ReadExpressionCommandExtensions.Scalar``2(System.Data.IDbCommand,ServiceStack.OrmLite.SqlExpression{``0})">
            <summary>
            Scalars the specified expression.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TKey">The type of the t key.</typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="expression">The expression.</param>
            <returns>TKey.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.ReadExpressionCommandExtensions.Scalar``2(System.Data.IDbCommand,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Scalars the specified field.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TKey">The type of the t key.</typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="field">The field.</param>
            <returns>TKey.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.ReadExpressionCommandExtensions.Scalar``2(System.Data.IDbCommand,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Scalars the specified field.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TKey">The type of the t key.</typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="field">The field.</param>
            <param name="predicate">The predicate.</param>
            <returns>TKey.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.ReadExpressionCommandExtensions.Count``1(System.Data.IDbCommand)">
            <summary>
            Counts the specified database command.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <returns>System.Int64.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.ReadExpressionCommandExtensions.Count``1(System.Data.IDbCommand,ServiceStack.OrmLite.SqlExpression{``0})">
            <summary>
            Counts the specified expression.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="expression">The expression.</param>
            <returns>System.Int64.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.ReadExpressionCommandExtensions.Count``1(System.Data.IDbCommand,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Counts the specified predicate.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="predicate">The predicate.</param>
            <returns>System.Int64.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.ReadExpressionCommandExtensions.GetCount(System.Data.IDbCommand,System.String)">
            <summary>
            Gets the count.
            </summary>
            <param name="dbCmd">The database command.</param>
            <param name="sql">The SQL.</param>
            <returns>System.Int64.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.ReadExpressionCommandExtensions.GetCount(System.Data.IDbCommand,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter})">
            <summary>
            Gets the count.
            </summary>
            <param name="dbCmd">The database command.</param>
            <param name="sql">The SQL.</param>
            <param name="sqlParams">The SQL parameters.</param>
            <returns>System.Int64.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.ReadExpressionCommandExtensions.RowCount``1(System.Data.IDbCommand,ServiceStack.OrmLite.SqlExpression{``0})">
            <summary>
            Rows the count.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="expression">The expression.</param>
            <returns>System.Int64.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.ReadExpressionCommandExtensions.RowCount(System.Data.IDbCommand,System.String,System.Object)">
            <summary>
            Rows the count.
            </summary>
            <param name="dbCmd">The database command.</param>
            <param name="sql">The SQL.</param>
            <param name="anonType">Type of the anon.</param>
            <returns>System.Int64.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.ReadExpressionCommandExtensions.RowCount(System.Data.IDbCommand,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter})">
            <summary>
            Rows the count.
            </summary>
            <param name="dbCmd">The database command.</param>
            <param name="sql">The SQL.</param>
            <param name="sqlParams">The SQL parameters.</param>
            <returns>System.Int64.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.ReadExpressionCommandExtensions.LoadSelect``1(System.Data.IDbCommand,ServiceStack.OrmLite.SqlExpression{``0},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Loads the select.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="expression">The expression.</param>
            <param name="include">The include.</param>
            <returns>List&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.ReadExpressionCommandExtensions.LoadSelect``2(System.Data.IDbCommand,ServiceStack.OrmLite.SqlExpression{``1},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Loads the select.
            </summary>
            <typeparam name="Into">The type of the into.</typeparam>
            <typeparam name="From">The type of from.</typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="expression">The expression.</param>
            <param name="include">The include.</param>
            <returns>List&lt;Into&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.ReadExpressionCommandExtensions.LoadSelect``1(System.Data.IDbCommand,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Loads the select.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="predicate">The predicate.</param>
            <param name="include">The include.</param>
            <returns>List&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.ReadExpressionCommandExtensions.GetSchemaTable(System.Data.IDbCommand,System.String)">
            <summary>
            Gets the schema table.
            </summary>
            <param name="dbCmd">The database command.</param>
            <param name="sql">The SQL.</param>
            <returns>DataTable.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.ReadExpressionCommandExtensions.GetTableColumns(System.Data.IDbCommand,System.Type)">
            <summary>
            Gets the table columns.
            </summary>
            <param name="dbCmd">The database command.</param>
            <param name="table">The table.</param>
            <returns>ColumnSchema[].</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.ReadExpressionCommandExtensions.GetTableColumns(System.Data.IDbCommand,System.String)">
            <summary>
            Gets the table columns.
            </summary>
            <param name="dbCmd">The database command.</param>
            <param name="sql">The SQL.</param>
            <returns>ColumnSchema[].</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.ReadExpressionCommandExtensions.ToColumnSchemas(System.Data.DataTable,System.Data.IDbCommand)">
            <summary>
            Converts to columnschemas.
            </summary>
            <param name="dt">The dt.</param>
            <param name="dbCmd">The database command.</param>
            <returns>ColumnSchema[].</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Sql">
            <summary>
            Class SQL.
            </summary>
            <summary>
            SQL Server 2016 specific features
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Sql.VARCHAR">
            <summary>
            The varchar
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Sql.Flatten(System.Collections.IEnumerable)">
            <summary>
            Flattens the specified list.
            </summary>
            <param name="list">The list.</param>
            <returns>List&lt;System.Object&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Sql.In``2(``0,``1[])">
            <summary>
            Ins the specified value.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TItem">The type of the t item.</typeparam>
            <param name="value">The value.</param>
            <param name="list">The list.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Sql.In``2(``0,ServiceStack.OrmLite.SqlExpression{``1})">
            <summary>
            Ins the specified value.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TItem">The type of the t item.</typeparam>
            <param name="value">The value.</param>
            <param name="query">The query.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Sql.Asc``1(``0)">
            <summary>
            Ascs the specified value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The value.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Sql.Desc``1(``0)">
            <summary>
            Descs the specified value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The value.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Sql.As``1(``0,System.Object)">
            <summary>
            Ases the specified value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The value.</param>
            <param name="asValue">As value.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Sql.Sum``1(``0)">
            <summary>
            Sums the specified value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The value.</param>
            <returns>T.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Sql.Sum(System.String)">
            <summary>
            Sums the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Sql.Count``1(``0)">
            <summary>
            Counts the specified value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The value.</param>
            <returns>T.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Sql.CountDistinct``1(``0)">
            <summary>
            Counts the distinct.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The value.</param>
            <returns>T.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Sql.Count(System.String)">
            <summary>
            Counts the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Sql.Min``1(``0)">
            <summary>
            Determines the minimum of the parameters.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The value.</param>
            <returns>T.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Sql.Min(System.String)">
            <summary>
            Determines the minimum of the parameters.
            </summary>
            <param name="value">The value.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Sql.Max``1(``0)">
            <summary>
            Determines the maximum of the parameters.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The value.</param>
            <returns>T.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Sql.Max(System.String)">
            <summary>
            Determines the maximum of the parameters.
            </summary>
            <param name="value">The value.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Sql.Avg``1(``0)">
            <summary>
            Averages the specified value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The value.</param>
            <returns>T.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Sql.Avg(System.String)">
            <summary>
            Averages the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Sql.AllFields``1(``0)">
            <summary>
            Alls the fields.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="item">The item.</param>
            <returns>T.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Sql.JoinAlias(System.String,System.String)">
            <summary>
            Joins the alias.
            </summary>
            <param name="property">The property.</param>
            <param name="tableAlias">The table alias.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Sql.TableAlias(System.String,System.String)">
            <summary>
            Tables the alias.
            </summary>
            <param name="property">The property.</param>
            <param name="tableAlias">The table alias.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Sql.JoinAlias``1(``0,System.String)">
            <summary>
            Joins the alias.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="property">The property.</param>
            <param name="tableAlias">The table alias.</param>
            <returns>T.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Sql.TableAlias``1(``0,System.String)">
            <summary>
            Tables the alias.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="property">The property.</param>
            <param name="tableAlias">The table alias.</param>
            <returns>T.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Sql.Custom(System.String)">
            <summary>
            Customs the specified custom SQL.
            </summary>
            <param name="customSql">The custom SQL.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Sql.Custom``1(System.String)">
            <summary>
            Customs the specified custom SQL.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="customSql">The custom SQL.</param>
            <returns>T.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Sql.Cast(System.Object,System.String)">
            <summary>
            Casts the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="castAs">The cast as.</param>
            <returns>System.String.</returns>
        </member>
        <member name="F:ServiceStack.OrmLite.Sql.EOT">
            <summary>
            The eot
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Sql.IsJson(System.String)">
            <summary>Tests whether a string contains valid JSON.</summary>
            <param name="expression">The string to test.</param>
            <returns>Returns True if the string contains valid JSON; otherwise, returns False. Returns null if expression is null.</returns>
            <remarks>ISJSON does not check the uniqueness of keys at the same level.</remarks>
            <see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/isjson-transact-sql"/>
        </member>
        <member name="M:ServiceStack.OrmLite.Sql.JsonValue``1(System.String,System.String)">
            <summary>Extracts a scalar value from a JSON string.</summary>
            <param name="expression">
            An expression. Typically the name of a variable or a column that contains JSON text.<br/><br/>
            If <b>JSON_VALUE</b> finds JSON that is not valid in expression before it finds the value identified by <i>path</i>, the function returns an error. If <b>JSON_VALUE</b> doesn't find the value identified by <i>path</i>, it scans the entire text and returns an error if it finds JSON that is not valid anywhere in <i>expression</i>.
            </param>
            <param name="path">
            A JSON path that specifies the property to extract. For more info, see <see href="https://docs.microsoft.com/en-us/sql/relational-databases/json/json-path-expressions-sql-server">JSON Path Expressions (SQL Server)</see>.<br/><br/>
            In SQL Server 2017 and in Azure SQL Database, you can provide a variable as the value of <i>path</i>.<br/><br/>
            If the format of path isn't valid, <b>JSON_VALUE</b> returns an error.<br/><br/>
            </param>
            <returns>
            Returns a single text value of type nvarchar(4000). The collation of the returned value is the same as the collation of the input expression.
            If the value is greater than 4000 characters: <br/><br/>
            <ul>
            <li>In lax mode, <b>JSON_VALUE</b> returns null.</li>
            <li>In strict mode, <b>JSON_VALUE</b> returns an error.</li>
            </ul>
            <br/>
            If you have to return scalar values greater than 4000 characters, use <b>OPENJSON</b> instead of <b>JSON_VALUE</b>. For more info, see <see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/openjson-transact-sql">OPENJSON (Transact-SQL)</see>.
            </returns>
            <see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/json-value-transact-sql"/>
        </member>
        <member name="M:ServiceStack.OrmLite.Sql.JsonValue(System.String,System.String)">
            <summary>Extracts a scalar value from a JSON string.</summary>
            <param name="expression">
            An expression. Typically the name of a variable or a column that contains JSON text.<br/><br/>
            If <b>JSON_VALUE</b> finds JSON that is not valid in expression before it finds the value identified by <i>path</i>, the function returns an error. If <b>JSON_VALUE</b> doesn't find the value identified by <i>path</i>, it scans the entire text and returns an error if it finds JSON that is not valid anywhere in <i>expression</i>.
            </param>
            <param name="path">
            A JSON path that specifies the property to extract. For more info, see <see href="https://docs.microsoft.com/en-us/sql/relational-databases/json/json-path-expressions-sql-server">JSON Path Expressions (SQL Server)</see>.<br/><br/>
            In SQL Server 2017 and in Azure SQL Database, you can provide a variable as the value of <i>path</i>.<br/><br/>
            If the format of path isn't valid, <b>JSON_VALUE</b> returns an error.<br/><br/>
            </param>
            <returns>
            Returns a single text value of type nvarchar(4000). The collation of the returned value is the same as the collation of the input expression.
            If the value is greater than 4000 characters: <br/><br/>
            <ul>
            <li>In lax mode, <b>JSON_VALUE</b> returns null.</li>
            <li>In strict mode, <b>JSON_VALUE</b> returns an error.</li>
            </ul>
            <br/>
            If you have to return scalar values greater than 4000 characters, use <b>OPENJSON</b> instead of <b>JSON_VALUE</b>. For more info, see <see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/openjson-transact-sql">OPENJSON (Transact-SQL)</see>.
            </returns>
            <see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/json-value-transact-sql"/>
        </member>
        <member name="M:ServiceStack.OrmLite.Sql.JsonQuery(System.String)">
            <summary>
            Extracts an object or an array from a JSON string.<br/><br/>
            To extract a scalar value from a JSON string instead of an object or an array, see <see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/json-value-transact-sql">JSON_VALUE(Transact-SQL)</see>.
            For info about the differences between <b>JSON_VALUE</b> and <b>JSON_QUERY</b>, see <see href="https://docs.microsoft.com/en-us/sql/relational-databases/json/validate-query-and-change-json-data-with-built-in-functions-sql-server#JSONCompare">Compare JSON_VALUE and JSON_QUERY</see>.
            </summary>
            <param name="expression">
            An expression. Typically the name of a variable or a column that contains JSON text.<br/><br/>
            If <b>JSON_QUERY</b> finds JSON that is not valid in <i>expression</i> before it finds the value identified by <i>path</i>, the function returns an error. If <b>JSON_QUERY</b> doesn't find the value identified by <i>path</i>, it scans the entire text and returns an error if it finds JSON that is not valid anywhere in <i>expression</i>.
            </param>
            A JSON path that specifies the object or the array to extract.<br/><br/>
            In SQL Server 2017 and in Azure SQL Database, you can provide a variable as the value of <i>path</i>.<br/><br/>
            The JSON path can specify lax or strict mode for parsing.If you don't specify the parsing mode, lax mode is the default. For more info, see <see href="https://docs.microsoft.com/en-us/sql/relational-databases/json/json-path-expressions-sql-server">JSON Path Expressions (SQL Server)</see>.<br/><br/>
            The default value for path is '$'. As a result, if you don't provide a value for path, <b>JSON_QUERY</b> returns the input <i>expression</i>.<br/><br/>
            If the format of <i>path</i> isn't valid, <b>JSON_QUERY</b> returns an error.
            <returns>
            Returns a JSON fragment of type T. The collation of the returned value is the same as the collation of the input expression.<br/><br/>
            If the value is not an object or an array:
            <ul>
            <li>In lax mode, <b>JSON_QUERY</b> returns null.</li>
            <li>In strict mode, <b>JSON_QUERY</b> returns an error.</li>
            </ul>
            </returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Sql.JsonQuery``1(System.String)">
            <summary>
            Jsons the query.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="expression">The expression.</param>
            <returns>T.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Sql.JsonQuery(System.String,System.String)">
            <summary>
            SQL Server 2017+
            Jsons the query.
            </summary>
            <param name="expression">The expression.</param>
            <param name="path">The path.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Sql.JsonQuery``1(System.String,System.String)">
            <summary>
             SQL Server 2017+
            Jsons the query.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="expression">The expression.</param>
            <param name="path">The path.</param>
            <returns>T.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.SqlExpression`1">
            <summary>
            Class SqlExpression.
            Implements the <see cref="T:ServiceStack.OrmLite.ISqlExpression" />
            Implements the <see cref="T:ServiceStack.OrmLite.IHasUntypedSqlExpression" />
            Implements the <see cref="T:ServiceStack.OrmLite.IHasDialectProvider" />
            </summary>
            <typeparam name="T"></typeparam>
            <seealso cref="T:ServiceStack.OrmLite.ISqlExpression" />
            <seealso cref="T:ServiceStack.OrmLite.IHasUntypedSqlExpression" />
            <seealso cref="T:ServiceStack.OrmLite.IHasDialectProvider" />
            <summary>
            Class SqlExpression.
            Implements the <see cref="T:ServiceStack.OrmLite.ISqlExpression" />
            Implements the <see cref="T:ServiceStack.OrmLite.IHasUntypedSqlExpression" />
            Implements the <see cref="T:ServiceStack.OrmLite.IHasDialectProvider" />
            </summary>
            <seealso cref="T:ServiceStack.OrmLite.ISqlExpression" />
            <seealso cref="T:ServiceStack.OrmLite.IHasUntypedSqlExpression" />
            <seealso cref="T:ServiceStack.OrmLite.IHasDialectProvider" />
        </member>
        <member name="F:ServiceStack.OrmLite.SqlExpression`1.TrueLiteral">
            <summary>
            The true literal
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.SqlExpression`1.FalseLiteral">
            <summary>
            The false literal
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.SqlExpression`1.underlyingExpression">
            <summary>
            The underlying expression
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.SqlExpression`1.orderByProperties">
            <summary>
            The order by properties
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.SqlExpression`1.selectExpression">
            <summary>
            The select expression
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.SqlExpression`1.fromExpression">
            <summary>
            From expression
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.SqlExpression`1.orderBy">
            <summary>
            The order by
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.SqlExpression`1.OnlyFields">
            <summary>
            Gets or sets the only fields.
            </summary>
            <value>The only fields.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.SqlExpression`1.UpdateFields">
            <summary>
            Gets or sets the update fields.
            </summary>
            <value>The update fields.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.SqlExpression`1.InsertFields">
            <summary>
            Gets or sets the insert fields.
            </summary>
            <value>The insert fields.</value>
        </member>
        <member name="F:ServiceStack.OrmLite.SqlExpression`1.modelDef">
            <summary>
            The model definition
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.SqlExpression`1.TableAlias">
            <summary>
            Gets or sets the table alias.
            </summary>
            <value>The table alias.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.SqlExpression`1.DialectProvider">
            <summary>
            Gets or sets the dialect provider.
            </summary>
            <value>The dialect provider.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.SqlExpression`1.Params">
            <summary>
            Gets or sets the parameters.
            </summary>
            <value>The parameters.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.SqlExpression`1.SqlFilter">
            <summary>
            Gets or sets the SQL filter.
            </summary>
            <value>The SQL filter.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.SqlExpression`1.SelectFilter">
            <summary>
            Gets or sets the select filter.
            </summary>
            <value>The select filter.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.SqlExpression`1.Rows">
            <summary>
            Gets or sets the rows.
            </summary>
            <value>The rows.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.SqlExpression`1.Offset">
            <summary>
            Gets or sets the offset.
            </summary>
            <value>The offset.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.SqlExpression`1.PrefixFieldWithTableName">
            <summary>
            Gets or sets the name of the prefix field with table.
            </summary>
            <value>The name of the prefix field with table.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.SqlExpression`1.UseSelectPropertiesAsAliases">
            <summary>
            Gets or sets the use select properties as aliases.
            </summary>
            <value>The use select properties as aliases.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.SqlExpression`1.UseJoinTypeAsAliases">
            <summary>
            Gets or sets the use join type as aliases.
            </summary>
            <value>The use join type as aliases.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.SqlExpression`1.WhereStatementWithoutWhereString">
            <summary>
            Gets or sets the where statement without where string.
            </summary>
            <value>The where statement without where string.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.SqlExpression`1.Tags">
            <summary>
            Gets the tags.
            </summary>
            <value>The tags.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.SqlExpression`1.AllowEscapeWildcards">
            <summary>
            Gets or sets the allow escape wildcards.
            </summary>
            <value>The allow escape wildcards.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.SqlExpression`1.CustomSelect">
            <summary>
            Gets or sets the custom select.
            </summary>
            <value>The custom select.</value>
        </member>
        <member name="F:ServiceStack.OrmLite.SqlExpression`1.useFieldName">
            <summary>
            The use field name
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.SqlExpression`1.selectDistinct">
            <summary>
            The select distinct
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.SqlExpression`1.skipParameterizationForThisExpression">
            <summary>
            The skip parameterization for this expression
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.SqlExpression`1.hasEnsureConditions">
            <summary>
            The has ensure conditions
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.SqlExpression`1.inSqlMethodCall">
            <summary>
            The in SQL method call
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.SqlExpression`1.Sep">
            <summary>
            Gets the sep.
            </summary>
            <value>The sep.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.#ctor(ServiceStack.OrmLite.IOrmLiteDialectProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.OrmLite.SqlExpression`1" /> class.
            </summary>
            <param name="dialectProvider">The dialect provider.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.AddTag(System.String)">
            <summary>
            Adds the tag.
            </summary>
            <param name="tag">The tag.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.CopyTo(ServiceStack.OrmLite.SqlExpression{`0})">
            <summary>
            Copies to.
            </summary>
            <param name="to">To.</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.ComputeHash(System.Boolean)">
            <summary>
            Generate a unique SHA1 hash of expression with param values for caching
            </summary>
            <param name="includeParams">The include parameters.</param>
            <returns>string.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.Dump(System.Boolean)">
            <summary>
            Dump internal state of this SqlExpression into a string
            </summary>
            <param name="includeParams">The include parameters.</param>
            <returns>string.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.Select">
            <summary>
            Clear select expression. All properties will be selected.
            </summary>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.SelectIfDistinct(System.String)">
            <summary>
            Selects if distinct.
            </summary>
            <param name="selectExpression">The select expression.</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.Select(System.String)">
            <summary>
            set the specified selectExpression.
            </summary>
            <param name="selectExpression">raw Select expression: "SomeField1, SomeField2 from SomeTable"</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.SelectDistinct(System.String)">
            <summary>
            set the specified DISTINCT selectExpression.
            </summary>
            <param name="selectExpression">raw Select expression: "SomeField1, SomeField2 from SomeTable"</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.UnsafeSelect(System.String)">
            <summary>
            Unsafes the select.
            </summary>
            <param name="rawSelect">The raw select.</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.UnsafeSelect(System.String,System.Boolean)">
            <summary>
            Unsafes the select.
            </summary>
            <param name="rawSelect">The raw select.</param>
            <param name="distinct">The distinct.</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.Select(System.String[])">
            <summary>
            Set the specified selectExpression using matching fields.
            </summary>
            <param name="fields">Matching Fields: "SomeField1, SomeField2"</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.SelectDistinct(System.String[])">
            <summary>
            Set the specified DISTINCT selectExpression using matching fields.
            </summary>
            <param name="fields">Matching Fields: "SomeField1, SomeField2"</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.Select(System.String[],System.Boolean)">
            <summary>
            Selects the specified fields.
            </summary>
            <param name="fields">The fields.</param>
            <param name="distinct">The distinct.</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.InternalSelect(System.Linq.Expressions.Expression,System.Boolean)">
            <summary>
            Internals the select.
            </summary>
            <param name="fields">The fields.</param>
            <param name="distinct">The distinct.</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.Select(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Fields to be selected.
            </summary>
            <param name="fields">x=&gt; x.SomeProperty1 or x=&gt; new{ x.SomeProperty1, x.SomeProperty2}</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.Select``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Selects the specified fields.
            </summary>
            <typeparam name="Table1">The type of the table1.</typeparam>
            <param name="fields">The fields.</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.Select``2(System.Linq.Expressions.Expression{System.Func{``0,``1,System.Object}})">
            <summary>
            Selects the specified fields.
            </summary>
            <typeparam name="Table1">The type of the table1.</typeparam>
            <typeparam name="Table2">The type of the table2.</typeparam>
            <param name="fields">The fields.</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.Select``3(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,System.Object}})">
            <summary>
            Selects the specified fields.
            </summary>
            <typeparam name="Table1">The type of the table1.</typeparam>
            <typeparam name="Table2">The type of the table2.</typeparam>
            <typeparam name="Table3">The type of the table3.</typeparam>
            <param name="fields">The fields.</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.Select``4(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,System.Object}})">
            <summary>
            Selects the specified fields.
            </summary>
            <typeparam name="Table1">The type of the table1.</typeparam>
            <typeparam name="Table2">The type of the table2.</typeparam>
            <typeparam name="Table3">The type of the table3.</typeparam>
            <typeparam name="Table4">The type of the table4.</typeparam>
            <param name="fields">The fields.</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.Select``5(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,System.Object}})">
            <summary>
            Selects the specified fields.
            </summary>
            <typeparam name="Table1">The type of the table1.</typeparam>
            <typeparam name="Table2">The type of the table2.</typeparam>
            <typeparam name="Table3">The type of the table3.</typeparam>
            <typeparam name="Table4">The type of the table4.</typeparam>
            <typeparam name="Table5">The type of the table5.</typeparam>
            <param name="fields">The fields.</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.Select``6(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,System.Object}})">
            <summary>
            Selects the specified fields.
            </summary>
            <typeparam name="Table1">The type of the table1.</typeparam>
            <typeparam name="Table2">The type of the table2.</typeparam>
            <typeparam name="Table3">The type of the table3.</typeparam>
            <typeparam name="Table4">The type of the table4.</typeparam>
            <typeparam name="Table5">The type of the table5.</typeparam>
            <typeparam name="Table6">The type of the table6.</typeparam>
            <param name="fields">The fields.</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.Select``7(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,System.Object}})">
            <summary>
            Selects the specified fields.
            </summary>
            <typeparam name="Table1">The type of the table1.</typeparam>
            <typeparam name="Table2">The type of the table2.</typeparam>
            <typeparam name="Table3">The type of the table3.</typeparam>
            <typeparam name="Table4">The type of the table4.</typeparam>
            <typeparam name="Table5">The type of the table5.</typeparam>
            <typeparam name="Table6">The type of the table6.</typeparam>
            <typeparam name="Table7">The type of the table7.</typeparam>
            <param name="fields">The fields.</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.Select``8(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,System.Object}})">
            <summary>
            Selects the specified fields.
            </summary>
            <typeparam name="Table1">The type of the table1.</typeparam>
            <typeparam name="Table2">The type of the table2.</typeparam>
            <typeparam name="Table3">The type of the table3.</typeparam>
            <typeparam name="Table4">The type of the table4.</typeparam>
            <typeparam name="Table5">The type of the table5.</typeparam>
            <typeparam name="Table6">The type of the table6.</typeparam>
            <typeparam name="Table7">The type of the table7.</typeparam>
            <typeparam name="Table8">The type of the table8.</typeparam>
            <param name="fields">The fields.</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.Select``9(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,System.Object}})">
            <summary>
            Selects the specified fields.
            </summary>
            <typeparam name="Table1">The type of the table1.</typeparam>
            <typeparam name="Table2">The type of the table2.</typeparam>
            <typeparam name="Table3">The type of the table3.</typeparam>
            <typeparam name="Table4">The type of the table4.</typeparam>
            <typeparam name="Table5">The type of the table5.</typeparam>
            <typeparam name="Table6">The type of the table6.</typeparam>
            <typeparam name="Table7">The type of the table7.</typeparam>
            <typeparam name="Table8">The type of the table8.</typeparam>
            <typeparam name="Table9">The type of the table9.</typeparam>
            <param name="fields">The fields.</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.Select``10(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.Object}})">
            <summary>
            Selects the specified fields.
            </summary>
            <typeparam name="Table1">The type of the table1.</typeparam>
            <typeparam name="Table2">The type of the table2.</typeparam>
            <typeparam name="Table3">The type of the table3.</typeparam>
            <typeparam name="Table4">The type of the table4.</typeparam>
            <typeparam name="Table5">The type of the table5.</typeparam>
            <typeparam name="Table6">The type of the table6.</typeparam>
            <typeparam name="Table7">The type of the table7.</typeparam>
            <typeparam name="Table8">The type of the table8.</typeparam>
            <typeparam name="Table9">The type of the table9.</typeparam>
            <typeparam name="Table10">The type of the table10.</typeparam>
            <param name="fields">The fields.</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.Select``11(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,System.Object}})">
            <summary>
            Selects the specified fields.
            </summary>
            <typeparam name="Table1">The type of the table1.</typeparam>
            <typeparam name="Table2">The type of the table2.</typeparam>
            <typeparam name="Table3">The type of the table3.</typeparam>
            <typeparam name="Table4">The type of the table4.</typeparam>
            <typeparam name="Table5">The type of the table5.</typeparam>
            <typeparam name="Table6">The type of the table6.</typeparam>
            <typeparam name="Table7">The type of the table7.</typeparam>
            <typeparam name="Table8">The type of the table8.</typeparam>
            <typeparam name="Table9">The type of the table9.</typeparam>
            <typeparam name="Table10">The type of the table10.</typeparam>
            <typeparam name="Table11">The type of the table11.</typeparam>
            <param name="fields">The fields.</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.Select``12(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,System.Object}})">
            <summary>
            Selects the specified fields.
            </summary>
            <typeparam name="Table1">The type of the table1.</typeparam>
            <typeparam name="Table2">The type of the table2.</typeparam>
            <typeparam name="Table3">The type of the table3.</typeparam>
            <typeparam name="Table4">The type of the table4.</typeparam>
            <typeparam name="Table5">The type of the table5.</typeparam>
            <typeparam name="Table6">The type of the table6.</typeparam>
            <typeparam name="Table7">The type of the table7.</typeparam>
            <typeparam name="Table8">The type of the table8.</typeparam>
            <typeparam name="Table9">The type of the table9.</typeparam>
            <typeparam name="Table10">The type of the table10.</typeparam>
            <typeparam name="Table11">The type of the table11.</typeparam>
            <typeparam name="Table12">The type of the table12.</typeparam>
            <param name="fields">The fields.</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.SelectDistinct(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Selects the distinct.
            </summary>
            <param name="fields">The fields.</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.SelectDistinct``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Selects the distinct.
            </summary>
            <typeparam name="Table1">The type of the table1.</typeparam>
            <param name="fields">The fields.</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.SelectDistinct``2(System.Linq.Expressions.Expression{System.Func{``0,``1,System.Object}})">
            <summary>
            Selects the distinct.
            </summary>
            <typeparam name="Table1">The type of the table1.</typeparam>
            <typeparam name="Table2">The type of the table2.</typeparam>
            <param name="fields">The fields.</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.SelectDistinct``3(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,System.Object}})">
            <summary>
            Selects the distinct.
            </summary>
            <typeparam name="Table1">The type of the table1.</typeparam>
            <typeparam name="Table2">The type of the table2.</typeparam>
            <typeparam name="Table3">The type of the table3.</typeparam>
            <param name="fields">The fields.</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.SelectDistinct``4(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,System.Object}})">
            <summary>
            Selects the distinct.
            </summary>
            <typeparam name="Table1">The type of the table1.</typeparam>
            <typeparam name="Table2">The type of the table2.</typeparam>
            <typeparam name="Table3">The type of the table3.</typeparam>
            <typeparam name="Table4">The type of the table4.</typeparam>
            <param name="fields">The fields.</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.SelectDistinct``5(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,System.Object}})">
            <summary>
            Selects the distinct.
            </summary>
            <typeparam name="Table1">The type of the table1.</typeparam>
            <typeparam name="Table2">The type of the table2.</typeparam>
            <typeparam name="Table3">The type of the table3.</typeparam>
            <typeparam name="Table4">The type of the table4.</typeparam>
            <typeparam name="Table5">The type of the table5.</typeparam>
            <param name="fields">The fields.</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.SelectDistinct``6(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,System.Object}})">
            <summary>
            Selects the distinct.
            </summary>
            <typeparam name="Table1">The type of the table1.</typeparam>
            <typeparam name="Table2">The type of the table2.</typeparam>
            <typeparam name="Table3">The type of the table3.</typeparam>
            <typeparam name="Table4">The type of the table4.</typeparam>
            <typeparam name="Table5">The type of the table5.</typeparam>
            <typeparam name="Table6">The type of the table6.</typeparam>
            <param name="fields">The fields.</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.SelectDistinct``7(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,System.Object}})">
            <summary>
            Selects the distinct.
            </summary>
            <typeparam name="Table1">The type of the table1.</typeparam>
            <typeparam name="Table2">The type of the table2.</typeparam>
            <typeparam name="Table3">The type of the table3.</typeparam>
            <typeparam name="Table4">The type of the table4.</typeparam>
            <typeparam name="Table5">The type of the table5.</typeparam>
            <typeparam name="Table6">The type of the table6.</typeparam>
            <typeparam name="Table7">The type of the table7.</typeparam>
            <param name="fields">The fields.</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.SelectDistinct``8(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,System.Object}})">
            <summary>
            Selects the distinct.
            </summary>
            <typeparam name="Table1">The type of the table1.</typeparam>
            <typeparam name="Table2">The type of the table2.</typeparam>
            <typeparam name="Table3">The type of the table3.</typeparam>
            <typeparam name="Table4">The type of the table4.</typeparam>
            <typeparam name="Table5">The type of the table5.</typeparam>
            <typeparam name="Table6">The type of the table6.</typeparam>
            <typeparam name="Table7">The type of the table7.</typeparam>
            <typeparam name="Table8">The type of the table8.</typeparam>
            <param name="fields">The fields.</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.SelectDistinct``9(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,System.Object}})">
            <summary>
            Selects the distinct.
            </summary>
            <typeparam name="Table1">The type of the table1.</typeparam>
            <typeparam name="Table2">The type of the table2.</typeparam>
            <typeparam name="Table3">The type of the table3.</typeparam>
            <typeparam name="Table4">The type of the table4.</typeparam>
            <typeparam name="Table5">The type of the table5.</typeparam>
            <typeparam name="Table6">The type of the table6.</typeparam>
            <typeparam name="Table7">The type of the table7.</typeparam>
            <typeparam name="Table8">The type of the table8.</typeparam>
            <typeparam name="Table9">The type of the table9.</typeparam>
            <param name="fields">The fields.</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.SelectDistinct``10(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.Object}})">
            <summary>
            Selects the distinct.
            </summary>
            <typeparam name="Table1">The type of the table1.</typeparam>
            <typeparam name="Table2">The type of the table2.</typeparam>
            <typeparam name="Table3">The type of the table3.</typeparam>
            <typeparam name="Table4">The type of the table4.</typeparam>
            <typeparam name="Table5">The type of the table5.</typeparam>
            <typeparam name="Table6">The type of the table6.</typeparam>
            <typeparam name="Table7">The type of the table7.</typeparam>
            <typeparam name="Table8">The type of the table8.</typeparam>
            <typeparam name="Table9">The type of the table9.</typeparam>
            <typeparam name="Table10">The type of the table10.</typeparam>
            <param name="fields">The fields.</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.SelectDistinct``11(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,System.Object}})">
            <summary>
            Selects the distinct.
            </summary>
            <typeparam name="Table1">The type of the table1.</typeparam>
            <typeparam name="Table2">The type of the table2.</typeparam>
            <typeparam name="Table3">The type of the table3.</typeparam>
            <typeparam name="Table4">The type of the table4.</typeparam>
            <typeparam name="Table5">The type of the table5.</typeparam>
            <typeparam name="Table6">The type of the table6.</typeparam>
            <typeparam name="Table7">The type of the table7.</typeparam>
            <typeparam name="Table8">The type of the table8.</typeparam>
            <typeparam name="Table9">The type of the table9.</typeparam>
            <typeparam name="Table10">The type of the table10.</typeparam>
            <typeparam name="Table11">The type of the table11.</typeparam>
            <param name="fields">The fields.</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.SelectDistinct``12(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,System.Object}})">
            <summary>
            Selects the distinct.
            </summary>
            <typeparam name="Table1">The type of the table1.</typeparam>
            <typeparam name="Table2">The type of the table2.</typeparam>
            <typeparam name="Table3">The type of the table3.</typeparam>
            <typeparam name="Table4">The type of the table4.</typeparam>
            <typeparam name="Table5">The type of the table5.</typeparam>
            <typeparam name="Table6">The type of the table6.</typeparam>
            <typeparam name="Table7">The type of the table7.</typeparam>
            <typeparam name="Table8">The type of the table8.</typeparam>
            <typeparam name="Table9">The type of the table9.</typeparam>
            <typeparam name="Table10">The type of the table10.</typeparam>
            <typeparam name="Table11">The type of the table11.</typeparam>
            <typeparam name="Table12">The type of the table12.</typeparam>
            <param name="fields">The fields.</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.SelectDistinct">
            <summary>
            Selects the distinct.
            </summary>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.From(System.String)">
            <summary>
            Froms the specified tables.
            </summary>
            <param name="tables">The tables.</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.IncludeTablePrefix">
            <summary>
            Includes the table prefix.
            </summary>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.SetTableAlias(System.String)">
            <summary>
            Sets the table alias.
            </summary>
            <param name="tableAlias">The table alias.</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.UnsafeFrom(System.String)">
            <summary>
            Unsafes from.
            </summary>
            <param name="rawFrom">The raw from.</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.Where">
            <summary>
            Wheres this instance.
            </summary>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.FormatFilter(System.String,System.Object[])">
            <summary>
            Formats the filter.
            </summary>
            <param name="sqlFilter">The SQL filter.</param>
            <param name="filterParams">The filter parameters.</param>
            <returns>string.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.CreateInParamSql(System.Collections.IEnumerable)">
            <summary>
            Creates the in parameter SQL.
            </summary>
            <param name="values">The values.</param>
            <returns>string.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.UnsafeWhere(System.String,System.Object[])">
            <summary>
            Unsafes the where.
            </summary>
            <param name="rawSql">The raw SQL.</param>
            <param name="filterParams">The filter parameters.</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.Where(System.String,System.Object[])">
            <summary>
            Wheres the specified SQL filter.
            </summary>
            <param name="sqlFilter">The SQL filter.</param>
            <param name="filterParams">The filter parameters.</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.UnsafeAnd(System.String,System.Object[])">
            <summary>
            Unsafes the and.
            </summary>
            <param name="rawSql">The raw SQL.</param>
            <param name="filterParams">The filter parameters.</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.And(System.String,System.Object[])">
            <summary>
            Ands the specified SQL filter.
            </summary>
            <param name="sqlFilter">The SQL filter.</param>
            <param name="filterParams">The filter parameters.</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.UnsafeOr(System.String,System.Object[])">
            <summary>
            Unsafes the or.
            </summary>
            <param name="rawSql">The raw SQL.</param>
            <param name="filterParams">The filter parameters.</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.Or(System.String,System.Object[])">
            <summary>
            Ors the specified SQL filter.
            </summary>
            <param name="sqlFilter">The SQL filter.</param>
            <param name="filterParams">The filter parameters.</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.AddCondition(System.String,System.String,System.Object[])">
            <summary>
            Adds the condition.
            </summary>
            <param name="condition">The condition.</param>
            <param name="sqlFilter">The SQL filter.</param>
            <param name="filterParams">The filter parameters.</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Wheres the specified predicate.
            </summary>
            <param name="predicate">The predicate.</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Object[])">
            <summary>
            Wheres the specified predicate.
            </summary>
            <param name="predicate">The predicate.</param>
            <param name="filterParams">The filter parameters.</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.And(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Ands the specified predicate.
            </summary>
            <param name="predicate">The predicate.</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.And(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Object[])">
            <summary>
            Ands the specified predicate.
            </summary>
            <param name="predicate">The predicate.</param>
            <param name="filterParams">The filter parameters.</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.Or(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Ors the specified predicate.
            </summary>
            <param name="predicate">The predicate.</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.Or(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Object[])">
            <summary>
            Ors the specified predicate.
            </summary>
            <param name="predicate">The predicate.</param>
            <param name="filterParams">The filter parameters.</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.WhereExists(ServiceStack.OrmLite.ISqlExpression)">
            <summary>
            Wheres the exists.
            </summary>
            <param name="subSelect">The sub select.</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.WhereNotExists(ServiceStack.OrmLite.ISqlExpression)">
            <summary>
            Wheres the not exists.
            </summary>
            <param name="subSelect">The sub select.</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="F:ServiceStack.OrmLite.SqlExpression`1.originalLambda">
            <summary>
            The original lambda
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.Reset(System.String,System.Boolean)">
            <summary>
            Resets the specified sep.
            </summary>
            <param name="sep">The sep.</param>
            <param name="useFieldName">Name of the use field.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.AppendToWhere(System.String,System.Linq.Expressions.Expression,System.Object[])">
            <summary>
            Appends to where.
            </summary>
            <param name="condition">The condition.</param>
            <param name="predicate">The predicate.</param>
            <param name="filterParams">The filter parameters.</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.AppendToWhere(System.String,System.Linq.Expressions.Expression)">
            <summary>
            Appends to where.
            </summary>
            <param name="condition">The condition.</param>
            <param name="predicate">The predicate.</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.WhereExpressionToString(System.Object)">
            <summary>
            Wheres the expression to string.
            </summary>
            <param name="expression">The expression.</param>
            <returns>string.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.AppendToWhere(System.String,System.String)">
            <summary>
            Appends to where.
            </summary>
            <param name="condition">The condition.</param>
            <param name="sqlExpression">The SQL expression.</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
            <exception cref="T:System.NotSupportedException">Invalid whereExpression Expression with Ensure Conditions</exception>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.Ensure(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Ensures the specified predicate.
            </summary>
            <param name="predicate">The predicate.</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.Ensure``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Ensures the specified predicate.
            </summary>
            <typeparam name="Target">The type of the target.</typeparam>
            <param name="predicate">The predicate.</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.Ensure``2(System.Linq.Expressions.Expression{System.Func{``0,``1,System.Boolean}})">
            <summary>
            Ensures the specified predicate.
            </summary>
            <typeparam name="Source">The type of the source.</typeparam>
            <typeparam name="Target">The type of the target.</typeparam>
            <param name="predicate">The predicate.</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.Ensure``3(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,System.Boolean}})">
            <summary>
            Ensures the specified predicate.
            </summary>
            <typeparam name="T1">The type of the t1.</typeparam>
            <typeparam name="T2">The type of the t2.</typeparam>
            <typeparam name="T3">The type of the t3.</typeparam>
            <param name="predicate">The predicate.</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.Ensure``4(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,System.Boolean}})">
            <summary>
            Ensures the specified predicate.
            </summary>
            <typeparam name="T1">The type of the t1.</typeparam>
            <typeparam name="T2">The type of the t2.</typeparam>
            <typeparam name="T3">The type of the t3.</typeparam>
            <typeparam name="T4">The type of the t4.</typeparam>
            <param name="predicate">The predicate.</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.Ensure``5(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,System.Boolean}})">
            <summary>
            Ensures the specified predicate.
            </summary>
            <typeparam name="T1">The type of the t1.</typeparam>
            <typeparam name="T2">The type of the t2.</typeparam>
            <typeparam name="T3">The type of the t3.</typeparam>
            <typeparam name="T4">The type of the t4.</typeparam>
            <typeparam name="T5">The type of the t5.</typeparam>
            <param name="predicate">The predicate.</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.AppendToEnsure(System.Linq.Expressions.Expression)">
            <summary>
            Appends to ensure.
            </summary>
            <param name="predicate">The predicate.</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.Ensure(System.String,System.Object[])">
            <summary>
            Add a WHERE Condition to always be applied, irrespective of other WHERE conditions
            </summary>
            <param name="sqlFilter">The SQL filter.</param>
            <param name="filterParams">The filter parameters.</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
            <exception cref="T:System.NotSupportedException">Invalid whereExpression Expression with Ensure Conditions</exception>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.ListExpression(System.Linq.Expressions.Expression,System.String)">
            <summary>
            Lists the expression.
            </summary>
            <param name="expr">The expr.</param>
            <param name="strExpr">The string expr.</param>
            <returns>string.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.GroupBy">
            <summary>
            Groups the by.
            </summary>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.GroupBy(System.String)">
            <summary>
            Groups the by.
            </summary>
            <param name="groupBy">The group by.</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.UnsafeGroupBy(System.String)">
            <summary>
            Unsafes the group by.
            </summary>
            <param name="groupBy">The group by.</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.InternalGroupBy(System.Linq.Expressions.Expression)">
            <summary>
            Internals the group by.
            </summary>
            <param name="expr">The expr.</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.GroupBy``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Groups the by.
            </summary>
            <typeparam name="Table">The type of the table.</typeparam>
            <param name="keySelector">The key selector.</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.GroupBy``2(System.Linq.Expressions.Expression{System.Func{``0,``1,System.Object}})">
            <summary>
            Groups the by.
            </summary>
            <typeparam name="Table1">The type of the table1.</typeparam>
            <typeparam name="Table2">The type of the table2.</typeparam>
            <param name="keySelector">The key selector.</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.GroupBy``3(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,System.Object}})">
            <summary>
            Groups the by.
            </summary>
            <typeparam name="Table1">The type of the table1.</typeparam>
            <typeparam name="Table2">The type of the table2.</typeparam>
            <typeparam name="Table3">The type of the table3.</typeparam>
            <param name="keySelector">The key selector.</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.GroupBy``4(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,System.Object}})">
            <summary>
            Groups the by.
            </summary>
            <typeparam name="Table1">The type of the table1.</typeparam>
            <typeparam name="Table2">The type of the table2.</typeparam>
            <typeparam name="Table3">The type of the table3.</typeparam>
            <typeparam name="Table4">The type of the table4.</typeparam>
            <param name="keySelector">The key selector.</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.GroupBy(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Groups the by.
            </summary>
            <param name="keySelector">The key selector.</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.Having">
            <summary>
            Havings this instance.
            </summary>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.Having(System.String,System.Object[])">
            <summary>
            Havings the specified SQL filter.
            </summary>
            <param name="sqlFilter">The SQL filter.</param>
            <param name="filterParams">The filter parameters.</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.UnsafeHaving(System.String,System.Object[])">
            <summary>
            Unsafes the having.
            </summary>
            <param name="sqlFilter">The SQL filter.</param>
            <param name="filterParams">The filter parameters.</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.AppendHaving(System.Linq.Expressions.Expression)">
            <summary>
            Appends the having.
            </summary>
            <param name="predicate">The predicate.</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.Having(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Havings the specified predicate.
            </summary>
            <param name="predicate">The predicate.</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.Having``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Havings the specified predicate.
            </summary>
            <typeparam name="Table">The type of the table.</typeparam>
            <param name="predicate">The predicate.</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.Having``2(System.Linq.Expressions.Expression{System.Func{``0,``1,System.Boolean}})">
            <summary>
            Havings the specified predicate.
            </summary>
            <typeparam name="Table1">The type of the table1.</typeparam>
            <typeparam name="Table2">The type of the table2.</typeparam>
            <param name="predicate">The predicate.</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.Having``3(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,System.Boolean}})">
            <summary>
            Havings the specified predicate.
            </summary>
            <typeparam name="Table1">The type of the table1.</typeparam>
            <typeparam name="Table2">The type of the table2.</typeparam>
            <typeparam name="Table3">The type of the table3.</typeparam>
            <param name="predicate">The predicate.</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.OrderBy">
            <summary>
            Orders the by.
            </summary>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.OrderBy(System.String)">
            <summary>
            Orders the by.
            </summary>
            <param name="orderBy">The order by.</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.OrderBy(System.Int64)">
            <summary>
            Orders the by.
            </summary>
            <param name="columnIndex">Index of the column.</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.UnsafeOrderBy(System.String)">
            <summary>
            Unsafes the order by.
            </summary>
            <param name="orderBy">The order by.</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.OrderByRandom">
            <summary>
            Orders the by random.
            </summary>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.GetModelDefinition(ServiceStack.OrmLite.FieldDefinition)">
            <summary>
            Gets the model definition.
            </summary>
            <param name="fieldDef">The field definition.</param>
            <returns>ServiceStack.OrmLite.ModelDefinition.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.OrderByFields(System.String,ServiceStack.OrmLite.FieldDefinition[])">
            <summary>
            Orders the by fields.
            </summary>
            <param name="orderBySuffix">The order by suffix.</param>
            <param name="fields">The fields.</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.SqlExpression`1.OrderBySuffix">
            <summary>
            Class OrderBySuffix.
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.SqlExpression`1.OrderBySuffix.Asc">
            <summary>
            The asc
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.SqlExpression`1.OrderBySuffix.Desc">
            <summary>
            The desc
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.OrderByFields(ServiceStack.OrmLite.FieldDefinition[])">
            <summary>
            Orders the by fields.
            </summary>
            <param name="fields">The fields.</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.OrderByFieldsDescending(ServiceStack.OrmLite.FieldDefinition[])">
            <summary>
            Orders the by fields descending.
            </summary>
            <param name="fields">The fields.</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.OrderByFields(System.String,System.String[])">
            <summary>
            Orders the by fields.
            </summary>
            <param name="orderBySuffix">The order by suffix.</param>
            <param name="fieldNames">The field names.</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.OrderByFields(System.String[])">
            <summary>
            Orders the by fields.
            </summary>
            <param name="fieldNames">The field names.</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.OrderByFieldsDescending(System.String[])">
            <summary>
            Orders the by fields descending.
            </summary>
            <param name="fieldNames">The field names.</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.OrderBy(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Orders the by.
            </summary>
            <param name="keySelector">The key selector.</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.OrderBy``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Orders the by.
            </summary>
            <typeparam name="Table">The type of the table.</typeparam>
            <param name="fields">The fields.</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.OrderBy``2(System.Linq.Expressions.Expression{System.Func{``0,``1,System.Object}})">
            <summary>
            Orders the by.
            </summary>
            <typeparam name="Table1">The type of the table1.</typeparam>
            <typeparam name="Table2">The type of the table2.</typeparam>
            <param name="fields">The fields.</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.OrderBy``3(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,System.Object}})">
            <summary>
            Orders the by.
            </summary>
            <typeparam name="Table1">The type of the table1.</typeparam>
            <typeparam name="Table2">The type of the table2.</typeparam>
            <typeparam name="Table3">The type of the table3.</typeparam>
            <param name="fields">The fields.</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.OrderBy``4(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,System.Object}})">
            <summary>
            Orders the by.
            </summary>
            <typeparam name="Table1">The type of the table1.</typeparam>
            <typeparam name="Table2">The type of the table2.</typeparam>
            <typeparam name="Table3">The type of the table3.</typeparam>
            <typeparam name="Table4">The type of the table4.</typeparam>
            <param name="fields">The fields.</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.OrderBy``5(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,System.Object}})">
            <summary>
            Orders the by.
            </summary>
            <typeparam name="Table1">The type of the table1.</typeparam>
            <typeparam name="Table2">The type of the table2.</typeparam>
            <typeparam name="Table3">The type of the table3.</typeparam>
            <typeparam name="Table4">The type of the table4.</typeparam>
            <typeparam name="Table5">The type of the table5.</typeparam>
            <param name="fields">The fields.</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.OrderByInternal(System.Linq.Expressions.Expression)">
            <summary>
            Orders the by internal.
            </summary>
            <param name="expr">The expr.</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.IsSqlClass(System.Object)">
            <summary>
            Determines whether [is SQL class] [the specified object].
            </summary>
            <param name="obj">The object.</param>
            <returns>bool.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.ThenBy(System.String)">
            <summary>
            Thens the by.
            </summary>
            <param name="orderBy">The order by.</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.ThenBy(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Thens the by.
            </summary>
            <param name="keySelector">The key selector.</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.ThenBy``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Thens the by.
            </summary>
            <typeparam name="Table">The type of the table.</typeparam>
            <param name="fields">The fields.</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.ThenBy``2(System.Linq.Expressions.Expression{System.Func{``0,``1,System.Object}})">
            <summary>
            Thens the by.
            </summary>
            <typeparam name="Table1">The type of the table1.</typeparam>
            <typeparam name="Table2">The type of the table2.</typeparam>
            <param name="fields">The fields.</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.ThenBy``3(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,System.Object}})">
            <summary>
            Thens the by.
            </summary>
            <typeparam name="Table1">The type of the table1.</typeparam>
            <typeparam name="Table2">The type of the table2.</typeparam>
            <typeparam name="Table3">The type of the table3.</typeparam>
            <param name="fields">The fields.</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.ThenBy``4(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,System.Object}})">
            <summary>
            Thens the by.
            </summary>
            <typeparam name="Table1">The type of the table1.</typeparam>
            <typeparam name="Table2">The type of the table2.</typeparam>
            <typeparam name="Table3">The type of the table3.</typeparam>
            <typeparam name="Table4">The type of the table4.</typeparam>
            <param name="fields">The fields.</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.ThenBy``5(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,System.Object}})">
            <summary>
            Thens the by.
            </summary>
            <typeparam name="Table1">The type of the table1.</typeparam>
            <typeparam name="Table2">The type of the table2.</typeparam>
            <typeparam name="Table3">The type of the table3.</typeparam>
            <typeparam name="Table4">The type of the table4.</typeparam>
            <typeparam name="Table5">The type of the table5.</typeparam>
            <param name="fields">The fields.</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.ThenByInternal(System.Linq.Expressions.Expression)">
            <summary>
            Thens the by internal.
            </summary>
            <param name="keySelector">The key selector.</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.OrderByDescending(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Orders the by descending.
            </summary>
            <param name="keySelector">The key selector.</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.OrderByDescending``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Orders the by descending.
            </summary>
            <typeparam name="Table">The type of the table.</typeparam>
            <param name="keySelector">The key selector.</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.OrderByDescending``2(System.Linq.Expressions.Expression{System.Func{``0,``1,System.Object}})">
            <summary>
            Orders the by descending.
            </summary>
            <typeparam name="Table1">The type of the table1.</typeparam>
            <typeparam name="Table2">The type of the table2.</typeparam>
            <param name="fields">The fields.</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.OrderByDescending``3(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,System.Object}})">
            <summary>
            Orders the by descending.
            </summary>
            <typeparam name="Table1">The type of the table1.</typeparam>
            <typeparam name="Table2">The type of the table2.</typeparam>
            <typeparam name="Table3">The type of the table3.</typeparam>
            <param name="fields">The fields.</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.OrderByDescending``4(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,System.Object}})">
            <summary>
            Orders the by descending.
            </summary>
            <typeparam name="Table1">The type of the table1.</typeparam>
            <typeparam name="Table2">The type of the table2.</typeparam>
            <typeparam name="Table3">The type of the table3.</typeparam>
            <typeparam name="Table4">The type of the table4.</typeparam>
            <param name="fields">The fields.</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.OrderByDescending``5(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,System.Object}})">
            <summary>
            Orders the by descending.
            </summary>
            <typeparam name="Table1">The type of the table1.</typeparam>
            <typeparam name="Table2">The type of the table2.</typeparam>
            <typeparam name="Table3">The type of the table3.</typeparam>
            <typeparam name="Table4">The type of the table4.</typeparam>
            <typeparam name="Table5">The type of the table5.</typeparam>
            <param name="fields">The fields.</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.OrderByDescendingInternal(System.Linq.Expressions.Expression)">
            <summary>
            Orders the by descending internal.
            </summary>
            <param name="keySelector">The key selector.</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.OrderByDescending(System.String)">
            <summary>
            Orders the by descending.
            </summary>
            <param name="orderBy">The order by.</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.OrderByDescending(System.Int64)">
            <summary>
            Orders the by descending.
            </summary>
            <param name="columnIndex">Index of the column.</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.UnsafeOrderByDescending(System.String)">
            <summary>
            Unsafes the order by descending.
            </summary>
            <param name="orderBy">The order by.</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.ThenByDescending(System.String)">
            <summary>
            Thens the by descending.
            </summary>
            <param name="orderBy">The order by.</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.ThenByDescending(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Thens the by descending.
            </summary>
            <param name="keySelector">The key selector.</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.ThenByDescending``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Thens the by descending.
            </summary>
            <typeparam name="Table">The type of the table.</typeparam>
            <param name="fields">The fields.</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.ThenByDescending``2(System.Linq.Expressions.Expression{System.Func{``0,``1,System.Object}})">
            <summary>
            Thens the by descending.
            </summary>
            <typeparam name="Table1">The type of the table1.</typeparam>
            <typeparam name="Table2">The type of the table2.</typeparam>
            <param name="fields">The fields.</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.ThenByDescending``3(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,System.Object}})">
            <summary>
            Thens the by descending.
            </summary>
            <typeparam name="Table1">The type of the table1.</typeparam>
            <typeparam name="Table2">The type of the table2.</typeparam>
            <typeparam name="Table3">The type of the table3.</typeparam>
            <param name="fields">The fields.</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.ThenByDescending``4(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,System.Object}})">
            <summary>
            Thens the by descending.
            </summary>
            <typeparam name="Table1">The type of the table1.</typeparam>
            <typeparam name="Table2">The type of the table2.</typeparam>
            <typeparam name="Table3">The type of the table3.</typeparam>
            <typeparam name="Table4">The type of the table4.</typeparam>
            <param name="fields">The fields.</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.ThenByDescending``5(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,System.Object}})">
            <summary>
            Thens the by descending.
            </summary>
            <typeparam name="Table1">The type of the table1.</typeparam>
            <typeparam name="Table2">The type of the table2.</typeparam>
            <typeparam name="Table3">The type of the table3.</typeparam>
            <typeparam name="Table4">The type of the table4.</typeparam>
            <typeparam name="Table5">The type of the table5.</typeparam>
            <param name="fields">The fields.</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.ThenByDescendingInternal(System.Linq.Expressions.Expression)">
            <summary>
            Thens the by descending internal.
            </summary>
            <param name="keySelector">The key selector.</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.BuildOrderByClauseInternal">
            <summary>
            Builds the order by clause internal.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.Skip(System.Nullable{System.Int32})">
            <summary>
            Offset of the first row to return. The offset of the initial row is 0
            </summary>
            <param name="skip">The skip.</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.Take(System.Nullable{System.Int32})">
            <summary>
            Number of rows returned by a SELECT statement
            </summary>
            <param name="take">The take.</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.Limit(System.Int32,System.Int32)">
            <summary>
            Set the specified offset and rows for SQL Limit clause.
            </summary>
            <param name="skip">Offset of the first row to return. The offset of the initial row is 0</param>
            <param name="rows">Number of rows returned by a SELECT statement</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.Limit(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Set the specified offset and rows for SQL Limit clause where they exist.
            </summary>
            <param name="skip">Offset of the first row to return. The offset of the initial row is 0</param>
            <param name="rows">Number of rows returned by a SELECT statement</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.Limit(System.Int32)">
            <summary>
            Set the specified rows for Sql Limit clause.
            </summary>
            <param name="rows">Number of rows returned by a SELECT statement</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.Limit">
            <summary>
            Clear Sql Limit clause
            </summary>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.ClearLimits">
            <summary>
            Clear Offset and Limit clauses. Alias for Limit()
            </summary>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.Update(System.Collections.Generic.List{System.String})">
            <summary>
            Fields to be updated.
            </summary>
            <param name="updateFields">The update fields.</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.Update(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Fields to be updated.
            </summary>
            <param name="updateFields">The update fields.</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.Update(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Fields to be updated.
            </summary>
            <param name="fields">x=&gt; x.SomeProperty1 or x=&gt; new { x.SomeProperty1, x.SomeProperty2 }</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.Update">
            <summary>
            Clear UpdateFields list ( all fields will be updated)
            </summary>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.Insert``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Fields to be inserted.
            </summary>
            <typeparam name="TKey">objectWithProperties</typeparam>
            <param name="fields">x=&gt; x.SomeProperty1 or x=&gt; new{ x.SomeProperty1, x.SomeProperty2}</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.Insert(System.Collections.Generic.List{System.String})">
            <summary>
            fields to be inserted.
            </summary>
            <param name="insertFields">IList&lt;string&gt; containing Names of properties to be inserted</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.Insert">
            <summary>
            Clear InsertFields list ( all fields will be inserted)
            </summary>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.WithSqlFilter(System.Func{System.String,System.String})">
            <summary>
            Withes the SQL filter.
            </summary>
            <param name="sqlFilter">The SQL filter.</param>
            <returns>ServiceStack.OrmLite.SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.SqlTable(ServiceStack.OrmLite.ModelDefinition)">
            <summary>
            SQLs the table.
            </summary>
            <param name="modelDef">The model definition.</param>
            <returns>string.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.SqlColumn(System.String)">
            <summary>
            SQLs the column.
            </summary>
            <param name="columnName">Name of the column.</param>
            <returns>string.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.AddParam(System.Object)">
            <summary>
            Adds the parameter.
            </summary>
            <param name="value">The value.</param>
            <returns>System.Data.IDbDataParameter.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.ConvertToParam(System.Object)">
            <summary>
            Converts to parameter.
            </summary>
            <param name="value">The value.</param>
            <returns>string.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.CopyParamsTo(System.Data.IDbCommand)">
            <summary>
            Copies the parameters to.
            </summary>
            <param name="dbCmd">The database command.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.ToDeleteRowStatement">
            <summary>
            Converts to deleterowstatement.
            </summary>
            <returns>string.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.PrepareUpdateStatement(System.Data.IDbCommand,`0,System.Boolean)">
            <summary>
            Prepares the update statement.
            </summary>
            <param name="dbCmd">The database command.</param>
            <param name="item">The item.</param>
            <param name="excludeDefaults">The exclude defaults.</param>
            <exception cref="T:System.ArgumentException">$"No non-null or non-default values were provided for type: {typeof(T).Name}</exception>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.PrepareUpdateStatement(System.Data.IDbCommand,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Prepares the update statement.
            </summary>
            <param name="dbCmd">The database command.</param>
            <param name="updateFields">The update fields.</param>
            <exception cref="T:System.ArgumentException">$"No non-null or non-default values were provided for type: {typeof(T).Name}</exception>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.ToSelectStatement">
            <summary>
            Converts to selectstatement.
            </summary>
            <returns>string.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.ToSelectStatement(ServiceStack.OrmLite.QueryType)">
            <summary>
            Converts to selectstatement.
            </summary>
            <param name="forType">For type.</param>
            <returns>string.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.ToMergedParamsSelectStatement">
            <summary>
            Merge params into an encapsulated SQL Statement with embedded param values
            </summary>
            <returns>string.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.ToCountStatement">
            <summary>
            Converts to countstatement.
            </summary>
            <returns>string.</returns>
        </member>
        <member name="P:ServiceStack.OrmLite.SqlExpression`1.SelectExpression">
            <summary>
            Gets or sets the select expression.
            </summary>
            <value>The select expression.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.SqlExpression`1.FromExpression">
            <summary>
            Gets or sets from expression.
            </summary>
            <value>From expression.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.SqlExpression`1.BodyExpression">
            <summary>
            Gets the body expression.
            </summary>
            <value>The body expression.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.SqlExpression`1.WhereExpression">
            <summary>
            Gets or sets the where expression.
            </summary>
            <value>The where expression.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.SqlExpression`1.GroupByExpression">
            <summary>
            Gets or sets the group by expression.
            </summary>
            <value>The group by expression.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.SqlExpression`1.HavingExpression">
            <summary>
            Gets or sets the having expression.
            </summary>
            <value>The having expression.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.SqlExpression`1.OrderByExpression">
            <summary>
            Gets or sets the order by expression.
            </summary>
            <value>The order by expression.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.SqlExpression`1.ModelDef">
            <summary>
            Gets or sets the model definition.
            </summary>
            <value>The model definition.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.SqlExpression`1.UseFieldName">
            <summary>
            Gets or sets the name of the use field.
            </summary>
            <value>The name of the use field.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.Visit(System.Linq.Expressions.Expression)">
            <summary>
            Visits the specified exp.
            </summary>
            <param name="exp">The exp.</param>
            <returns>object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.VisitJoin(System.Linq.Expressions.Expression)">
            <summary>
            Visits the join.
            </summary>
            <param name="exp">The exp.</param>
            <returns>object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.VisitLambda(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Visits the lambda.
            </summary>
            <param name="lambda">The lambda.</param>
            <returns>object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.GetValue(System.Object,System.Type)">
            <summary>
            Gets the value.
            </summary>
            <param name="value">The value.</param>
            <param name="type">The type.</param>
            <returns>object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.VisitBinary(System.Linq.Expressions.BinaryExpression)">
            <summary>
            Visits the binary.
            </summary>
            <param name="b">The b.</param>
            <returns>object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.GetCoalesceExpression(System.Linq.Expressions.BinaryExpression,System.Object,System.Object)">
            <summary>
            Gets the coalesce expression.
            </summary>
            <param name="b">The b.</param>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.PreEvaluateBinary(System.Linq.Expressions.BinaryExpression,System.Object,System.Object)">
            <summary>
            Pres the evaluate binary.
            </summary>
            <param name="b">The b.</param>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>System.Linq.Expressions.BinaryExpression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.IsBooleanComparison(System.Linq.Expressions.Expression)">
            <summary>
            Determines whether the expression is the parameter inside MemberExpression which should be compared with TrueExpression.
            </summary>
            <param name="e">The e.</param>
            <returns>Returns true if the specified expression is the parameter inside MemberExpression which should be compared with TrueExpression;
            otherwise, false.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.IsParameterAccess(System.Linq.Expressions.Expression)">
            <summary>
            Determines whether the expression is the parameter.
            </summary>
            <param name="e">The e.</param>
            <returns>Returns true if the specified expression is parameter;
            otherwise, false.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.IsParameterOrConvertAccess(System.Linq.Expressions.Expression)">
            <summary>
            Determines whether the expression is a Parameter or Convert Expression.
            </summary>
            <param name="e">The e.</param>
            <returns>Returns true if the specified expression is parameter or convert;
            otherwise, false.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.IsConstantExpression(System.Linq.Expressions.Expression)">
            <summary>
            Check whether the expression is a constant expression to determine
            whether we should use the expression value instead of Column Name
            </summary>
            <param name="e">The e.</param>
            <returns>bool.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.CheckExpressionForTypes(System.Linq.Expressions.Expression,System.Linq.Expressions.ExpressionType[])">
            <summary>
            Checks the expression for types.
            </summary>
            <param name="e">The e.</param>
            <param name="types">The types.</param>
            <returns>bool.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.Swap(System.Object@,System.Object@)">
            <summary>
            Swaps the specified left.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.VisitFilter(System.String,System.Object,System.Object,System.Object@,System.Object@)">
            <summary>
            Visits the filter.
            </summary>
            <param name="operand">The operand.</param>
            <param name="originalLeft">The original left.</param>
            <param name="originalRight">The original right.</param>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.ConvertToPlaceholderAndParameter(System.Object@)">
            <summary>
            Converts to placeholder and parameter.
            </summary>
            <param name="right">The right.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.VisitMemberAccess(System.Linq.Expressions.MemberExpression)">
            <summary>
            Visits the member access.
            </summary>
            <param name="m">The m.</param>
            <returns>object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.IsTableColumn(System.Linq.Expressions.MemberExpression)">
            <summary>
            Determines whether [is table column] [the specified m].
            </summary>
            <param name="m">The m.</param>
            <returns>bool.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.GetMemberExpression(System.Linq.Expressions.MemberExpression)">
            <summary>
            Gets the member expression.
            </summary>
            <param name="m">The m.</param>
            <returns>object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.GetTableAlias(System.Linq.Expressions.MemberExpression,ServiceStack.OrmLite.ModelDefinition)">
            <summary>
            Gets the table alias.
            </summary>
            <param name="m">The m.</param>
            <param name="tableDef">the table definition.</param>
            <returns>string.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)">
            <summary>
            Visits the member initialize.
            </summary>
            <param name="exp">The exp.</param>
            <returns>object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.VisitNew(System.Linq.Expressions.NewExpression)">
            <summary>
            Visits the new.
            </summary>
            <param name="nex">The nex.</param>
            <returns>object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.IsLambdaArg(System.Linq.Expressions.Expression)">
            <summary>
            Determines whether [is lambda argument] [the specified expr].
            </summary>
            <param name="expr">The expr.</param>
            <returns>bool.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.IsLambdaArg(System.String)">
            <summary>
            Determines whether [is lambda argument] [the specified name].
            </summary>
            <param name="name">The name.</param>
            <returns>bool.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.SetAnonTypePropertyNamesForSelectExpression(System.Object,System.Linq.Expressions.Expression,System.Reflection.MemberInfo)">
            <summary>
            Sets the anon type property names for select expression.
            </summary>
            <param name="expr">The expr.</param>
            <param name="arg">The argument.</param>
            <param name="member">The member.</param>
            <returns>object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.StripAliases(ServiceStack.OrmLite.SqlExpression{`0}.SelectList)">
            <summary>
            Strips the aliases.
            </summary>
            <param name="selectList">The select list.</param>
        </member>
        <member name="T:ServiceStack.OrmLite.SqlExpression`1.SelectList">
            <summary>
            Class SelectList.
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.SqlExpression`1.SelectList.Items">
            <summary>
            The items
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.SelectList.#ctor(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.OrmLite.SqlExpression`1.SelectList" /> class.
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.SelectList.ToString">
            <summary>
            Converts to string.
            </summary>
            <returns>string.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.VisitParameter(System.Linq.Expressions.ParameterExpression)">
            <summary>
            Visits the parameter.
            </summary>
            <param name="p">The p.</param>
            <returns>object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.VisitConstant(System.Linq.Expressions.ConstantExpression)">
            <summary>
            Visits the constant.
            </summary>
            <param name="c">The c.</param>
            <returns>object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.VisitUnary(System.Linq.Expressions.UnaryExpression)">
            <summary>
            Visits the unary.
            </summary>
            <param name="u">The u.</param>
            <returns>object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.VisitIndexExpression(System.Linq.Expressions.IndexExpression)">
            <summary>
            Visits the index expression.
            </summary>
            <param name="e">The e.</param>
            <returns>object.</returns>
            <exception cref="T:System.NotImplementedException">Unknown Expression: " + e</exception>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.VisitConditional(System.Linq.Expressions.ConditionalExpression)">
            <summary>
            Visits the conditional.
            </summary>
            <param name="e">The e.</param>
            <returns>object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.GetNotValue(System.Object)">
            <summary>
            Gets the not value.
            </summary>
            <param name="o">The o.</param>
            <returns>object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.IsColumnAccess(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Determines whether [is column access] [the specified m].
            </summary>
            <param name="m">The m.</param>
            <returns>bool.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.VisitInvocation(System.Linq.Expressions.InvocationExpression)">
            <summary>
            Visits the invocation.
            </summary>
            <param name="m">The m.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Visits the method call.
            </summary>
            <param name="m">The m.</param>
            <returns>object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.EvaluateExpression(System.Linq.Expressions.Expression)">
            <summary>
            Evaluates the expression.
            </summary>
            <param name="m">The m.</param>
            <returns>object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.VisitExpressionList(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression})">
            <summary>
            Visits the expression list.
            </summary>
            <param name="original">The original.</param>
            <returns>System.Collections.Generic.List&lt;object&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.VisitInSqlExpressionList(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression})">
            <summary>
            Visits the in SQL expression list.
            </summary>
            <param name="original">The original.</param>
            <returns>System.Collections.Generic.List&lt;object&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.VisitNewArray(System.Linq.Expressions.NewArrayExpression)">
            <summary>
            Visits the new array.
            </summary>
            <param name="na">The na.</param>
            <returns>object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.VisitNewArrayFromExpressionList(System.Linq.Expressions.NewArrayExpression)">
            <summary>
            Visits the new array from expression list.
            </summary>
            <param name="na">The na.</param>
            <returns>System.Collections.Generic.List&lt;object&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.BindOperant(System.Linq.Expressions.ExpressionType)">
            <summary>
            Binds the operant.
            </summary>
            <param name="e">The e.</param>
            <returns>string.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.GetQuotedColumnName(ServiceStack.OrmLite.ModelDefinition,System.String)">
            <summary>
            Gets the name of the quoted column.
            </summary>
            <param name="tableDef">The table definition.</param>
            <param name="memberName">Name of the member.</param>
            <returns>string.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.GetQuotedColumnName(ServiceStack.OrmLite.ModelDefinition,System.String,System.String)">
            <summary>
            Gets the name of the quoted column.
            </summary>
            <param name="tableDef">The table definition.</param>
            <param name="tableAlias">The table alias.</param>
            <param name="memberName">Name of the member.</param>
            <returns>string.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.RemoveQuoteFromAlias(System.String)">
            <summary>
            Removes the quote from alias.
            </summary>
            <param name="exp">The exp.</param>
            <returns>string.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.IsFieldName(System.Object)">
            <summary>
            Determines whether [is field name] [the specified quoted exp].
            </summary>
            <param name="quotedExp">The quoted exp.</param>
            <returns>bool.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.GetColumnName(System.String)">
            <summary>
            Gets the name of the column.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <returns>string.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.GetTrueExpression">
            <summary>
            Gets the true expression.
            </summary>
            <returns>object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.GetFalseExpression">
            <summary>
            Gets the false expression.
            </summary>
            <returns>object.</returns>
        </member>
        <member name="F:ServiceStack.OrmLite.SqlExpression`1.quotedTrue">
            <summary>
            The quoted true
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.GetQuotedTrueValue">
            <summary>
            Gets the quoted true value.
            </summary>
            <returns>object.</returns>
        </member>
        <member name="F:ServiceStack.OrmLite.SqlExpression`1.quotedFalse">
            <summary>
            The quoted false
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.GetQuotedFalseValue">
            <summary>
            Gets the quoted false value.
            </summary>
            <returns>object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.BuildSelectExpression(System.String,System.Boolean)">
            <summary>
            Builds the select expression.
            </summary>
            <param name="fields">The fields.</param>
            <param name="distinct">The distinct.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.GetAllFields">
            <summary>
            Gets all fields.
            </summary>
            <returns>System.Collections.Generic.IList&lt;string&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.IsStaticArrayMethod(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Determines whether [is static array method] [the specified m].
            </summary>
            <param name="m">The m.</param>
            <returns>bool.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.VisitStaticArrayMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Visits the static array method call.
            </summary>
            <param name="m">The m.</param>
            <returns>object.</returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.IsEnumerableMethod(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Determines whether [is enumerable method] [the specified m].
            </summary>
            <param name="m">The m.</param>
            <returns>bool.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.VisitEnumerableMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Visits the enumerable method call.
            </summary>
            <param name="m">The m.</param>
            <returns>object.</returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.ToInPartialString(System.Linq.Expressions.Expression,System.Object)">
            <summary>
            Converts to inpartialstring.
            </summary>
            <param name="memberExpr">The member expr.</param>
            <param name="quotedColName">Name of the quoted col.</param>
            <returns>object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.IsStaticStringMethod(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Determines whether [is static string method] [the specified m].
            </summary>
            <param name="m">The m.</param>
            <returns>bool.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.VisitStaticStringMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Visits the static string method call.
            </summary>
            <param name="m">The m.</param>
            <returns>object.</returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.VisitLengthStringProperty(System.Linq.Expressions.MemberExpression)">
            <summary>
            Visits the length string property.
            </summary>
            <param name="m">The m.</param>
            <returns>object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.ToLengthPartialString(System.Object)">
            <summary>
            Converts to lengthpartialstring.
            </summary>
            <param name="arg">The argument.</param>
            <returns>ServiceStack.OrmLite.PartialSqlString.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.BuildConcatExpression(System.Collections.Generic.List{System.Object})">
            <summary>
            Builds the concat expression.
            </summary>
            <param name="args">The arguments.</param>
            <returns>ServiceStack.OrmLite.PartialSqlString.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.BuildCompareExpression(System.Collections.Generic.List{System.Object})">
            <summary>
            Builds the compare expression.
            </summary>
            <param name="args">The arguments.</param>
            <returns>ServiceStack.OrmLite.PartialSqlString.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.ToConcatPartialString(System.Collections.Generic.List{System.Object})">
            <summary>
            Converts to concatpartialstring.
            </summary>
            <param name="args">The arguments.</param>
            <returns>ServiceStack.OrmLite.PartialSqlString.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.ToComparePartialString(System.Collections.Generic.List{System.Object})">
            <summary>
            Converts to comparepartialstring.
            </summary>
            <param name="args">The arguments.</param>
            <returns>ServiceStack.OrmLite.PartialSqlString.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.VisitSqlMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Visits the SQL method call.
            </summary>
            <param name="m">The m.</param>
            <returns>object.</returns>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:ServiceStack.OrmLite.SqlExpression`1.SelectList">this.DialectProvider.GetColumnNames(paramModelDef, alias)</exception>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.ConvertInExpressionToSql(System.Linq.Expressions.MethodCallExpression,System.Object)">
            <summary>
            Converts the in expression to SQL.
            </summary>
            <param name="m">The m.</param>
            <param name="quotedColName">Name of the quoted col.</param>
            <returns>string.</returns>
            <exception cref="T:System.NotSupportedException">$"In({argValue.GetType()})</exception>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.CreateInSubQuerySql(System.Object,System.String)">
            <summary>
            Creates the in sub query SQL.
            </summary>
            <param name="quotedColName">Name of the quoted col.</param>
            <param name="subSelect">The sub select.</param>
            <returns>string.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.VisitColumnAccessMethod(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Visits the column access method.
            </summary>
            <param name="m">The m.</param>
            <returns>object.</returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.ToCast(System.String)">
            <summary>
            Converts to cast.
            </summary>
            <param name="quotedColName">Name of the quoted col.</param>
            <returns>string.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.GetSubstringSql(System.Object,System.Int32,System.Nullable{System.Int32})">
            <summary>
            Gets the substring SQL.
            </summary>
            <param name="quotedColumn">The quoted column.</param>
            <param name="startIndex">The start index.</param>
            <param name="length">The length.</param>
            <returns>string.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.CreateParam(System.String,System.Object,System.Data.ParameterDirection,System.Nullable{System.Data.DbType},System.Data.DataRowVersion)">
            <summary>
            Creates the parameter.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <param name="direction">The direction.</param>
            <param name="dbType">Type of the database.</param>
            <param name="sourceVersion">The source version.</param>
            <returns>System.Data.IDbDataParameter.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.GetUntyped">
            <summary>
            Gets the untyped.
            </summary>
            <returns>IUntypedSqlExpression.</returns>
        </member>
        <member name="F:ServiceStack.OrmLite.SqlExpression`1.tableDefs">
            <summary>
            The table defs
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.GetAllTables">
            <summary>
            Gets all tables.
            </summary>
            <returns>List&lt;ModelDefinition&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.AddReferenceTableIfNotExists``1">
            <summary>
            Adds the reference table if not exists.
            </summary>
            <typeparam name="Target">The type of the target.</typeparam>
            <returns>SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.CustomJoin``1(System.String)">
            <summary>
            Customs the join.
            </summary>
            <typeparam name="Target">The type of the target.</typeparam>
            <param name="joinString">The join string.</param>
            <returns>SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.IsJoinedTable(System.Type)">
            <summary>
            Determines whether [is joined table] [the specified type].
            </summary>
            <param name="type">The type.</param>
            <returns><c>true</c> if [is joined table] [the specified type]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.Join``1(System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}})">
            <summary>
            Joins the specified join expr.
            </summary>
            <typeparam name="Target">The type of the target.</typeparam>
            <param name="joinExpr">The join expr.</param>
            <returns>SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.Join``1(System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}},ServiceStack.OrmLite.TableOptions)">
            <summary>
            Joins the specified join expr.
            </summary>
            <typeparam name="Target">The type of the target.</typeparam>
            <param name="joinExpr">The join expr.</param>
            <param name="options">The options.</param>
            <returns>SqlExpression&lt;T&gt;.</returns>
            <exception cref="T:System.ArgumentNullException">options</exception>
            <exception cref="T:System.ArgumentException">Can't set both Join Expression and TableOptions Expression</exception>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.Join``1(System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}},ServiceStack.OrmLite.JoinFormatDelegate)">
            <summary>
            Joins the specified join expr.
            </summary>
            <typeparam name="Target">The type of the target.</typeparam>
            <param name="joinExpr">The join expr.</param>
            <param name="joinFormat">The join format.</param>
            <returns>SqlExpression&lt;T&gt;.</returns>
            <exception cref="T:System.ArgumentNullException">joinFormat</exception>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.Join``2(System.Linq.Expressions.Expression{System.Func{``0,``1,System.Boolean}})">
            <summary>
            Joins the specified join expr.
            </summary>
            <typeparam name="Source">The type of the source.</typeparam>
            <typeparam name="Target">The type of the target.</typeparam>
            <param name="joinExpr">The join expr.</param>
            <returns>SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.Join``2(System.Linq.Expressions.Expression{System.Func{``0,``1,System.Boolean}},ServiceStack.OrmLite.JoinFormatDelegate)">
            <summary>
            Joins the specified join expr.
            </summary>
            <typeparam name="Source">The type of the source.</typeparam>
            <typeparam name="Target">The type of the target.</typeparam>
            <param name="joinExpr">The join expr.</param>
            <param name="joinFormat">The join format.</param>
            <returns>SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.Join``2(System.Linq.Expressions.Expression{System.Func{``0,``1,System.Boolean}},ServiceStack.OrmLite.TableOptions)">
            <summary>
            Joins the specified join expr.
            </summary>
            <typeparam name="Source">The type of the source.</typeparam>
            <typeparam name="Target">The type of the target.</typeparam>
            <param name="joinExpr">The join expr.</param>
            <param name="options">The options.</param>
            <returns>SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.Join(System.Type,System.Type,System.Linq.Expressions.Expression)">
            <summary>
            Joins the specified source type.
            </summary>
            <param name="sourceType">Type of the source.</param>
            <param name="targetType">Type of the target.</param>
            <param name="joinExpr">The join expr.</param>
            <returns>SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.Join(System.Type,System.Type,System.Linq.Expressions.Expression,ServiceStack.OrmLite.TableOptions)">
            <summary>
            Joins the specified source type.
            </summary>
            <param name="sourceType">Type of the source.</param>
            <param name="targetType">Type of the target.</param>
            <param name="joinExpr">The join expr.</param>
            <param name="options">The options.</param>
            <returns>SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.LeftJoin``1(System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}})">
            <summary>
            Lefts the join.
            </summary>
            <typeparam name="Target">The type of the target.</typeparam>
            <param name="joinExpr">The join expr.</param>
            <returns>SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.LeftJoin``1(System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}},ServiceStack.OrmLite.JoinFormatDelegate)">
            <summary>
            Lefts the join.
            </summary>
            <typeparam name="Target">The type of the target.</typeparam>
            <param name="joinExpr">The join expr.</param>
            <param name="joinFormat">The join format.</param>
            <returns>SqlExpression&lt;T&gt;.</returns>
            <exception cref="T:System.ArgumentNullException">joinFormat</exception>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.LeftJoin``1(System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}},ServiceStack.OrmLite.TableOptions)">
            <summary>
            Lefts the join.
            </summary>
            <typeparam name="Target">The type of the target.</typeparam>
            <param name="joinExpr">The join expr.</param>
            <param name="options">The options.</param>
            <returns>SqlExpression&lt;T&gt;.</returns>
            <exception cref="T:System.ArgumentNullException">options</exception>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.LeftJoin``2(System.Linq.Expressions.Expression{System.Func{``0,``1,System.Boolean}})">
            <summary>
            Lefts the join.
            </summary>
            <typeparam name="Source">The type of the source.</typeparam>
            <typeparam name="Target">The type of the target.</typeparam>
            <param name="joinExpr">The join expr.</param>
            <returns>SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.LeftJoin``2(System.Linq.Expressions.Expression{System.Func{``0,``1,System.Boolean}},ServiceStack.OrmLite.JoinFormatDelegate)">
            <summary>
            Lefts the join.
            </summary>
            <typeparam name="Source">The type of the source.</typeparam>
            <typeparam name="Target">The type of the target.</typeparam>
            <param name="joinExpr">The join expr.</param>
            <param name="joinFormat">The join format.</param>
            <returns>SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.LeftJoin``2(System.Linq.Expressions.Expression{System.Func{``0,``1,System.Boolean}},ServiceStack.OrmLite.TableOptions)">
            <summary>
            Lefts the join.
            </summary>
            <typeparam name="Source">The type of the source.</typeparam>
            <typeparam name="Target">The type of the target.</typeparam>
            <param name="joinExpr">The join expr.</param>
            <param name="options">The options.</param>
            <returns>SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.LeftJoin(System.Type,System.Type,System.Linq.Expressions.Expression)">
            <summary>
            Lefts the join.
            </summary>
            <param name="sourceType">Type of the source.</param>
            <param name="targetType">Type of the target.</param>
            <param name="joinExpr">The join expr.</param>
            <returns>SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.LeftJoin(System.Type,System.Type,System.Linq.Expressions.Expression,ServiceStack.OrmLite.TableOptions)">
            <summary>
            Lefts the join.
            </summary>
            <param name="sourceType">Type of the source.</param>
            <param name="targetType">Type of the target.</param>
            <param name="joinExpr">The join expr.</param>
            <param name="options">The options.</param>
            <returns>SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.RightJoin``1(System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}})">
            <summary>
            Rights the join.
            </summary>
            <typeparam name="Target">The type of the target.</typeparam>
            <param name="joinExpr">The join expr.</param>
            <returns>SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.RightJoin``1(System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}},ServiceStack.OrmLite.JoinFormatDelegate)">
            <summary>
            Rights the join.
            </summary>
            <typeparam name="Target">The type of the target.</typeparam>
            <param name="joinExpr">The join expr.</param>
            <param name="joinFormat">The join format.</param>
            <returns>SqlExpression&lt;T&gt;.</returns>
            <exception cref="T:System.ArgumentNullException">joinFormat</exception>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.RightJoin``1(System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}},ServiceStack.OrmLite.TableOptions)">
            <summary>
            Rights the join.
            </summary>
            <typeparam name="Target">The type of the target.</typeparam>
            <param name="joinExpr">The join expr.</param>
            <param name="options">The options.</param>
            <returns>SqlExpression&lt;T&gt;.</returns>
            <exception cref="T:System.ArgumentNullException">options</exception>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.RightJoin``2(System.Linq.Expressions.Expression{System.Func{``0,``1,System.Boolean}})">
            <summary>
            Rights the join.
            </summary>
            <typeparam name="Source">The type of the source.</typeparam>
            <typeparam name="Target">The type of the target.</typeparam>
            <param name="joinExpr">The join expr.</param>
            <returns>SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.RightJoin``2(System.Linq.Expressions.Expression{System.Func{``0,``1,System.Boolean}},ServiceStack.OrmLite.JoinFormatDelegate)">
            <summary>
            Rights the join.
            </summary>
            <typeparam name="Source">The type of the source.</typeparam>
            <typeparam name="Target">The type of the target.</typeparam>
            <param name="joinExpr">The join expr.</param>
            <param name="joinFormat">The join format.</param>
            <returns>SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.RightJoin``2(System.Linq.Expressions.Expression{System.Func{``0,``1,System.Boolean}},ServiceStack.OrmLite.TableOptions)">
            <summary>
            Rights the join.
            </summary>
            <typeparam name="Source">The type of the source.</typeparam>
            <typeparam name="Target">The type of the target.</typeparam>
            <param name="joinExpr">The join expr.</param>
            <param name="options">The options.</param>
            <returns>SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.RightJoin(System.Type,System.Type,System.Linq.Expressions.Expression)">
            <summary>
            Rights the join.
            </summary>
            <param name="sourceType">Type of the source.</param>
            <param name="targetType">Type of the target.</param>
            <param name="joinExpr">The join expr.</param>
            <returns>SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.RightJoin(System.Type,System.Type,System.Linq.Expressions.Expression,ServiceStack.OrmLite.TableOptions)">
            <summary>
            Rights the join.
            </summary>
            <param name="sourceType">Type of the source.</param>
            <param name="targetType">Type of the target.</param>
            <param name="joinExpr">The join expr.</param>
            <param name="options">The options.</param>
            <returns>SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.FullJoin``1(System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}})">
            <summary>
            Fulls the join.
            </summary>
            <typeparam name="Target">The type of the target.</typeparam>
            <param name="joinExpr">The join expr.</param>
            <returns>SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.FullJoin``2(System.Linq.Expressions.Expression{System.Func{``0,``1,System.Boolean}})">
            <summary>
            Fulls the join.
            </summary>
            <typeparam name="Source">The type of the source.</typeparam>
            <typeparam name="Target">The type of the target.</typeparam>
            <param name="joinExpr">The join expr.</param>
            <returns>SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.CrossJoin``1(System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}})">
            <summary>
            Crosses the join.
            </summary>
            <typeparam name="Target">The type of the target.</typeparam>
            <param name="joinExpr">The join expr.</param>
            <returns>SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.CrossJoin``2(System.Linq.Expressions.Expression{System.Func{``0,``1,System.Boolean}})">
            <summary>
            Crosses the join.
            </summary>
            <typeparam name="Source">The type of the source.</typeparam>
            <typeparam name="Target">The type of the target.</typeparam>
            <param name="joinExpr">The join expr.</param>
            <returns>SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.InternalJoin``2(System.String,System.Linq.Expressions.Expression{System.Func{``0,``1,System.Boolean}},ServiceStack.OrmLite.JoinFormatDelegate)">
            <summary>
            Internals the join.
            </summary>
            <typeparam name="Source">The type of the source.</typeparam>
            <typeparam name="Target">The type of the target.</typeparam>
            <param name="joinType">Type of the join.</param>
            <param name="joinExpr">The join expr.</param>
            <param name="joinFormat">The join format.</param>
            <returns>SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.InternalJoin``2(System.String,System.Linq.Expressions.Expression{System.Func{``0,``1,System.Boolean}},ServiceStack.OrmLite.TableOptions)">
            <summary>
            Internals the join.
            </summary>
            <typeparam name="Source">The type of the source.</typeparam>
            <typeparam name="Target">The type of the target.</typeparam>
            <param name="joinType">Type of the join.</param>
            <param name="joinExpr">The join expr.</param>
            <param name="options">The options.</param>
            <returns>SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.InternalJoin``2(System.String,System.Linq.Expressions.Expression)">
            <summary>
            Internals the join.
            </summary>
            <typeparam name="Source">The type of the source.</typeparam>
            <typeparam name="Target">The type of the target.</typeparam>
            <param name="joinType">Type of the join.</param>
            <param name="joinExpr">The join expr.</param>
            <returns>SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.Join``3(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,System.Boolean}})">
            <summary>
            Joins the specified join expr.
            </summary>
            <typeparam name="Source">The type of the source.</typeparam>
            <typeparam name="Target">The type of the target.</typeparam>
            <typeparam name="T3">The type of the t3.</typeparam>
            <param name="joinExpr">The join expr.</param>
            <returns>SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.LeftJoin``3(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,System.Boolean}})">
            <summary>
            Lefts the join.
            </summary>
            <typeparam name="Source">The type of the source.</typeparam>
            <typeparam name="Target">The type of the target.</typeparam>
            <typeparam name="T3">The type of the t3.</typeparam>
            <param name="joinExpr">The join expr.</param>
            <returns>SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.RightJoin``3(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,System.Boolean}})">
            <summary>
            Rights the join.
            </summary>
            <typeparam name="Source">The type of the source.</typeparam>
            <typeparam name="Target">The type of the target.</typeparam>
            <typeparam name="T3">The type of the t3.</typeparam>
            <param name="joinExpr">The join expr.</param>
            <returns>SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.FullJoin``3(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,System.Boolean}})">
            <summary>
            Fulls the join.
            </summary>
            <typeparam name="Source">The type of the source.</typeparam>
            <typeparam name="Target">The type of the target.</typeparam>
            <typeparam name="T3">The type of the t3.</typeparam>
            <param name="joinExpr">The join expr.</param>
            <returns>SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.Join``4(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,System.Boolean}})">
            <summary>
            Joins the specified join expr.
            </summary>
            <typeparam name="Source">The type of the source.</typeparam>
            <typeparam name="Target">The type of the target.</typeparam>
            <typeparam name="T3">The type of the t3.</typeparam>
            <typeparam name="T4">The type of the t4.</typeparam>
            <param name="joinExpr">The join expr.</param>
            <returns>SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.LeftJoin``4(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,System.Boolean}})">
            <summary>
            Lefts the join.
            </summary>
            <typeparam name="Source">The type of the source.</typeparam>
            <typeparam name="Target">The type of the target.</typeparam>
            <typeparam name="T3">The type of the t3.</typeparam>
            <typeparam name="T4">The type of the t4.</typeparam>
            <param name="joinExpr">The join expr.</param>
            <returns>SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.RightJoin``4(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,System.Boolean}})">
            <summary>
            Rights the join.
            </summary>
            <typeparam name="Source">The type of the source.</typeparam>
            <typeparam name="Target">The type of the target.</typeparam>
            <typeparam name="T3">The type of the t3.</typeparam>
            <typeparam name="T4">The type of the t4.</typeparam>
            <param name="joinExpr">The join expr.</param>
            <returns>SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.FullJoin``4(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,System.Boolean}})">
            <summary>
            Fulls the join.
            </summary>
            <typeparam name="Source">The type of the source.</typeparam>
            <typeparam name="Target">The type of the target.</typeparam>
            <typeparam name="T3">The type of the t3.</typeparam>
            <typeparam name="T4">The type of the t4.</typeparam>
            <param name="joinExpr">The join expr.</param>
            <returns>SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.InternalCreateSqlFromExpression(System.Linq.Expressions.Expression,System.Boolean)">
            <summary>
            Internals the create SQL from expression.
            </summary>
            <param name="joinExpr">The join expr.</param>
            <param name="isCrossJoin">if set to <c>true</c> [is cross join].</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.InternalCreateSqlFromDefinitions(ServiceStack.OrmLite.ModelDefinition,ServiceStack.OrmLite.ModelDefinition,System.Boolean)">
            <summary>
            Internals the create SQL from definitions.
            </summary>
            <param name="sourceDef">The source definition.</param>
            <param name="targetDef">The target definition.</param>
            <param name="isCrossJoin">if set to <c>true</c> [is cross join].</param>
            <returns>System.String.</returns>
            <exception cref="T:System.ArgumentException">Could not infer relationship between {sourceDef.ModelName} and {targetDef.ModelName}</exception>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.CustomJoin(System.String)">
            <summary>
            Customs the join.
            </summary>
            <param name="joinString">The join string.</param>
            <returns>SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="F:ServiceStack.OrmLite.SqlExpression`1.joinAlias">
            <summary>
            Hold the <see cref="T:ServiceStack.OrmLite.TableOptions" /> for each Join and clear them at the end of the Join
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.SqlExpression`1.joinAliases">
            <summary>
            If <see cref="P:ServiceStack.OrmLite.SqlExpression`1.UseJoinTypeAsAliases" /> is enabled, record the <see cref="T:ServiceStack.OrmLite.TableOptions" /> set for different types each time Join
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.InternalJoin(System.String,System.Linq.Expressions.Expression,ServiceStack.OrmLite.ModelDefinition,ServiceStack.OrmLite.ModelDefinition,ServiceStack.OrmLite.TableOptions)">
            <summary>
            Internals the join.
            </summary>
            <param name="joinType">Type of the join.</param>
            <param name="joinExpr">The join expr.</param>
            <param name="sourceDef">The source definition.</param>
            <param name="targetDef">The target definition.</param>
            <param name="options">The options.</param>
            <returns>SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.SelectInto``1">
            <summary>
            Selects the into.
            </summary>
            <typeparam name="TModel">The type of the t model.</typeparam>
            <returns>string.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.SelectInto``1(ServiceStack.OrmLite.QueryType)">
            <summary>
            Selects the into.
            </summary>
            <typeparam name="TModel">The type of the t model.</typeparam>
            <param name="queryType">Type of the query.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.FindWeakMatch(ServiceStack.OrmLite.ModelDefinition,ServiceStack.OrmLite.FieldDefinition)">
            <summary>
            Finds the weak match.
            </summary>
            <param name="tableDef">The table definition.</param>
            <param name="fieldDef">The field definition.</param>
            <returns>FieldDefinition.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.Where``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Wheres the specified predicate.
            </summary>
            <typeparam name="Target">The type of the target.</typeparam>
            <param name="predicate">The predicate.</param>
            <returns>SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.Where``2(System.Linq.Expressions.Expression{System.Func{``0,``1,System.Boolean}})">
            <summary>
            Wheres the specified predicate.
            </summary>
            <typeparam name="Source">The type of the source.</typeparam>
            <typeparam name="Target">The type of the target.</typeparam>
            <param name="predicate">The predicate.</param>
            <returns>SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.Where``3(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,System.Boolean}})">
            <summary>
            Wheres the specified predicate.
            </summary>
            <typeparam name="T1">The type of the t1.</typeparam>
            <typeparam name="T2">The type of the t2.</typeparam>
            <typeparam name="T3">The type of the t3.</typeparam>
            <param name="predicate">The predicate.</param>
            <returns>SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.Where``4(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,System.Boolean}})">
            <summary>
            Wheres the specified predicate.
            </summary>
            <typeparam name="T1">The type of the t1.</typeparam>
            <typeparam name="T2">The type of the t2.</typeparam>
            <typeparam name="T3">The type of the t3.</typeparam>
            <typeparam name="T4">The type of the t4.</typeparam>
            <param name="predicate">The predicate.</param>
            <returns>SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.Where``5(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,System.Boolean}})">
            <summary>
            Wheres the specified predicate.
            </summary>
            <typeparam name="T1">The type of the t1.</typeparam>
            <typeparam name="T2">The type of the t2.</typeparam>
            <typeparam name="T3">The type of the t3.</typeparam>
            <typeparam name="T4">The type of the t4.</typeparam>
            <typeparam name="T5">The type of the t5.</typeparam>
            <param name="predicate">The predicate.</param>
            <returns>SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.Where``6(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,System.Boolean}})">
            <summary>
            Wheres the specified predicate.
            </summary>
            <typeparam name="T1">The type of the t1.</typeparam>
            <typeparam name="T2">The type of the t2.</typeparam>
            <typeparam name="T3">The type of the t3.</typeparam>
            <typeparam name="T4">The type of the t4.</typeparam>
            <typeparam name="T5">The type of the t5.</typeparam>
            <typeparam name="T6">The type of the t6.</typeparam>
            <param name="predicate">The predicate.</param>
            <returns>SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.Where``7(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,System.Boolean}})">
            <summary>
            Wheres the specified predicate.
            </summary>
            <typeparam name="T1">The type of the t1.</typeparam>
            <typeparam name="T2">The type of the t2.</typeparam>
            <typeparam name="T3">The type of the t3.</typeparam>
            <typeparam name="T4">The type of the t4.</typeparam>
            <typeparam name="T5">The type of the t5.</typeparam>
            <typeparam name="T6">The type of the t6.</typeparam>
            <typeparam name="T7">The type of the t7.</typeparam>
            <param name="predicate">The predicate.</param>
            <returns>SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.Where``8(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,System.Boolean}})">
            <summary>
            Wheres the specified predicate.
            </summary>
            <typeparam name="T1">The type of the t1.</typeparam>
            <typeparam name="T2">The type of the t2.</typeparam>
            <typeparam name="T3">The type of the t3.</typeparam>
            <typeparam name="T4">The type of the t4.</typeparam>
            <typeparam name="T5">The type of the t5.</typeparam>
            <typeparam name="T6">The type of the t6.</typeparam>
            <typeparam name="T7">The type of the t7.</typeparam>
            <typeparam name="T8">The type of the t8.</typeparam>
            <param name="predicate">The predicate.</param>
            <returns>SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.Where``9(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,System.Boolean}})">
            <summary>
            Wheres the specified predicate.
            </summary>
            <typeparam name="T1">The type of the t1.</typeparam>
            <typeparam name="T2">The type of the t2.</typeparam>
            <typeparam name="T3">The type of the t3.</typeparam>
            <typeparam name="T4">The type of the t4.</typeparam>
            <typeparam name="T5">The type of the t5.</typeparam>
            <typeparam name="T6">The type of the t6.</typeparam>
            <typeparam name="T7">The type of the t7.</typeparam>
            <typeparam name="T8">The type of the t8.</typeparam>
            <typeparam name="T9">The type of the t9.</typeparam>
            <param name="predicate">The predicate.</param>
            <returns>SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.Where``10(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.Boolean}})">
            <summary>
            Wheres the specified predicate.
            </summary>
            <typeparam name="T1">The type of the t1.</typeparam>
            <typeparam name="T2">The type of the t2.</typeparam>
            <typeparam name="T3">The type of the t3.</typeparam>
            <typeparam name="T4">The type of the t4.</typeparam>
            <typeparam name="T5">The type of the t5.</typeparam>
            <typeparam name="T6">The type of the t6.</typeparam>
            <typeparam name="T7">The type of the t7.</typeparam>
            <typeparam name="T8">The type of the t8.</typeparam>
            <typeparam name="T9">The type of the t9.</typeparam>
            <typeparam name="T10">The type of the T10.</typeparam>
            <param name="predicate">The predicate.</param>
            <returns>SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.Where``11(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,System.Boolean}})">
            <summary>
            Wheres the specified predicate.
            </summary>
            <typeparam name="T1">The type of the t1.</typeparam>
            <typeparam name="T2">The type of the t2.</typeparam>
            <typeparam name="T3">The type of the t3.</typeparam>
            <typeparam name="T4">The type of the t4.</typeparam>
            <typeparam name="T5">The type of the t5.</typeparam>
            <typeparam name="T6">The type of the t6.</typeparam>
            <typeparam name="T7">The type of the t7.</typeparam>
            <typeparam name="T8">The type of the t8.</typeparam>
            <typeparam name="T9">The type of the t9.</typeparam>
            <typeparam name="T10">The type of the T10.</typeparam>
            <typeparam name="T11">The type of the T11.</typeparam>
            <param name="predicate">The predicate.</param>
            <returns>SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.Where``12(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,System.Boolean}})">
            <summary>
            Wheres the specified predicate.
            </summary>
            <typeparam name="T1">The type of the t1.</typeparam>
            <typeparam name="T2">The type of the t2.</typeparam>
            <typeparam name="T3">The type of the t3.</typeparam>
            <typeparam name="T4">The type of the t4.</typeparam>
            <typeparam name="T5">The type of the t5.</typeparam>
            <typeparam name="T6">The type of the t6.</typeparam>
            <typeparam name="T7">The type of the t7.</typeparam>
            <typeparam name="T8">The type of the t8.</typeparam>
            <typeparam name="T9">The type of the t9.</typeparam>
            <typeparam name="T10">The type of the T10.</typeparam>
            <typeparam name="T11">The type of the T11.</typeparam>
            <typeparam name="T12">The type of the T12.</typeparam>
            <param name="predicate">The predicate.</param>
            <returns>SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.Where``13(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,System.Boolean}})">
            <summary>
            Wheres the specified predicate.
            </summary>
            <typeparam name="T1">The type of the t1.</typeparam>
            <typeparam name="T2">The type of the t2.</typeparam>
            <typeparam name="T3">The type of the t3.</typeparam>
            <typeparam name="T4">The type of the t4.</typeparam>
            <typeparam name="T5">The type of the t5.</typeparam>
            <typeparam name="T6">The type of the t6.</typeparam>
            <typeparam name="T7">The type of the t7.</typeparam>
            <typeparam name="T8">The type of the t8.</typeparam>
            <typeparam name="T9">The type of the t9.</typeparam>
            <typeparam name="T10">The type of the T10.</typeparam>
            <typeparam name="T11">The type of the T11.</typeparam>
            <typeparam name="T12">The type of the T12.</typeparam>
            <typeparam name="T13">The type of the T13.</typeparam>
            <param name="predicate">The predicate.</param>
            <returns>SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.Where``14(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,System.Boolean}})">
            <summary>
            Wheres the specified predicate.
            </summary>
            <typeparam name="T1">The type of the t1.</typeparam>
            <typeparam name="T2">The type of the t2.</typeparam>
            <typeparam name="T3">The type of the t3.</typeparam>
            <typeparam name="T4">The type of the t4.</typeparam>
            <typeparam name="T5">The type of the t5.</typeparam>
            <typeparam name="T6">The type of the t6.</typeparam>
            <typeparam name="T7">The type of the t7.</typeparam>
            <typeparam name="T8">The type of the t8.</typeparam>
            <typeparam name="T9">The type of the t9.</typeparam>
            <typeparam name="T10">The type of the T10.</typeparam>
            <typeparam name="T11">The type of the T11.</typeparam>
            <typeparam name="T12">The type of the T12.</typeparam>
            <typeparam name="T13">The type of the T13.</typeparam>
            <typeparam name="T14">The type of the T14.</typeparam>
            <param name="predicate">The predicate.</param>
            <returns>SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.Where``15(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,System.Boolean}})">
            <summary>
            Wheres the specified predicate.
            </summary>
            <typeparam name="T1">The type of the t1.</typeparam>
            <typeparam name="T2">The type of the t2.</typeparam>
            <typeparam name="T3">The type of the t3.</typeparam>
            <typeparam name="T4">The type of the t4.</typeparam>
            <typeparam name="T5">The type of the t5.</typeparam>
            <typeparam name="T6">The type of the t6.</typeparam>
            <typeparam name="T7">The type of the t7.</typeparam>
            <typeparam name="T8">The type of the t8.</typeparam>
            <typeparam name="T9">The type of the t9.</typeparam>
            <typeparam name="T10">The type of the T10.</typeparam>
            <typeparam name="T11">The type of the T11.</typeparam>
            <typeparam name="T12">The type of the T12.</typeparam>
            <typeparam name="T13">The type of the T13.</typeparam>
            <typeparam name="T14">The type of the T14.</typeparam>
            <typeparam name="T15">The type of the T15.</typeparam>
            <param name="predicate">The predicate.</param>
            <returns>SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.And``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Ands the specified predicate.
            </summary>
            <typeparam name="Target">The type of the target.</typeparam>
            <param name="predicate">The predicate.</param>
            <returns>SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.And``2(System.Linq.Expressions.Expression{System.Func{``0,``1,System.Boolean}})">
            <summary>
            Ands the specified predicate.
            </summary>
            <typeparam name="Source">The type of the source.</typeparam>
            <typeparam name="Target">The type of the target.</typeparam>
            <param name="predicate">The predicate.</param>
            <returns>SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.And``3(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,System.Boolean}})">
            <summary>
            Ands the specified predicate.
            </summary>
            <typeparam name="T1">The type of the t1.</typeparam>
            <typeparam name="T2">The type of the t2.</typeparam>
            <typeparam name="T3">The type of the t3.</typeparam>
            <param name="predicate">The predicate.</param>
            <returns>SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.And``4(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,System.Boolean}})">
            <summary>
            Ands the specified predicate.
            </summary>
            <typeparam name="T1">The type of the t1.</typeparam>
            <typeparam name="T2">The type of the t2.</typeparam>
            <typeparam name="T3">The type of the t3.</typeparam>
            <typeparam name="T4">The type of the t4.</typeparam>
            <param name="predicate">The predicate.</param>
            <returns>SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.And``5(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,System.Boolean}})">
            <summary>
            Ands the specified predicate.
            </summary>
            <typeparam name="T1">The type of the t1.</typeparam>
            <typeparam name="T2">The type of the t2.</typeparam>
            <typeparam name="T3">The type of the t3.</typeparam>
            <typeparam name="T4">The type of the t4.</typeparam>
            <typeparam name="T5">The type of the t5.</typeparam>
            <param name="predicate">The predicate.</param>
            <returns>SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.And``6(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,System.Boolean}})">
            <summary>
            Ands the specified predicate.
            </summary>
            <typeparam name="T1">The type of the t1.</typeparam>
            <typeparam name="T2">The type of the t2.</typeparam>
            <typeparam name="T3">The type of the t3.</typeparam>
            <typeparam name="T4">The type of the t4.</typeparam>
            <typeparam name="T5">The type of the t5.</typeparam>
            <typeparam name="T6">The type of the t6.</typeparam>
            <param name="predicate">The predicate.</param>
            <returns>SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.And``7(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,System.Boolean}})">
            <summary>
            Ands the specified predicate.
            </summary>
            <typeparam name="T1">The type of the t1.</typeparam>
            <typeparam name="T2">The type of the t2.</typeparam>
            <typeparam name="T3">The type of the t3.</typeparam>
            <typeparam name="T4">The type of the t4.</typeparam>
            <typeparam name="T5">The type of the t5.</typeparam>
            <typeparam name="T6">The type of the t6.</typeparam>
            <typeparam name="T7">The type of the t7.</typeparam>
            <param name="predicate">The predicate.</param>
            <returns>SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.And``8(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,System.Boolean}})">
            <summary>
            Ands the specified predicate.
            </summary>
            <typeparam name="T1">The type of the t1.</typeparam>
            <typeparam name="T2">The type of the t2.</typeparam>
            <typeparam name="T3">The type of the t3.</typeparam>
            <typeparam name="T4">The type of the t4.</typeparam>
            <typeparam name="T5">The type of the t5.</typeparam>
            <typeparam name="T6">The type of the t6.</typeparam>
            <typeparam name="T7">The type of the t7.</typeparam>
            <typeparam name="T8">The type of the t8.</typeparam>
            <param name="predicate">The predicate.</param>
            <returns>SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.And``9(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,System.Boolean}})">
            <summary>
            Ands the specified predicate.
            </summary>
            <typeparam name="T1">The type of the t1.</typeparam>
            <typeparam name="T2">The type of the t2.</typeparam>
            <typeparam name="T3">The type of the t3.</typeparam>
            <typeparam name="T4">The type of the t4.</typeparam>
            <typeparam name="T5">The type of the t5.</typeparam>
            <typeparam name="T6">The type of the t6.</typeparam>
            <typeparam name="T7">The type of the t7.</typeparam>
            <typeparam name="T8">The type of the t8.</typeparam>
            <typeparam name="T9">The type of the t9.</typeparam>
            <param name="predicate">The predicate.</param>
            <returns>SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.And``10(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.Boolean}})">
            <summary>
            Ands the specified predicate.
            </summary>
            <typeparam name="T1">The type of the t1.</typeparam>
            <typeparam name="T2">The type of the t2.</typeparam>
            <typeparam name="T3">The type of the t3.</typeparam>
            <typeparam name="T4">The type of the t4.</typeparam>
            <typeparam name="T5">The type of the t5.</typeparam>
            <typeparam name="T6">The type of the t6.</typeparam>
            <typeparam name="T7">The type of the t7.</typeparam>
            <typeparam name="T8">The type of the t8.</typeparam>
            <typeparam name="T9">The type of the t9.</typeparam>
            <typeparam name="T10">The type of the T10.</typeparam>
            <param name="predicate">The predicate.</param>
            <returns>SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.And``11(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,System.Boolean}})">
            <summary>
            Ands the specified predicate.
            </summary>
            <typeparam name="T1">The type of the t1.</typeparam>
            <typeparam name="T2">The type of the t2.</typeparam>
            <typeparam name="T3">The type of the t3.</typeparam>
            <typeparam name="T4">The type of the t4.</typeparam>
            <typeparam name="T5">The type of the t5.</typeparam>
            <typeparam name="T6">The type of the t6.</typeparam>
            <typeparam name="T7">The type of the t7.</typeparam>
            <typeparam name="T8">The type of the t8.</typeparam>
            <typeparam name="T9">The type of the t9.</typeparam>
            <typeparam name="T10">The type of the T10.</typeparam>
            <typeparam name="T11">The type of the T11.</typeparam>
            <param name="predicate">The predicate.</param>
            <returns>SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.And``12(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,System.Boolean}})">
            <summary>
            Ands the specified predicate.
            </summary>
            <typeparam name="T1">The type of the t1.</typeparam>
            <typeparam name="T2">The type of the t2.</typeparam>
            <typeparam name="T3">The type of the t3.</typeparam>
            <typeparam name="T4">The type of the t4.</typeparam>
            <typeparam name="T5">The type of the t5.</typeparam>
            <typeparam name="T6">The type of the t6.</typeparam>
            <typeparam name="T7">The type of the t7.</typeparam>
            <typeparam name="T8">The type of the t8.</typeparam>
            <typeparam name="T9">The type of the t9.</typeparam>
            <typeparam name="T10">The type of the T10.</typeparam>
            <typeparam name="T11">The type of the T11.</typeparam>
            <typeparam name="T12">The type of the T12.</typeparam>
            <param name="predicate">The predicate.</param>
            <returns>SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.And``13(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,System.Boolean}})">
            <summary>
            Ands the specified predicate.
            </summary>
            <typeparam name="T1">The type of the t1.</typeparam>
            <typeparam name="T2">The type of the t2.</typeparam>
            <typeparam name="T3">The type of the t3.</typeparam>
            <typeparam name="T4">The type of the t4.</typeparam>
            <typeparam name="T5">The type of the t5.</typeparam>
            <typeparam name="T6">The type of the t6.</typeparam>
            <typeparam name="T7">The type of the t7.</typeparam>
            <typeparam name="T8">The type of the t8.</typeparam>
            <typeparam name="T9">The type of the t9.</typeparam>
            <typeparam name="T10">The type of the T10.</typeparam>
            <typeparam name="T11">The type of the T11.</typeparam>
            <typeparam name="T12">The type of the T12.</typeparam>
            <typeparam name="T13">The type of the T13.</typeparam>
            <param name="predicate">The predicate.</param>
            <returns>SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.And``14(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,System.Boolean}})">
            <summary>
            Ands the specified predicate.
            </summary>
            <typeparam name="T1">The type of the t1.</typeparam>
            <typeparam name="T2">The type of the t2.</typeparam>
            <typeparam name="T3">The type of the t3.</typeparam>
            <typeparam name="T4">The type of the t4.</typeparam>
            <typeparam name="T5">The type of the t5.</typeparam>
            <typeparam name="T6">The type of the t6.</typeparam>
            <typeparam name="T7">The type of the t7.</typeparam>
            <typeparam name="T8">The type of the t8.</typeparam>
            <typeparam name="T9">The type of the t9.</typeparam>
            <typeparam name="T10">The type of the T10.</typeparam>
            <typeparam name="T11">The type of the T11.</typeparam>
            <typeparam name="T12">The type of the T12.</typeparam>
            <typeparam name="T13">The type of the T13.</typeparam>
            <typeparam name="T14">The type of the T14.</typeparam>
            <param name="predicate">The predicate.</param>
            <returns>SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.And``15(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,System.Boolean}})">
            <summary>
            Ands the specified predicate.
            </summary>
            <typeparam name="T1">The type of the t1.</typeparam>
            <typeparam name="T2">The type of the t2.</typeparam>
            <typeparam name="T3">The type of the t3.</typeparam>
            <typeparam name="T4">The type of the t4.</typeparam>
            <typeparam name="T5">The type of the t5.</typeparam>
            <typeparam name="T6">The type of the t6.</typeparam>
            <typeparam name="T7">The type of the t7.</typeparam>
            <typeparam name="T8">The type of the t8.</typeparam>
            <typeparam name="T9">The type of the t9.</typeparam>
            <typeparam name="T10">The type of the T10.</typeparam>
            <typeparam name="T11">The type of the T11.</typeparam>
            <typeparam name="T12">The type of the T12.</typeparam>
            <typeparam name="T13">The type of the T13.</typeparam>
            <typeparam name="T14">The type of the T14.</typeparam>
            <typeparam name="T15">The type of the T15.</typeparam>
            <param name="predicate">The predicate.</param>
            <returns>SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.Or``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Ors the specified predicate.
            </summary>
            <typeparam name="Target">The type of the target.</typeparam>
            <param name="predicate">The predicate.</param>
            <returns>SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.Or``2(System.Linq.Expressions.Expression{System.Func{``0,``1,System.Boolean}})">
            <summary>
            Ors the specified predicate.
            </summary>
            <typeparam name="Source">The type of the source.</typeparam>
            <typeparam name="Target">The type of the target.</typeparam>
            <param name="predicate">The predicate.</param>
            <returns>SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.Or``3(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,System.Boolean}})">
            <summary>
            Ors the specified predicate.
            </summary>
            <typeparam name="T1">The type of the t1.</typeparam>
            <typeparam name="T2">The type of the t2.</typeparam>
            <typeparam name="T3">The type of the t3.</typeparam>
            <param name="predicate">The predicate.</param>
            <returns>SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.Or``4(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,System.Boolean}})">
            <summary>
            Ors the specified predicate.
            </summary>
            <typeparam name="T1">The type of the t1.</typeparam>
            <typeparam name="T2">The type of the t2.</typeparam>
            <typeparam name="T3">The type of the t3.</typeparam>
            <typeparam name="T4">The type of the t4.</typeparam>
            <param name="predicate">The predicate.</param>
            <returns>SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.Or``5(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,System.Boolean}})">
            <summary>
            Ors the specified predicate.
            </summary>
            <typeparam name="T1">The type of the t1.</typeparam>
            <typeparam name="T2">The type of the t2.</typeparam>
            <typeparam name="T3">The type of the t3.</typeparam>
            <typeparam name="T4">The type of the t4.</typeparam>
            <typeparam name="T5">The type of the t5.</typeparam>
            <param name="predicate">The predicate.</param>
            <returns>SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.Or``6(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,System.Boolean}})">
            <summary>
            Ors the specified predicate.
            </summary>
            <typeparam name="T1">The type of the t1.</typeparam>
            <typeparam name="T2">The type of the t2.</typeparam>
            <typeparam name="T3">The type of the t3.</typeparam>
            <typeparam name="T4">The type of the t4.</typeparam>
            <typeparam name="T5">The type of the t5.</typeparam>
            <typeparam name="T6">The type of the t6.</typeparam>
            <param name="predicate">The predicate.</param>
            <returns>SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.Or``7(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,System.Boolean}})">
            <summary>
            Ors the specified predicate.
            </summary>
            <typeparam name="T1">The type of the t1.</typeparam>
            <typeparam name="T2">The type of the t2.</typeparam>
            <typeparam name="T3">The type of the t3.</typeparam>
            <typeparam name="T4">The type of the t4.</typeparam>
            <typeparam name="T5">The type of the t5.</typeparam>
            <typeparam name="T6">The type of the t6.</typeparam>
            <typeparam name="T7">The type of the t7.</typeparam>
            <param name="predicate">The predicate.</param>
            <returns>SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.Or``8(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,System.Boolean}})">
            <summary>
            Ors the specified predicate.
            </summary>
            <typeparam name="T1">The type of the t1.</typeparam>
            <typeparam name="T2">The type of the t2.</typeparam>
            <typeparam name="T3">The type of the t3.</typeparam>
            <typeparam name="T4">The type of the t4.</typeparam>
            <typeparam name="T5">The type of the t5.</typeparam>
            <typeparam name="T6">The type of the t6.</typeparam>
            <typeparam name="T7">The type of the t7.</typeparam>
            <typeparam name="T8">The type of the t8.</typeparam>
            <param name="predicate">The predicate.</param>
            <returns>SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.Or``9(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,System.Boolean}})">
            <summary>
            Ors the specified predicate.
            </summary>
            <typeparam name="T1">The type of the t1.</typeparam>
            <typeparam name="T2">The type of the t2.</typeparam>
            <typeparam name="T3">The type of the t3.</typeparam>
            <typeparam name="T4">The type of the t4.</typeparam>
            <typeparam name="T5">The type of the t5.</typeparam>
            <typeparam name="T6">The type of the t6.</typeparam>
            <typeparam name="T7">The type of the t7.</typeparam>
            <typeparam name="T8">The type of the t8.</typeparam>
            <typeparam name="T9">The type of the t9.</typeparam>
            <param name="predicate">The predicate.</param>
            <returns>SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.Or``10(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.Boolean}})">
            <summary>
            Ors the specified predicate.
            </summary>
            <typeparam name="T1">The type of the t1.</typeparam>
            <typeparam name="T2">The type of the t2.</typeparam>
            <typeparam name="T3">The type of the t3.</typeparam>
            <typeparam name="T4">The type of the t4.</typeparam>
            <typeparam name="T5">The type of the t5.</typeparam>
            <typeparam name="T6">The type of the t6.</typeparam>
            <typeparam name="T7">The type of the t7.</typeparam>
            <typeparam name="T8">The type of the t8.</typeparam>
            <typeparam name="T9">The type of the t9.</typeparam>
            <typeparam name="T10">The type of the T10.</typeparam>
            <param name="predicate">The predicate.</param>
            <returns>SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.Or``11(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,System.Boolean}})">
            <summary>
            Ors the specified predicate.
            </summary>
            <typeparam name="T1">The type of the t1.</typeparam>
            <typeparam name="T2">The type of the t2.</typeparam>
            <typeparam name="T3">The type of the t3.</typeparam>
            <typeparam name="T4">The type of the t4.</typeparam>
            <typeparam name="T5">The type of the t5.</typeparam>
            <typeparam name="T6">The type of the t6.</typeparam>
            <typeparam name="T7">The type of the t7.</typeparam>
            <typeparam name="T8">The type of the t8.</typeparam>
            <typeparam name="T9">The type of the t9.</typeparam>
            <typeparam name="T10">The type of the T10.</typeparam>
            <typeparam name="T11">The type of the T11.</typeparam>
            <param name="predicate">The predicate.</param>
            <returns>SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.Or``12(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,System.Boolean}})">
            <summary>
            Ors the specified predicate.
            </summary>
            <typeparam name="T1">The type of the t1.</typeparam>
            <typeparam name="T2">The type of the t2.</typeparam>
            <typeparam name="T3">The type of the t3.</typeparam>
            <typeparam name="T4">The type of the t4.</typeparam>
            <typeparam name="T5">The type of the t5.</typeparam>
            <typeparam name="T6">The type of the t6.</typeparam>
            <typeparam name="T7">The type of the t7.</typeparam>
            <typeparam name="T8">The type of the t8.</typeparam>
            <typeparam name="T9">The type of the t9.</typeparam>
            <typeparam name="T10">The type of the T10.</typeparam>
            <typeparam name="T11">The type of the T11.</typeparam>
            <typeparam name="T12">The type of the T12.</typeparam>
            <param name="predicate">The predicate.</param>
            <returns>SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.Or``13(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,System.Boolean}})">
            <summary>
            Ors the specified predicate.
            </summary>
            <typeparam name="T1">The type of the t1.</typeparam>
            <typeparam name="T2">The type of the t2.</typeparam>
            <typeparam name="T3">The type of the t3.</typeparam>
            <typeparam name="T4">The type of the t4.</typeparam>
            <typeparam name="T5">The type of the t5.</typeparam>
            <typeparam name="T6">The type of the t6.</typeparam>
            <typeparam name="T7">The type of the t7.</typeparam>
            <typeparam name="T8">The type of the t8.</typeparam>
            <typeparam name="T9">The type of the t9.</typeparam>
            <typeparam name="T10">The type of the T10.</typeparam>
            <typeparam name="T11">The type of the T11.</typeparam>
            <typeparam name="T12">The type of the T12.</typeparam>
            <typeparam name="T13">The type of the T13.</typeparam>
            <param name="predicate">The predicate.</param>
            <returns>SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.Or``14(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,System.Boolean}})">
            <summary>
            Ors the specified predicate.
            </summary>
            <typeparam name="T1">The type of the t1.</typeparam>
            <typeparam name="T2">The type of the t2.</typeparam>
            <typeparam name="T3">The type of the t3.</typeparam>
            <typeparam name="T4">The type of the t4.</typeparam>
            <typeparam name="T5">The type of the t5.</typeparam>
            <typeparam name="T6">The type of the t6.</typeparam>
            <typeparam name="T7">The type of the t7.</typeparam>
            <typeparam name="T8">The type of the t8.</typeparam>
            <typeparam name="T9">The type of the t9.</typeparam>
            <typeparam name="T10">The type of the T10.</typeparam>
            <typeparam name="T11">The type of the T11.</typeparam>
            <typeparam name="T12">The type of the T12.</typeparam>
            <typeparam name="T13">The type of the T13.</typeparam>
            <typeparam name="T14">The type of the T14.</typeparam>
            <param name="predicate">The predicate.</param>
            <returns>SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.Or``15(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,System.Boolean}})">
            <summary>
            Ors the specified predicate.
            </summary>
            <typeparam name="T1">The type of the t1.</typeparam>
            <typeparam name="T2">The type of the t2.</typeparam>
            <typeparam name="T3">The type of the t3.</typeparam>
            <typeparam name="T4">The type of the t4.</typeparam>
            <typeparam name="T5">The type of the t5.</typeparam>
            <typeparam name="T6">The type of the t6.</typeparam>
            <typeparam name="T7">The type of the t7.</typeparam>
            <typeparam name="T8">The type of the t8.</typeparam>
            <typeparam name="T9">The type of the t9.</typeparam>
            <typeparam name="T10">The type of the T10.</typeparam>
            <typeparam name="T11">The type of the T11.</typeparam>
            <typeparam name="T12">The type of the T12.</typeparam>
            <typeparam name="T13">The type of the T13.</typeparam>
            <typeparam name="T14">The type of the T14.</typeparam>
            <typeparam name="T15">The type of the T15.</typeparam>
            <param name="predicate">The predicate.</param>
            <returns>SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.FirstMatchingField(System.String)">
            <summary>
            Firsts the matching field.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <returns>Tuple&lt;ModelDefinition, FieldDefinition&gt;.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.ISqlExpression">
            <summary>
            Interface ISqlExpression
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.ISqlExpression.Params">
            <summary>
            Gets the parameters.
            </summary>
            <value>The parameters.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.ISqlExpression.ToSelectStatement">
            <summary>
            Converts to selectstatement.
            </summary>
            <returns>string.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.ISqlExpression.ToSelectStatement(ServiceStack.OrmLite.QueryType)">
            <summary>
            Converts to selectstatement.
            </summary>
            <param name="forType">For type.</param>
            <returns>string.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.ISqlExpression.SelectInto``1">
            <summary>
            Selects the into.
            </summary>
            <typeparam name="TModel">The type of the t model.</typeparam>
            <returns>string.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.ISqlExpression.SelectInto``1(ServiceStack.OrmLite.QueryType)">
            <summary>
            Selects the into.
            </summary>
            <typeparam name="TModel">The type of the t model.</typeparam>
            <param name="forType">For type.</param>
            <returns>string.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.QueryType">
            <summary>
            Enum QueryType
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.QueryType.Select">
            <summary>
            The select
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.QueryType.Single">
            <summary>
            The single
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.QueryType.Scalar">
            <summary>
            The scalar
            </summary>
        </member>
        <member name="T:ServiceStack.OrmLite.IHasDialectProvider">
            <summary>
            Interface IHasDialectProvider
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.IHasDialectProvider.DialectProvider">
            <summary>
            Gets the dialect provider.
            </summary>
            <value>The dialect provider.</value>
        </member>
        <member name="T:ServiceStack.OrmLite.PartialSqlString">
            <summary>
            Class PartialSqlString.
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.PartialSqlString.Null">
            <summary>
            The null
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.PartialSqlString.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.OrmLite.PartialSqlString" /> class.
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.PartialSqlString.#ctor(System.String,ServiceStack.OrmLite.EnumMemberAccess)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.OrmLite.PartialSqlString" /> class.
            </summary>
            <param name="text">The text.</param>
            <param name="enumMember">The enum member.</param>
        </member>
        <member name="P:ServiceStack.OrmLite.PartialSqlString.Text">
            <summary>
            Gets the text.
            </summary>
            <value>The text.</value>
        </member>
        <member name="F:ServiceStack.OrmLite.PartialSqlString.EnumMember">
            <summary>
            The enum member
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.PartialSqlString.ToString">
            <summary>
            Converts to string.
            </summary>
            <returns>string.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.PartialSqlString.Equals(ServiceStack.OrmLite.PartialSqlString)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns>bool.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.PartialSqlString.Equals(System.Object)">
            <summary>
            Equalses the specified object.
            </summary>
            <param name="obj">The object.</param>
            <returns>bool.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.PartialSqlString.GetHashCode">
            <summary>
            Gets the hash code.
            </summary>
            <returns>int.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.EnumMemberAccess">
            <summary>
            Class EnumMemberAccess.
            Implements the <see cref="T:ServiceStack.OrmLite.PartialSqlString" />
            </summary>
            <seealso cref="T:ServiceStack.OrmLite.PartialSqlString" />
        </member>
        <member name="M:ServiceStack.OrmLite.EnumMemberAccess.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.OrmLite.EnumMemberAccess" /> class.
            </summary>
            <param name="text">The text.</param>
            <param name="enumType">Type of the enum.</param>
            <exception cref="T:System.ArgumentException">Type not valid, nameof(enumType)</exception>
        </member>
        <member name="P:ServiceStack.OrmLite.EnumMemberAccess.EnumType">
            <summary>
            Gets the type of the enum.
            </summary>
            <value>The type of the enum.</value>
        </member>
        <member name="T:ServiceStack.OrmLite.SelectItem">
            <summary>
            Class SelectItem.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.SelectItem.#ctor(ServiceStack.OrmLite.IOrmLiteDialectProvider,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.OrmLite.SelectItem" /> class.
            </summary>
            <param name="dialectProvider">The dialect provider.</param>
            <param name="alias">The alias.</param>
        </member>
        <member name="P:ServiceStack.OrmLite.SelectItem.Alias">
            <summary>
            Unquoted alias for the column or expression being selected.
            </summary>
            <value>The alias.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.SelectItem.DialectProvider">
            <summary>
            Gets or sets the dialect provider.
            </summary>
            <value>The dialect provider.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.SelectItem.ToString">
            <summary>
            Converts to string.
            </summary>
            <returns>string.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.SelectItemExpression">
            <summary>
            Class SelectItemExpression.
            Implements the <see cref="T:ServiceStack.OrmLite.SelectItem" />
            </summary>
            <seealso cref="T:ServiceStack.OrmLite.SelectItem" />
        </member>
        <member name="M:ServiceStack.OrmLite.SelectItemExpression.#ctor(ServiceStack.OrmLite.IOrmLiteDialectProvider,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.OrmLite.SelectItemExpression" /> class.
            </summary>
            <param name="dialectProvider">The dialect provider.</param>
            <param name="selectExpression">The select expression.</param>
            <param name="alias">The alias.</param>
            <exception cref="T:System.ArgumentNullException">nameof(selectExpression)</exception>
            <exception cref="T:System.ArgumentNullException">nameof(alias)</exception>
        </member>
        <member name="P:ServiceStack.OrmLite.SelectItemExpression.SelectExpression">
            <summary>
            The SQL expression being selected, including any necessary quoting.
            </summary>
            <value>The select expression.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.SelectItemExpression.ToString">
            <summary>
            Converts to string.
            </summary>
            <returns>string.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.SelectItemColumn">
            <summary>
            Class SelectItemColumn.
            Implements the <see cref="T:ServiceStack.OrmLite.SelectItem" />
            </summary>
            <seealso cref="T:ServiceStack.OrmLite.SelectItem" />
        </member>
        <member name="M:ServiceStack.OrmLite.SelectItemColumn.#ctor(ServiceStack.OrmLite.IOrmLiteDialectProvider,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.OrmLite.SelectItemColumn" /> class.
            </summary>
            <param name="dialectProvider">The dialect provider.</param>
            <param name="columnName">Name of the column.</param>
            <param name="columnAlias">The column alias.</param>
            <param name="quotedTableAlias">The quoted table alias.</param>
            <exception cref="T:System.ArgumentNullException">nameof(columnName)</exception>
        </member>
        <member name="P:ServiceStack.OrmLite.SelectItemColumn.ColumnName">
            <summary>
            Unquoted column name being selected.
            </summary>
            <value>The name of the column.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.SelectItemColumn.QuotedTableAlias">
            <summary>
            Table name or alias used to prefix the column name, if any. Already quoted.
            </summary>
            <value>The quoted table alias.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.SelectItemColumn.ToString">
            <summary>
            Converts to string.
            </summary>
            <returns>string.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.OrmLiteDataParameter">
            <summary>
            Class OrmLiteDataParameter.
            Implements the <see cref="T:System.Data.IDbDataParameter" />
            </summary>
            <seealso cref="T:System.Data.IDbDataParameter" />
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteDataParameter.DbType">
            <summary>
            Gets or sets the type of the database.
            </summary>
            <value>The type of the database.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteDataParameter.Direction">
            <summary>
            Gets or sets the direction.
            </summary>
            <value>The direction.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteDataParameter.IsNullable">
            <summary>
            Gets or sets the is nullable.
            </summary>
            <value>The is nullable.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteDataParameter.ParameterName">
            <summary>
            Gets or sets the name of the parameter.
            </summary>
            <value>The name of the parameter.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteDataParameter.SourceColumn">
            <summary>
            Gets or sets the source column.
            </summary>
            <value>The source column.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteDataParameter.SourceVersion">
            <summary>
            Gets or sets the source version.
            </summary>
            <value>The source version.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteDataParameter.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteDataParameter.Precision">
            <summary>
            Gets or sets the precision.
            </summary>
            <value>The precision.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteDataParameter.Scale">
            <summary>
            Gets or sets the scale.
            </summary>
            <value>The scale.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteDataParameter.Size">
            <summary>
            Gets or sets the size.
            </summary>
            <value>The size.</value>
        </member>
        <member name="T:ServiceStack.OrmLite.DbDataParameterExtensions">
            <summary>
            Class DbDataParameterExtensions.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.DbDataParameterExtensions.CreateParam(System.Data.IDbConnection,System.String,System.Object,System.Type,System.Nullable{System.Data.DbType},System.Nullable{System.Byte},System.Nullable{System.Byte},System.Nullable{System.Int32})">
            <summary>
            Creates the parameter.
            </summary>
            <param name="db">The database.</param>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <param name="fieldType">Type of the field.</param>
            <param name="dbType">Type of the database.</param>
            <param name="precision">The precision.</param>
            <param name="scale">The scale.</param>
            <param name="size">The size.</param>
            <returns>System.Data.IDbDataParameter.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.DbDataParameterExtensions.CreateParam(ServiceStack.OrmLite.IOrmLiteDialectProvider,System.String,System.Object,System.Type,System.Nullable{System.Data.DbType},System.Nullable{System.Byte},System.Nullable{System.Byte},System.Nullable{System.Int32})">
            <summary>
            Creates the parameter.
            </summary>
            <param name="dialectProvider">The dialect provider.</param>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <param name="fieldType">Type of the field.</param>
            <param name="dbType">Type of the database.</param>
            <param name="precision">The precision.</param>
            <param name="scale">The scale.</param>
            <param name="size">The size.</param>
            <returns>System.Data.IDbDataParameter.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.DbDataParameterExtensions.ConfigureParam(ServiceStack.OrmLite.IOrmLiteDialectProvider,System.Data.IDbDataParameter,System.Object,System.Nullable{System.Data.DbType})">
            <summary>
            Configures the parameter.
            </summary>
            <param name="dialectProvider">The dialect provider.</param>
            <param name="p">The p.</param>
            <param name="value">The value.</param>
            <param name="dbType">Type of the database.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.DbDataParameterExtensions.AddQueryParam(ServiceStack.OrmLite.IOrmLiteDialectProvider,System.Data.IDbCommand,System.Object,ServiceStack.OrmLite.FieldDefinition)">
            <summary>
            Adds the query parameter.
            </summary>
            <param name="dialectProvider">The dialect provider.</param>
            <param name="dbCmd">The database command.</param>
            <param name="value">The value.</param>
            <param name="fieldDef">The field definition.</param>
            <returns>System.Data.IDbDataParameter.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.DbDataParameterExtensions.AddUpdateParam(ServiceStack.OrmLite.IOrmLiteDialectProvider,System.Data.IDbCommand,System.Object,ServiceStack.OrmLite.FieldDefinition)">
            <summary>
            Adds the update parameter.
            </summary>
            <param name="dialectProvider">The dialect provider.</param>
            <param name="dbCmd">The database command.</param>
            <param name="value">The value.</param>
            <param name="fieldDef">The field definition.</param>
            <returns>System.Data.IDbDataParameter.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.DbDataParameterExtensions.AddParam(ServiceStack.OrmLite.IOrmLiteDialectProvider,System.Data.IDbCommand,System.Object,ServiceStack.OrmLite.FieldDefinition,System.Action{System.Data.IDbDataParameter})">
            <summary>
            Adds the parameter.
            </summary>
            <param name="dialectProvider">The dialect provider.</param>
            <param name="dbCmd">The database command.</param>
            <param name="value">The value.</param>
            <param name="fieldDef">The field definition.</param>
            <param name="paramFilter">The parameter filter.</param>
            <returns>System.Data.IDbDataParameter.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.DbDataParameterExtensions.GetInsertParam(ServiceStack.OrmLite.IOrmLiteDialectProvider,System.Data.IDbCommand,System.Object,ServiceStack.OrmLite.FieldDefinition)">
            <summary>
            Gets the insert parameter.
            </summary>
            <param name="dialectProvider">The dialect provider.</param>
            <param name="dbCmd">The database command.</param>
            <param name="value">The value.</param>
            <param name="fieldDef">The field definition.</param>
            <returns>string.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.DbDataParameterExtensions.GetUpdateParam(ServiceStack.OrmLite.IOrmLiteDialectProvider,System.Data.IDbCommand,System.Object,ServiceStack.OrmLite.FieldDefinition)">
            <summary>
            Gets the update parameter.
            </summary>
            <param name="dialectProvider">The dialect provider.</param>
            <param name="dbCmd">The database command.</param>
            <param name="value">The value.</param>
            <param name="fieldDef">The field definition.</param>
            <returns>string.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.JoinFormatDelegate">
            <summary>
            Delegate JoinFormatDelegate
            </summary>
            <param name="dialect">The dialect.</param>
            <param name="tableDef">The table definition.</param>
            <param name="joinExpr">The join expr.</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.TableOptions">
            <summary>
            Class TableOptions.
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.TableOptions.Expression">
            <summary>
            Gets or sets the expression.
            </summary>
            <value>The expression.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.TableOptions.Alias">
            <summary>
            Gets or sets the alias.
            </summary>
            <value>The alias.</value>
        </member>
        <member name="F:ServiceStack.OrmLite.TableOptions.JoinFormat">
            <summary>
            The join format
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.TableOptions.ModelDef">
            <summary>
            The model definition
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.TableOptions.ParamName">
            <summary>
            The parameter name
            </summary>
        </member>
        <member name="T:ServiceStack.OrmLite.SqlExpressionVisitor">
            <summary>
            Class SqlExpressionVisitor.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpressionVisitor.Visit(System.Linq.Expressions.Expression)">
            <summary>
            Visits the specified exp.
            </summary>
            <param name="exp">The exp.</param>
            <returns>Expression.</returns>
            <exception cref="P:ServiceStack.OrmLite.Base.Text.DiagnosticEvent.Exception">Unhandled expression type: '{exp.NodeType}'</exception>
            <exception cref="T:System.Exception">Unhandled expression type: '{exp.NodeType}'</exception>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpressionVisitor.VisitBinding(System.Linq.Expressions.MemberBinding)">
            <summary>
            Visits the binding.
            </summary>
            <param name="binding">The binding.</param>
            <returns>MemberBinding.</returns>
            <exception cref="P:ServiceStack.OrmLite.Base.Text.DiagnosticEvent.Exception">Unhandled binding type '{binding.BindingType}'</exception>
            <exception cref="T:System.Exception">Unhandled binding type '{binding.BindingType}'</exception>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpressionVisitor.VisitElementInitializer(System.Linq.Expressions.ElementInit)">
            <summary>
            Visits the element initializer.
            </summary>
            <param name="initializer">The initializer.</param>
            <returns>ElementInit.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpressionVisitor.VisitUnary(System.Linq.Expressions.UnaryExpression)">
            <summary>
            Visits the unary.
            </summary>
            <param name="u">The u.</param>
            <returns>Expression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpressionVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)">
            <summary>
            Visits the binary.
            </summary>
            <param name="b">The b.</param>
            <returns>Expression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpressionVisitor.VisitTypeIs(System.Linq.Expressions.TypeBinaryExpression)">
            <summary>
            Visits the type is.
            </summary>
            <param name="b">The b.</param>
            <returns>Expression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpressionVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression)">
            <summary>
            Visits the constant.
            </summary>
            <param name="c">The c.</param>
            <returns>Expression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpressionVisitor.VisitConditional(System.Linq.Expressions.ConditionalExpression)">
            <summary>
            Visits the conditional.
            </summary>
            <param name="c">The c.</param>
            <returns>Expression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpressionVisitor.VisitParameter(System.Linq.Expressions.ParameterExpression)">
            <summary>
            Visits the parameter.
            </summary>
            <param name="p">The p.</param>
            <returns>Expression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpressionVisitor.VisitMemberAccess(System.Linq.Expressions.MemberExpression)">
            <summary>
            Visits the member access.
            </summary>
            <param name="m">The m.</param>
            <returns>Expression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Visits the method call.
            </summary>
            <param name="m">The m.</param>
            <returns>Expression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpressionVisitor.VisitExpressionList(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression})">
            <summary>
            Visits the expression list.
            </summary>
            <param name="original">The original.</param>
            <returns>ReadOnlyCollection&lt;Expression&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpressionVisitor.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)">
            <summary>
            Visits the member assignment.
            </summary>
            <param name="assignment">The assignment.</param>
            <returns>MemberAssignment.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpressionVisitor.VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)">
            <summary>
            Visits the member member binding.
            </summary>
            <param name="binding">The binding.</param>
            <returns>MemberMemberBinding.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpressionVisitor.VisitMemberListBinding(System.Linq.Expressions.MemberListBinding)">
            <summary>
            Visits the member list binding.
            </summary>
            <param name="binding">The binding.</param>
            <returns>MemberListBinding.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpressionVisitor.VisitBindingList(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.MemberBinding})">
            <summary>
            Visits the binding list.
            </summary>
            <param name="original">The original.</param>
            <returns>IEnumerable&lt;MemberBinding&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpressionVisitor.VisitElementInitializerList(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.ElementInit})">
            <summary>
            Visits the element initializer list.
            </summary>
            <param name="original">The original.</param>
            <returns>IEnumerable&lt;ElementInit&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpressionVisitor.VisitLambda(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Visits the lambda.
            </summary>
            <param name="lambda">The lambda.</param>
            <returns>Expression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpressionVisitor.VisitNew(System.Linq.Expressions.NewExpression)">
            <summary>
            Visits the new.
            </summary>
            <param name="nex">The nex.</param>
            <returns>NewExpression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpressionVisitor.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)">
            <summary>
            Visits the member initialize.
            </summary>
            <param name="init">The initialize.</param>
            <returns>Expression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpressionVisitor.VisitListInit(System.Linq.Expressions.ListInitExpression)">
            <summary>
            Visits the list initialize.
            </summary>
            <param name="init">The initialize.</param>
            <returns>Expression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpressionVisitor.VisitNewArray(System.Linq.Expressions.NewArrayExpression)">
            <summary>
            Visits the new array.
            </summary>
            <param name="na">The na.</param>
            <returns>Expression.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpressionVisitor.VisitInvocation(System.Linq.Expressions.InvocationExpression)">
            <summary>
            Visits the invocation.
            </summary>
            <param name="iv">The iv.</param>
            <returns>Expression.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.WriteExpressionCommandExtensions">
            <summary>
            Class WriteExpressionCommandExtensions.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.WriteExpressionCommandExtensions.UpdateOnlyFields``1(System.Data.IDbCommand,``0,ServiceStack.OrmLite.SqlExpression{``0},System.Action{System.Data.IDbCommand})">
            <summary>
            Update only Fields.
            </summary>
            <typeparam name="T">The Model</typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="model">The model.</param>
            <param name="onlyFields">The only fields.</param>
            <param name="commandFilter">The command filter.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.WriteExpressionCommandExtensions.UpdateOnlySql``1(System.Data.IDbCommand,``0,ServiceStack.OrmLite.SqlExpression{``0})">
            <summary>
            Updates the only SQL.
            </summary>
            <typeparam name="T">The Model</typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="model">The model.</param>
            <param name="onlyFields">The only fields.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.WriteExpressionCommandExtensions.UpdateOnlyFields``1(System.Data.IDbCommand,``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Action{System.Data.IDbCommand})">
            <summary>
            Updates the only.
            </summary>
            <typeparam name="T">The Model</typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="obj">The object.</param>
            <param name="onlyFields">The only fields.</param>
            <param name="where">The where.</param>
            <param name="commandFilter">The command filter.</param>
            <returns>System.Int32.</returns>
            <exception cref="T:System.ArgumentNullException">onlyFields</exception>
        </member>
        <member name="M:ServiceStack.OrmLite.WriteExpressionCommandExtensions.UpdateOnlyFields``1(System.Data.IDbCommand,``0,System.String[],System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Action{System.Data.IDbCommand})">
            <summary>
            Updates the only.
            </summary>
            <typeparam name="T">The Model</typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="obj">The object.</param>
            <param name="onlyFields">The only fields.</param>
            <param name="where">The where.</param>
            <param name="commandFilter">The command filter.</param>
            <returns>System.Int32.</returns>
            <exception cref="T:System.ArgumentNullException">onlyFields</exception>
        </member>
        <member name="M:ServiceStack.OrmLite.WriteExpressionCommandExtensions.UpdateOnlyFields``1(System.Data.IDbCommand,System.Linq.Expressions.Expression{System.Func{``0}},ServiceStack.OrmLite.SqlExpression{``0},System.Action{System.Data.IDbCommand})">
            <summary>
            Updates the only.
            </summary>
            <typeparam name="T">The Model</typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="updateFields">The update fields.</param>
            <param name="q">The q.</param>
            <param name="commandFilter">The command filter.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.WriteExpressionCommandExtensions.UpdateOnly``1(System.Data.IDbCommand,System.Linq.Expressions.Expression{System.Func{``0}},ServiceStack.OrmLite.SqlExpression{``0},System.Action{System.Data.IDbCommand})">
            <summary>
            Updates the only.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="updateFields">The update fields.</param>
            <param name="q">The q.</param>
            <param name="commandFilter">The command filter.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.WriteExpressionCommandExtensions.InitUpdateOnly``1(System.Data.IDbCommand,System.Linq.Expressions.Expression{System.Func{``0}},ServiceStack.OrmLite.SqlExpression{``0})">
            <summary>
            Initializes the update only.
            </summary>
            <typeparam name="T">The Model</typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="updateFields">The update fields.</param>
            <param name="q">The q.</param>
            <returns>IDbCommand.</returns>
            <exception cref="T:System.ArgumentNullException">updateFields</exception>
        </member>
        <member name="M:ServiceStack.OrmLite.WriteExpressionCommandExtensions.UpdateOnlyFields``1(System.Data.IDbCommand,System.Linq.Expressions.Expression{System.Func{``0}},System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter},System.Action{System.Data.IDbCommand})">
            <summary>
            Updates the only.
            </summary>
            <typeparam name="T">The Model</typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="updateFields">The update fields.</param>
            <param name="whereExpression">The where expression.</param>
            <param name="dbParams">The database parameters.</param>
            <param name="commandFilter">The command filter.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.WriteExpressionCommandExtensions.InitUpdateOnly``1(System.Data.IDbCommand,System.Linq.Expressions.Expression{System.Func{``0}},System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter})">
            <summary>
            Initializes the update only.
            </summary>
            <typeparam name="T">The Model</typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="updateFields">The update fields.</param>
            <param name="whereExpression">The where expression.</param>
            <param name="sqlParams">The SQL parameters.</param>
            <returns>IDbCommand.</returns>
            <exception cref="T:System.ArgumentNullException">updateFields</exception>
        </member>
        <member name="M:ServiceStack.OrmLite.WriteExpressionCommandExtensions.UpdateAdd``1(System.Data.IDbCommand,System.Linq.Expressions.Expression{System.Func{``0}},ServiceStack.OrmLite.SqlExpression{``0},System.Action{System.Data.IDbCommand})">
            <summary>
            Updates the add.
            </summary>
            <typeparam name="T">The Model</typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="updateFields">The update fields.</param>
            <param name="q">The q.</param>
            <param name="commandFilter">The command filter.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.WriteExpressionCommandExtensions.InitUpdateAdd``1(System.Data.IDbCommand,System.Linq.Expressions.Expression{System.Func{``0}},ServiceStack.OrmLite.SqlExpression{``0})">
            <summary>
            Initializes the update add.
            </summary>
            <typeparam name="T">The Model</typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="updateFields">The update fields.</param>
            <param name="q">The q.</param>
            <returns>IDbCommand.</returns>
            <exception cref="T:System.ArgumentNullException">updateFields</exception>
        </member>
        <member name="M:ServiceStack.OrmLite.WriteExpressionCommandExtensions.UpdateOnlyFields``1(System.Data.IDbCommand,System.Collections.Generic.Dictionary{System.String,System.Object},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Action{System.Data.IDbCommand})">
            <summary>
            Updates the only.
            </summary>
            <typeparam name="T">The Model</typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="updateFields">The update fields.</param>
            <param name="where">The where.</param>
            <param name="commandFilter">The command filter.</param>
            <returns>System.Int32.</returns>
            <exception cref="T:System.ArgumentNullException">updateFields</exception>
        </member>
        <member name="M:ServiceStack.OrmLite.WriteExpressionCommandExtensions.GetUpdateOnlyWhereExpression``1(ServiceStack.OrmLite.IOrmLiteDialectProvider,System.Collections.Generic.Dictionary{System.String,System.Object},System.Object[]@)">
            <summary>
            Gets the update only where expression.
            </summary>
            <typeparam name="T">The Model</typeparam>
            <param name="dialectProvider">The dialect provider.</param>
            <param name="updateFields">The update fields.</param>
            <param name="args">The arguments.</param>
            <returns>System.String.</returns>
            <exception cref="T:System.NotSupportedException">'{typeof(T).Name}' does not have a primary key</exception>
        </member>
        <member name="M:ServiceStack.OrmLite.WriteExpressionCommandExtensions.UpdateOnlyFields``1(System.Data.IDbCommand,System.Collections.Generic.Dictionary{System.String,System.Object},System.Action{System.Data.IDbCommand})">
            <summary>
            Updates the only.
            </summary>
            <typeparam name="T">The Model</typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="updateFields">The update fields.</param>
            <param name="commandFilter">The command filter.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.WriteExpressionCommandExtensions.UpdateOnlyFields``1(System.Data.IDbCommand,System.Collections.Generic.Dictionary{System.String,System.Object},System.String,System.Object[],System.Action{System.Data.IDbCommand})">
            <summary>
            Updates the only.
            </summary>
            <typeparam name="T">The Model</typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="updateFields">The update fields.</param>
            <param name="whereExpression">The where expression.</param>
            <param name="whereParams">The where parameters.</param>
            <param name="commandFilter">The command filter.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.WriteExpressionCommandExtensions.UpdateOnlyReferences``1(System.Data.IDbCommand,System.Collections.Generic.Dictionary{System.String,System.Object},System.Func{System.Collections.Generic.Dictionary{System.String,System.Object},System.Int32})">
            <summary>
            The update only references.
            </summary>
            <typeparam name="T">#
            The Model</typeparam>
            <param name="dbCmd">The db cmd.</param>
            <param name="updateFields">The update fields.</param>
            <param name="fn">The fn.</param>
            <returns>The <see cref="T:System.Int32" />.</returns>
            <exception cref="T:System.ArgumentNullException">updateFields</exception>
        </member>
        <member name="M:ServiceStack.OrmLite.WriteExpressionCommandExtensions.PrepareUpdateOnly``1(System.Data.IDbCommand,System.Collections.Generic.Dictionary{System.String,System.Object},System.String,System.Object[])">
            <summary>
            Prepares the update only.
            </summary>
            <typeparam name="T">The Model</typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="updateFields">The update fields.</param>
            <param name="whereExpression">The where expression.</param>
            <param name="whereParams">The where parameters.</param>
            <exception cref="T:System.ArgumentNullException">updateFields</exception>
        </member>
        <member name="M:ServiceStack.OrmLite.WriteExpressionCommandExtensions.UpdateNonDefaults``1(System.Data.IDbCommand,``0,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Updates the non defaults.
            </summary>
            <typeparam name="T">The Model</typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="item">The item.</param>
            <param name="where">The where.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.WriteExpressionCommandExtensions.Update``1(System.Data.IDbCommand,``0,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Action{System.Data.IDbCommand})">
            <summary>
            Updates the specified item.
            </summary>
            <typeparam name="T">The Model</typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="item">The item.</param>
            <param name="expression">The expression.</param>
            <param name="commandFilter">The command filter.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.WriteExpressionCommandExtensions.Update``1(System.Data.IDbCommand,System.Object,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Action{System.Data.IDbCommand})">
            <summary>
            Updates the specified update only.
            </summary>
            <typeparam name="T">The Model</typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="updateOnly">The update only.</param>
            <param name="where">The where.</param>
            <param name="commandFilter">The command filter.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.WriteExpressionCommandExtensions.PrepareUpdateAnonSql``1(System.Data.IDbCommand,ServiceStack.OrmLite.IOrmLiteDialectProvider,System.Object,System.String)">
            <summary>
            Prepares the update anon SQL.
            </summary>
            <typeparam name="T">The Model</typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="dialectProvider">The dialect provider.</param>
            <param name="updateOnly">The update only.</param>
            <param name="whereSql">The where SQL.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.WriteExpressionCommandExtensions.InsertOnly``1(System.Data.IDbCommand,``0,System.String[],System.Boolean)">
            <summary>
            Inserts the only.
            </summary>
            <typeparam name="T">The Model</typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="obj">The object.</param>
            <param name="onlyFields">The only fields.</param>
            <param name="selectIdentity">if set to <c>true</c> [select identity].</param>
            <returns>System.Int64.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.WriteExpressionCommandExtensions.Upsert``1(System.Data.IDbCommand,``0,ServiceStack.OrmLite.SqlExpression{``0},System.Action{System.Data.IDbCommand})">
            <summary>
            Upserts the specified model.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="model">The model.</param>
            <param name="q">The q.</param>
            <param name="commandFilter">The command filter.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.WriteExpressionCommandExtensions.InsertOnly``1(System.Data.IDbCommand,System.Linq.Expressions.Expression{System.Func{``0}},System.Boolean)">
            <summary>
            Inserts the only.
            </summary>
            <typeparam name="T">The Model</typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="insertFields">The insert fields.</param>
            <param name="selectIdentity">if set to <c>true</c> [select identity].</param>
            <returns>System.Int64.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.WriteExpressionCommandExtensions.InitUpsert``1(System.Data.IDbCommand,``0,ServiceStack.OrmLite.SqlExpression{``0})">
            <summary>
            Initializes the upsert.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="model">The model.</param>
            <param name="q">The q.</param>
            <returns>IDbCommand.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.WriteExpressionCommandExtensions.InitInsertOnly``1(System.Data.IDbCommand,System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Initializes the insert only.
            </summary>
            <typeparam name="T">The Model</typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="insertFields">The insert fields.</param>
            <returns>IDbCommand.</returns>
            <exception cref="T:System.ArgumentNullException">insertFields</exception>
        </member>
        <member name="M:ServiceStack.OrmLite.WriteExpressionCommandExtensions.Delete``1(System.Data.IDbCommand,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Action{System.Data.IDbCommand})">
            <summary>
            Deletes the specified where.
            </summary>
            <typeparam name="T">The Model</typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="where">The where.</param>
            <param name="commandFilter">The command filter.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.WriteExpressionCommandExtensions.Delete``1(System.Data.IDbCommand,ServiceStack.OrmLite.SqlExpression{``0},System.Action{System.Data.IDbCommand})">
            <summary>
            Deletes the specified where.
            </summary>
            <typeparam name="T">The Model</typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="where">The where.</param>
            <param name="commandFilter">The command filter.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.WriteExpressionCommandExtensions.DeleteWhere``1(System.Data.IDbCommand,System.String,System.Object[])">
            <summary>
            Deletes the where.
            </summary>
            <typeparam name="T">The Model</typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="whereFilter">The where filter.</param>
            <param name="whereParams">The where parameters.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.FieldDefinition">
            <summary>
            Class FieldDefinition.
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.FieldDefinition.ModelDef">
            <summary>
            Gets or sets the model def.
            </summary>
            <value>The model definition.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.FieldDefinition.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.FieldDefinition.Alias">
            <summary>
            Gets or sets the alias.
            </summary>
            <value>The alias.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.FieldDefinition.FieldName">
            <summary>
            Gets the name of the field.
            </summary>
            <value>The name of the field.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.FieldDefinition.FieldType">
            <summary>
            Gets or sets the type of the field.
            </summary>
            <value>The type of the field.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.FieldDefinition.FieldTypeDefaultValue">
            <summary>
            Gets or sets the field type default value.
            </summary>
            <value>The field type default value.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.FieldDefinition.TreatAsType">
            <summary>
            Gets or sets the type of the treat as.
            </summary>
            <value>The type of the treat as.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.FieldDefinition.ColumnType">
            <summary>
            Gets the type of the column.
            </summary>
            <value>The type of the column.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.FieldDefinition.PropertyInfo">
            <summary>
            Gets or sets the property information.
            </summary>
            <value>The property information.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.FieldDefinition.IsPrimaryKey">
            <summary>
            Gets or sets a value indicating whether this instance is primary key.
            </summary>
            <value><c>true</c> if this instance is primary key; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.FieldDefinition.AutoIncrement">
            <summary>
            Gets or sets a value indicating whether [automatic increment].
            </summary>
            <value><c>true</c> if [automatic increment]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.FieldDefinition.AutoId">
            <summary>
            Gets or sets a value indicating whether [automatic identifier].
            </summary>
            <value><c>true</c> if [automatic identifier]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.FieldDefinition.IsNullable">
            <summary>
            Gets or sets a value indicating whether this instance is nullable.
            </summary>
            <value><c>true</c> if this instance is nullable; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.FieldDefinition.IsIndexed">
            <summary>
            Gets or sets a value indicating whether this instance is indexed.
            </summary>
            <value><c>true</c> if this instance is indexed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.FieldDefinition.IsUniqueIndex">
            <summary>
            Gets or sets a value indicating whether this instance is unique index.
            </summary>
            <value><c>true</c> if this instance is unique index; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.FieldDefinition.IsClustered">
            <summary>
            Gets or sets a value indicating whether this instance is clustered.
            </summary>
            <value><c>true</c> if this instance is clustered; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.FieldDefinition.IsNonClustered">
            <summary>
            Gets or sets a value indicating whether this instance is non clustered.
            </summary>
            <value><c>true</c> if this instance is non clustered; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.FieldDefinition.IndexName">
            <summary>
            Gets or sets the name of the index.
            </summary>
            <value>The name of the index.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.FieldDefinition.IsRowVersion">
            <summary>
            Gets or sets a value indicating whether this instance is row version.
            </summary>
            <value><c>true</c> if this instance is row version; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.FieldDefinition.FieldLength">
            <summary>
            Gets or sets the length of the field.
            </summary>
            <value>The length of the field.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.FieldDefinition.Scale">
            <summary>
            Gets or sets the scale.
            </summary>
            <value>The scale.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.FieldDefinition.DefaultValue">
            <summary>
            Gets or sets the default value.
            </summary>
            <value>The default value.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.FieldDefinition.DefaultValueConstraint">
            <summary>
            Gets or sets the default value constraint.
            </summary>
            <value>The default value constraint.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.FieldDefinition.CheckConstraint">
            <summary>
            Gets or sets the check constraint.
            </summary>
            <value>The check constraint.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.FieldDefinition.IsUniqueConstraint">
            <summary>
            Gets or sets a value indicating whether this instance is unique constraint.
            </summary>
            <value><c>true</c> if this instance is unique constraint; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.FieldDefinition.Order">
            <summary>
            Gets or sets the order.
            </summary>
            <value>The order.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.FieldDefinition.ForeignKey">
            <summary>
            Gets or sets the foreign key.
            </summary>
            <value>The foreign key.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.FieldDefinition.GetValueFn">
            <summary>
            Gets or sets the get value function.
            </summary>
            <value>The get value function.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.FieldDefinition.SetValueFn">
            <summary>
            Gets or sets the set value function.
            </summary>
            <value>The set value function.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.FieldDefinition.GetValue(System.Object)">
            <summary>
            Gets the value.
            </summary>
            <param name="instance">The instance.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.FieldDefinition.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value.
            </summary>
            <param name="instance">The instance.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.FieldDefinition.GetQuotedName(ServiceStack.OrmLite.IOrmLiteDialectProvider)">
            <summary>
            Gets the name of the quoted.
            </summary>
            <param name="dialectProvider">The dialect provider.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.FieldDefinition.GetQuotedValue(System.Object,ServiceStack.OrmLite.IOrmLiteDialectProvider)">
            <summary>
            Gets the quoted value.
            </summary>
            <param name="fromInstance">From instance.</param>
            <param name="dialect">The dialect.</param>
            <returns>System.String.</returns>
        </member>
        <member name="P:ServiceStack.OrmLite.FieldDefinition.Sequence">
            <summary>
            Gets or sets the sequence.
            </summary>
            <value>The sequence.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.FieldDefinition.IsComputed">
            <summary>
            Gets or sets a value indicating whether this instance is computed.
            </summary>
            <value><c>true</c> if this instance is computed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.FieldDefinition.IsPersisted">
            <summary>
            Gets or sets a value indicating whether this instance is persisted.
            </summary>
            <value><c>true</c> if this instance is persisted; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.FieldDefinition.ComputeExpression">
            <summary>
            Gets or sets the compute expression.
            </summary>
            <value>The compute expression.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.FieldDefinition.CustomSelect">
            <summary>
            Gets or sets the custom select.
            </summary>
            <value>The custom select.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.FieldDefinition.CustomInsert">
            <summary>
            Gets or sets the custom insert.
            </summary>
            <value>The custom insert.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.FieldDefinition.CustomUpdate">
            <summary>
            Gets or sets the custom update.
            </summary>
            <value>The custom update.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.FieldDefinition.RequiresAlias">
            <summary>
            Gets a value indicating whether [requires alias].
            </summary>
            <value><c>true</c> if [requires alias]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.FieldDefinition.BelongToModelName">
            <summary>
            Gets or sets the name of the belong to model.
            </summary>
            <value>The name of the belong to model.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.FieldDefinition.IsReference">
            <summary>
            Gets or sets a value indicating whether this instance is reference.
            </summary>
            <value><c>true</c> if this instance is reference; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.FieldDefinition.ReferenceSelfId">
            <summary>
            Whether the PK for the Reference Table is a field on the same table
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.FieldDefinition.ReferenceRefId">
            <summary>
            The PK to use for the Reference Table (e.g. what ReferenceSelfId references)
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.FieldDefinition.FieldReference">
            <summary>
            References a Field on another Table
            [ReferenceField(typeof(Target), nameof(TargetId))]
            public TargetFieldType TargetFieldName { get; set; }
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.FieldDefinition.CustomFieldDefinition">
            <summary>
            Gets or sets the custom field definition.
            </summary>
            <value>The custom field definition.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.FieldDefinition.IsRefType">
            <summary>
            Gets or sets a value indicating whether this instance is reference type.
            </summary>
            <value><c>true</c> if this instance is reference type; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.FieldDefinition.IgnoreOnUpdate">
            <summary>
            Gets or sets a value indicating whether [ignore on update].
            </summary>
            <value><c>true</c> if [ignore on update]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.FieldDefinition.IgnoreOnInsert">
            <summary>
            Gets or sets a value indicating whether [ignore on insert].
            </summary>
            <value><c>true</c> if [ignore on insert]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.FieldDefinition.ReturnOnInsert">
            <summary>
            Gets or sets a value indicating whether [return on insert].
            </summary>
            <value><c>true</c> if [return on insert]; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.FieldDefinition.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.FieldDefinition.ShouldSkipInsert">
            <summary>
            Shoulds the skip insert.
            </summary>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.FieldDefinition.ShouldSkipUpdate">
            <summary>
            Shoulds the skip update.
            </summary>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.FieldDefinition.ShouldSkipDelete">
            <summary>
            Shoulds the skip delete.
            </summary>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.FieldDefinition.IsSelfRefField(ServiceStack.OrmLite.FieldDefinition)">
            <summary>
            Determines whether [is self reference field] [the specified field definition].
            </summary>
            <param name="fieldDef">The field definition.</param>
            <returns><c>true</c> if [is self reference field] [the specified field definition]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.FieldDefinition.IsSelfRefField(System.String)">
            <summary>
            Determines whether [is self reference field] [the specified name].
            </summary>
            <param name="name">The name.</param>
            <returns><c>true</c> if [is self reference field] [the specified name]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.FieldDefinition.Clone(System.Action{ServiceStack.OrmLite.FieldDefinition})">
            <summary>
            Clones the specified modifier.
            </summary>
            <param name="modifier">The modifier.</param>
            <returns>FieldDefinition.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.FieldReference">
            <summary>
            Class FieldReference.
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.FieldReference.FieldDef">
            <summary>
            Gets the field definition.
            </summary>
            <value>The field definition.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.FieldReference.#ctor(ServiceStack.OrmLite.FieldDefinition)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.OrmLite.FieldReference"/> class.
            </summary>
            <param name="fieldDef">The field definition.</param>
        </member>
        <member name="P:ServiceStack.OrmLite.FieldReference.RefModel">
            <summary>
            Foreign Key Table name
            </summary>
            <value>The reference model.</value>
        </member>
        <member name="F:ServiceStack.OrmLite.FieldReference.refModelDef">
            <summary>
            The reference model definition
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.FieldReference.RefModelDef">
            <summary>
            Gets the reference model definition.
            </summary>
            <value>The reference model definition.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.FieldReference.RefId">
            <summary>
            The Field name on current Model to use for the Foreign Key Table Lookup
            </summary>
            <value>The reference identifier.</value>
        </member>
        <member name="F:ServiceStack.OrmLite.FieldReference.refIdFieldDef">
            <summary>
            The reference identifier field definition
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.FieldReference.RefIdFieldDef">
            <summary>
            Gets the reference identifier field definition.
            </summary>
            <value>The reference identifier field definition.</value>
            <exception cref="T:System.ArgumentException">Could not find '{this.RefId}' in '{this.RefModel.Name}'</exception>
        </member>
        <member name="P:ServiceStack.OrmLite.FieldReference.RefField">
            <summary>
            Specify Field to reference (if different from property name)
            </summary>
            <value>The reference field.</value>
        </member>
        <member name="F:ServiceStack.OrmLite.FieldReference.refFieldDef">
            <summary>
            The reference field definition
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.FieldReference.RefFieldDef">
            <summary>
            Gets the reference field definition.
            </summary>
            <value>The reference field definition.</value>
            <exception cref="T:System.ArgumentException">Could not find '{this.RefField}' in '{this.RefModelDef.Name}'</exception>
        </member>
        <member name="T:ServiceStack.OrmLite.ForeignKeyConstraint">
            <summary>
            Class ForeignKeyConstraint.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.ForeignKeyConstraint.#ctor(System.Type,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.OrmLite.ForeignKeyConstraint" /> class.
            </summary>
            <param name="type">The type.</param>
            <param name="onDelete">The on delete.</param>
            <param name="onUpdate">The on update.</param>
            <param name="foreignKeyName">Name of the foreign key.</param>
        </member>
        <member name="P:ServiceStack.OrmLite.ForeignKeyConstraint.ReferenceType">
            <summary>
            Gets the type of the reference.
            </summary>
            <value>The type of the reference.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.ForeignKeyConstraint.OnDelete">
            <summary>
            Gets the on delete.
            </summary>
            <value>The on delete.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.ForeignKeyConstraint.OnUpdate">
            <summary>
            Gets the on update.
            </summary>
            <value>The on update.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.ForeignKeyConstraint.ForeignKeyName">
            <summary>
            Gets the name of the foreign key.
            </summary>
            <value>The name of the foreign key.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.ForeignKeyConstraint.GetForeignKeyName(ServiceStack.OrmLite.ModelDefinition,ServiceStack.OrmLite.ModelDefinition,ServiceStack.OrmLite.INamingStrategy,ServiceStack.OrmLite.FieldDefinition)">
            <summary>
            Gets the name of the foreign key.
            </summary>
            <param name="modelDef">The model definition.</param>
            <param name="refModelDef">The reference model definition.</param>
            <param name="namingStrategy">The naming strategy.</param>
            <param name="fieldDef">The field definition.</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.INamingStrategy">
            <summary>
            Interface INamingStrategy
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.INamingStrategy.GetSchemaName(System.String)">
            <summary>
            Gets the name of the schema.
            </summary>
            <param name="name">The name.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.INamingStrategy.GetSchemaName(ServiceStack.OrmLite.ModelDefinition)">
            <summary>
            Gets the name of the schema.
            </summary>
            <param name="modelDef">The model definition.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.INamingStrategy.GetTableName(System.String)">
            <summary>
            Gets the name of the table.
            </summary>
            <param name="name">The name.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.INamingStrategy.GetTableName(ServiceStack.OrmLite.ModelDefinition)">
            <summary>
            Gets the name of the table.
            </summary>
            <param name="modelDef">The model definition.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.INamingStrategy.GetColumnName(System.String)">
            <summary>
            Gets the name of the column.
            </summary>
            <param name="name">The name.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.INamingStrategy.GetSequenceName(System.String,System.String)">
            <summary>
            Gets the name of the sequence.
            </summary>
            <param name="modelName">Name of the model.</param>
            <param name="fieldName">Name of the field.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.INamingStrategy.ApplyNameRestrictions(System.String)">
            <summary>
            Applies the name restrictions.
            </summary>
            <param name="name">The name.</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.IndexFieldsCacheKey">
            <summary>
            Class IndexFieldsCacheKey.
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.IndexFieldsCacheKey.hashCode">
            <summary>
            The hash code
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.IndexFieldsCacheKey.ModelDefinition">
            <summary>
            Gets the model definition.
            </summary>
            <value>The model definition.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.IndexFieldsCacheKey.Dialect">
            <summary>
            Gets the dialect.
            </summary>
            <value>The dialect.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.IndexFieldsCacheKey.Fields">
            <summary>
            Gets the fields.
            </summary>
            <value>The fields.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.IndexFieldsCacheKey.#ctor(System.String,ServiceStack.OrmLite.ModelDefinition,ServiceStack.OrmLite.IOrmLiteDialectProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.OrmLite.IndexFieldsCacheKey"/> class.
            </summary>
            <param name="fields">The fields.</param>
            <param name="modelDefinition">The model definition.</param>
            <param name="dialect">The dialect.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.IndexFieldsCacheKey.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IndexFieldsCacheKey.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.IOrmLiteConverter">
            <summary>
            Interface IOrmLiteConverter
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.IOrmLiteConverter.DialectProvider">
            <summary>
            Gets or sets the dialect provider.
            </summary>
            <value>The dialect provider.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.IOrmLiteConverter.DbType">
            <summary>
            Gets the type of the database.
            </summary>
            <value>The type of the database.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.IOrmLiteConverter.ColumnDefinition">
            <summary>
            Gets the column definition.
            </summary>
            <value>The column definition.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteConverter.ToQuotedString(System.Type,System.Object)">
            <summary>
            Converts to quotedstring.
            </summary>
            <param name="fieldType">Type of the field.</param>
            <param name="value">The value.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteConverter.InitDbParam(System.Data.IDbDataParameter,System.Type)">
            <summary>
            Initializes the database parameter.
            </summary>
            <param name="p">The p.</param>
            <param name="fieldType">Type of the field.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteConverter.ToDbValue(System.Type,System.Object)">
            <summary>
            Converts to dbvalue.
            </summary>
            <param name="fieldType">Type of the field.</param>
            <param name="value">The value.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteConverter.FromDbValue(System.Type,System.Object)">
            <summary>
            Froms the database value.
            </summary>
            <param name="fieldType">Type of the field.</param>
            <param name="value">The value.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteConverter.GetValue(System.Data.IDataReader,System.Int32,System.Object[])">
            <summary>
            Gets the value.
            </summary>
            <param name="reader">The reader.</param>
            <param name="columnIndex">Index of the column.</param>
            <param name="values">The values.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.IHasColumnDefinitionLength">
            <summary>
            Interface IHasColumnDefinitionLength
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.IHasColumnDefinitionLength.GetColumnDefinition(System.Nullable{System.Int32})">
            <summary>
            Gets the column definition.
            </summary>
            <param name="length">The length.</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.IHasColumnDefinitionPrecision">
            <summary>
            Interface IHasColumnDefinitionPrecision
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.IHasColumnDefinitionPrecision.GetColumnDefinition(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Gets the column definition.
            </summary>
            <param name="precision">The precision.</param>
            <param name="scale">The scale.</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.OrmLiteConverter">
            <summary>
            Class OrmLiteConverter.
            Implements the <see cref="T:ServiceStack.OrmLite.IOrmLiteConverter" />
            </summary>
            <seealso cref="T:ServiceStack.OrmLite.IOrmLiteConverter" />
        </member>
        <member name="F:ServiceStack.OrmLite.OrmLiteConverter.Log">
            <summary>
            The log
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteConverter.DialectProvider">
            <summary>
            RDBMS Dialect this Converter is for. Injected at registration.
            </summary>
            <value>The dialect provider.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteConverter.ColumnDefinition">
            <summary>
            SQL Column Definition used in CREATE Table.
            </summary>
            <value>The column definition.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteConverter.DbType">
            <summary>
            Used in DB Params. Defaults to DbType.String
            </summary>
            <value>The type of the database.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteConverter.ToQuotedString(System.Type,System.Object)">
            <summary>
            Quoted Value in SQL Statement
            </summary>
            <param name="fieldType">Type of the field.</param>
            <param name="value">The value.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteConverter.InitDbParam(System.Data.IDbDataParameter,System.Type)">
            <summary>
            Customize how DB Param is initialized. Useful for supporting RDBMS-specific Types.
            </summary>
            <param name="p">The p.</param>
            <param name="fieldType">Type of the field.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteConverter.ToDbValue(System.Type,System.Object)">
            <summary>
            Parameterized value in parameterized queries
            </summary>
            <param name="fieldType">Type of the field.</param>
            <param name="value">The value.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteConverter.FromDbValue(System.Type,System.Object)">
            <summary>
            Value from DB to Populate on POCO Data Model with
            </summary>
            <param name="fieldType">Type of the field.</param>
            <param name="value">The value.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteConverter.GetValue(System.Data.IDataReader,System.Int32,System.Object[])">
            <summary>
            Retrieve Value from ADO.NET IDataReader. Defaults to reader.GetValue()
            </summary>
            <param name="reader">The reader.</param>
            <param name="columnIndex">Index of the column.</param>
            <param name="values">The values.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.NativeValueOrmLiteConverter">
            <summary>
            For Types that are natively supported by RDBMS's and shouldn't be quoted
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.NativeValueOrmLiteConverter.ToQuotedString(System.Type,System.Object)">
            <summary>
            Quoted Value in SQL Statement
            </summary>
            <param name="fieldType">Type of the field.</param>
            <param name="value">The value.</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.OrmLiteConverterExtensions">
            <summary>
            Class OrmLiteConverterExtensions.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteConverterExtensions.ConvertNumber(ServiceStack.OrmLite.IOrmLiteConverter,System.Type,System.Object)">
            <summary>
            Converts the number.
            </summary>
            <param name="converter">The converter.</param>
            <param name="toIntegerType">Type of to integer.</param>
            <param name="value">The value.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteConverterExtensions.ConvertNumber(ServiceStack.OrmLite.IOrmLiteDialectProvider,System.Type,System.Object)">
            <summary>
            Converts the number.
            </summary>
            <param name="dialectProvider">The dialect provider.</param>
            <param name="toIntegerType">Type of to integer.</param>
            <param name="value">The value.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.IOrmLiteDialectProvider">
            <summary>
            Interface IOrmLiteDialectProvider
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.Init(System.String)">
            <summary>
            Configure Provider with connection string options 
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.RegisterConverter``1(ServiceStack.OrmLite.IOrmLiteConverter)">
            <summary>
            Register custom value type converter  
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.InitConnection(System.Data.IDbConnection)">
            <summary>
            Initializes the connection.
            </summary>
            <param name="dbConn">The database connection.</param>
        </member>
        <member name="P:ServiceStack.OrmLite.IOrmLiteDialectProvider.OnOpenConnection">
            <summary>
            Invoked when a DB Connection is opened
            </summary>
            <value>The on open connection.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.IOrmLiteDialectProvider.ExecFilter">
            <summary>
            Gets or sets the execute filter.
            </summary>
            <value>The execute filter.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.GetConverter(System.Type)">
            <summary>
            Gets the explicit Converter registered for a specific type
            </summary>
            <param name="type">The type.</param>
            <returns>IOrmLiteConverter.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.GetConverterBestMatch(System.Type)">
            <summary>
            Return best matching converter, falling back to Enum, Value or Ref Type Converters
            </summary>
            <param name="type">The type.</param>
            <returns>IOrmLiteConverter.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.GetConverterBestMatch(ServiceStack.OrmLite.FieldDefinition)">
            <summary>
            Gets the converter best match.
            </summary>
            <param name="fieldDef">The field definition.</param>
            <returns>IOrmLiteConverter.</returns>
        </member>
        <member name="P:ServiceStack.OrmLite.IOrmLiteDialectProvider.ParamString">
            <summary>
            Gets or sets the parameter string.
            </summary>
            <value>The parameter string.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.EscapeWildcards(System.String)">
            <summary>
            Escapes the wildcards.
            </summary>
            <param name="value">The value.</param>
            <returns>System.String.</returns>
        </member>
        <member name="P:ServiceStack.OrmLite.IOrmLiteDialectProvider.NamingStrategy">
            <summary>
            Gets or sets the naming strategy.
            </summary>
            <value>The naming strategy.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.IOrmLiteDialectProvider.StringSerializer">
            <summary>
            Gets or sets the string serializer.
            </summary>
            <value>The string serializer.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.IOrmLiteDialectProvider.ParamNameFilter">
            <summary>
            Gets or sets the parameter name filter.
            </summary>
            <value>The parameter name filter.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.IOrmLiteDialectProvider.Variables">
            <summary>
            Gets the variables.
            </summary>
            <value>The variables.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.IOrmLiteDialectProvider.SupportsSchema">
            <summary>
            Gets a value indicating whether [supports schema].
            </summary>
            <value><c>true</c> if [supports schema]; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.GetQuotedValue(System.String)">
            <summary>
            Quote the string so that it can be used inside an SQL-expression
            Escape quotes inside the string
            </summary>
            <param name="paramValue">The parameter value.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.GetQuotedValue(System.Object,System.Type)">
            <summary>
            Gets the quoted value.
            </summary>
            <param name="value">The value.</param>
            <param name="fieldType">Type of the field.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.GetDefaultValue(System.Type,System.String)">
            <summary>
            Gets the default value.
            </summary>
            <param name="tableType">Type of the table.</param>
            <param name="fieldName">Name of the field.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.GetDefaultValue(ServiceStack.OrmLite.FieldDefinition)">
            <summary>
            Gets the default value.
            </summary>
            <param name="fieldDef">The field definition.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.HasInsertReturnValues(ServiceStack.OrmLite.ModelDefinition)">
            <summary>
            Determines whether [has insert return values] [the specified model definition].
            </summary>
            <param name="modelDef">The model definition.</param>
            <returns><c>true</c> if [has insert return values] [the specified model definition]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.GetParamValue(System.Object,System.Type)">
            <summary>
            Gets the parameter value.
            </summary>
            <param name="value">The value.</param>
            <param name="fieldType">Type of the field.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.InitQueryParam(System.Data.IDbDataParameter)">
            <summary>
            Initializes the query parameter.
            </summary>
            <param name="param">The parameter.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.InitUpdateParam(System.Data.IDbDataParameter)">
            <summary>
            Initializes the update parameter.
            </summary>
            <param name="param">The parameter.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.ToDbValue(System.Object,System.Type)">
            <summary>
            Converts to dbvalue.
            </summary>
            <param name="value">The value.</param>
            <param name="type">The type.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.FromDbValue(System.Object,System.Type)">
            <summary>
            Froms the database value.
            </summary>
            <param name="value">The value.</param>
            <param name="type">The type.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.GetValue(System.Data.IDataReader,System.Int32,System.Type)">
            <summary>
            Gets the value.
            </summary>
            <param name="reader">The reader.</param>
            <param name="columnIndex">Index of the column.</param>
            <param name="type">The type.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.GetValues(System.Data.IDataReader,System.Object[])">
            <summary>
            Gets the values.
            </summary>
            <param name="reader">The reader.</param>
            <param name="values">The values.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.CreateConnection(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Creates the connection.
            </summary>
            <param name="filePath">The file path.</param>
            <param name="options">The options.</param>
            <returns>IDbConnection.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.GetTableName(System.Type)">
            <summary>
            Gets the name of the table.
            </summary>
            <param name="modelType">Type of the model.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.GetTableName(ServiceStack.OrmLite.ModelDefinition)">
            <summary>
            Gets the name of the table.
            </summary>
            <param name="modelDef">The model definition.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.GetTableName(ServiceStack.OrmLite.ModelDefinition,System.Boolean)">
            <summary>
            Gets the name of the table.
            </summary>
            <param name="modelDef">The model definition.</param>
            <param name="useStrategy">if set to <c>true</c> [use strategy].</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.GetTableName(System.String,System.String)">
            <summary>
            Gets the name of the table.
            </summary>
            <param name="table">The table.</param>
            <param name="schema">The schema.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.GetTableName(System.String,System.String,System.Boolean)">
            <summary>
            Gets the name of the table.
            </summary>
            <param name="table">The table.</param>
            <param name="schema">The schema.</param>
            <param name="useStrategy">if set to <c>true</c> [use strategy].</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.GetTableNameWithBrackets``1">
            <summary>
            Gets the table name with brackets.
            </summary>
            <typeparam name="T"></typeparam>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.GetTableNameWithBrackets(ServiceStack.OrmLite.ModelDefinition)">
            <summary>
            Gets the table name with brackets.
            </summary>
            <param name="modelDef">The model definition.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.GetTableNameWithBrackets(System.String,System.String)">
            <summary>
            Gets the table name with brackets.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="schema">The schema.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.GetQuotedTableName(ServiceStack.OrmLite.ModelDefinition)">
            <summary>
            Gets the name of the quoted table.
            </summary>
            <param name="modelDef">The model definition.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.GetQuotedTableName(System.String,System.String)">
            <summary>
            Gets the name of the quoted table.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="schema">The schema.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.GetQuotedTableName(System.String,System.String,System.Boolean)">
            <summary>
            Gets the name of the quoted table.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="schema">The schema.</param>
            <param name="useStrategy">if set to <c>true</c> [use strategy].</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.GetQuotedColumnName(System.String)">
            <summary>
            Gets the name of the quoted column.
            </summary>
            <param name="columnName">Name of the column.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.GetQuotedName(System.String)">
            <summary>
            Gets the name of the quoted.
            </summary>
            <param name="name">The name.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.GetQuotedName(System.String,System.String)">
            <summary>
            Gets the name of the quoted.
            </summary>
            <param name="name">The name.</param>
            <param name="schema">The schema.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.SanitizeFieldNameForParamName(System.String)">
            <summary>
            Sanitizes the name of the field name for parameter.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.GetColumnDefinition(ServiceStack.OrmLite.FieldDefinition)">
            <summary>
            Gets the column definition.
            </summary>
            <param name="fieldDef">The field definition.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.GetColumnDefinition(ServiceStack.OrmLite.FieldDefinition,ServiceStack.OrmLite.ModelDefinition)">
            <summary>
            Gets the column definition.
            </summary>
            <param name="fieldDef">The field definition.</param>
            <param name="modelDef">The model definition.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.GetLastInsertId(System.Data.IDbCommand)">
            <summary>
            Gets the last insert identifier.
            </summary>
            <param name="command">The command.</param>
            <returns>System.Int64.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.GetLastInsertIdSqlSuffix``1">
            <summary>
            Gets the last insert identifier SQL suffix.
            </summary>
            <typeparam name="T"></typeparam>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.ToSelectStatement(System.Type,System.String,System.Object[])">
            <summary>
            Converts to selectstatement.
            </summary>
            <param name="tableType">Type of the table.</param>
            <param name="sqlFilter">The SQL filter.</param>
            <param name="filterParams">The filter parameters.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.ToSelectStatement(ServiceStack.OrmLite.QueryType,ServiceStack.OrmLite.ModelDefinition,System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.ISet{System.String})">
            <summary>
            Converts to selectstatement.
            </summary>
            <param name="queryType">Type of the query.</param>
            <param name="modelDef">The model definition.</param>
            <param name="selectExpression">The select expression.</param>
            <param name="bodyExpression">The body expression.</param>
            <param name="orderByExpression">The order by expression.</param>
            <param name="offset">The offset.</param>
            <param name="rows">The rows.</param>
            <param name="tags">The tags.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.ToInsertRowSql``1(``0,System.Collections.Generic.ICollection{System.String})">
            <summary>
            Converts to insertrowsql.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj">The object.</param>
            <param name="insertFields">The insert fields.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.ToInsertRowsSql``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.ICollection{System.String})">
            <summary>
            Converts to insertrowssql.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="objs">The objs.</param>
            <param name="insertFields">The insert fields.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.BulkInsert``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{``0},ServiceStack.OrmLite.BulkInsertConfig)">
            <summary>
            Bulks the insert.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="db">The database.</param>
            <param name="objs">The objs.</param>
            <param name="config">The configuration.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.ToInsertRowStatement(System.Data.IDbCommand,System.Object,System.Collections.Generic.ICollection{System.String})">
            <summary>
            Converts to insertrowstatement.
            </summary>
            <param name="cmd">The command.</param>
            <param name="objWithProperties">The object with properties.</param>
            <param name="insertFields">The insert fields.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.PrepareParameterizedInsertStatement``1(System.Data.IDbCommand,System.Collections.Generic.ICollection{System.String},System.Func{ServiceStack.OrmLite.FieldDefinition,System.Boolean})">
            <summary>
            Prepares the parameterized insert statement.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cmd">The command.</param>
            <param name="insertFields">The insert fields.</param>
            <param name="shouldInclude">The should include.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.PrepareParameterizedUpdateStatement``1(System.Data.IDbCommand,System.Collections.Generic.ICollection{System.String})">
            <summary>
            Prepares the parameterized update statement.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cmd">The command.</param>
            <param name="updateFields">The update fields.</param>
            <returns>If had RowVersion</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.PrepareParameterizedDeleteStatement``1(System.Data.IDbCommand,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Prepares the parameterized delete statement.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cmd">The command.</param>
            <param name="deleteFieldValues">The delete field values.</param>
            <returns>If had RowVersion</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.PrepareStoredProcedureStatement``1(System.Data.IDbCommand,``0)">
            <summary>
            Prepares the stored procedure statement.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cmd">The command.</param>
            <param name="obj">The object.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.SetParameterValues``1(System.Data.IDbCommand,System.Object)">
            <summary>
            Sets the parameter values.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="obj">The object.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.SetParameter(ServiceStack.OrmLite.FieldDefinition,System.Data.IDbDataParameter)">
            <summary>
            Sets the parameter.
            </summary>
            <param name="fieldDef">The field definition.</param>
            <param name="p">The p.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.EnableIdentityInsert``1(System.Data.IDbCommand)">
            <summary>
            Enables the identity insert.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cmd">The command.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.EnableIdentityInsertAsync``1(System.Data.IDbCommand,System.Threading.CancellationToken)">
            <summary>
            Enables the identity insert asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cmd">The command.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.DisableIdentityInsert``1(System.Data.IDbCommand)">
            <summary>
            Disables the identity insert.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cmd">The command.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.DisableIdentityInsertAsync``1(System.Data.IDbCommand,System.Threading.CancellationToken)">
            <summary>
            Disables the identity insert asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cmd">The command.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.EnableForeignKeysCheck(System.Data.IDbCommand)">
            <summary>
            Enables the foreign keys check.
            </summary>
            <param name="cmd">The command.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.EnableForeignKeysCheckAsync(System.Data.IDbCommand,System.Threading.CancellationToken)">
            <summary>
            Enables the foreign keys check asynchronous.
            </summary>
            <param name="cmd">The command.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.DisableForeignKeysCheck(System.Data.IDbCommand)">
            <summary>
            Disables the foreign keys check.
            </summary>
            <param name="cmd">The command.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.DisableForeignKeysCheckAsync(System.Data.IDbCommand,System.Threading.CancellationToken)">
            <summary>
            Disables the foreign keys check asynchronous.
            </summary>
            <param name="cmd">The command.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.GetFieldDefinitionMap(ServiceStack.OrmLite.ModelDefinition)">
            <summary>
            Gets the field definition map.
            </summary>
            <param name="modelDef">The model definition.</param>
            <returns>Dictionary&lt;System.String, FieldDefinition&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.GetFieldValue(ServiceStack.OrmLite.FieldDefinition,System.Object)">
            <summary>
            Gets the field value.
            </summary>
            <param name="fieldDef">The field definition.</param>
            <param name="value">The value.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.GetFieldValue(System.Type,System.Object)">
            <summary>
            Gets the field value.
            </summary>
            <param name="fieldType">Type of the field.</param>
            <param name="value">The value.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.PrepareUpdateRowStatement(System.Data.IDbCommand,System.Object,System.Collections.Generic.ICollection{System.String})">
            <summary>
            Prepares the update row statement.
            </summary>
            <param name="dbCmd">The database command.</param>
            <param name="objWithProperties">The object with properties.</param>
            <param name="updateFields">The update fields.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.PrepareUpdateRowStatement``1(System.Data.IDbCommand,System.Collections.Generic.Dictionary{System.String,System.Object},System.String)">
            <summary>
            Prepares the update row statement.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="args">The arguments.</param>
            <param name="sqlFilter">The SQL filter.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.PrepareUpsertRowStatement``1(System.Data.IDbCommand,``0,System.String)">
            <summary>
            Prepares the upsert row statement.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="model">The model.</param>
            <param name="sqlFilter">The SQL filter.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.PrepareUpdateRowAddStatement``1(System.Data.IDbCommand,System.Collections.Generic.Dictionary{System.String,System.Object},System.String)">
            <summary>
            Prepares the update row add statement.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="args">The arguments.</param>
            <param name="sqlFilter">The SQL filter.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.PrepareInsertRowStatement``1(System.Data.IDbCommand,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Prepares the insert row statement.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.GetInsertColumnsStatement``1">
            <summary>
            Gets the insert columns statement.
            </summary>
            <typeparam name="T"></typeparam>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.ToDeleteStatement(System.Type,System.String,System.Object[])">
            <summary>
            Converts to deletestatement.
            </summary>
            <param name="tableType">Type of the table.</param>
            <param name="sqlFilter">The SQL filter.</param>
            <param name="filterParams">The filter parameters.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.CreateParameterizedDeleteStatement(System.Data.IDbConnection,System.Object)">
            <summary>
            Creates the parameterized delete statement.
            </summary>
            <param name="connection">The connection.</param>
            <param name="objWithProperties">The object with properties.</param>
            <returns>IDbCommand.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.ToExistStatement(System.Type,System.Object,System.String,System.Object[])">
            <summary>
            Converts to existstatement.
            </summary>
            <param name="fromTableType">Type of from table.</param>
            <param name="objWithProperties">The object with properties.</param>
            <param name="sqlFilter">The SQL filter.</param>
            <param name="filterParams">The filter parameters.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.ToSelectFromProcedureStatement(System.Object,System.Type,System.String,System.Object[])">
            <summary>
            Converts to selectfromprocedurestatement.
            </summary>
            <param name="fromObjWithProperties">From object with properties.</param>
            <param name="outputModelType">Type of the output model.</param>
            <param name="sqlFilter">The SQL filter.</param>
            <param name="filterParams">The filter parameters.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.ToExecuteProcedureStatement(System.Object)">
            <summary>
            Converts to executeprocedurestatement.
            </summary>
            <param name="objWithProperties">The object with properties.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.ToCreateSchemaStatement(System.String)">
            <summary>
            Converts to createschemastatement.
            </summary>
            <param name="schema">The schema.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.ToCreateTableStatement(System.Type)">
            <summary>
            Converts to createtablestatement.
            </summary>
            <param name="tableType">Type of the table.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.ToPostCreateTableStatement(ServiceStack.OrmLite.ModelDefinition)">
            <summary>
            Converts to postcreatetablestatement.
            </summary>
            <param name="modelDef">The model definition.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.ToPostDropTableStatement(ServiceStack.OrmLite.ModelDefinition)">
            <summary>
            Converts to postdroptablestatement.
            </summary>
            <param name="modelDef">The model definition.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.ToCreateIndexStatements(System.Type)">
            <summary>
            Converts to createindexstatements.
            </summary>
            <param name="tableType">Type of the table.</param>
            <returns>List&lt;System.String&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.ToCreateSequenceStatements(System.Type)">
            <summary>
            Converts to createsequencestatements.
            </summary>
            <param name="tableType">Type of the table.</param>
            <returns>List&lt;System.String&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.ToCreateSequenceStatement(System.Type,System.String)">
            <summary>
            Converts to createsequencestatement.
            </summary>
            <param name="tableType">Type of the table.</param>
            <param name="sequenceName">Name of the sequence.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.ToCreateSavePoint(System.String)">
            <summary>
            Converts to createsavepoint.
            </summary>
            <param name="name">The name.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.ToReleaseSavePoint(System.String)">
            <summary>
            Converts to releasesavepoint.
            </summary>
            <param name="name">The name.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.ToRollbackSavePoint(System.String)">
            <summary>
            Converts to rollbacksavepoint.
            </summary>
            <param name="name">The name.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.SequenceList(System.Type)">
            <summary>
            Sequences the list.
            </summary>
            <param name="tableType">Type of the table.</param>
            <returns>List&lt;System.String&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.SequenceListAsync(System.Type,System.Threading.CancellationToken)">
            <summary>
            Sequences the list asynchronous.
            </summary>
            <param name="tableType">Type of the table.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;List&lt;System.String&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.GetSchemas(System.Data.IDbCommand)">
            <summary>
            Gets the schemas.
            </summary>
            <param name="dbCmd">The database command.</param>
            <returns>List&lt;System.String&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.GetSchemaTables(System.Data.IDbCommand)">
            <summary>
            Gets the schema tables.
            </summary>
            <param name="dbCmd">The database command.</param>
            <returns>Dictionary&lt;System.String, List&lt;System.String&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.DoesSchemaExist(System.Data.IDbCommand,System.String)">
            <summary>
            Doeses the schema exist.
            </summary>
            <param name="dbCmd">The database command.</param>
            <param name="schema">The schema.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.DoesSchemaExistAsync(System.Data.IDbCommand,System.String,System.Threading.CancellationToken)">
            <summary>
            Doeses the schema exist asynchronous.
            </summary>
            <param name="dbCmd">The database command.</param>
            <param name="schema">The schema.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;System.Boolean&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.DoesTableExist(System.Data.IDbConnection,System.String,System.String)">
            <summary>
            Doeses the table exist.
            </summary>
            <param name="db">The database.</param>
            <param name="tableName">Name of the table.</param>
            <param name="schema">The schema.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.DoesTableExistAsync(System.Data.IDbConnection,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Doeses the table exist asynchronous.
            </summary>
            <param name="db">The database.</param>
            <param name="tableName">Name of the table.</param>
            <param name="schema">The schema.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;System.Boolean&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.DoesTableExist(System.Data.IDbCommand,System.String,System.String)">
            <summary>
            Doeses the table exist.
            </summary>
            <param name="dbCmd">The database command.</param>
            <param name="tableName">Name of the table.</param>
            <param name="schema">The schema.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.DoesTableExistAsync(System.Data.IDbCommand,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Doeses the table exist asynchronous.
            </summary>
            <param name="dbCmd">The database command.</param>
            <param name="tableName">Name of the table.</param>
            <param name="schema">The schema.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;System.Boolean&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.DoesColumnExist(System.Data.IDbConnection,System.String,System.String,System.String)">
            <summary>
            Doeses the column exist.
            </summary>
            <param name="db">The database.</param>
            <param name="columnName">Name of the column.</param>
            <param name="tableName">Name of the table.</param>
            <param name="schema">The schema.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.DoesColumnExistAsync(System.Data.IDbConnection,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Doeses the column exist asynchronous.
            </summary>
            <param name="db">The database.</param>
            <param name="columnName">Name of the column.</param>
            <param name="tableName">Name of the table.</param>
            <param name="schema">The schema.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;System.Boolean&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.GetColumnDataType(System.Data.IDbConnection,System.String,System.String,System.String)">
            <summary>
            Gets the type of the column data.
            </summary>
            <param name="db">The database.</param>
            <param name="columnName">Name of the column.</param>
            <param name="tableName">Name of the table.</param>
            <param name="schema">The schema.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.ColumnIsNullable(System.Data.IDbConnection,System.String,System.String,System.String)">
            <summary>
            Columns the is nullable.
            </summary>
            <param name="db">The database.</param>
            <param name="columnName">Name of the column.</param>
            <param name="tableName">Name of the table.</param>
            <param name="schema">The schema.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.GetColumnMaxLength(System.Data.IDbConnection,System.String,System.String,System.String)">
            <summary>
            Gets the maximum length of the column.
            </summary>
            <param name="db">The database.</param>
            <param name="columnName">Name of the column.</param>
            <param name="tableName">Name of the table.</param>
            <param name="schema">The schema.</param>
            <returns>System.Int64.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.DoesSequenceExist(System.Data.IDbCommand,System.String)">
            <summary>
            Doeses the sequence exist.
            </summary>
            <param name="dbCmd">The database command.</param>
            <param name="sequence">Name of the sequence.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.DoesSequenceExistAsync(System.Data.IDbCommand,System.String,System.Threading.CancellationToken)">
            <summary>
            Doeses the sequence exist asynchronous.
            </summary>
            <param name="dbCmd">The database command.</param>
            <param name="sequenceName">Name of the sequence.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;System.Boolean&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.FromDbRowVersion(System.Type,System.Object)">
            <summary>
            Froms the database row version.
            </summary>
            <param name="fieldType">Type of the field.</param>
            <param name="value">The value.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.GetRowVersionSelectColumn(ServiceStack.OrmLite.FieldDefinition,System.String)">
            <summary>
            Gets the row version select column.
            </summary>
            <param name="field">The field.</param>
            <param name="tablePrefix">The table prefix.</param>
            <returns>SelectItem.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.GetRowVersionColumn(ServiceStack.OrmLite.FieldDefinition,System.String)">
            <summary>
            Gets the row version column.
            </summary>
            <param name="field">The field.</param>
            <param name="tablePrefix">The table prefix.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.GetColumnNames(ServiceStack.OrmLite.ModelDefinition)">
            <summary>
            Gets the column names.
            </summary>
            <param name="modelDef">The model definition.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.GetColumnNames(ServiceStack.OrmLite.ModelDefinition,System.String)">
            <summary>
            Gets the column names.
            </summary>
            <param name="modelDef">The model definition.</param>
            <param name="tablePrefix">The table prefix.</param>
            <returns>SelectItem[].</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.SqlExpression``1">
            <summary>
            SQLs the expression.
            </summary>
            <typeparam name="T"></typeparam>
            <returns>SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.CreateParam">
            <summary>
            Creates the parameter.
            </summary>
            <returns>IDbDataParameter.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.GetDropFunction(System.String,System.String)">
            <summary>
            Gets the drop function.
            </summary>
            <param name="database">The database.</param>
            <param name="functionName">Name of the function.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.GetCreateView(System.String,ServiceStack.OrmLite.ModelDefinition,System.Text.StringBuilder)">
            <summary>
            Gets the create view.
            </summary>
            <param name="database">The database.</param>
            <param name="modelDef">The model definition.</param>
            <param name="selectSql">The select SQL.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.GetDropView(System.String,ServiceStack.OrmLite.ModelDefinition)">
            <summary>
            Gets the drop view.
            </summary>
            <param name="database">The database.</param>
            <param name="modelDef">The model definition.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.GetCreateIndexView(ServiceStack.OrmLite.ModelDefinition,System.String,System.String)">
            <summary>
            Gets the create index view.
            </summary>
            <param name="modelDef">The model definition.</param>
            <param name="name">The name.</param>
            <param name="selectSql">The select SQL.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.GetDropIndexView(ServiceStack.OrmLite.ModelDefinition,System.String)">
            <summary>
            Gets the drop index view.
            </summary>
            <param name="modelDef">The model definition.</param>
            <param name="name">The name.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.GetDropIndexConstraint(ServiceStack.OrmLite.ModelDefinition,System.String)">
            <summary>
            Gets the drop index constraint.
            </summary>
            <param name="modelDef">The model definition.</param>
            <param name="name">The name.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.GetAddCompositePrimaryKey(System.String,ServiceStack.OrmLite.ModelDefinition,System.String,System.String)">
            <summary>
            Gets the add composite primary key sql command.
            </summary>
            <param name="database">The database.</param>
            <param name="modelDef">The model definition.</param>
            <param name="fieldNameA">The field name a.</param>
            <param name="fieldNameB">The field name b.</param>
            <returns>Returns the SQL Command</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.GetPrimaryKeyName(ServiceStack.OrmLite.ModelDefinition)">
            <summary>
            Gets the name of the primary key.
            </summary>
            <param name="modelDef">The model definition.</param>
            <returns>Returns the Primary Key Name</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.GetDropPrimaryKeyConstraint(System.String,ServiceStack.OrmLite.ModelDefinition,System.String)">
            <summary>
            Gets the drop primary key constraint.
            </summary>
            <param name="database">The database.</param>
            <param name="modelDef">The model definition.</param>
            <param name="name">The name.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.GetDropPrimaryKeyConstraint(System.String,ServiceStack.OrmLite.ModelDefinition,System.String,System.String,System.String)">
            <summary>
            Gets the drop primary key constraint.
            </summary>
            <param name="database">The database.</param>
            <param name="modelDef">The model definition.</param>
            <param name="name">The name.</param>
            <param name="fieldNameA">The field name a.</param>
            <param name="fieldNameB">The field name b.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.GetDropForeignKeyConstraint(ServiceStack.OrmLite.ModelDefinition,System.String)">
            <summary>
            Gets the drop foreign key constraint.
            </summary>
            <param name="modelDef">The model definition.</param>
            <param name="name">The name.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.GetConstraintName(System.String,ServiceStack.OrmLite.ModelDefinition,System.String)">
            <summary>
            Gets the name of the constraint.
            </summary>
            <param name="database">The database.</param>
            <param name="modelDef">The model definition.</param>
            <param name="fieldName">Name of the field.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.GetDropConstraint(ServiceStack.OrmLite.ModelDefinition,System.String)">
            <summary>
            Gets the drop constraint.
            </summary>
            <param name="modelDef">The model definition.</param>
            <param name="name">The name.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.GetDropForeignKeyConstraints(ServiceStack.OrmLite.ModelDefinition)">
            <summary>
            Gets the drop foreign key constraints.
            </summary>
            <param name="modelDef">The model definition.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.ToAddColumnStatement(System.String,System.String,ServiceStack.OrmLite.FieldDefinition)">
            <summary>
            Converts to addcolumnstatement.
            </summary>
            <param name="schema">The schema.</param>
            <param name="table">The table.</param>
            <param name="fieldDef">The field definition.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.ToAlterColumnStatement(System.String,System.String,ServiceStack.OrmLite.FieldDefinition)">
            <summary>
            Converts to altercolumnstatement.
            </summary>
            <param name="schema">The schema.</param>
            <param name="table">The table.</param>
            <param name="fieldDef">The field definition.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.ToChangeColumnNameStatement(System.String,System.String,ServiceStack.OrmLite.FieldDefinition,System.String)">
            <summary>
            Converts to changecolumnnamestatement.
            </summary>
            <param name="schema">The schema.</param>
            <param name="table">The table.</param>
            <param name="fieldDef">The field definition.</param>
            <param name="oldColumn">The old column.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.ToRenameColumnStatement(System.String,System.String,System.String,System.String)">
            <summary>
            Converts to renamecolumnstatement.
            </summary>
            <param name="schema">The schema.</param>
            <param name="table">The table.</param>
            <param name="oldColumn">The old column.</param>
            <param name="newColumn">The new column.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.ToDropColumnStatement(System.String,System.String,System.String)">
            <summary>
            Converts to dropcolumnstatement.
            </summary>
            <param name="schema">The schema.</param>
            <param name="table">The table.</param>
            <param name="column">The column.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.ToDropConstraintStatement(System.String,System.String,System.String)">
            <summary>
            Converts to dropconstraintstatement.
            </summary>
            <param name="schema">The schema.</param>
            <param name="table">The table.</param>
            <param name="constraint">The constraint.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.ToAddForeignKeyStatement``2(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``1,System.Object}},ServiceStack.OrmLite.OnFkOption,ServiceStack.OrmLite.OnFkOption,System.String)">
            <summary>
            Converts to addforeignkeystatement.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TForeign">The type of the t foreign.</typeparam>
            <param name="field">The field.</param>
            <param name="foreignField">The foreign field.</param>
            <param name="onUpdate">The on update.</param>
            <param name="onDelete">The on delete.</param>
            <param name="foreignKeyName">Name of the foreign key.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.ToDropForeignKeyStatement(System.String,System.String,System.String)">
            <summary>
            Converts to dropforeignkeystatement.
            </summary>
            <param name="schema">The schema.</param>
            <param name="table">The table.</param>
            <param name="foreignKeyName">Name of the foreign key.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.ToCreateIndexStatement``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String,System.Boolean)">
            <summary>
            Converts to createindexstatement.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="field">The field.</param>
            <param name="indexName">Name of the index.</param>
            <param name="unique">if set to <c>true</c> [unique].</param>
            <returns>System.String.</returns>
        </member>
        <member name="P:ServiceStack.OrmLite.IOrmLiteDialectProvider.SupportsAsync">
            <summary>
            Gets a value indicating whether [supports asynchronous].
            </summary>
            <value><c>true</c> if [supports asynchronous]; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.OpenAsync(System.Data.IDbConnection,System.Threading.CancellationToken)">
            <summary>
            Opens the asynchronous.
            </summary>
            <param name="db">The database.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.ExecuteReaderAsync(System.Data.IDbCommand,System.Threading.CancellationToken)">
            <summary>
            Executes the reader asynchronous.
            </summary>
            <param name="cmd">The command.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;IDataReader&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.ExecuteNonQueryAsync(System.Data.IDbCommand,System.Threading.CancellationToken)">
            <summary>
            Executes the non query asynchronous.
            </summary>
            <param name="cmd">The command.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;System.Int32&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.ExecuteScalarAsync(System.Data.IDbCommand,System.Threading.CancellationToken)">
            <summary>
            Executes the scalar asynchronous.
            </summary>
            <param name="cmd">The command.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;System.Object&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.ReadAsync(System.Data.IDataReader,System.Threading.CancellationToken)">
            <summary>
            Reads the asynchronous.
            </summary>
            <param name="reader">The reader.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;System.Boolean&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.ReaderEach``1(System.Data.IDataReader,System.Func{``0},System.Threading.CancellationToken)">
            <summary>
            Readers the each.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="reader">The reader.</param>
            <param name="fn">The function.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;List&lt;T&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.ReaderEach``1(System.Data.IDataReader,System.Action,``0,System.Threading.CancellationToken)">
            <summary>
            Readers the each.
            </summary>
            <typeparam name="Return">The type of the return.</typeparam>
            <param name="reader">The reader.</param>
            <param name="fn">The function.</param>
            <param name="source">The source.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;Return&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.ReaderRead``1(System.Data.IDataReader,System.Func{``0},System.Threading.CancellationToken)">
            <summary>
            Readers the read.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="reader">The reader.</param>
            <param name="fn">The function.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.InsertAndGetLastInsertIdAsync``1(System.Data.IDbCommand,System.Threading.CancellationToken)">
            <summary>
            Inserts the and get last insert identifier asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;System.Int64&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.GetLoadChildrenSubSelect``1(ServiceStack.OrmLite.SqlExpression{``0})">
            <summary>
            Gets the load children sub select.
            </summary>
            <typeparam name="From">The type of from.</typeparam>
            <param name="expr">The expr.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.ToRowCountStatement(System.String)">
            <summary>
            Converts to rowcountstatement.
            </summary>
            <param name="innerSql">The inner SQL.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.ToUpdateStatement``1(System.Data.IDbCommand,``0,System.Collections.Generic.ICollection{System.String})">
            <summary>
            Converts to updatestatement.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="item">The item.</param>
            <param name="updateFields">The update fields.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.ToInsertStatement``1(System.Data.IDbCommand,``0,System.Collections.Generic.ICollection{System.String})">
            <summary>
            Converts to insertstatement.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="item">The item.</param>
            <param name="insertFields">The insert fields.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.MergeParamsIntoSql(System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter})">
            <summary>
            Merges the parameters into SQL.
            </summary>
            <param name="sql">The SQL.</param>
            <param name="dbParams">The database parameters.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.GetRefSelfSql``1(ServiceStack.OrmLite.SqlExpression{``0},ServiceStack.OrmLite.ModelDefinition,ServiceStack.OrmLite.FieldDefinition,ServiceStack.OrmLite.ModelDefinition,ServiceStack.OrmLite.FieldDefinition)">
            <summary>
            Gets the reference self SQL.
            </summary>
            <typeparam name="From">The type of from.</typeparam>
            <param name="refQ">The reference q.</param>
            <param name="modelDef">The model definition.</param>
            <param name="refSelf">The reference self.</param>
            <param name="refModelDef">The reference model definition.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.GetRefFieldSql(System.String,ServiceStack.OrmLite.ModelDefinition,ServiceStack.OrmLite.FieldDefinition)">
            <summary>
            Gets the reference field SQL.
            </summary>
            <param name="subSql">The sub SQL.</param>
            <param name="refModelDef">The reference model definition.</param>
            <param name="refField">The reference field.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.GetFieldReferenceSql(System.String,ServiceStack.OrmLite.FieldDefinition,ServiceStack.OrmLite.FieldReference)">
            <summary>
            Gets the field reference SQL.
            </summary>
            <param name="subSql">The sub SQL.</param>
            <param name="fieldDef">The field definition.</param>
            <param name="fieldRef">The field reference.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.ToTableNamesStatement(System.String)">
            <summary>
            Converts to tablenamesstatement.
            </summary>
            <param name="schema">The schema.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.ToTableNamesWithRowCountsStatement(System.Boolean,System.String)">
            <summary>
            Return table, row count SQL for listing all tables with their row counts
            </summary>
            <param name="live">If true returns live current row counts of each table (slower), otherwise returns cached row counts from RDBMS table stats</param>
            <param name="schema">The table schema if any</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.SqlConflict(System.String,System.String)">
            <summary>
            SQLs the conflict.
            </summary>
            <param name="sql">The SQL.</param>
            <param name="conflictResolution">The conflict resolution.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.SqlConcat(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            SQLs the concat.
            </summary>
            <param name="args">The arguments.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.SqlCurrency(System.String)">
            <summary>
            SQLs the currency.
            </summary>
            <param name="fieldOrValue">The field or value.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.SqlCurrency(System.String,System.String)">
            <summary>
            SQLs the currency.
            </summary>
            <param name="fieldOrValue">The field or value.</param>
            <param name="currencySymbol">The currency symbol.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.SqlBool(System.Boolean)">
            <summary>
            SQLs the bool.
            </summary>
            <param name="value">if set to <c>true</c> [value].</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.SqlLimit(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            SQLs the limit.
            </summary>
            <param name="offset">The offset.</param>
            <param name="rows">The rows.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.SqlCast(System.Object,System.String)">
            <summary>
            SQLs the cast.
            </summary>
            <param name="fieldOrValue">The field or value.</param>
            <param name="castAs">The cast as.</param>
            <returns>System.String.</returns>
        </member>
        <member name="P:ServiceStack.OrmLite.IOrmLiteDialectProvider.SqlRandom">
            <summary>
            Gets the SQL random.
            </summary>
            <value>The SQL random.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.GenerateComment(System.String@)">
            <summary>
            Generates a SQL comment.
            </summary>
            <param name="text">The comment text.</param>
            <returns>The generated SQL.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.GetUtcDateFunction">
            <summary>
            Gets the UTC date function.
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.DateDiffFunction(System.String,System.String,System.String)">
            <summary>
            Dates the difference function.
            </summary>
            <param name="interval">The interval.</param>
            <param name="date1">The date1.</param>
            <param name="date2">The date2.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.IsNullFunction(System.String,System.Object)">
            <summary>
            Determines whether [is null function] [the specified expression].
            </summary>
            <param name="expression">The expression.</param>
            <param name="alternateValue">The alternate value.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.ConvertFlag(System.String)">
            <summary>
            Converts the flag.
            </summary>
            <param name="expression">The expression.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.DatabaseFragmentationInfo(System.String)">
            <summary>
            Databases the fragmentation information.
            </summary>
            <param name="database">The database.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.DatabaseSize(System.String)">
            <summary>
            Databases the size.
            </summary>
            <param name="database">The database.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.SQLVersion">
            <summary>
            SQLs the version.
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.SQLServerName">
            <summary>
            SQLs the name of the server.
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.ShrinkDatabase(System.String)">
            <summary>
            Shrinks the database.
            </summary>
            <param name="database">The database.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.ReIndexDatabase(System.String,System.String)">
            <summary>
            Res the index database.
            </summary>
            <param name="database">The database.</param>
            <param name="objectQualifier">The object qualifier.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.ChangeRecoveryMode(System.String,System.String)">
            <summary>
            Changes the recovery mode.
            </summary>
            <param name="database">The database.</param>
            <param name="mode">The mode.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.InnerRunSqlExecuteReader(System.Data.IDbCommand)">
            <summary>
            Inners the run SQL execute reader.
            </summary>
            <param name="command">The command.</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.IPropertyInvoker">
            <summary>
            Interface IPropertyInvoker
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.IPropertyInvoker.ConvertValueFn">
            <summary>
            Gets or sets the convert value function.
            </summary>
            <value>The convert value function.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.IPropertyInvoker.SetPropertyValue(System.Reflection.PropertyInfo,System.Type,System.Object,System.Object)">
            <summary>
            Sets the property value.
            </summary>
            <param name="propertyInfo">The property information.</param>
            <param name="fieldType">Type of the field.</param>
            <param name="onInstance">The on instance.</param>
            <param name="withValue">The with value.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.IPropertyInvoker.GetPropertyValue(System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Gets the property value.
            </summary>
            <param name="propertyInfo">The property information.</param>
            <param name="fromInstance">From instance.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.IUntypedApi">
            <summary>
            Interface IUntypedApi
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.IUntypedApi.Db">
            <summary>
            Gets or sets the database.
            </summary>
            <value>The database.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.IUntypedApi.DbCmd">
            <summary>
            Gets or sets the database command.
            </summary>
            <value>The database command.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.IUntypedApi.SaveAll(System.Collections.IEnumerable)">
            <summary>
            Saves all.
            </summary>
            <param name="objs">The objs.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IUntypedApi.SaveAllAsync(System.Collections.IEnumerable,System.Threading.CancellationToken)">
            <summary>
            Saves all asynchronous.
            </summary>
            <param name="objs">The objs.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;System.Int32&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IUntypedApi.Save(System.Object)">
            <summary>
            Saves the specified object.
            </summary>
            <param name="obj">The object.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IUntypedApi.SaveAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            Saves the asynchronous.
            </summary>
            <param name="obj">The object.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;System.Boolean&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IUntypedApi.InsertAll(System.Collections.IEnumerable)">
            <summary>
            Inserts all.
            </summary>
            <param name="objs">The objs.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.IUntypedApi.InsertAll(System.Collections.IEnumerable,System.Action{System.Data.IDbCommand})">
            <summary>
            Inserts all.
            </summary>
            <param name="objs">The objs.</param>
            <param name="commandFilter">The command filter.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.IUntypedApi.Insert(System.Object,System.Boolean)">
            <summary>
            Inserts the specified object.
            </summary>
            <param name="obj">The object.</param>
            <param name="selectIdentity">if set to <c>true</c> [select identity].</param>
            <returns>System.Int64.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IUntypedApi.Insert(System.Object,System.Action{System.Data.IDbCommand},System.Boolean)">
            <summary>
            Inserts the specified object.
            </summary>
            <param name="obj">The object.</param>
            <param name="commandFilter">The command filter.</param>
            <param name="selectIdentity">if set to <c>true</c> [select identity].</param>
            <returns>System.Int64.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IUntypedApi.UpdateAll(System.Collections.IEnumerable)">
            <summary>
            Updates all.
            </summary>
            <param name="objs">The objs.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IUntypedApi.UpdateAll(System.Collections.IEnumerable,System.Action{System.Data.IDbCommand})">
            <summary>
            Updates all.
            </summary>
            <param name="objs">The objs.</param>
            <param name="commandFilter">The command filter.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IUntypedApi.Update(System.Object)">
            <summary>
            Updates the specified object.
            </summary>
            <param name="obj">The object.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IUntypedApi.UpdateAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            Updates the asynchronous.
            </summary>
            <param name="obj">The object.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;System.Int32&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IUntypedApi.DeleteAll">
            <summary>
            Deletes all.
            </summary>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IUntypedApi.Delete(System.Object,System.Object)">
            <summary>
            Deletes the specified object.
            </summary>
            <param name="obj">The object.</param>
            <param name="anonType">Type of the anon.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IUntypedApi.DeleteNonDefaults(System.Object,System.Object)">
            <summary>
            Deletes the non defaults.
            </summary>
            <param name="obj">The object.</param>
            <param name="filter">The filter.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IUntypedApi.DeleteById(System.Object)">
            <summary>
            Deletes the by identifier.
            </summary>
            <param name="id">The identifier.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IUntypedApi.DeleteByIds(System.Collections.IEnumerable)">
            <summary>
            Deletes the by ids.
            </summary>
            <param name="idValues">The identifier values.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IUntypedApi.Cast(System.Collections.IEnumerable)">
            <summary>
            Casts the specified results.
            </summary>
            <param name="results">The results.</param>
            <returns>IEnumerable.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Migration">
            <summary>
            Class Migration.
            Implements the <see cref="T:ServiceStack.IMeta" />
            </summary>
            <seealso cref="T:ServiceStack.IMeta" />
        </member>
        <member name="P:ServiceStack.OrmLite.Migration.Id">
            <summary>
            Gets or sets the identifier.
            </summary>
            <value>The identifier.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Migration.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Migration.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Migration.CreatedDate">
            <summary>
            Gets or sets the created date.
            </summary>
            <value>The created date.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Migration.CompletedDate">
            <summary>
            Gets or sets the completed date.
            </summary>
            <value>The completed date.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Migration.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Migration.NamedConnection">
            <summary>
            Gets or sets the named connection.
            </summary>
            <value>The named connection.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Migration.Log">
            <summary>
            Gets or sets the log.
            </summary>
            <value>The log.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Migration.ErrorCode">
            <summary>
            Gets or sets the error code.
            </summary>
            <value>The error code.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Migration.ErrorMessage">
            <summary>
            Gets or sets the error message.
            </summary>
            <value>The error message.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Migration.ErrorStackTrace">
            <summary>
            Gets or sets the error stack trace.
            </summary>
            <value>The error stack trace.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Migration.Meta">
            <summary>
            Gets or sets the meta.
            </summary>
            <value>The meta.</value>
        </member>
        <member name="T:ServiceStack.OrmLite.MigrationBase">
            <summary>
            Class MigrationBase.
            </summary>
            <seealso cref="T:ServiceStack.IAppTask" />
        </member>
        <member name="P:ServiceStack.OrmLite.MigrationBase.DbFactory">
            <summary>
            Gets or sets the database factory.
            </summary>
            <value>The database factory.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.MigrationBase.Db">
            <summary>
            Gets or sets the database.
            </summary>
            <value>The database.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.MigrationBase.Transaction">
            <summary>
            Gets or sets the transaction.
            </summary>
            <value>The transaction.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.MigrationBase.Log">
            <summary>
            Gets or sets the log.
            </summary>
            <value>The log.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.MigrationBase.StartedAt">
            <summary>
            Gets or sets the started at.
            </summary>
            <value>The started at.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.MigrationBase.CompletedDate">
            <summary>
            Gets or sets the completed date.
            </summary>
            <value>The completed date.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.MigrationBase.Error">
            <summary>
            Gets or sets the error.
            </summary>
            <value>The error.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.MigrationBase.MigrationLog">
            <summary>
            Add additional logs to capture in Migration table
            </summary>
            <value>The migration log.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.MigrationBase.AfterOpen">
            <summary>
            Afters the open.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.MigrationBase.BeforeCommit">
            <summary>
            Before the commit.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.MigrationBase.BeforeRollback">
            <summary>
            Before the rollback.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.MigrationBase.Up">
            <summary>
            Db Migrations.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.MigrationBase.Down">
            <summary>
            Revert Db Migrations.
            </summary>
        </member>
        <member name="T:ServiceStack.OrmLite.Migrator">
            <summary>
            Class Migrator.
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Migrator.All">
            <summary>
            All
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Migrator.Last">
            <summary>
            The last
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Migrator.DbFactory">
            <summary>
            Gets the database factory.
            </summary>
            <value>The database factory.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Migrator.MigrationTypes">
            <summary>
            Gets the migration types.
            </summary>
            <value>The migration types.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.Migrator.#ctor(ServiceStack.Data.IDbConnectionFactory,System.Reflection.Assembly[])">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.OrmLite.Migrator"/> class.
            </summary>
            <param name="dbFactory">The database factory.</param>
            <param name="migrationAssemblies">The migration assemblies.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Migrator.#ctor(ServiceStack.Data.IDbConnectionFactory,System.Type[])">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.OrmLite.Migrator"/> class.
            </summary>
            <param name="dbFactory">The database factory.</param>
            <param name="migrationTypes">The migration types.</param>
        </member>
        <member name="P:ServiceStack.OrmLite.Migrator.Timeout">
            <summary>
            Gets or sets the timeout.
            </summary>
            <value>The timeout.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Migrator.Log">
            <summary>
            Gets or sets the log.
            </summary>
            <value>The log.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.Migrator.GetNextMigrationToRun(System.Data.IDbConnection,System.Collections.Generic.List{System.Type})">
            <summary>
            Gets the next migration to run.
            </summary>
            <param name="db">The database.</param>
            <param name="migrationTypes">The migration types.</param>
            <returns>System.Type?.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Migrator.Run">
            <summary>
            Runs this instance.
            </summary>
            <returns>ServiceStack.AppTaskResult.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Migrator.Run(System.Boolean)">
            <summary>
            Runs the specified throw if error.
            </summary>
            <param name="throwIfError">The throw if error.</param>
            <returns>ServiceStack.AppTaskResult.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Migrator.LogMigrationsFound(System.Collections.Generic.List{System.Type})">
            <summary>
            Logs the migrations found.
            </summary>
            <param name="remainingMigrations">The remaining migrations.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Migrator.GetAllMigrationTypes(System.Reflection.Assembly[])">
            <summary>
            Gets all migration types.
            </summary>
            <param name="migrationAssemblies">The migration assemblies.</param>
            <returns>System.Collections.Generic.List&lt;System.Type&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Migrator.Init(System.Data.IDbConnection)">
            <summary>
            Initializes the specified database.
            </summary>
            <param name="db">The database.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Migrator.Recreate(System.Data.IDbConnection)">
            <summary>
            Recreates the specified database.
            </summary>
            <param name="db">The database.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Migrator.Clear(System.Data.IDbConnection)">
            <summary>
            Clears the specified database.
            </summary>
            <param name="db">The database.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Migrator.GetNextMigrationRevertToRun(System.Data.IDbConnection,System.Collections.Generic.List{System.Type})">
            <summary>
            Gets the next migration revert to run.
            </summary>
            <param name="db">The database.</param>
            <param name="migrationTypes">The migration types.</param>
            <returns>System.Type?.</returns>
            <exception cref="T:ServiceStack.InfoException">$"Migration '{lastRun.Name}' is still in progress, timeout in {(Timeout - elapsedTime).TotalSeconds:N3}s.</exception>
            <exception cref="T:ServiceStack.InfoException">$"Could not find Migration '{lastRun.Name}' to revert, aborting.</exception>
        </member>
        <member name="M:ServiceStack.OrmLite.Migrator.Rerun(System.String)">
            <summary>
            Reruns the specified migration name.
            </summary>
            <param name="migrationName">Name of the migration.</param>
            <returns>ServiceStack.AppTaskResult.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Migrator.Revert(System.String)">
            <summary>
            Reverts the specified migration name.
            </summary>
            <param name="migrationName">Name of the migration.</param>
            <returns>ServiceStack.AppTaskResult.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Migrator.Revert(System.String,System.Boolean)">
            <summary>
            Reverts the specified migration name.
            </summary>
            <param name="migrationName">Name of the migration.</param>
            <param name="throwIfError">The throw if error.</param>
            <returns>ServiceStack.AppTaskResult.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Migrator.Down(ServiceStack.Data.IDbConnectionFactory,System.Type)">
            <summary>
            Downs the specified database factory.
            </summary>
            <param name="dbFactory">The database factory.</param>
            <param name="migrationType">Type of the migration.</param>
            <returns>ServiceStack.AppTaskResult.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Migrator.Down(ServiceStack.Data.IDbConnectionFactory,System.Type[])">
            <summary>
            Downs the specified database factory.
            </summary>
            <param name="dbFactory">The database factory.</param>
            <param name="migrationTypes">The migration types.</param>
            <returns>ServiceStack.AppTaskResult.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Migrator.Up(ServiceStack.Data.IDbConnectionFactory,System.Type)">
            <summary>
            Ups the specified database factory.
            </summary>
            <param name="dbFactory">The database factory.</param>
            <param name="migrationType">Type of the migration.</param>
            <returns>ServiceStack.AppTaskResult.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Migrator.Up(ServiceStack.Data.IDbConnectionFactory,System.Type[])">
            <summary>
            Ups the specified database factory.
            </summary>
            <param name="dbFactory">The database factory.</param>
            <param name="migrationTypes">The migration types.</param>
            <returns>ServiceStack.AppTaskResult.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Migrator.Run(ServiceStack.Data.IDbConnectionFactory,System.Type,System.Action{ServiceStack.OrmLite.MigrationBase},System.String)">
            <summary>
            Runs the specified database factory.
            </summary>
            <param name="dbFactory">The database factory.</param>
            <param name="nextRun">The next run.</param>
            <param name="migrateAction">The migrate action.</param>
            <param name="namedConnection">The named connection.</param>
            <returns>ServiceStack.OrmLite.MigrationBase.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Migrator.RunAll(ServiceStack.Data.IDbConnectionFactory,System.Collections.Generic.IEnumerable{System.Type},System.Action{ServiceStack.OrmLite.MigrationBase})">
            <summary>
            Runs all.
            </summary>
            <param name="dbFactory">The database factory.</param>
            <param name="migrationTypes">The migration types.</param>
            <param name="migrateAction">The migrate action.</param>
            <returns>ServiceStack.AppTaskResult.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.ModelDefinition">
            <summary>
            Class ModelDefinition.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.ModelDefinition.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.OrmLite.ModelDefinition" /> class.
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.ModelDefinition.RowVersionName">
            <summary>
            The row version name
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.ModelDefinition.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.ModelDefinition.Alias">
            <summary>
            Gets or sets the alias.
            </summary>
            <value>The alias.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.ModelDefinition.Schema">
            <summary>
            Gets or sets the schema.
            </summary>
            <value>The schema.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.ModelDefinition.PreCreateTableSql">
            <summary>
            Gets or sets the pre create table SQL.
            </summary>
            <value>The pre create table SQL.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.ModelDefinition.PostCreateTableSql">
            <summary>
            Gets or sets the post create table SQL.
            </summary>
            <value>The post create table SQL.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.ModelDefinition.PreDropTableSql">
            <summary>
            Gets or sets the pre drop table SQL.
            </summary>
            <value>The pre drop table SQL.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.ModelDefinition.PostDropTableSql">
            <summary>
            Gets or sets the post drop table SQL.
            </summary>
            <value>The post drop table SQL.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.ModelDefinition.IsInSchema">
            <summary>
            Gets a value indicating whether this instance is in schema.
            </summary>
            <value><c>true</c> if this instance is in schema; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.ModelDefinition.HasAutoIncrementId">
            <summary>
            Gets a value indicating whether this instance has automatic increment identifier.
            </summary>
            <value><c>true</c> if this instance has automatic increment identifier; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.ModelDefinition.HasSequenceAttribute">
            <summary>
            Gets a value indicating whether this instance has sequence attribute.
            </summary>
            <value><c>true</c> if this instance has sequence attribute; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.ModelDefinition.RowVersion">
            <summary>
            Gets or sets the row version.
            </summary>
            <value>The row version.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.ModelDefinition.ModelName">
            <summary>
            Gets the name of the model.
            </summary>
            <value>The name of the model.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.ModelDefinition.ModelType">
            <summary>
            Gets or sets the type of the model.
            </summary>
            <value>The type of the model.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.ModelDefinition.PrimaryKey">
            <summary>
            Gets the primary key.
            </summary>
            <value>The primary key.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.ModelDefinition.GetPrimaryKey(System.Object)">
            <summary>
            Gets the primary key.
            </summary>
            <param name="instance">The instance.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="P:ServiceStack.OrmLite.ModelDefinition.FieldDefinitions">
            <summary>
            Gets or sets the field definitions.
            </summary>
            <value>The field definitions.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.ModelDefinition.FieldDefinitionsArray">
            <summary>
            Gets the field definitions array.
            </summary>
            <value>The field definitions array.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.ModelDefinition.FieldDefinitionsWithAliases">
            <summary>
            Gets the field definitions with aliases.
            </summary>
            <value>The field definitions with aliases.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.ModelDefinition.IgnoredFieldDefinitions">
            <summary>
            Gets or sets the ignored field definitions.
            </summary>
            <value>The ignored field definitions.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.ModelDefinition.IgnoredFieldDefinitionsArray">
            <summary>
            Gets the ignored field definitions array.
            </summary>
            <value>The ignored field definitions array.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.ModelDefinition.AllFieldDefinitionsArray">
            <summary>
            Gets all field definitions array.
            </summary>
            <value>All field definitions array.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.ModelDefinition.ReferenceFieldDefinitionsArray">
            <summary>
            Gets the reference field definitions array.
            </summary>
            <value>The reference field definitions array.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.ModelDefinition.ReferenceFieldNames">
            <summary>
            Gets the reference field names.
            </summary>
            <value>The reference field names.</value>
        </member>
        <member name="F:ServiceStack.OrmLite.ModelDefinition.fieldDefLock">
            <summary>
            The field definition lock
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.ModelDefinition.fieldDefinitionMap">
            <summary>
            The field definition map
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.ModelDefinition.fieldNameSanitizer">
            <summary>
            The field name sanitizer
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.ModelDefinition.AutoIdFields">
            <summary>
            Gets the automatic identifier fields.
            </summary>
            <value>The automatic identifier fields.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.ModelDefinition.GetAutoIdFieldDefinitions">
            <summary>
            Gets the automatic identifier field definitions.
            </summary>
            <returns>List&lt;FieldDefinition&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.ModelDefinition.GetOrderedFieldDefinitions(System.Collections.Generic.ICollection{System.String},System.Func{System.String,System.String})">
            <summary>
            Gets the ordered field definitions.
            </summary>
            <param name="fieldNames">The field names.</param>
            <param name="sanitizeFieldName">Name of the sanitize field.</param>
            <returns>FieldDefinition[].</returns>
            <exception cref="T:System.ArgumentNullException">fieldNames</exception>
        </member>
        <member name="M:ServiceStack.OrmLite.ModelDefinition.GetFieldDefinitionMap(System.Func{System.String,System.String})">
            <summary>
            Gets the field definition map.
            </summary>
            <param name="sanitizeFieldName">Name of the sanitize field.</param>
            <returns>Dictionary&lt;System.String, FieldDefinition&gt;.</returns>
        </member>
        <member name="P:ServiceStack.OrmLite.ModelDefinition.CompositePrimaryKeys">
            <summary>
            Gets or sets the composite primary keys.
            </summary>
            <value>The composite primary keys.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.ModelDefinition.CompositeIndexes">
            <summary>
            Gets or sets the composite indexes.
            </summary>
            <value>The composite indexes.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.ModelDefinition.UniqueConstraints">
            <summary>
            Gets or sets the unique constraints.
            </summary>
            <value>The unique constraints.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.ModelDefinition.GetFieldDefinition``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Gets the field definition.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="field">The field.</param>
            <returns>FieldDefinition.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.ModelDefinition.ThrowNoFieldException(System.String)">
            <summary>
            Throws the no field exception.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <exception cref="T:System.NotSupportedException">'{fieldName}' is not a property of '{Name}'</exception>
        </member>
        <member name="M:ServiceStack.OrmLite.ModelDefinition.AssertFieldDefinition(System.String)">
            <summary>
            Asserts the field definition.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <returns>FieldDefinition.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.ModelDefinition.GetFieldDefinition(System.String)">
            <summary>
            Gets the field definition.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <returns>FieldDefinition.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.ModelDefinition.AssertFieldDefinition(System.String,System.Func{System.String,System.String})">
            <summary>
            Asserts the field definition.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="sanitizeFieldName">Name of the sanitize field.</param>
            <returns>FieldDefinition.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.ModelDefinition.GetFieldDefinition(System.String,System.Func{System.String,System.String})">
            <summary>
            Gets the field definition.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="sanitizeFieldName">Name of the sanitize field.</param>
            <returns>FieldDefinition.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.ModelDefinition.GetQuotedName(System.String,ServiceStack.OrmLite.IOrmLiteDialectProvider)">
            <summary>
            Gets the name of the quoted.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="dialectProvider">The dialect provider.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.ModelDefinition.GetFieldDefinition(System.Func{System.String,System.Boolean})">
            <summary>
            Gets the field definition.
            </summary>
            <param name="predicate">The predicate.</param>
            <returns>FieldDefinition.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.ModelDefinition.AfterInit">
            <summary>
            Afters the initialize.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.ModelDefinition.IsRefField(ServiceStack.OrmLite.FieldDefinition)">
            <summary>
            Determines whether [is reference field] [the specified field definition].
            </summary>
            <param name="fieldDef">The field definition.</param>
            <returns><c>true</c> if [is reference field] [the specified field definition]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.ModelDefinition.IsRefField(System.String)">
            <summary>
            Determines whether [is reference field] [the specified name].
            </summary>
            <param name="name">The name.</param>
            <returns><c>true</c> if [is reference field] [the specified name]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.ModelDefinition.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.ModelDefinition.IsReference(System.String)">
            <summary>
            Determines whether the specified field name is reference.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <returns><c>true</c> if the specified field name is reference; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.ModelDefinition.HasAnyReferences(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Determines whether [has any references] [the specified field names].
            </summary>
            <param name="fieldNames">The field names.</param>
            <returns><c>true</c> if [has any references] [the specified field names]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.ModelDefinition.For(System.Type)">
            <summary>
            Fors the specified model type.
            </summary>
            <param name="modelType">Type of the model.</param>
            <returns>ModelDefinition.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.ModelDefinition`1">
            <summary>
            Class ModelDefinition.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:ServiceStack.OrmLite.ModelDefinition`1.definition">
            <summary>
            The definition
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.ModelDefinition`1.Definition">
            <summary>
            Gets the definition.
            </summary>
            <value>The definition.</value>
        </member>
        <member name="F:ServiceStack.OrmLite.ModelDefinition`1.primaryKeyName">
            <summary>
            The primary key name
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.ModelDefinition`1.PrimaryKeyName">
            <summary>
            Gets the name of the primary key.
            </summary>
            <value>The name of the primary key.</value>
        </member>
        <member name="T:ServiceStack.OrmLite.OrmLiteDefaultNamingStrategy">
            <summary>
            Class OrmLiteDefaultNamingStrategy.
            Implements the <see cref="T:ServiceStack.OrmLite.OrmLiteNamingStrategyBase" />
            </summary>
            <seealso cref="T:ServiceStack.OrmLite.OrmLiteNamingStrategyBase" />
        </member>
        <member name="T:ServiceStack.OrmLite.AliasNamingStrategy">
            <summary>
            Class AliasNamingStrategy.
            Implements the <see cref="T:ServiceStack.OrmLite.OrmLiteNamingStrategyBase" />
            </summary>
            <seealso cref="T:ServiceStack.OrmLite.OrmLiteNamingStrategyBase" />
        </member>
        <member name="F:ServiceStack.OrmLite.AliasNamingStrategy.TableAliases">
            <summary>
            The table aliases
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.AliasNamingStrategy.ColumnAliases">
            <summary>
            The column aliases
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.AliasNamingStrategy.UseNamingStrategy">
            <summary>
            Gets or sets the use naming strategy.
            </summary>
            <value>The use naming strategy.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.AliasNamingStrategy.GetTableName(System.String)">
            <summary>
            Gets the name of the table.
            </summary>
            <param name="name">The name.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.AliasNamingStrategy.GetColumnName(System.String)">
            <summary>
            Gets the name of the column.
            </summary>
            <param name="name">The name.</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.LowercaseUnderscoreNamingStrategy">
            <summary>
            Class LowercaseUnderscoreNamingStrategy.
            Implements the <see cref="T:ServiceStack.OrmLite.OrmLiteNamingStrategyBase" />
            </summary>
            <seealso cref="T:ServiceStack.OrmLite.OrmLiteNamingStrategyBase" />
        </member>
        <member name="M:ServiceStack.OrmLite.LowercaseUnderscoreNamingStrategy.GetTableName(System.String)">
            <summary>
            Gets the name of the table.
            </summary>
            <param name="name">The name.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.LowercaseUnderscoreNamingStrategy.GetColumnName(System.String)">
            <summary>
            Gets the name of the column.
            </summary>
            <param name="name">The name.</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.UpperCaseNamingStrategy">
            <summary>
            Class UpperCaseNamingStrategy.
            Implements the <see cref="T:ServiceStack.OrmLite.OrmLiteNamingStrategyBase" />
            </summary>
            <seealso cref="T:ServiceStack.OrmLite.OrmLiteNamingStrategyBase" />
        </member>
        <member name="M:ServiceStack.OrmLite.UpperCaseNamingStrategy.GetTableName(System.String)">
            <summary>
            Gets the name of the table.
            </summary>
            <param name="name">The name.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.UpperCaseNamingStrategy.GetColumnName(System.String)">
            <summary>
            Gets the name of the column.
            </summary>
            <param name="name">The name.</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.PrefixNamingStrategy">
            <summary>
            Class PrefixNamingStrategy.
            Implements the <see cref="T:ServiceStack.OrmLite.OrmLiteNamingStrategyBase" />
            </summary>
            <seealso cref="T:ServiceStack.OrmLite.OrmLiteNamingStrategyBase" />
        </member>
        <member name="P:ServiceStack.OrmLite.PrefixNamingStrategy.TablePrefix">
            <summary>
            Gets or sets the table prefix.
            </summary>
            <value>The table prefix.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.PrefixNamingStrategy.ColumnPrefix">
            <summary>
            Gets or sets the column prefix.
            </summary>
            <value>The column prefix.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.PrefixNamingStrategy.GetTableName(System.String)">
            <summary>
            Gets the name of the table.
            </summary>
            <param name="name">The name.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.PrefixNamingStrategy.GetColumnName(System.String)">
            <summary>
            Gets the name of the column.
            </summary>
            <param name="name">The name.</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.OrmLiteCommand">
            <summary>
            Class OrmLiteCommand.
            Implements the <see cref="T:System.Data.IDbCommand" />
            Implements the <see cref="T:ServiceStack.Data.IHasDbCommand" />
            Implements the <see cref="T:ServiceStack.OrmLite.IHasDialectProvider" />
            </summary>
            <seealso cref="T:System.Data.IDbCommand" />
            <seealso cref="T:ServiceStack.Data.IHasDbCommand" />
            <seealso cref="T:ServiceStack.OrmLite.IHasDialectProvider" />
        </member>
        <member name="F:ServiceStack.OrmLite.OrmLiteCommand.dbConn">
            <summary>
            The database connection
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.OrmLiteCommand.dbCmd">
            <summary>
            The database command
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteCommand.DialectProvider">
            <summary>
            Gets the dialect provider.
            </summary>
            <value>The dialect provider.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteCommand.IsDisposed">
            <summary>
            Gets a value indicating whether this instance is disposed.
            </summary>
            <value><c>true</c> if this instance is disposed; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteCommand.#ctor(ServiceStack.OrmLite.OrmLiteConnection,System.Data.IDbCommand)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.OrmLite.OrmLiteCommand" /> class.
            </summary>
            <param name="dbConn">The database connection.</param>
            <param name="dbCmd">The database command.</param>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteCommand.ConnectionId">
            <summary>
            Gets the connection identifier.
            </summary>
            <value>The connection identifier.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteCommand.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteCommand.Prepare">
            <summary>
            Creates a prepared (or compiled) version of the command on the data source.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteCommand.Cancel">
            <summary>
            Attempts to cancels the execution of an <see cref="T:System.Data.IDbCommand" />.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteCommand.CreateParameter">
            <summary>
            Creates a new instance of an <see cref="T:System.Data.IDbDataParameter" /> object.
            </summary>
            <returns>An <see langword="IDbDataParameter" /> object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteCommand.ExecuteNonQuery">
            <summary>
            Executes an SQL statement against the <see langword="Connection" /> object of a .NET Framework data provider, and returns the number of rows affected.
            </summary>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteCommand.ExecuteReader">
            <summary>
            Executes the <see cref="P:System.Data.IDbCommand.CommandText" /> against the <see cref="P:System.Data.IDbCommand.Connection" /> and builds an <see cref="T:System.Data.IDataReader" />.
            </summary>
            <returns>An <see cref="T:System.Data.IDataReader" /> object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteCommand.ExecuteReader(System.Data.CommandBehavior)">
            <summary>
            Executes the <see cref="P:System.Data.IDbCommand.CommandText" /> against the <see cref="P:System.Data.IDbCommand.Connection" />, and builds an <see cref="T:System.Data.IDataReader" /> using one of the <see cref="T:System.Data.CommandBehavior" /> values.
            </summary>
            <param name="behavior">One of the <see cref="T:System.Data.CommandBehavior" /> values.</param>
            <returns>An <see cref="T:System.Data.IDataReader" /> object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteCommand.ExecuteScalar">
            <summary>
            Executes the query, and returns the first column of the first row in the resultset returned by the query. Extra columns or rows are ignored.
            </summary>
            <returns>The first column of the first row in the resultset.</returns>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteCommand.Connection">
            <summary>
            Gets or sets the <see cref="T:System.Data.IDbConnection" /> used by this instance of the <see cref="T:System.Data.IDbCommand" />.
            </summary>
            <value>The connection.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteCommand.Transaction">
            <summary>
            Gets or sets the transaction within which the <see langword="Command" /> object of a .NET Framework data provider executes.
            </summary>
            <value>The transaction.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteCommand.CommandText">
            <summary>
            Gets or sets the text command to run against the data source.
            </summary>
            <value>The command text.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteCommand.CommandTimeout">
            <summary>
            Gets or sets the wait time before terminating the attempt to execute a command and generating an error.
            </summary>
            <value>The command timeout.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteCommand.CommandType">
            <summary>
            Indicates or specifies how the <see cref="P:System.Data.IDbCommand.CommandText" /> property is interpreted.
            </summary>
            <value>The type of the command.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteCommand.Parameters">
            <summary>
            Gets the <see cref="T:System.Data.IDataParameterCollection" />.
            </summary>
            <value>The parameters.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteCommand.UpdatedRowSource">
            <summary>
            Gets or sets how command results are applied to the <see cref="T:System.Data.DataRow" /> when used by the <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" /> method of a <see cref="T:System.Data.Common.DbDataAdapter" />.
            </summary>
            <value>The updated row source.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteCommand.DbCommand">
            <summary>
            Gets the database command.
            </summary>
            <value>The database command.</value>
        </member>
        <member name="T:ServiceStack.OrmLite.OrmLiteConfig">
            <summary>
            Class OrmLiteConfig.
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.OrmLiteConfig.IdField">
            <summary>
            The identifier field
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.OrmLiteConfig.DefaultCommandTimeout">
            <summary>
            The default command timeout
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.OrmLiteConfig.commandTimeout">
            <summary>
            The command timeout
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteConfig.CommandTimeout">
            <summary>
            Gets or sets the wait time before terminating the attempt to execute a command and generating an error (in seconds).
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.OrmLiteConfig.dialectProvider">
            <summary>
            The dialect provider
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteConfig.DialectProvider">
            <summary>
            Gets or sets the dialect provider.
            </summary>
            <value>The dialect provider.</value>
            <exception cref="T:System.ArgumentNullException">DialectProvider - You must set the singleton 'OrmLiteConfig.DialectProvider' to use the OrmLiteWriteExtensions</exception>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteConfig.GetDialectProvider(System.Data.IDbCommand)">
            <summary>
            Gets the dialect provider.
            </summary>
            <param name="dbCmd">The database command.</param>
            <returns>IOrmLiteDialectProvider.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteConfig.Dialect(System.Data.IDbCommand)">
            <summary>
            Dialects the specified database command.
            </summary>
            <param name="dbCmd">The database command.</param>
            <returns>IOrmLiteDialectProvider.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteConfig.GetDialectProvider(System.Data.IDbConnection)">
            <summary>
            Gets the dialect provider.
            </summary>
            <param name="db">The database.</param>
            <returns>IOrmLiteDialectProvider.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteConfig.GetNamingStrategy(System.Data.IDbConnection)">
            <summary>
            Gets the naming strategy.
            </summary>
            <param name="db">The database.</param>
            <returns>INamingStrategy.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteConfig.Dialect(System.Data.IDbConnection)">
            <summary>
            Dialects the specified database.
            </summary>
            <param name="db">The database.</param>
            <returns>IOrmLiteDialectProvider.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteConfig.GetExecFilter(ServiceStack.OrmLite.IOrmLiteDialectProvider)">
            <summary>
            Gets the execute filter.
            </summary>
            <param name="dialectProvider">The dialect provider.</param>
            <returns>IOrmLiteExecFilter.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteConfig.GetExecFilter(System.Data.IDbCommand)">
            <summary>
            Gets the execute filter.
            </summary>
            <param name="dbCmd">The database command.</param>
            <returns>IOrmLiteExecFilter.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteConfig.GetExecFilter(System.Data.IDbConnection)">
            <summary>
            Gets the execute filter.
            </summary>
            <param name="db">The database.</param>
            <returns>IOrmLiteExecFilter.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteConfig.SetLastCommandText(System.Data.IDbConnection,System.String)">
            <summary>
            Sets the last command text.
            </summary>
            <param name="db">The database.</param>
            <param name="sql">The SQL.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteConfig.SetLastCommand(System.Data.IDbConnection,System.Data.IDbCommand)">
            <summary>
            Sets the last command.
            </summary>
            <param name="db">The database.</param>
            <param name="dbCmd">The database command.</param>
        </member>
        <member name="F:ServiceStack.OrmLite.OrmLiteConfig.RequiresOrmLiteConnection">
            <summary>
            The requires orm lite connection
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteConfig.SetCommandTimeout(System.Data.IDbConnection,System.Nullable{System.Int32})">
            <summary>
            Sets the wait time before terminating the attempt to execute a command and generating an error.
            </summary>
            <param name="db"></param>
            <param name="commandTimeout">Command execution timeout(in seconds)</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteConfig.SetCommandTimeout(System.Data.IDbConnection,System.Nullable{System.TimeSpan})">
            <summary>
            <inheritdoc cref="M:ServiceStack.OrmLite.OrmLiteConfig.SetCommandTimeout(System.Data.IDbConnection,System.Nullable{System.Int32})"/>
            </summary>
            <param name="db"></param>
            <param name="commandTimeout">Command execution timeout</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteConfig.ToDbConnection(System.String)">
            <summary>
            Converts to dbconnection.
            </summary>
            <param name="dbConnectionStringOrFilePath">The database connection string or file path.</param>
            <returns>IDbConnection.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteConfig.OpenDbConnection(System.String)">
            <summary>
            Opens the database connection.
            </summary>
            <param name="dbConnectionStringOrFilePath">The database connection string or file path.</param>
            <returns>IDbConnection.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteConfig.OpenReadOnlyDbConnection(System.String)">
            <summary>
            Opens the read only database connection.
            </summary>
            <param name="dbConnectionStringOrFilePath">The database connection string or file path.</param>
            <returns>IDbConnection.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteConfig.ClearCache">
            <summary>
            Clears the cache.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteConfig.GetModelMetadata(System.Type)">
            <summary>
            Gets the model metadata.
            </summary>
            <param name="modelType">Type of the model.</param>
            <returns>ModelDefinition.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteConfig.ToDbConnection(System.String,ServiceStack.OrmLite.IOrmLiteDialectProvider)">
            <summary>
            Converts to dbconnection.
            </summary>
            <param name="dbConnectionStringOrFilePath">The database connection string or file path.</param>
            <param name="dialectProvider">The dialect provider.</param>
            <returns>IDbConnection.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteConfig.ResetLogFactory(ServiceStack.Logging.ILogFactory)">
            <summary>
            Resets the log factory.
            </summary>
            <param name="logFactory">The log factory.</param>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteConfig.DisableColumnGuessFallback">
            <summary>
            Gets or sets a value indicating whether [disable column guess fallback].
            </summary>
            <value><c>true</c> if [disable column guess fallback]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteConfig.StripUpperInLike">
            <summary>
            Gets or sets a value indicating whether [strip upper in like].
            </summary>
            <value><c>true</c> if [strip upper in like]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteConfig.ResultsFilter">
            <summary>
            Gets or sets the results filter.
            </summary>
            <value>The results filter.</value>
        </member>
        <member name="F:ServiceStack.OrmLite.OrmLiteConfig.execFilter">
            <summary>
            The execute filter
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteConfig.ExecFilter">
            <summary>
            Gets or sets the execute filter.
            </summary>
            <value>The execute filter.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteConfig.BeforeExecFilter">
            <summary>
            Gets or sets the before execute filter.
            </summary>
            <value>The before execute filter.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteConfig.AfterExecFilter">
            <summary>
            Gets or sets the after execute filter.
            </summary>
            <value>The after execute filter.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteConfig.InsertFilter">
            <summary>
            Gets or sets the insert filter.
            </summary>
            <value>The insert filter.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteConfig.UpdateFilter">
            <summary>
            Gets or sets the update filter.
            </summary>
            <value>The update filter.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteConfig.SqlExpressionSelectFilter">
            <summary>
            Gets or sets the SQL expression select filter.
            </summary>
            <value>The SQL expression select filter.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteConfig.LoadReferenceSelectFilter">
            <summary>
            Gets or sets the load reference select filter.
            </summary>
            <value>The load reference select filter.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteConfig.StringFilter">
            <summary>
            Gets or sets the string filter.
            </summary>
            <value>The string filter.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteConfig.OnDbNullFilter">
            <summary>
            Gets or sets the on database null filter.
            </summary>
            <value>The on database null filter.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteConfig.PopulatedObjectFilter">
            <summary>
            Gets or sets the populated object filter.
            </summary>
            <value>The populated object filter.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteConfig.ExceptionFilter">
            <summary>
            Gets or sets the exception filter.
            </summary>
            <value>The exception filter.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteConfig.ThrowOnError">
            <summary>
            Gets or sets a value indicating whether [throw on error].
            </summary>
            <value><c>true</c> if [throw on error]; otherwise, <c>false</c>.</value>
        </member>
        <member name="F:ServiceStack.OrmLite.OrmLiteConfig.SanitizeFieldNameForParamNameFn">
            <summary>
            The sanitize field name for parameter name function
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteConfig.IsCaseInsensitive">
            <summary>
            Gets or sets a value indicating whether this instance is case insensitive.
            </summary>
            <value><c>true</c> if this instance is case insensitive; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteConfig.DeoptimizeReader">
            <summary>
            Gets or sets a value indicating whether [deoptimize reader].
            </summary>
            <value><c>true</c> if [deoptimize reader]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteConfig.SkipForeignKeys">
            <summary>
            Gets or sets a value indicating whether [skip foreign keys].
            </summary>
            <value><c>true</c> if [skip foreign keys]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteConfig.IncludeTablePrefixes">
            <summary>
            Gets or sets a value indicating whether [include table prefixes].
            </summary>
            <value><c>true</c> if [include table prefixes]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteConfig.SqlExpressionInitFilter">
            <summary>
            Gets or sets the SQL expression initialize filter.
            </summary>
            <value>The SQL expression initialize filter.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteConfig.ParamNameFilter">
            <summary>
            Gets or sets the parameter name filter.
            </summary>
            <value>The parameter name filter.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteConfig.OnModelDefinitionInit">
            <summary>
            Gets or sets the on model definition initialize.
            </summary>
            <value>The on model definition initialize.</value>
        </member>
        <member name="T:ServiceStack.OrmLite.OrmLiteConfigExtensions">
            <summary>
            Class OrmLiteConfigExtensions.
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.OrmLiteConfigExtensions.typeModelDefinitionMap">
            <summary>
            The type model definition map
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteConfigExtensions.CheckForIdField(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo})">
            <summary>
            Checks for identifier field.
            </summary>
            <param name="objProperties">The object properties.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteConfigExtensions.ClearCache">
            <summary>
            Clears the cache.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteConfigExtensions.GetModelDefinition(System.Type)">
            <summary>
            Gets the model definition.
            </summary>
            <param name="modelType">Type of the model.</param>
            <returns>ModelDefinition.</returns>
            <exception cref="T:System.NotSupportedException">[AutoIncrement] is only valid for integer properties for {modelType.Name}.{propertyInfo.Name} Guid property use [AutoId] instead</exception>
            <exception cref="T:System.NotSupportedException">[AutoId] is only valid for Guid properties for {modelType.Name}.{propertyInfo.Name} integer property use [AutoIncrement] instead</exception>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteConfigExtensions.CalculateStringLength(System.Reflection.PropertyInfo,ServiceStack.DataAnnotations.DecimalLengthAttribute)">
            <summary>
            Calculates the length of the string.
            </summary>
            <param name="propertyInfo">The property information.</param>
            <param name="decimalAttribute">The decimal attribute.</param>
            <returns>StringLengthAttribute.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.ConflictResolution">
            <summary>
            Class ConflictResolution.
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.ConflictResolution.Ignore">
            <summary>
            The ignore
            </summary>
        </member>
        <member name="T:ServiceStack.OrmLite.OrmLiteConflictResolutions">
            <summary>
            Class OrmLiteConflictResolutions.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteConflictResolutions.OnConflictIgnore(System.Data.IDbCommand)">
            <summary>
            Called when [conflict ignore].
            </summary>
            <param name="dbCmd">The database command.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteConflictResolutions.OnConflict(System.Data.IDbCommand,System.String)">
            <summary>
            Called when [conflict].
            </summary>
            <param name="dbCmd">The database command.</param>
            <param name="conflictResolution">The conflict resolution.</param>
            <exception cref="T:System.NotSupportedException">Cannot specify ON CONFLICT resolution on Invalid SQL starting with: " + dbCmd.CommandText.SubstringWithEllipsis(0, 50)</exception>
        </member>
        <member name="T:ServiceStack.OrmLite.OrmLiteConnection">
            <summary>
            Wrapper IDbConnection class to allow for connection sharing, mocking, etc.
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.OrmLiteConnection.Factory">
            <summary>
            The factory
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteConnection.Transaction">
            <summary>
            Gets or sets the transaction.
            </summary>
            <value>The transaction.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteConnection.DbTransaction">
            <summary>
            Gets the database transaction.
            </summary>
            <value>The database transaction.</value>
        </member>
        <member name="F:ServiceStack.OrmLite.OrmLiteConnection.dbConnection">
            <summary>
            The database connection
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteConnection.DialectProvider">
            <summary>
            Gets the dialect provider.
            </summary>
            <value>The dialect provider.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteConnection.LastCommandText">
            <summary>
            Gets or sets the last command text.
            </summary>
            <value>The last command text.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteConnection.LastCommand">
            <summary>
            Gets or sets the last command.
            </summary>
            <value>The last command.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteConnection.CommandTimeout">
            <summary>
            Gets or sets the wait time before terminating the attempt to execute a command and generating an error(in seconds).
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteConnection.ConnectionId">
            <summary>
            Gets or sets the connection identifier.
            </summary>
            <value>The connection identifier.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteConnection.#ctor(ServiceStack.OrmLite.OrmLiteConnectionFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.OrmLite.OrmLiteConnection" /> class.
            </summary>
            <param name="factory">The factory.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteConnection.#ctor(ServiceStack.OrmLite.OrmLiteConnectionFactory,System.Data.IDbConnection,System.Data.IDbTransaction)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.OrmLite.OrmLiteConnection"/> class.
            </summary>
            <param name="factory">The factory.</param>
            <param name="connection">The connection.</param>
            <param name="transaction">The transaction.</param>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteConnection.DbConnection">
            <summary>
            Gets the database connection.
            </summary>
            <value>The database connection.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteConnection.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteConnection.BeginTransaction">
            <summary>
            Begins a database transaction.
            </summary>
            <returns>An object representing the new transaction.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteConnection.BeginTransaction(System.Data.IsolationLevel)">
            <summary>
            Begins the transaction.
            </summary>
            <param name="isolationLevel">The isolation level.</param>
            <returns>IDbTransaction.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteConnection.Close">
            <summary>
            Closes the connection to the database.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteConnection.ChangeDatabase(System.String)">
            <summary>
            Changes the current database for an open <see langword="Connection" /> object.
            </summary>
            <param name="databaseName">The name of the database to use in place of the current database.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteConnection.CreateCommand">
            <summary>
            Creates and returns a Command object associated with the connection.
            </summary>
            <returns>A Command object associated with the connection.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteConnection.Open">
            <summary>
            Opens a database connection with the settings specified by the <see langword="ConnectionString" /> property of the provider-specific Connection object.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteConnection.OpenAsync(System.Threading.CancellationToken)">
            <summary>
            Open as an asynchronous operation.
            </summary>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>A Task representing the asynchronous operation.</returns>
        </member>
        <member name="F:ServiceStack.OrmLite.OrmLiteConnection.connectionString">
            <summary>
            The connection string
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteConnection.ConnectionString">
            <summary>
            Gets or sets the string used to open a database.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteConnection.ConnectionTimeout">
            <summary>
            Gets the time to wait while trying to establish a connection before terminating the attempt and generating an error.
            </summary>
            <value>The connection timeout.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteConnection.Database">
            <summary>
            Gets the name of the current database or the database to be used after a connection is opened.
            </summary>
            <value>The database.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteConnection.State">
            <summary>
            Gets the current state of the connection.
            </summary>
            <value>The state.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteConnection.AutoDisposeConnection">
            <summary>
            Gets or sets a value indicating whether [automatic dispose connection].
            </summary>
            <value><c>true</c> if [automatic dispose connection]; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteConnection.op_Explicit(ServiceStack.OrmLite.OrmLiteConnection)~System.Data.Common.DbConnection">
            <summary>
            Performs an explicit conversion from <see cref="T:ServiceStack.OrmLite.OrmLiteConnection" /> to <see cref="P:ServiceStack.OrmLite.OrmLiteConnection.DbConnection" />.
            </summary>
            <param name="dbConn">The database connection.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.ISetDbTransaction">
            <summary>
            Interface ISetDbTransaction
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.ISetDbTransaction.Transaction">
            <summary>
            Gets or sets the transaction.
            </summary>
            <value>The transaction.</value>
        </member>
        <member name="T:ServiceStack.OrmLite.OrmLiteConnectionUtils">
            <summary>
            Class OrmLiteConnectionUtils.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteConnectionUtils.InTransaction(System.Data.IDbConnection)">
            <summary>
            Ins the transaction.
            </summary>
            <param name="db">The database.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteConnectionUtils.GetTransaction(System.Data.IDbConnection)">
            <summary>
            Gets the transaction.
            </summary>
            <param name="db">The database.</param>
            <returns>IDbTransaction.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.OrmLiteConnectionFactory">
            <summary>
            Allow for mocking and unit testing by providing non-disposing
            connection factory with injectable IDbCommand and IDbTransaction proxies
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteConnectionFactory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.OrmLite.OrmLiteConnectionFactory" /> class.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteConnectionFactory.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.OrmLite.OrmLiteConnectionFactory" /> class.
            </summary>
            <param name="connectionString">The connection string.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteConnectionFactory.#ctor(System.String,ServiceStack.OrmLite.IOrmLiteDialectProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.OrmLite.OrmLiteConnectionFactory" /> class.
            </summary>
            <param name="connectionString">The connection string.</param>
            <param name="dialectProvider">The dialect provider.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteConnectionFactory.#ctor(System.String,ServiceStack.OrmLite.IOrmLiteDialectProvider,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.OrmLite.OrmLiteConnectionFactory" /> class.
            </summary>
            <param name="connectionString">The connection string.</param>
            <param name="dialectProvider">The dialect provider.</param>
            <param name="setGlobalDialectProvider">if set to <c>true</c> [set global dialect provider].</param>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteConnectionFactory.DialectProvider">
            <summary>
            Gets or sets the dialect provider.
            </summary>
            <value>The dialect provider.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteConnectionFactory.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteConnectionFactory.AutoDisposeConnection">
            <summary>
            Gets or sets a value indicating whether [automatic dispose connection].
            </summary>
            <value><c>true</c> if [automatic dispose connection]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteConnectionFactory.ConnectionFilter">
            <summary>
            Gets or sets the connection filter.
            </summary>
            <value>The connection filter.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteConnectionFactory.AlwaysReturnCommand">
            <summary>
            Force the IDbConnection to always return this IDbCommand
            </summary>
            <value>The always return command.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteConnectionFactory.AlwaysReturnTransaction">
            <summary>
            Force the IDbConnection to always return this IDbTransaction
            </summary>
            <value>The always return transaction.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteConnectionFactory.OnDispose">
            <summary>
            Gets or sets the on dispose.
            </summary>
            <value>The on dispose.</value>
        </member>
        <member name="F:ServiceStack.OrmLite.OrmLiteConnectionFactory.ormLiteConnection">
            <summary>
            The orm lite connection
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteConnectionFactory.OrmLiteConnection">
            <summary>
            Gets the orm lite connection.
            </summary>
            <value>The orm lite connection.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteConnectionFactory.CreateDbConnection">
            <summary>
            Creates the database connection.
            </summary>
            <returns>IDbConnection.</returns>
            <exception cref="T:System.ArgumentNullException">ConnectionString - ConnectionString must be set</exception>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteConnectionFactory.Use(System.Data.IDbConnection,System.Data.IDbTransaction)">
            <summary>
            Uses the specified connection.
            </summary>
            <param name="connection">The connection.</param>
            <param name="trans">The trans.</param>
            <returns>IDbConnection.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteConnectionFactory.CreateDbConnection(System.String)">
            <summary>
            Creates the database connection.
            </summary>
            <param name="namedConnection">The named connection.</param>
            <returns>IDbConnection.</returns>
            <exception cref="T:System.ArgumentNullException">namedConnection</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">No factory registered is named " + namedConnection</exception>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteConnectionFactory.OpenDbConnection">
            <summary>
            Opens the database connection.
            </summary>
            <returns>IDbConnection.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteConnectionFactory.OpenDbConnectionAsync(System.Threading.CancellationToken)">
            <summary>
            Open database connection as an asynchronous operation.
            </summary>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>A Task&lt;IDbConnection&gt; representing the asynchronous operation.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteConnectionFactory.OpenDbConnectionAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Open database connection as an asynchronous operation.
            </summary>
            <param name="namedConnection">The named connection.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>A Task&lt;IDbConnection&gt; representing the asynchronous operation.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteConnectionFactory.OpenDbConnectionString(System.String)">
            <summary>
            Opens the database connection string.
            </summary>
            <param name="connectionString">The connection string.</param>
            <returns>IDbConnection.</returns>
            <exception cref="T:System.ArgumentNullException">connectionString</exception>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteConnectionFactory.OpenDbConnectionStringAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Open database connection string as an asynchronous operation.
            </summary>
            <param name="connectionString">The connection string.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>A Task&lt;IDbConnection&gt; representing the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException">connectionString</exception>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteConnectionFactory.OpenDbConnectionString(System.String,System.String)">
            <summary>
            Opens the database connection string.
            </summary>
            <param name="connectionString">The connection string.</param>
            <param name="providerName">Name of the provider.</param>
            <returns>IDbConnection.</returns>
            <exception cref="T:System.ArgumentNullException">connectionString</exception>
            <exception cref="T:System.ArgumentNullException">providerName</exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteConnectionFactory.OpenDbConnectionStringAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Open database connection string as an asynchronous operation.
            </summary>
            <param name="connectionString">The connection string.</param>
            <param name="providerName">Name of the provider.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>A Task&lt;IDbConnection&gt; representing the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException">connectionString</exception>
            <exception cref="T:System.ArgumentNullException">providerName</exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteConnectionFactory.OpenDbConnection(System.String)">
            <summary>
            Opens the database connection.
            </summary>
            <param name="namedConnection">The named connection.</param>
            <returns>IDbConnection.</returns>
        </member>
        <member name="F:ServiceStack.OrmLite.OrmLiteConnectionFactory.dialectProviders">
            <summary>
            The dialect providers
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteConnectionFactory.DialectProviders">
            <summary>
            Gets the dialect providers.
            </summary>
            <value>The dialect providers.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteConnectionFactory.RegisterDialectProvider(System.String,ServiceStack.OrmLite.IOrmLiteDialectProvider)">
            <summary>
            Registers the dialect provider.
            </summary>
            <param name="providerName">Name of the provider.</param>
            <param name="dialectProvider">The dialect provider.</param>
        </member>
        <member name="F:ServiceStack.OrmLite.OrmLiteConnectionFactory.namedConnections">
            <summary>
            The named connections
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteConnectionFactory.NamedConnections">
            <summary>
            Gets the named connections.
            </summary>
            <value>The named connections.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteConnectionFactory.RegisterConnection(System.String,System.String,ServiceStack.OrmLite.IOrmLiteDialectProvider)">
            <summary>
            Registers the connection.
            </summary>
            <param name="namedConnection">The named connection.</param>
            <param name="connectionString">The connection string.</param>
            <param name="dialectProvider">The dialect provider.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteConnectionFactory.RegisterConnection(System.String,ServiceStack.OrmLite.OrmLiteConnectionFactory)">
            <summary>
            Registers the connection.
            </summary>
            <param name="namedConnection">The named connection.</param>
            <param name="connectionFactory">The connection factory.</param>
        </member>
        <member name="T:ServiceStack.OrmLite.OrmLiteConnectionFactoryExtensions">
            <summary>
            Class OrmLiteConnectionFactoryExtensions.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteConnectionFactoryExtensions.Open(ServiceStack.Data.IDbConnectionFactory)">
            <summary>
            Alias for <see cref="M:ServiceStack.OrmLite.OrmLiteConnectionFactoryExtensions.OpenDbConnection(ServiceStack.Data.IDbConnectionFactory,System.String)" />
            </summary>
            <param name="connectionFactory">The connection factory.</param>
            <returns>IDbConnection.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteConnectionFactoryExtensions.OpenDbConnectionAsync(ServiceStack.Data.IDbConnectionFactory,System.Threading.CancellationToken)">
            <summary>
            Alias for OpenDbConnectionAsync
            </summary>
            <param name="connectionFactory">The connection factory.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;IDbConnection&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteConnectionFactoryExtensions.OpenAsync(ServiceStack.Data.IDbConnectionFactory,System.Threading.CancellationToken)">
            <summary>
            Opens the asynchronous.
            </summary>
            <param name="connectionFactory">The connection factory.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;IDbConnection&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteConnectionFactoryExtensions.OpenAsync(ServiceStack.Data.IDbConnectionFactory,System.String,System.Threading.CancellationToken)">
            <summary>
            Alias for OpenDbConnectionAsync
            </summary>
            <param name="connectionFactory">The connection factory.</param>
            <param name="namedConnection">The named connection.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;IDbConnection&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteConnectionFactoryExtensions.Open(ServiceStack.Data.IDbConnectionFactory,System.String)">
            <summary>
            Alias for OpenDbConnection
            </summary>
            <param name="connectionFactory">The connection factory.</param>
            <param name="namedConnection">The named connection.</param>
            <returns>IDbConnection.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteConnectionFactoryExtensions.OpenDbConnection(ServiceStack.Data.IDbConnectionFactory,System.String)">
            <summary>
            Alias for OpenDbConnection
            </summary>
            <param name="connectionFactory">The connection factory.</param>
            <param name="namedConnection">The named connection.</param>
            <returns>IDbConnection.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteConnectionFactoryExtensions.OpenDbConnectionAsync(ServiceStack.Data.IDbConnectionFactory,System.String,System.Threading.CancellationToken)">
            <summary>
            Opens the database connection asynchronous.
            </summary>
            <param name="connectionFactory">The connection factory.</param>
            <param name="namedConnection">The named connection.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;IDbConnection&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteConnectionFactoryExtensions.OpenDbConnectionString(ServiceStack.Data.IDbConnectionFactory,System.String)">
            <summary>
            Alias for OpenDbConnection
            </summary>
            <param name="connectionFactory">The connection factory.</param>
            <param name="connectionString">The connection string.</param>
            <returns>IDbConnection.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteConnectionFactoryExtensions.OpenDbConnectionString(ServiceStack.Data.IDbConnectionFactory,System.String,System.String)">
            <summary>
            Opens the database connection string.
            </summary>
            <param name="connectionFactory">The connection factory.</param>
            <param name="connectionString">The connection string.</param>
            <param name="providerName">Name of the provider.</param>
            <returns>IDbConnection.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteConnectionFactoryExtensions.OpenDbConnectionStringAsync(ServiceStack.Data.IDbConnectionFactory,System.String,System.Threading.CancellationToken)">
            <summary>
            Opens the database connection string asynchronous.
            </summary>
            <param name="connectionFactory">The connection factory.</param>
            <param name="connectionString">The connection string.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;IDbConnection&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteConnectionFactoryExtensions.OpenDbConnectionStringAsync(ServiceStack.Data.IDbConnectionFactory,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Opens the database connection string asynchronous.
            </summary>
            <param name="connectionFactory">The connection factory.</param>
            <param name="connectionString">The connection string.</param>
            <param name="providerName">Name of the provider.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;IDbConnection&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteConnectionFactoryExtensions.GetDialectProvider(ServiceStack.Data.IDbConnectionFactory,ServiceStack.ConnectionInfo)">
            <summary>
            Gets the dialect provider.
            </summary>
            <param name="connectionFactory">The connection factory.</param>
            <param name="dbInfo">The database information.</param>
            <returns>IOrmLiteDialectProvider.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteConnectionFactoryExtensions.GetDialectProvider(ServiceStack.Data.IDbConnectionFactory,System.String,System.String)">
            <summary>
            Gets the dialect provider.
            </summary>
            <param name="connectionFactory">The connection factory.</param>
            <param name="providerName">Name of the provider.</param>
            <param name="namedConnection">The named connection.</param>
            <returns>IOrmLiteDialectProvider.</returns>
            <exception cref="T:System.NotSupportedException">Dialect provider is not registered '{provider}'</exception>
            <exception cref="T:System.NotSupportedException">Named connection is not registered '{namedConnection}'</exception>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteConnectionFactoryExtensions.ToDbConnection(System.Data.IDbConnection)">
            <summary>
            Converts to dbconnection.
            </summary>
            <param name="db">The database.</param>
            <returns>IDbConnection.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteConnectionFactoryExtensions.ToDbCommand(System.Data.IDbCommand)">
            <summary>
            Converts to dbcommand.
            </summary>
            <param name="dbCmd">The database command.</param>
            <returns>IDbCommand.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteConnectionFactoryExtensions.ToDbTransaction(System.Data.IDbTransaction)">
            <summary>
            Converts to dbtransaction.
            </summary>
            <param name="dbTrans">The database trans.</param>
            <returns>IDbTransaction.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteConnectionFactoryExtensions.GetConnectionId(System.Data.IDbConnection)">
            <summary>
            Gets the connection identifier.
            </summary>
            <param name="db">The database.</param>
            <returns>Guid.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteConnectionFactoryExtensions.GetConnectionId(System.Data.IDbCommand)">
            <summary>
            Gets the connection identifier.
            </summary>
            <param name="dbCmd">The database command.</param>
            <returns>Guid.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteConnectionFactoryExtensions.RegisterConnection(ServiceStack.Data.IDbConnectionFactory,System.String,System.String,ServiceStack.OrmLite.IOrmLiteDialectProvider)">
            <summary>
            Registers the connection.
            </summary>
            <param name="dbFactory">The database factory.</param>
            <param name="namedConnection">The named connection.</param>
            <param name="connectionString">The connection string.</param>
            <param name="dialectProvider">The dialect provider.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteConnectionFactoryExtensions.RegisterConnection(ServiceStack.Data.IDbConnectionFactory,System.String,ServiceStack.OrmLite.OrmLiteConnectionFactory)">
            <summary>
            Registers the connection.
            </summary>
            <param name="dbFactory">The database factory.</param>
            <param name="namedConnection">The named connection.</param>
            <param name="connectionFactory">The connection factory.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteConnectionFactoryExtensions.OpenDbConnection(ServiceStack.Data.IDbConnectionFactory,ServiceStack.ConnectionInfo)">
            <summary>
            Opens the database connection.
            </summary>
            <param name="dbFactory">The database factory.</param>
            <param name="connInfo">The connection information.</param>
            <returns>IDbConnection.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteConnectionFactoryExtensions.OpenDbConnectionAsync(ServiceStack.Data.IDbConnectionFactory,ServiceStack.ConnectionInfo)">
            <summary>
            Open database connection as an asynchronous operation.
            </summary>
            <param name="dbFactory">The database factory.</param>
            <param name="connInfo">The connection information.</param>
            <returns>A Task&lt;IDbConnection&gt; representing the asynchronous operation.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.OrmLiteContext">
            <summary>
            Class OrmLiteContext.
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.OrmLiteContext.Instance">
            <summary>
            The instance
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.OrmLiteContext.UseThreadStatic">
            <summary>
            Tell ServiceStack to use ThreadStatic Items Collection for Context Scoped items.
            Warning: ThreadStatic Items aren't pinned to the same request in async services which callback on different threads.
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.OrmLiteContext.ContextItems">
            <summary>
            The context items
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteContext.Items">
            <summary>
            Gets a list of items for this context.
            </summary>
            <value>The items.</value>
        </member>
        <member name="F:ServiceStack.OrmLite.OrmLiteContext._key">
            <summary>
            The key
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteContext.GetItems">
            <summary>
            Gets the items.
            </summary>
            <returns>IDictionary.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteContext.CreateItems(System.Collections.IDictionary)">
            <summary>
            Creates the items.
            </summary>
            <param name="items">The items.</param>
            <returns>IDictionary.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteContext.ClearItems">
            <summary>
            Clears the items.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteContext.GetOrCreate``1(System.Func{``0})">
            <summary>
            Gets the or create.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="createFn">The create function.</param>
            <returns>T.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteContext.SetItem``1(System.String,``0)">
            <summary>
            Sets the item.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteContext.CreateNewState">
            <summary>
            Creates the new state.
            </summary>
            <returns>OrmLiteState.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteContext.GetOrCreateState">
            <summary>
            Gets the state of the or create.
            </summary>
            <returns>OrmLiteState.</returns>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteContext.OrmLiteState">
            <summary>
            Gets or sets the state of the orm lite.
            </summary>
            <value>The state of the orm lite.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteContext.TSTransaction">
            <summary>
            Gets or sets the ts transaction.
            </summary>
            <value>The ts transaction.</value>
        </member>
        <member name="T:ServiceStack.OrmLite.OrmLiteState">
            <summary>
            Class OrmLiteState.
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.OrmLiteState.Counter">
            <summary>
            The counter
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.OrmLiteState.Id">
            <summary>
            The identifier
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteState.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.OrmLite.OrmLiteState" /> class.
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.OrmLiteState.TSTransaction">
            <summary>
            The ts transaction
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.OrmLiteState.ResultsFilter">
            <summary>
            The results filter
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteState.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.OrmLiteDiagnostics">
            <summary>
            Class OrmLiteDiagnostics.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDiagnostics.WriteCommandBefore(System.Diagnostics.DiagnosticListener,System.Data.IDbCommand,System.String)">
            <summary>
            Writes the command before.
            </summary>
            <param name="listener">The listener.</param>
            <param name="dbCmd">The database command.</param>
            <param name="operation">The operation.</param>
            <returns>Guid.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDiagnostics.WriteCommandAfter(System.Diagnostics.DiagnosticListener,System.Guid,System.Data.IDbCommand,System.String)">
            <summary>
            Writes the command after.
            </summary>
            <param name="listener">The listener.</param>
            <param name="operationId">The operation identifier.</param>
            <param name="dbCmd">The database command.</param>
            <param name="operation">The operation.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDiagnostics.WriteCommandError(System.Diagnostics.DiagnosticListener,System.Guid,System.Data.IDbCommand,System.Exception,System.String)">
            <summary>
            Writes the command error.
            </summary>
            <param name="listener">The listener.</param>
            <param name="operationId">The operation identifier.</param>
            <param name="dbCmd">The database command.</param>
            <param name="ex">The ex.</param>
            <param name="operation">The operation.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDiagnostics.WriteConnectionOpenBefore(System.Diagnostics.DiagnosticListener,System.Data.IDbConnection,System.String)">
            <summary>
            Writes the connection open before.
            </summary>
            <param name="listener">The listener.</param>
            <param name="dbConn">The database connection.</param>
            <param name="operation">The operation.</param>
            <returns>Guid.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDiagnostics.WriteTransactionOpen(System.Diagnostics.DiagnosticListener,System.Data.IsolationLevel,System.Data.IDbConnection,System.String)">
            <summary>
            Writes the transaction open.
            </summary>
            <param name="listener">The listener.</param>
            <param name="isolationLevel">The isolation level.</param>
            <param name="dbConn">The database connection.</param>
            <param name="operation">The operation.</param>
            <returns>Guid.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDiagnostics.WriteConnectionOpenAfter(System.Diagnostics.DiagnosticListener,System.Guid,System.Data.IDbConnection,System.String)">
            <summary>
            Writes the connection open after.
            </summary>
            <param name="listener">The listener.</param>
            <param name="operationId">The operation identifier.</param>
            <param name="dbConn">The database connection.</param>
            <param name="operation">The operation.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDiagnostics.WriteConnectionOpenError(System.Diagnostics.DiagnosticListener,System.Guid,System.Data.IDbConnection,System.Exception,System.String)">
            <summary>
            Writes the connection open error.
            </summary>
            <param name="listener">The listener.</param>
            <param name="operationId">The operation identifier.</param>
            <param name="dbConn">The database connection.</param>
            <param name="ex">The ex.</param>
            <param name="operation">The operation.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDiagnostics.WriteConnectionCloseBefore(System.Diagnostics.DiagnosticListener,System.Data.IDbConnection,System.String)">
            <summary>
            Writes the connection close before.
            </summary>
            <param name="listener">The listener.</param>
            <param name="dbConn">The database connection.</param>
            <param name="operation">The operation.</param>
            <returns>Guid.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDiagnostics.WriteConnectionCloseAfter(System.Diagnostics.DiagnosticListener,System.Guid,System.Guid,System.Data.IDbConnection,System.String)">
            <summary>
            Writes the connection close after.
            </summary>
            <param name="listener">The listener.</param>
            <param name="operationId">The operation identifier.</param>
            <param name="clientConnectionId">The client connection identifier.</param>
            <param name="dbConn">The database connection.</param>
            <param name="operation">The operation.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDiagnostics.WriteConnectionCloseError(System.Diagnostics.DiagnosticListener,System.Guid,System.Guid,System.Data.IDbConnection,System.Exception,System.String)">
            <summary>
            Writes the connection close error.
            </summary>
            <param name="listener">The listener.</param>
            <param name="operationId">The operation identifier.</param>
            <param name="clientConnectionId">The client connection identifier.</param>
            <param name="dbConn">The database connection.</param>
            <param name="ex">The ex.</param>
            <param name="operation">The operation.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDiagnostics.WriteTransactionCommitBefore(System.Diagnostics.DiagnosticListener,System.Data.IsolationLevel,System.Data.IDbConnection,System.String)">
            <summary>
            Writes the transaction commit before.
            </summary>
            <param name="listener">The listener.</param>
            <param name="isolationLevel">The isolation level.</param>
            <param name="dbConn">The database connection.</param>
            <param name="operation">The operation.</param>
            <returns>Guid.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDiagnostics.WriteTransactionCommitAfter(System.Diagnostics.DiagnosticListener,System.Guid,System.Data.IsolationLevel,System.Data.IDbConnection,System.String)">
            <summary>
            Writes the transaction commit after.
            </summary>
            <param name="listener">The listener.</param>
            <param name="operationId">The operation identifier.</param>
            <param name="isolationLevel">The isolation level.</param>
            <param name="dbConn">The database connection.</param>
            <param name="operation">The operation.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDiagnostics.WriteTransactionCommitError(System.Diagnostics.DiagnosticListener,System.Guid,System.Data.IsolationLevel,System.Data.IDbConnection,System.Exception,System.String)">
            <summary>
            Writes the transaction commit error.
            </summary>
            <param name="listener">The listener.</param>
            <param name="operationId">The operation identifier.</param>
            <param name="isolationLevel">The isolation level.</param>
            <param name="dbConn">The database connection.</param>
            <param name="ex">The ex.</param>
            <param name="operation">The operation.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDiagnostics.WriteTransactionRollbackBefore(System.Diagnostics.DiagnosticListener,System.Data.IsolationLevel,System.Data.IDbConnection,System.String,System.String)">
            <summary>
            Writes the transaction rollback before.
            </summary>
            <param name="listener">The listener.</param>
            <param name="isolationLevel">The isolation level.</param>
            <param name="dbConn">The database connection.</param>
            <param name="transactionName">Name of the transaction.</param>
            <param name="operation">The operation.</param>
            <returns>Guid.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDiagnostics.WriteTransactionRollbackAfter(System.Diagnostics.DiagnosticListener,System.Guid,System.Data.IsolationLevel,System.Data.IDbConnection,System.String,System.String)">
            <summary>
            Writes the transaction rollback after.
            </summary>
            <param name="listener">The listener.</param>
            <param name="operationId">The operation identifier.</param>
            <param name="isolationLevel">The isolation level.</param>
            <param name="dbConn">The database connection.</param>
            <param name="transactionName">Name of the transaction.</param>
            <param name="operation">The operation.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDiagnostics.WriteTransactionRollbackError(System.Diagnostics.DiagnosticListener,System.Guid,System.Data.IsolationLevel,System.Data.IDbConnection,System.String,System.Exception,System.String)">
            <summary>
            Writes the transaction rollback error.
            </summary>
            <param name="listener">The listener.</param>
            <param name="operationId">The operation identifier.</param>
            <param name="isolationLevel">The isolation level.</param>
            <param name="dbConn">The database connection.</param>
            <param name="transactionName">Name of the transaction.</param>
            <param name="ex">The ex.</param>
            <param name="operation">The operation.</param>
        </member>
        <member name="T:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1">
            <summary>
            Class OrmLiteDialectProviderBase.
            Implements the <see cref="T:ServiceStack.OrmLite.IOrmLiteDialectProvider" />
            </summary>
            <typeparam name="TDialect">The type of the t dialect.</typeparam>
            <seealso cref="T:ServiceStack.OrmLite.IOrmLiteDialectProvider" />
        </member>
        <member name="F:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.Log">
            <summary>
            The log
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.InitColumnTypeMap">
            <summary>
            Initializes the column type map.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.GetColumnTypeDefinition(System.Type,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Gets the column type definition.
            </summary>
            <param name="columnType">Type of the column.</param>
            <param name="fieldLength">Length of the field.</param>
            <param name="scale">The scale.</param>
            <returns>System.String.</returns>
            <exception cref="T:System.ArgumentException">$"{converter.GetType().Name} requires a ColumnDefinition</exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.InitDbParam(System.Data.IDbDataParameter,System.Type)">
            <summary>
            Initializes the database parameter.
            </summary>
            <param name="dbParam">The database parameter.</param>
            <param name="columnType">Type of the column.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.CreateParam">
            <summary>
            Creates the parameter.
            </summary>
            <returns>IDbDataParameter.</returns>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.Variables">
            <summary>
            Gets the variables.
            </summary>
            <value>The variables.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.ExecFilter">
            <summary>
            Gets or sets the execute filter.
            </summary>
            <value>The execute filter.</value>
        </member>
        <member name="F:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.Converters">
            <summary>
            The converters
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.AutoIncrementDefinition">
            <summary>
            The automatic increment definition
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.DecimalConverter">
            <summary>
            Gets the decimal converter.
            </summary>
            <value>The decimal converter.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.StringConverter">
            <summary>
            Gets the string converter.
            </summary>
            <value>The string converter.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.OnOpenConnection">
            <summary>
            Invoked when a DB Connection is opened
            </summary>
            <value>The on open connection.</value>
        </member>
        <member name="F:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.OneTimeConnectionCommandsRun">
            <summary>
            The one time connection commands run
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.AllowLoadLocalInfile">
            <summary>
            Enable Bulk Inserts from CSV files
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.OneTimeConnectionCommands">
            <summary>
            Gets the one time connection commands.
            </summary>
            <value>The one time connection commands.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.ConnectionCommands">
            <summary>
            Gets the connection commands.
            </summary>
            <value>The connection commands.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.ParamString">
            <summary>
            Gets or sets the parameter string.
            </summary>
            <value>The parameter string.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.NamingStrategy">
            <summary>
            Gets or sets the naming strategy.
            </summary>
            <value>The naming strategy.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.StringSerializer">
            <summary>
            Gets or sets the string serializer.
            </summary>
            <value>The string serializer.</value>
        </member>
        <member name="F:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.paramNameFilter">
            <summary>
            The parameter name filter
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.ParamNameFilter">
            <summary>
            Gets or sets the parameter name filter.
            </summary>
            <value>The parameter name filter.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.SupportsSchema">
            <summary>
            Gets a value indicating whether [supports schema].
            </summary>
            <value><c>true</c> if [supports schema]; otherwise, <c>false</c>.</value>
        </member>
        <member name="F:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.DefaultValueFormat">
            <summary>
            The default value format
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.enumConverter">
            <summary>
            The enum converter
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.EnumConverter">
            <summary>
            Gets or sets the enum converter.
            </summary>
            <value>The enum converter.</value>
        </member>
        <member name="F:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.rowVersionConverter">
            <summary>
            The row version converter
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.RowVersionConverter">
            <summary>
            Gets or sets the row version converter.
            </summary>
            <value>The row version converter.</value>
        </member>
        <member name="F:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.referenceTypeConverter">
            <summary>
            The reference type converter
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.ReferenceTypeConverter">
            <summary>
            Gets or sets the reference type converter.
            </summary>
            <value>The reference type converter.</value>
        </member>
        <member name="F:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.valueTypeConverter">
            <summary>
            The value type converter
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.ValueTypeConverter">
            <summary>
            Gets or sets the value type converter.
            </summary>
            <value>The value type converter.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.RemoveConverter``1">
            <summary>
            Removes the converter.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.Init(System.String)">
            <summary>
            Initializes the specified connection string.
            </summary>
            <param name="connectionString">The connection string.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.RegisterConverter``1(ServiceStack.OrmLite.IOrmLiteConverter)">
            <summary>
            Registers the converter.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="converter">The converter.</param>
            <exception cref="T:System.ArgumentNullException">nameof(converter)</exception>
            <exception cref="T:System.ArgumentNullException">converter</exception>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.GetConverter(System.Type)">
            <summary>
            Gets the explicit Converter registered for a specific type
            </summary>
            <param name="type">The type.</param>
            <returns>IOrmLiteConverter.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.ShouldQuoteValue(System.Type)">
            <summary>
            Shoulds the quote value.
            </summary>
            <param name="fieldType">Type of the field.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.FromDbRowVersion(System.Type,System.Object)">
            <summary>
            From the database row version.
            </summary>
            <param name="fieldType">Type of the field.</param>
            <param name="value">The value.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.GetConverterBestMatch(System.Type)">
            <summary>
            Return best matching converter, falling back to Enum, Value or Ref Type Converters
            </summary>
            <param name="type">The type.</param>
            <returns>IOrmLiteConverter.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.GetConverterBestMatch(ServiceStack.OrmLite.FieldDefinition)">
            <summary>
            Gets the converter best match.
            </summary>
            <param name="fieldDef">The field definition.</param>
            <returns>IOrmLiteConverter.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.ToDbValue(System.Object,System.Type)">
            <summary>
            Converts to dbvalue.
            </summary>
            <param name="value">The value.</param>
            <param name="type">The type.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.FromDbValue(System.Object,System.Type)">
            <summary>
            Froms the database value.
            </summary>
            <param name="value">The value.</param>
            <param name="type">The type.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.GetValue(System.Data.IDataReader,System.Int32,System.Type)">
            <summary>
            Gets the value.
            </summary>
            <param name="reader">The reader.</param>
            <param name="columnIndex">Index of the column.</param>
            <param name="type">The type.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.GetValues(System.Data.IDataReader,System.Object[])">
            <summary>
            Gets the values.
            </summary>
            <param name="reader">The reader.</param>
            <param name="values">The values.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.CreateConnection(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Creates the connection.
            </summary>
            <param name="filePath">The file path.</param>
            <param name="options">The options.</param>
            <returns>IDbConnection.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.GetQuotedValue(System.String)">
            <summary>
            Quote the string so that it can be used inside an SQL-expression
            Escape quotes inside the string
            </summary>
            <param name="paramValue">The parameter value.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.GetSchemaName(System.String)">
            <summary>
            Gets the name of the schema.
            </summary>
            <param name="schema">The schema.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.GetTableName(System.Type)">
            <summary>
            Gets the name of the table.
            </summary>
            <param name="modelType">Type of the model.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.GetTableName(ServiceStack.OrmLite.ModelDefinition)">
            <summary>
            Gets the name of the table.
            </summary>
            <param name="modelDef">The model definition.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.GetTableName(ServiceStack.OrmLite.ModelDefinition,System.Boolean)">
            <summary>
            Gets the name of the table.
            </summary>
            <param name="modelDef">The model definition.</param>
            <param name="useStrategy">if set to <c>true</c> [use strategy].</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.GetTableName(System.String,System.String)">
            <summary>
            Gets the name of the table.
            </summary>
            <param name="table">The table.</param>
            <param name="schema">The schema.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.GetTableName(System.String,System.String,System.Boolean)">
            <summary>
            Gets the name of the table.
            </summary>
            <param name="table">The table.</param>
            <param name="schema">The schema.</param>
            <param name="useStrategy">if set to <c>true</c> [use strategy].</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.GetTableNameWithBrackets``1">
            <summary>
            Gets the table name with brackets.
            </summary>
            <typeparam name="T"></typeparam>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.GetTableNameWithBrackets(ServiceStack.OrmLite.ModelDefinition)">
            <summary>
            Gets the table name with brackets.
            </summary>
            <param name="modelDef">The model definition.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.GetTableNameWithBrackets(System.String,System.String)">
            <summary>
            Gets the table name with brackets.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="schema">The schema.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.GetQuotedTableName(System.Type)">
            <summary>
            Gets the name of the quoted table.
            </summary>
            <param name="modelType">Type of the model.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.GetQuotedTableName(ServiceStack.OrmLite.ModelDefinition)">
            <summary>
            Gets the name of the quoted table.
            </summary>
            <param name="modelDef">The model definition.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.GetQuotedTableName(System.String,System.String)">
            <summary>
            Gets the name of the quoted table.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="schema">The schema.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.GetQuotedTableName(System.String,System.String,System.Boolean)">
            <summary>
            Gets the name of the quoted table.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="schema">The schema.</param>
            <param name="useStrategy">if set to <c>true</c> [use strategy].</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.GetQuotedColumnName(System.String)">
            <summary>
            Gets the name of the quoted column.
            </summary>
            <param name="columnName">Name of the column.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.ShouldQuote(System.String)">
            <summary>
            Shoulds the quote.
            </summary>
            <param name="name">The name.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.QuoteIfRequired(System.String)">
            <summary>
            Quotes if required.
            </summary>
            <param name="name">The name.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.GetQuotedName(System.String)">
            <summary>
            Gets the name of the quoted.
            </summary>
            <param name="name">The name.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.GetQuotedName(System.String,System.String)">
            <summary>
            Gets the name of the quoted.
            </summary>
            <param name="name">The name.</param>
            <param name="schema">The schema.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.SanitizeFieldNameForParamName(System.String)">
            <summary>
            Sanitizes the name of the field name for parameter.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.GetColumnDefinition(ServiceStack.OrmLite.FieldDefinition)">
            <summary>
            Gets the column definition.
            </summary>
            <param name="fieldDef">The field definition.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.GetColumnDefinition(ServiceStack.OrmLite.FieldDefinition,ServiceStack.OrmLite.ModelDefinition)">
            <summary>
            Gets the column definition.
            </summary>
            <param name="fieldDef">The field definition.</param>
            <param name="modelDef">The model definition.</param>
            <returns>System.String.</returns>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.SelectIdentitySql">
            <summary>
            Gets or sets the select identity SQL.
            </summary>
            <value>The select identity SQL.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.GetLastInsertId(System.Data.IDbCommand)">
            <summary>
            Gets the last insert identifier.
            </summary>
            <param name="dbCmd">The database command.</param>
            <returns>System.Int64.</returns>
            <exception cref="T:System.NotImplementedException">Returning last inserted identity is not implemented on this DB Provider.</exception>
            <exception cref="T:System.NotImplementedException">Returning last inserted identity is not implemented on this DB Provider.</exception>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.GetLastInsertIdSqlSuffix``1">
            <summary>
            Gets the last insert identifier SQL suffix.
            </summary>
            <typeparam name="T"></typeparam>
            <returns>System.String.</returns>
            <exception cref="T:System.NotImplementedException">Returning last inserted identity is not implemented on this DB Provider.</exception>
            <exception cref="T:System.NotImplementedException">Returning last inserted identity is not implemented on this DB Provider.</exception>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.IsFullSelectStatement(System.String)">
            <summary>
            Determines whether [is full select statement] [the specified SQL].
            </summary>
            <param name="sql">The SQL.</param>
            <returns><c>true</c> if [is full select statement] [the specified SQL]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.ToSelectStatement(System.Type,System.String,System.Object[])">
            <summary>
            Converts to selectstatement.
            </summary>
            <param name="tableType">Type of the table.</param>
            <param name="sqlFilter">The SQL filter.</param>
            <param name="filterParams">The filter parameters.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.ApplyTags(System.Text.StringBuilder,System.Collections.Generic.ISet{System.String})">
            <summary>
            Applies the tags.
            </summary>
            <param name="sqlBuilder">The SQL builder.</param>
            <param name="tags">The tags.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.ToSelectStatement(ServiceStack.OrmLite.QueryType,ServiceStack.OrmLite.ModelDefinition,System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.ISet{System.String})">
            <summary>
            Converts to selectstatement.
            </summary>
            <param name="queryType">Type of the query.</param>
            <param name="modelDef">The model definition.</param>
            <param name="selectExpression">The select expression.</param>
            <param name="bodyExpression">The body expression.</param>
            <param name="orderByExpression">The order by expression.</param>
            <param name="offset">The offset.</param>
            <param name="rows">The rows.</param>
            <param name="tags">The tags.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.GenerateComment(System.String@)">
            <summary>
            Generates a SQL comment.
            </summary>
            <param name="text">The comment text.</param>
            <returns>The generated SQL.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.InitConnection(System.Data.IDbConnection)">
            <summary>
            Initializes the connection.
            </summary>
            <param name="dbConn">The database connection.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.GetRowVersionSelectColumn(ServiceStack.OrmLite.FieldDefinition,System.String)">
            <summary>
            Gets the row version select column.
            </summary>
            <param name="field">The field.</param>
            <param name="tablePrefix">The table prefix.</param>
            <returns>SelectItem.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.GetRowVersionColumn(ServiceStack.OrmLite.FieldDefinition,System.String)">
            <summary>
            Gets the row version column.
            </summary>
            <param name="field">The field.</param>
            <param name="tablePrefix">The table prefix.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.GetColumnNames(ServiceStack.OrmLite.ModelDefinition)">
            <summary>
            Gets the column names.
            </summary>
            <param name="modelDef">The model definition.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.GetColumnNames(ServiceStack.OrmLite.ModelDefinition,System.String)">
            <summary>
            Gets the column names.
            </summary>
            <param name="modelDef">The model definition.</param>
            <param name="tablePrefix">The table prefix.</param>
            <returns>SelectItem[].</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.ShouldSkipInsert(ServiceStack.OrmLite.FieldDefinition)">
            <summary>
            Shoulds the skip insert.
            </summary>
            <param name="fieldDef">The field definition.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.ColumnNameOnly(System.String)">
            <summary>
            Columns the name only.
            </summary>
            <param name="columnExpr">The column expr.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.GetInsertFieldDefinitions(ServiceStack.OrmLite.ModelDefinition,System.Collections.Generic.ICollection{System.String})">
            <summary>
            Gets the insert field definitions.
            </summary>
            <param name="modelDef">The model definition.</param>
            <param name="insertFields">The insert fields.</param>
            <returns>FieldDefinition[].</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.AppendInsertRowValueSql(System.Text.StringBuilder,ServiceStack.OrmLite.FieldDefinition,System.Object)">
            <summary>
            Appends the insert row value SQL.
            </summary>
            <param name="sbColumnValues">The sb column values.</param>
            <param name="fieldDef">The field definition.</param>
            <param name="obj">The object.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.ToInsertRowSql``1(``0,System.Collections.Generic.ICollection{System.String})">
            <summary>
            Converts to insertrowsql.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj">The object.</param>
            <param name="insertFields">The insert fields.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.ToInsertRowsSql``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.ICollection{System.String})">
            <summary>
            Converts to insertrowssql.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="objs">The objs.</param>
            <param name="insertFields">The insert fields.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.BulkInsert``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{``0},ServiceStack.OrmLite.BulkInsertConfig)">
            <summary>
            Bulks the insert.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="db">The database.</param>
            <param name="objs">The objs.</param>
            <param name="config">The configuration.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.ToInsertRowStatement(System.Data.IDbCommand,System.Object,System.Collections.Generic.ICollection{System.String})">
            <summary>
            Converts to insertrowstatement.
            </summary>
            <param name="cmd">The command.</param>
            <param name="objWithProperties">The object with properties.</param>
            <param name="insertFields">The insert fields.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.ToInsertStatement``1(System.Data.IDbCommand,``0,System.Collections.Generic.ICollection{System.String})">
            <summary>
            Converts to insertstatement.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="item">The item.</param>
            <param name="insertFields">The insert fields.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.GetInsertDefaultValue(ServiceStack.OrmLite.FieldDefinition)">
            <summary>
            Gets the insert default value.
            </summary>
            <param name="fieldDef">The field definition.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.PrepareParameterizedInsertStatement``1(System.Data.IDbCommand,System.Collections.Generic.ICollection{System.String},System.Func{ServiceStack.OrmLite.FieldDefinition,System.Boolean})">
            <summary>
            Prepares the parameterized insert statement.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cmd">The command.</param>
            <param name="insertFields">The insert fields.</param>
            <param name="shouldInclude">The should include.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.PrepareInsertRowStatement``1(System.Data.IDbCommand,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Prepares the insert row statement.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.GetInsertColumnsStatement``1">
            <summary>
            Gets the insert columns statement.
            </summary>
            <typeparam name="T"></typeparam>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.ToUpdateStatement``1(System.Data.IDbCommand,``0,System.Collections.Generic.ICollection{System.String})">
            <summary>
            Converts to updatestatement.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="item">The item.</param>
            <param name="updateFields">The update fields.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.ToArray(System.Data.IDataParameterCollection)">
            <summary>
            Converts to array.
            </summary>
            <param name="dbParams">The database parameters.</param>
            <returns>IDbDataParameter[].</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.MergeParamsIntoSql(System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter})">
            <summary>
            Merges the parameters into SQL.
            </summary>
            <param name="sql">The SQL.</param>
            <param name="dbParams">The database parameters.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.GetRefSelfSql``1(ServiceStack.OrmLite.SqlExpression{``0},ServiceStack.OrmLite.ModelDefinition,ServiceStack.OrmLite.FieldDefinition,ServiceStack.OrmLite.ModelDefinition,ServiceStack.OrmLite.FieldDefinition)">
            <summary>
            Gets the reference self SQL.
            </summary>
            <typeparam name="From">The type of from.</typeparam>
            <param name="refQ">The reference q.</param>
            <param name="modelDef">The model definition.</param>
            <param name="refSelf">The reference self.</param>
            <param name="refModelDef">The reference model definition.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.GetRefFieldSql(System.String,ServiceStack.OrmLite.ModelDefinition,ServiceStack.OrmLite.FieldDefinition)">
            <summary>
            Gets the reference field SQL.
            </summary>
            <param name="subSql">The sub SQL.</param>
            <param name="refModelDef">The reference model definition.</param>
            <param name="refField">The reference field.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.GetFieldReferenceSql(System.String,ServiceStack.OrmLite.FieldDefinition,ServiceStack.OrmLite.FieldReference)">
            <summary>
            Gets the field reference SQL.
            </summary>
            <param name="subSql">The sub SQL.</param>
            <param name="fieldDef">The field definition.</param>
            <param name="fieldRef">The field reference.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.PrepareParameterizedUpdateStatement``1(System.Data.IDbCommand,System.Collections.Generic.ICollection{System.String})">
            <summary>
            Prepares the parameterized update statement.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cmd">The command.</param>
            <param name="updateFields">The update fields.</param>
            <returns>If had RowVersion</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.AppendNullFieldCondition(System.Text.StringBuilder,ServiceStack.OrmLite.FieldDefinition)">
            <summary>
            Appends the null field condition.
            </summary>
            <param name="sqlFilter">The SQL filter.</param>
            <param name="fieldDef">The field definition.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.AppendFieldCondition(System.Text.StringBuilder,ServiceStack.OrmLite.FieldDefinition,System.Data.IDbCommand)">
            <summary>
            Appends the field condition.
            </summary>
            <param name="sqlFilter">The SQL filter.</param>
            <param name="fieldDef">The field definition.</param>
            <param name="cmd">The command.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.PrepareParameterizedDeleteStatement``1(System.Data.IDbCommand,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Prepares the parameterized delete statement.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cmd">The command.</param>
            <param name="deleteFieldValues">The delete field values.</param>
            <returns>If had RowVersion</returns>
            <exception cref="T:System.ArgumentException">DELETE's must have at least 1 criteria</exception>
            <exception cref="T:System.ArgumentException">DELETE's must have at least 1 criteria</exception>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.PrepareStoredProcedureStatement``1(System.Data.IDbCommand,``0)">
            <summary>
            Prepares the stored procedure statement.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cmd">The command.</param>
            <param name="obj">The object.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.AddParameter(System.Data.IDbCommand,ServiceStack.OrmLite.FieldDefinition)">
            <summary>
            Used for adding updated DB params in INSERT and UPDATE statements
            </summary>
            <param name="cmd">The command.</param>
            <param name="fieldDef">The field definition.</param>
            <returns>IDbDataParameter.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.SetParameter(ServiceStack.OrmLite.FieldDefinition,System.Data.IDbDataParameter)">
            <summary>
            Sets the parameter.
            </summary>
            <param name="fieldDef">The field definition.</param>
            <param name="p">The p.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.EnableIdentityInsert``1(System.Data.IDbCommand)">
            <summary>
            Enables the identity insert.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cmd">The command.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.EnableIdentityInsertAsync``1(System.Data.IDbCommand,System.Threading.CancellationToken)">
            <summary>
            Enables the identity insert asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cmd">The command.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.DisableIdentityInsert``1(System.Data.IDbCommand)">
            <summary>
            Disables the identity insert.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cmd">The command.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.DisableIdentityInsertAsync``1(System.Data.IDbCommand,System.Threading.CancellationToken)">
            <summary>
            Disables the identity insert asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cmd">The command.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.EnableForeignKeysCheck(System.Data.IDbCommand)">
            <summary>
            Enables the foreign keys check.
            </summary>
            <param name="cmd">The command.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.EnableForeignKeysCheckAsync(System.Data.IDbCommand,System.Threading.CancellationToken)">
            <summary>
            Enables the foreign keys check asynchronous.
            </summary>
            <param name="cmd">The command.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.DisableForeignKeysCheck(System.Data.IDbCommand)">
            <summary>
            Disables the foreign keys check.
            </summary>
            <param name="cmd">The command.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.DisableForeignKeysCheckAsync(System.Data.IDbCommand,System.Threading.CancellationToken)">
            <summary>
            Disables the foreign keys check asynchronous.
            </summary>
            <param name="cmd">The command.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.SetParameterValues``1(System.Data.IDbCommand,System.Object)">
            <summary>
            Sets the parameter values.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="obj">The object.</param>
            <exception cref="T:System.ArgumentException">$"Field Definition '{fieldName}' was not found</exception>
            <exception cref="T:System.ArgumentException">Field Definition '{fieldName}' was not found</exception>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.GetFieldDefinitionMap(ServiceStack.OrmLite.ModelDefinition)">
            <summary>
            Gets the field definition map.
            </summary>
            <param name="modelDef">The model definition.</param>
            <returns>Dictionary&lt;System.String, FieldDefinition&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.SetParameterValue(ServiceStack.OrmLite.FieldDefinition,System.Data.IDataParameter,System.Object)">
            <summary>
            Sets the parameter value.
            </summary>
            <param name="fieldDef">The field definition.</param>
            <param name="p">The p.</param>
            <param name="obj">The object.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.SetParameterSize(ServiceStack.OrmLite.FieldDefinition,System.Data.IDataParameter)">
            <summary>
            Sets the size of the parameter.
            </summary>
            <param name="fieldDef">The field definition.</param>
            <param name="p">The p.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.GetValue(ServiceStack.OrmLite.FieldDefinition,System.Object)">
            <summary>
            Gets the value.
            </summary>
            <param name="fieldDef">The field definition.</param>
            <param name="obj">The object.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.GetFieldValue(ServiceStack.OrmLite.FieldDefinition,System.Object)">
            <summary>
            Gets the field value.
            </summary>
            <param name="fieldDef">The field definition.</param>
            <param name="value">The value.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.GetFieldValue(System.Type,System.Object)">
            <summary>
            Gets the field value.
            </summary>
            <param name="fieldType">Type of the field.</param>
            <param name="value">The value.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.GetValueOrDbNull(ServiceStack.OrmLite.FieldDefinition,System.Object)">
            <summary>
            Gets the value or database null.
            </summary>
            <param name="fieldDef">The field definition.</param>
            <param name="obj">The object.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.GetQuotedValueOrDbNull``1(ServiceStack.OrmLite.FieldDefinition,System.Object)">
            <summary>
            Gets the quoted value or database null.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fieldDef">The field definition.</param>
            <param name="obj">The object.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.PrepareUpdateRowStatement(System.Data.IDbCommand,System.Object,System.Collections.Generic.ICollection{System.String})">
            <summary>
            Prepares the update row statement.
            </summary>
            <param name="dbCmd">The database command.</param>
            <param name="objWithProperties">The object with properties.</param>
            <param name="updateFields">The update fields.</param>
            <exception cref="T:System.Exception">No valid update properties provided (e.g. p => p.FirstName): " + dbCmd.CommandText</exception>
            <exception cref="T:System.Exception">No valid update properties provided (e.g. p =&gt; p.FirstName): " + dbCmd.CommandText</exception>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.PrepareUpdateRowStatement``1(System.Data.IDbCommand,System.Collections.Generic.Dictionary{System.String,System.Object},System.String)">
            <summary>
            Prepares the update row statement.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="args">The arguments.</param>
            <param name="sqlFilter">The SQL filter.</param>
            <exception cref="T:System.Exception">No valid update properties provided (e.g. () => new Person { Age = 27 }): " + dbCmd.CommandText</exception>
            <exception cref="T:System.Exception">No valid update properties provided (e.g. () =&gt; new Person { Age = 27 }): " + dbCmd.CommandText</exception>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.PrepareUpsertRowStatement``1(System.Data.IDbCommand,``0,System.String)">
            <summary>
            Prepares the upsert row statement.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="model">The model.</param>
            <param name="sqlFilter">The SQL filter.</param>
            <exception cref="T:System.Exception">$"No valid update properties provided (e.g. () => new Person {{ Age = 27 }}): {dbCmd.CommandText}</exception>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.PrepareUpdateRowAddStatement``1(System.Data.IDbCommand,System.Collections.Generic.Dictionary{System.String,System.Object},System.String)">
            <summary>
            Prepares the update row add statement.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="args">The arguments.</param>
            <param name="sqlFilter">The SQL filter.</param>
            <exception cref="T:System.Exception">No valid update properties provided (e.g. () => new Person { Age = 27 }): " + dbCmd.CommandText</exception>
            <exception cref="T:System.Exception">No valid update properties provided (e.g. () =&gt; new Person { Age = 27 }): " + dbCmd.CommandText</exception>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.ToDeleteStatement(System.Type,System.String,System.Object[])">
            <summary>
            Converts to deletestatement.
            </summary>
            <param name="tableType">Type of the table.</param>
            <param name="sqlFilter">The SQL filter.</param>
            <param name="filterParams">The filter parameters.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.HasInsertReturnValues(ServiceStack.OrmLite.ModelDefinition)">
            <summary>
            Determines whether [has insert return values] [the specified model definition].
            </summary>
            <param name="modelDef">The model definition.</param>
            <returns><c>true</c> if [has insert return values] [the specified model definition]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.GetDefaultValue(System.Type,System.String)">
            <summary>
            Gets the default value.
            </summary>
            <param name="tableType">Type of the table.</param>
            <param name="fieldName">Name of the field.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.GetDefaultValue(ServiceStack.OrmLite.FieldDefinition)">
            <summary>
            Gets the default value.
            </summary>
            <param name="fieldDef">The field definition.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.ResolveFragment(System.String)">
            <summary>
            Resolves the fragment.
            </summary>
            <param name="sql">The SQL.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.GetAutoIdDefaultValue(ServiceStack.OrmLite.FieldDefinition)">
            <summary>
            Gets the automatic identifier default value.
            </summary>
            <param name="fieldDef">The field definition.</param>
            <returns>System.String.</returns>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.CreateTableFieldsStrategy">
            <summary>
            Gets or sets the create table fields strategy.
            </summary>
            <value>The create table fields strategy.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.GetFieldDefinitions(ServiceStack.OrmLite.ModelDefinition)">
            <summary>
            Gets the field definitions.
            </summary>
            <param name="modelDef">The model definition.</param>
            <returns>List&lt;FieldDefinition&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.ToCreateSchemaStatement(System.String)">
            <summary>
            Converts to createschemastatement.
            </summary>
            <param name="schemaName">Name of the schema.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.GetSchemas(System.Data.IDbCommand)">
            <summary>
            Gets the schemas.
            </summary>
            <param name="dbCmd">The database command.</param>
            <returns>System.Collections.Generic.List&lt;string&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.GetSchemaTables(System.Data.IDbCommand)">
            <summary>
            Gets the schema tables.
            </summary>
            <param name="dbCmd">The database command.</param>
            <returns>System.Collections.Generic.Dictionary&lt;string, System.Collections.Generic.List&lt;string&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.DoesSchemaExist(System.Data.IDbCommand,System.String)">
            <summary>
            Doeses the schema exist.
            </summary>
            <param name="dbCmd">The database command.</param>
            <param name="schemaName">Name of the schema.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.DoesSchemaExistAsync(System.Data.IDbCommand,System.String,System.Threading.CancellationToken)">
            <summary>
            Doeses the schema exist asynchronous.
            </summary>
            <param name="dbCmd">The database command.</param>
            <param name="schema">The schema.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;System.Boolean&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.ToCreateTableStatement(System.Type)">
            <summary>
            Converts to createtablestatement.
            </summary>
            <param name="tableType">Type of the table.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.GetUniqueConstraints(ServiceStack.OrmLite.ModelDefinition)">
            <summary>
            Gets the unique constraints.
            </summary>
            <param name="modelDef">The model definition.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.GetUniqueConstraintName(ServiceStack.DataAnnotations.UniqueConstraintAttribute,System.String)">
            <summary>
            Gets the name of the unique constraint.
            </summary>
            <param name="constraint">The constraint.</param>
            <param name="tableName">Name of the table.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.GetCheckConstraint(ServiceStack.OrmLite.ModelDefinition,ServiceStack.OrmLite.FieldDefinition)">
            <summary>
            Gets the check constraint.
            </summary>
            <param name="modelDef">The model definition.</param>
            <param name="fieldDef">The field definition.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.ToPostCreateTableStatement(ServiceStack.OrmLite.ModelDefinition)">
            <summary>
            Converts to postcreatetablestatement.
            </summary>
            <param name="modelDef">The model definition.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.ToPostDropTableStatement(ServiceStack.OrmLite.ModelDefinition)">
            <summary>
            Converts to postdroptablestatement.
            </summary>
            <param name="modelDef">The model definition.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.GetForeignKeyOnDeleteClause(ServiceStack.OrmLite.ForeignKeyConstraint)">
            <summary>
            Gets the foreign key on delete clause.
            </summary>
            <param name="foreignKey">The foreign key.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.GetForeignKeyOnUpdateClause(ServiceStack.OrmLite.ForeignKeyConstraint)">
            <summary>
            Gets the foreign key on update clause.
            </summary>
            <param name="foreignKey">The foreign key.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.ToCreateIndexStatements(System.Type)">
            <summary>
            Converts to createindexstatements.
            </summary>
            <param name="tableType">Type of the table.</param>
            <returns>List&lt;System.String&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.DoesTableExist(System.Data.IDbConnection,System.String,System.String)">
            <summary>
            Doeses the table exist.
            </summary>
            <param name="db">The database.</param>
            <param name="tableName">Name of the table.</param>
            <param name="schema">The schema.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.DoesTableExistAsync(System.Data.IDbConnection,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Does table exist as an asynchronous operation.
            </summary>
            <param name="db">The database.</param>
            <param name="tableName">Name of the table.</param>
            <param name="schema">The schema.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>A Task&lt;System.Boolean&gt; representing the asynchronous operation.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.DoesTableExist(System.Data.IDbCommand,System.String,System.String)">
            <summary>
            Doeses the table exist.
            </summary>
            <param name="dbCmd">The database command.</param>
            <param name="tableName">Name of the table.</param>
            <param name="schema">The schema.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.DoesTableExistAsync(System.Data.IDbCommand,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Doeses the table exist asynchronous.
            </summary>
            <param name="dbCmd">The database command.</param>
            <param name="tableName">Name of the table.</param>
            <param name="schema">The schema.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;System.Boolean&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.DoesColumnExist(System.Data.IDbConnection,System.String,System.String,System.String)">
            <summary>
            Doeses the column exist.
            </summary>
            <param name="db">The database.</param>
            <param name="columnName">Name of the column.</param>
            <param name="tableName">Name of the table.</param>
            <param name="schema">The schema.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.DoesColumnExistAsync(System.Data.IDbConnection,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Doeses the column exist asynchronous.
            </summary>
            <param name="db">The database.</param>
            <param name="columnName">Name of the column.</param>
            <param name="tableName">Name of the table.</param>
            <param name="schema">The schema.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;System.Boolean&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.GetColumnDataType(System.Data.IDbConnection,System.String,System.String,System.String)">
            <summary>
            Gets the type of the column data.
            </summary>
            <param name="db">The database.</param>
            <param name="columnName">Name of the column.</param>
            <param name="tableName">Name of the table.</param>
            <param name="schema">The schema.</param>
            <returns>System.String.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.ColumnIsNullable(System.Data.IDbConnection,System.String,System.String,System.String)">
            <summary>
            Columns the is nullable.
            </summary>
            <param name="db">The database.</param>
            <param name="columnName">Name of the column.</param>
            <param name="tableName">Name of the table.</param>
            <param name="schema">The schema.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.GetColumnMaxLength(System.Data.IDbConnection,System.String,System.String,System.String)">
            <summary>
            Gets the maximum length of the column.
            </summary>
            <param name="db">The database.</param>
            <param name="columnName">Name of the column.</param>
            <param name="tableName">Name of the table.</param>
            <param name="schema">The schema.</param>
            <returns>System.Int64.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.DoesSequenceExist(System.Data.IDbCommand,System.String)">
            <summary>
            Doeses the sequence exist.
            </summary>
            <param name="dbCmd">The database command.</param>
            <param name="sequence">Name of the sequence.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.DoesSequenceExistAsync(System.Data.IDbCommand,System.String,System.Threading.CancellationToken)">
            <summary>
            Doeses the sequence exist asynchronous.
            </summary>
            <param name="dbCmd">The database command.</param>
            <param name="sequenceName">Name of the sequence.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;System.Boolean&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.GetIndexName(System.Boolean,System.String,System.String)">
            <summary>
            Gets the name of the index.
            </summary>
            <param name="isUnique">if set to <c>true</c> [is unique].</param>
            <param name="modelName">Name of the model.</param>
            <param name="fieldName">Name of the field.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.GetCompositeIndexName(ServiceStack.DataAnnotations.CompositeIndexAttribute,ServiceStack.OrmLite.ModelDefinition)">
            <summary>
            Gets the name of the composite index.
            </summary>
            <param name="compositeIndex">Index of the composite.</param>
            <param name="modelDef">The model definition.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.GetCompositeIndexNameWithSchema(ServiceStack.DataAnnotations.CompositeIndexAttribute,ServiceStack.OrmLite.ModelDefinition)">
            <summary>
            Gets the composite index name with schema.
            </summary>
            <param name="compositeIndex">Index of the composite.</param>
            <param name="modelDef">The model definition.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.ToCreateIndexStatement(System.Boolean,System.String,ServiceStack.OrmLite.ModelDefinition,System.String,System.Boolean,ServiceStack.OrmLite.FieldDefinition)">
            <summary>
            Converts to createindexstatement.
            </summary>
            <param name="isUnique">if set to <c>true</c> [is unique].</param>
            <param name="indexName">Name of the index.</param>
            <param name="modelDef">The model definition.</param>
            <param name="fieldName">Name of the field.</param>
            <param name="isCombined">if set to <c>true</c> [is combined].</param>
            <param name="fieldDef">The field definition.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.ToCreateSequenceStatements(System.Type)">
            <summary>
            Converts to createsequencestatements.
            </summary>
            <param name="tableType">Type of the table.</param>
            <returns>List&lt;System.String&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.ToCreateSequenceStatement(System.Type,System.String)">
            <summary>
            Converts to createsequencestatement.
            </summary>
            <param name="tableType">Type of the table.</param>
            <param name="sequenceName">Name of the sequence.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.ToCreateSavePoint(System.String)">
            <summary>
            Converts to createsavepoint.
            </summary>
            <param name="name">The name.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.ToReleaseSavePoint(System.String)">
            <summary>
            Converts to releasesavepoint.
            </summary>
            <param name="name">The name.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.ToRollbackSavePoint(System.String)">
            <summary>
            Converts to rollbacksavepoint.
            </summary>
            <param name="name">The name.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.SequenceList(System.Type)">
            <summary>
            Sequences the list.
            </summary>
            <param name="tableType">Type of the table.</param>
            <returns>List&lt;System.String&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.SequenceListAsync(System.Type,System.Threading.CancellationToken)">
            <summary>
            Sequences the list asynchronous.
            </summary>
            <param name="tableType">Type of the table.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;List&lt;System.String&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.ToExistStatement(System.Type,System.Object,System.String,System.Object[])">
            <summary>
            Converts to existstatement.
            </summary>
            <param name="fromTableType">Type of from table.</param>
            <param name="objWithProperties">The object with properties.</param>
            <param name="sqlFilter">The SQL filter.</param>
            <param name="filterParams">The filter parameters.</param>
            <returns>System.String.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.ToSelectFromProcedureStatement(System.Object,System.Type,System.String,System.Object[])">
            <summary>
            Converts to selectfromprocedurestatement.
            </summary>
            <param name="fromObjWithProperties">From object with properties.</param>
            <param name="outputModelType">Type of the output model.</param>
            <param name="sqlFilter">The SQL filter.</param>
            <param name="filterParams">The filter parameters.</param>
            <returns>System.String.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.ToExecuteProcedureStatement(System.Object)">
            <summary>
            Converts to executeprocedurestatement.
            </summary>
            <param name="objWithProperties">The object with properties.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.GetModel(System.Type)">
            <summary>
            Gets the model.
            </summary>
            <param name="modelType">Type of the model.</param>
            <returns>ModelDefinition.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.SqlExpression``1">
            <summary>
            SQLs the expression.
            </summary>
            <typeparam name="T"></typeparam>
            <returns>SqlExpression&lt;T&gt;.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.CreateParameterizedDeleteStatement(System.Data.IDbConnection,System.Object)">
            <summary>
            Creates the parameterized delete statement.
            </summary>
            <param name="connection">The connection.</param>
            <param name="objWithProperties">The object with properties.</param>
            <returns>IDbCommand.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.GetDropFunction(System.String,System.String)">
            <summary>
            Gets the drop function.
            </summary>
            <param name="database">The database.</param>
            <param name="functionName">Name of the function.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.GetCreateView(System.String,ServiceStack.OrmLite.ModelDefinition,System.Text.StringBuilder)">
            <summary>
            Gets the create view.
            </summary>
            <param name="database">The database.</param>
            <param name="modelDef">The model definition.</param>
            <param name="selectSql">The select SQL.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.GetDropView(System.String,ServiceStack.OrmLite.ModelDefinition)">
            <summary>
            Gets the drop view.
            </summary>
            <param name="database">The database.</param>
            <param name="modelDef">The model definition.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.GetCreateIndexView(ServiceStack.OrmLite.ModelDefinition,System.String,System.String)">
            <summary>
            Gets the create index view.
            </summary>
            <param name="modelDef">The model definition.</param>
            <param name="name">The name.</param>
            <param name="selectSql">The select SQL.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.GetDropIndexView(ServiceStack.OrmLite.ModelDefinition,System.String)">
            <summary>
            Gets the drop index view.
            </summary>
            <param name="modelDef">The model definition.</param>
            <param name="name">The name.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.GetDropIndexConstraint(ServiceStack.OrmLite.ModelDefinition,System.String)">
            <summary>
            Gets the drop index constraint.
            </summary>
            <param name="modelDef">The model definition.</param>
            <param name="name">The name.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.GetAddCompositePrimaryKey(System.String,ServiceStack.OrmLite.ModelDefinition,System.String,System.String)">
            <summary>
            Gets the add composite primary key sql command.
            </summary>
            <param name="database">The database name.</param>
            <param name="modelDef">The model definition.</param>
            <param name="fieldNameA">The field name a.</param>
            <param name="fieldNameB">The field name b.</param>
            <returns>Returns the SQL Command</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.GetPrimaryKeyName(ServiceStack.OrmLite.ModelDefinition)">
            <summary>
            Gets the name of the primary key.
            </summary>
            <param name="modelDef">The model definition.</param>
            <returns>Returns the Primary Key Name</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.GetDropPrimaryKeyConstraint(System.String,ServiceStack.OrmLite.ModelDefinition,System.String)">
            <summary>
            Gets the drop primary key constraint.
            </summary>
            <param name="database">The database name.</param>
            <param name="modelDef">The model definition.</param>
            <param name="name">The name.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.GetDropPrimaryKeyConstraint(System.String,ServiceStack.OrmLite.ModelDefinition,System.String,System.String,System.String)">
            <summary>
            Gets the drop primary key constraint.
            </summary>
            <param name="database">The database.</param>
            <param name="modelDef">The model definition.</param>
            <param name="name">The name.</param>
            <param name="fieldNameA">The field name a.</param>
            <param name="fieldNameB">The field name b.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.GetDropForeignKeyConstraint(ServiceStack.OrmLite.ModelDefinition,System.String)">
            <summary>
            Gets the drop foreign key constraint.
            </summary>
            <param name="modelDef">The model definition.</param>
            <param name="name">The name.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.GetConstraintName(System.String,ServiceStack.OrmLite.ModelDefinition,System.String)">
            <summary>
            Gets the name of the constraint.
            </summary>
            <param name="database">The database.</param>
            <param name="modelDef">The model definition.</param>
            <param name="fieldName">Name of the field.</param>
            <returns>string.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.GetDropConstraint(ServiceStack.OrmLite.ModelDefinition,System.String)">
            <summary>
            Gets the drop constraint.
            </summary>
            <param name="modelDef">The model definition.</param>
            <param name="name">The name.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.GetDropForeignKeyConstraints(ServiceStack.OrmLite.ModelDefinition)">
            <summary>
            Gets the drop foreign key constraints.
            </summary>
            <param name="modelDef">The model definition.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.ToAddColumnStatement(System.String,System.String,ServiceStack.OrmLite.FieldDefinition)">
            <summary>
            Converts to alter column statement.
            </summary>
            <param name="schema">The schema.</param>
            <param name="table">The table.</param>
            <param name="fieldDef">The field definition.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.ToAlterColumnStatement(System.String,System.String,ServiceStack.OrmLite.FieldDefinition)">
            <summary>
            Converts to altercolumnstatement.
            </summary>
            <param name="schema">The schema.</param>
            <param name="table">The table.</param>
            <param name="fieldDef">The field definition.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.ToChangeColumnNameStatement(System.String,System.String,ServiceStack.OrmLite.FieldDefinition,System.String)">
            <summary>
            Converts to changecolumnnamestatement.
            </summary>
            <param name="schema">The schema.</param>
            <param name="table">The table.</param>
            <param name="fieldDef">The field definition.</param>
            <param name="oldColumn">The old column.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.ToRenameColumnStatement(System.String,System.String,System.String,System.String)">
            <summary>
            Converts to renamecolumnstatement.
            </summary>
            <param name="schema">The schema.</param>
            <param name="table">The table.</param>
            <param name="oldColumn">The old column.</param>
            <param name="newColumn">The new column.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.ToAddForeignKeyStatement``2(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``1,System.Object}},ServiceStack.OrmLite.OnFkOption,ServiceStack.OrmLite.OnFkOption,System.String)">
            <summary>
            Converts to add foreign key statement.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TForeign">The type of the t foreign.</typeparam>
            <param name="field">The field.</param>
            <param name="foreignField">The foreign field.</param>
            <param name="onUpdate">The on update.</param>
            <param name="onDelete">The on delete.</param>
            <param name="foreignKeyName">Name of the foreign key.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.ToDropForeignKeyStatement(System.String,System.String,System.String)">
            <summary>
            Converts to dropforeignkeystatement.
            </summary>
            <param name="schema">The schema.</param>
            <param name="table">The table.</param>
            <param name="foreignKeyName">Name of the foreign key.</param>
            <returns>string.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.ToDropConstraintStatement(System.String,System.String,System.String)">
            <summary>
            Converts to dropconstraintstatement.
            </summary>
            <param name="schema">The schema.</param>
            <param name="table">The table.</param>
            <param name="constraintName">Name of the constraint.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.ToCreateIndexStatement``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String,System.Boolean)">
            <summary>
            Converts to create index statement.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="field">The field.</param>
            <param name="indexName">Name of the index.</param>
            <param name="unique">if set to <c>true</c> [unique].</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.FkOptionToString(ServiceStack.OrmLite.OnFkOption)">
            <summary>
            Fks the option to string.
            </summary>
            <param name="option">The option.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.GetQuotedValue(System.Object,System.Type)">
            <summary>
            Gets the quoted value.
            </summary>
            <param name="value">The value.</param>
            <param name="fieldType">Type of the field.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.GetParamValue(System.Object,System.Type)">
            <summary>
            Gets the parameter value.
            </summary>
            <param name="value">The value.</param>
            <param name="fieldType">Type of the field.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.InitQueryParam(System.Data.IDbDataParameter)">
            <summary>
            Initializes the query parameter.
            </summary>
            <param name="param">The parameter.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.InitUpdateParam(System.Data.IDbDataParameter)">
            <summary>
            Initializes the update parameter.
            </summary>
            <param name="param">The parameter.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.EscapeWildcards(System.String)">
            <summary>
            Escapes the wildcards.
            </summary>
            <param name="value">The value.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.GetLoadChildrenSubSelect``1(ServiceStack.OrmLite.SqlExpression{``0})">
            <summary>
            Gets the load children sub select.
            </summary>
            <typeparam name="From">The type of from.</typeparam>
            <param name="expr">The expr.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.ToRowCountStatement(System.String)">
            <summary>
            Converts to rowcountstatement.
            </summary>
            <param name="innerSql">The inner SQL.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.ToDropColumnStatement(System.String,System.String,System.String)">
            <summary>
            Drops the column.
            </summary>
            <param name="schema">The schema.</param>
            <param name="table">The table.</param>
            <param name="column">The column.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.ToTableNamesStatement(System.String)">
            <summary>
            Converts to tablenamesstatement.
            </summary>
            <param name="schema">The schema.</param>
            <returns>System.String.</returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.ToTableNamesWithRowCountsStatement(System.Boolean,System.String)">
            <summary>
            Return table, row count SQL for listing all tables with their row counts
            </summary>
            <param name="live">If true returns live current row counts of each table (slower), otherwise returns cached row counts from RDBMS table stats</param>
            <param name="schema">The table schema if any</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.SqlConflict(System.String,System.String)">
            <summary>
            SQLs the conflict.
            </summary>
            <param name="sql">The SQL.</param>
            <param name="conflictResolution">The conflict resolution.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.SqlConcat(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            SQLs the concat.
            </summary>
            <param name="args">The arguments.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.SqlCurrency(System.String)">
            <summary>
            SQLs the currency.
            </summary>
            <param name="fieldOrValue">The field or value.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.SqlCurrency(System.String,System.String)">
            <summary>
            SQLs the currency.
            </summary>
            <param name="fieldOrValue">The field or value.</param>
            <param name="currencySymbol">The currency symbol.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.SqlBool(System.Boolean)">
            <summary>
            SQLs the bool.
            </summary>
            <param name="value">if set to <c>true</c> [value].</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.SqlLimit(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            SQLs the limit.
            </summary>
            <param name="offset">The offset.</param>
            <param name="rows">The rows.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.SqlCast(System.Object,System.String)">
            <summary>
            SQLs the cast.
            </summary>
            <param name="fieldOrValue">The field or value.</param>
            <param name="castAs">The cast as.</param>
            <returns>System.String.</returns>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.SqlRandom">
            <summary>
            Gets the SQL random.
            </summary>
            <value>The SQL random.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.SupportsAsync">
            <summary>
            Gets a value indicating whether [supports asynchronous].
            </summary>
            <value>
              <c>true</c> if [supports asynchronous]; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.OpenAsync(System.Data.IDbConnection,System.Threading.CancellationToken)">
            <summary>
            Opens the asynchronous.
            </summary>
            <param name="db">The database.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.ExecuteReaderAsync(System.Data.IDbCommand,System.Threading.CancellationToken)">
            <summary>
            Executes the reader asynchronous.
            </summary>
            <param name="cmd">The command.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;IDataReader&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.ExecuteNonQueryAsync(System.Data.IDbCommand,System.Threading.CancellationToken)">
            <summary>
            Executes the non query asynchronous.
            </summary>
            <param name="cmd">The command.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;System.Int32&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.ExecuteScalarAsync(System.Data.IDbCommand,System.Threading.CancellationToken)">
            <summary>
            Executes the scalar asynchronous.
            </summary>
            <param name="cmd">The command.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;System.Object&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.ReadAsync(System.Data.IDataReader,System.Threading.CancellationToken)">
            <summary>
            Reads the asynchronous.
            </summary>
            <param name="reader">The reader.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;System.Boolean&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.ReaderEach``1(System.Data.IDataReader,System.Func{``0},System.Threading.CancellationToken)">
            <summary>
            Readers the each.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="reader">The reader.</param>
            <param name="fn">The function.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;List&lt;T&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.ReaderEach``1(System.Data.IDataReader,System.Action,``0,System.Threading.CancellationToken)">
            <summary>
            Readers the each.
            </summary>
            <typeparam name="Return">The type of the return.</typeparam>
            <param name="reader">The reader.</param>
            <param name="fn">The function.</param>
            <param name="source">The source.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;Return&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.ReaderRead``1(System.Data.IDataReader,System.Func{``0},System.Threading.CancellationToken)">
            <summary>
            Readers the read.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="reader">The reader.</param>
            <param name="fn">The function.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.InsertAndGetLastInsertIdAsync``1(System.Data.IDbCommand,System.Threading.CancellationToken)">
            <summary>
            Inserts the and get last insert identifier asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;System.Int64&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.GetUtcDateFunction">
            <summary>
            Gets the UTC date function.
            </summary>
            <returns>System.String.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.DateDiffFunction(System.String,System.String,System.String)">
            <summary>
            Dates the difference function.
            </summary>
            <param name="interval">The interval.</param>
            <param name="date1">The date1.</param>
            <param name="date2">The date2.</param>
            <returns>System.String.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.IsNullFunction(System.String,System.Object)">
            <summary>
            Determines whether [is null function] [the specified expression].
            </summary>
            <param name="expression">The expression.</param>
            <param name="alternateValue">The alternate value.</param>
            <returns>System.String.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.ConvertFlag(System.String)">
            <summary>
            Converts the flag.
            </summary>
            <param name="expression">The expression.</param>
            <returns>System.String.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.DatabaseFragmentationInfo(System.String)">
            <summary>
            Databases the fragmentation information.
            </summary>
            <param name="database">The database.</param>
            <returns>System.String.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.DatabaseSize(System.String)">
            <summary>
            Databases the size.
            </summary>
            <param name="database">The database.</param>
            <returns>System.String.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.SQLVersion">
            <summary>
            SQLs the version.
            </summary>
            <returns>System.String.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.SQLServerName">
            <summary>
            SQLs the name of the server.
            </summary>
            <returns>System.String.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.ShrinkDatabase(System.String)">
            <summary>
            Shrinks the database.
            </summary>
            <param name="database">The database.</param>
            <returns>System.String.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.ReIndexDatabase(System.String,System.String)">
            <summary>
            Res the index database.
            </summary>
            <param name="database">The database.</param>
            <param name="objectQualifier">The object qualifier.</param>
            <returns>System.String.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.ChangeRecoveryMode(System.String,System.String)">
            <summary>
            Changes the recovery mode.
            </summary>
            <param name="database">The database.</param>
            <param name="mode">The mode.</param>
            <returns>System.String.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderBase`1.InnerRunSqlExecuteReader(System.Data.IDbCommand)">
            <summary>
            Just runs the SQL command according to specifications.
            </summary>
            <param name="command">The command.</param>
            <returns>Returns the Results</returns>
            <exception cref="T:System.NotImplementedException"></exception>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:ServiceStack.OrmLite.OrmLiteDialectProviderExtensions">
            <summary>
            Class OrmLiteDialectProviderExtensions.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderExtensions.GetParam(ServiceStack.OrmLite.IOrmLiteDialectProvider,System.String,System.String)">
            <summary>
            Gets the parameter.
            </summary>
            <param name="dialect">The dialect.</param>
            <param name="name">The name.</param>
            <param name="format">The format.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderExtensions.GetParam(ServiceStack.OrmLite.IOrmLiteDialectProvider,System.String)">
            <summary>
            Gets the parameter.
            </summary>
            <param name="dialect">The dialect.</param>
            <param name="name">The name.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderExtensions.GetParam(ServiceStack.OrmLite.IOrmLiteDialectProvider,System.Int32)">
            <summary>
            Gets the parameter.
            </summary>
            <param name="dialect">The dialect.</param>
            <param name="indexNo">The index no.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderExtensions.ToFieldName(ServiceStack.OrmLite.IOrmLiteDialectProvider,System.String)">
            <summary>
            Converts to fieldname.
            </summary>
            <param name="dialect">The dialect.</param>
            <param name="paramName">Name of the parameter.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderExtensions.FmtTable(System.String,ServiceStack.OrmLite.IOrmLiteDialectProvider)">
            <summary>
            FMTs the table.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="dialect">The dialect.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderExtensions.FmtColumn(System.String,ServiceStack.OrmLite.IOrmLiteDialectProvider)">
            <summary>
            FMTs the column.
            </summary>
            <param name="columnName">Name of the column.</param>
            <param name="dialect">The dialect.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderExtensions.GetQuotedColumnName(ServiceStack.OrmLite.IOrmLiteDialectProvider,ServiceStack.OrmLite.FieldDefinition)">
            <summary>
            Gets the name of the quoted column.
            </summary>
            <param name="dialect">The dialect.</param>
            <param name="fieldDef">The field definition.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderExtensions.GetQuotedColumnName(ServiceStack.OrmLite.IOrmLiteDialectProvider,ServiceStack.OrmLite.ModelDefinition,ServiceStack.OrmLite.FieldDefinition)">
            <summary>
            Gets the name of the quoted column.
            </summary>
            <param name="dialect">The dialect.</param>
            <param name="tableDef">The table definition.</param>
            <param name="fieldDef">The field definition.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderExtensions.GetQuotedColumnName(ServiceStack.OrmLite.IOrmLiteDialectProvider,ServiceStack.OrmLite.ModelDefinition,System.String,ServiceStack.OrmLite.FieldDefinition)">
            <summary>
            Gets the name of the quoted column.
            </summary>
            <param name="dialect">The dialect.</param>
            <param name="tableDef">The table definition.</param>
            <param name="tableAlias">The table alias.</param>
            <param name="fieldDef">The field definition.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderExtensions.GetQuotedColumnName(ServiceStack.OrmLite.IOrmLiteDialectProvider,ServiceStack.OrmLite.ModelDefinition,System.String)">
            <summary>
            Gets the name of the quoted column.
            </summary>
            <param name="dialect">The dialect.</param>
            <param name="tableDef">The table definition.</param>
            <param name="fieldName">Name of the field.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderExtensions.GetQuotedColumnName(ServiceStack.OrmLite.IOrmLiteDialectProvider,ServiceStack.OrmLite.ModelDefinition,System.String,System.String)">
            <summary>
            Gets the name of the quoted column.
            </summary>
            <param name="dialect">The dialect.</param>
            <param name="tableDef">The table definition.</param>
            <param name="tableAlias">The table alias.</param>
            <param name="fieldName">Name of the field.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderExtensions.FromDbValue(ServiceStack.OrmLite.IOrmLiteDialectProvider,System.Data.IDataReader,System.Int32,System.Type)">
            <summary>
            Froms the database value.
            </summary>
            <param name="dialect">The dialect.</param>
            <param name="reader">The reader.</param>
            <param name="columnIndex">Index of the column.</param>
            <param name="type">The type.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderExtensions.GetConverter``1(ServiceStack.OrmLite.IOrmLiteDialectProvider)">
            <summary>
            Gets the converter.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dialect">The dialect.</param>
            <returns>IOrmLiteConverter.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderExtensions.HasConverter(ServiceStack.OrmLite.IOrmLiteDialectProvider,System.Type)">
            <summary>
            Determines whether the specified type has converter.
            </summary>
            <param name="dialect">The dialect.</param>
            <param name="type">The type.</param>
            <returns><c>true</c> if the specified type has converter; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderExtensions.GetStringConverter(ServiceStack.OrmLite.IOrmLiteDialectProvider)">
            <summary>
            Gets the string converter.
            </summary>
            <param name="dialect">The dialect.</param>
            <returns>StringConverter.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderExtensions.GetDecimalConverter(ServiceStack.OrmLite.IOrmLiteDialectProvider)">
            <summary>
            Gets the decimal converter.
            </summary>
            <param name="dialect">The dialect.</param>
            <returns>DecimalConverter.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderExtensions.GetDateTimeConverter(ServiceStack.OrmLite.IOrmLiteDialectProvider)">
            <summary>
            Gets the date time converter.
            </summary>
            <param name="dialect">The dialect.</param>
            <returns>DateTimeConverter.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderExtensions.IsMySqlConnector(ServiceStack.OrmLite.IOrmLiteDialectProvider)">
            <summary>
            Determines whether [is my SQL connector] [the specified dialect].
            </summary>
            <param name="dialect">The dialect.</param>
            <returns><c>true</c> if [is my SQL connector] [the specified dialect]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderExtensions.InitDbParam(ServiceStack.OrmLite.IOrmLiteDialectProvider,System.Data.IDbDataParameter,System.Type)">
            <summary>
            Initializes the database parameter.
            </summary>
            <param name="dialect">The dialect.</param>
            <param name="dbParam">The database parameter.</param>
            <param name="columnType">Type of the column.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderExtensions.InitDbParam(ServiceStack.OrmLite.IOrmLiteDialectProvider,System.Data.IDbDataParameter,System.Type,System.Object)">
            <summary>
            Initializes the database parameter.
            </summary>
            <param name="dialect">The dialect.</param>
            <param name="dbParam">The database parameter.</param>
            <param name="columnType">Type of the column.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderExtensions.SqlSpread``1(ServiceStack.OrmLite.IOrmLiteDialectProvider,``0[])">
            <summary>
            SQLs the spread.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dialect">The dialect.</param>
            <param name="values">The values.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderExtensions.ToAddColumnStatement(ServiceStack.OrmLite.IOrmLiteDialectProvider,System.Type,ServiceStack.OrmLite.FieldDefinition)">
            <summary>
            Converts to addcolumnstatement.
            </summary>
            <param name="dialect">The dialect.</param>
            <param name="modelType">Type of the model.</param>
            <param name="fieldDef">The field definition.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderExtensions.ToAlterColumnStatement(ServiceStack.OrmLite.IOrmLiteDialectProvider,System.Type,ServiceStack.OrmLite.FieldDefinition)">
            <summary>
            Converts to altercolumnstatement.
            </summary>
            <param name="dialect">The dialect.</param>
            <param name="modelType">Type of the model.</param>
            <param name="fieldDef">The field definition.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderExtensions.ToChangeColumnNameStatement(ServiceStack.OrmLite.IOrmLiteDialectProvider,System.Type,ServiceStack.OrmLite.FieldDefinition,System.String)">
            <summary>
            Converts to changecolumnnamestatement.
            </summary>
            <param name="dialect">The dialect.</param>
            <param name="modelType">Type of the model.</param>
            <param name="fieldDef">The field definition.</param>
            <param name="oldColumnName">Old name of the column.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderExtensions.ToRenameColumnStatement(ServiceStack.OrmLite.IOrmLiteDialectProvider,System.Type,System.String,System.String)">
            <summary>
            Converts to renamecolumnstatement.
            </summary>
            <param name="dialect">The dialect.</param>
            <param name="modelType">Type of the model.</param>
            <param name="oldColumnName">Old name of the column.</param>
            <param name="newColumnName">New name of the column.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderExtensions.ToDropColumnStatement(ServiceStack.OrmLite.IOrmLiteDialectProvider,System.Type,System.String)">
            <summary>
            Converts to dropcolumnstatement.
            </summary>
            <param name="dialect">The dialect.</param>
            <param name="modelType">Type of the model.</param>
            <param name="columnName">Name of the column.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteDialectProviderExtensions.ToDropConstraintStatement(ServiceStack.OrmLite.IOrmLiteDialectProvider,System.Type,System.String)">
            <summary>
            Converts to dropconstraintstatement.
            </summary>
            <param name="dialect">The dialect.</param>
            <param name="modelType">Type of the model.</param>
            <param name="constraintName">Name of the constraint.</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.IOrmLiteExecFilter">
            <summary>
            Interface IOrmLiteExecFilter
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteExecFilter.SqlExpression``1(System.Data.IDbConnection)">
            <summary>
            SQLs the expression.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <returns>SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteExecFilter.CreateCommand(System.Data.IDbConnection)">
            <summary>
            Creates the command.
            </summary>
            <param name="dbConn">The database connection.</param>
            <returns>IDbCommand.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteExecFilter.DisposeCommand(System.Data.IDbCommand,System.Data.IDbConnection)">
            <summary>
            Disposes the command.
            </summary>
            <param name="dbCmd">The database command.</param>
            <param name="dbConn">The database connection.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteExecFilter.Exec``1(System.Data.IDbConnection,System.Func{System.Data.IDbCommand,``0})">
            <summary>
            Executes the specified database connection.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="filter">The filter.</param>
            <returns>T.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteExecFilter.Exec(System.Data.IDbConnection,System.Func{System.Data.IDbCommand,System.Data.IDbCommand})">
            <summary>
            Executes the specified database connection.
            </summary>
            <param name="dbConn">The database connection.</param>
            <param name="filter">The filter.</param>
            <returns>IDbCommand.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteExecFilter.Exec``1(System.Data.IDbConnection,System.Func{System.Data.IDbCommand,System.Threading.Tasks.Task{``0}})">
            <summary>
            Executes the specified database connection.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="filter">The filter.</param>
            <returns>Task&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteExecFilter.Exec(System.Data.IDbConnection,System.Func{System.Data.IDbCommand,System.Threading.Tasks.Task{System.Data.IDbCommand}})">
            <summary>
            Executes the specified database connection.
            </summary>
            <param name="dbConn">The database connection.</param>
            <param name="filter">The filter.</param>
            <returns>Task&lt;IDbCommand&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteExecFilter.Exec(System.Data.IDbConnection,System.Action{System.Data.IDbCommand})">
            <summary>
            Executes the specified database connection.
            </summary>
            <param name="dbConn">The database connection.</param>
            <param name="filter">The filter.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteExecFilter.Exec(System.Data.IDbConnection,System.Func{System.Data.IDbCommand,System.Threading.Tasks.Task})">
            <summary>
            Executes the specified database connection.
            </summary>
            <param name="dbConn">The database connection.</param>
            <param name="filter">The filter.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteExecFilter.ExecLazy``1(System.Data.IDbConnection,System.Func{System.Data.IDbCommand,System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Executes the lazy.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="filter">The filter.</param>
            <returns>IEnumerable&lt;T&gt;.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.OrmLiteExecFilter">
            <summary>
            Class OrmLiteExecFilter.
            Implements the <see cref="T:ServiceStack.OrmLite.IOrmLiteExecFilter" />
            </summary>
            <seealso cref="T:ServiceStack.OrmLite.IOrmLiteExecFilter" />
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteExecFilter.SqlExpression``1(System.Data.IDbConnection)">
            <summary>
            SQLs the expression.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <returns>SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteExecFilter.CreateCommand(System.Data.IDbConnection)">
            <summary>
            Creates the command.
            </summary>
            <param name="dbConn">The database connection.</param>
            <returns>IDbCommand.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteExecFilter.DisposeCommand(System.Data.IDbCommand,System.Data.IDbConnection)">
            <summary>
            Disposes the command.
            </summary>
            <param name="dbCmd">The database command.</param>
            <param name="dbConn">The database connection.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteExecFilter.Exec``1(System.Data.IDbConnection,System.Func{System.Data.IDbCommand,``0})">
            <summary>
            Executes the specified database connection.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="filter">The filter.</param>
            <returns>T.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteExecFilter.Exec(System.Data.IDbConnection,System.Func{System.Data.IDbCommand,System.Data.IDbCommand})">
            <summary>
            Executes the specified database connection.
            </summary>
            <param name="dbConn">The database connection.</param>
            <param name="filter">The filter.</param>
            <returns>IDbCommand.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteExecFilter.Exec(System.Data.IDbConnection,System.Action{System.Data.IDbCommand})">
            <summary>
            Executes the specified database connection.
            </summary>
            <param name="dbConn">The database connection.</param>
            <param name="filter">The filter.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteExecFilter.Exec``1(System.Data.IDbConnection,System.Func{System.Data.IDbCommand,System.Threading.Tasks.Task{``0}})">
            <summary>
            Executes the specified database connection.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="filter">The filter.</param>
            <returns>T.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteExecFilter.Exec(System.Data.IDbConnection,System.Func{System.Data.IDbCommand,System.Threading.Tasks.Task{System.Data.IDbCommand}})">
            <summary>
            Executes the specified database connection.
            </summary>
            <param name="dbConn">The database connection.</param>
            <param name="filter">The filter.</param>
            <returns>IDbCommand.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteExecFilter.Exec(System.Data.IDbConnection,System.Func{System.Data.IDbCommand,System.Threading.Tasks.Task})">
            <summary>
            Executes the specified database connection.
            </summary>
            <param name="dbConn">The database connection.</param>
            <param name="filter">The filter.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteExecFilter.ExecLazy``1(System.Data.IDbConnection,System.Func{System.Data.IDbCommand,System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Executes the lazy.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="filter">The filter.</param>
            <returns>IEnumerable&lt;T&gt;.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.OrmLiteNamingStrategyBase">
            <summary>
            Class OrmLiteNamingStrategyBase.
            Implements the <see cref="T:ServiceStack.OrmLite.INamingStrategy" />
            </summary>
            <seealso cref="T:ServiceStack.OrmLite.INamingStrategy" />
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteNamingStrategyBase.GetSchemaName(System.String)">
            <summary>
            Gets the name of the schema.
            </summary>
            <param name="name">The name.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteNamingStrategyBase.GetSchemaName(ServiceStack.OrmLite.ModelDefinition)">
            <summary>
            Gets the name of the schema.
            </summary>
            <param name="modelDef">The model definition.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteNamingStrategyBase.GetTableName(System.String)">
            <summary>
            Gets the name of the table.
            </summary>
            <param name="name">The name.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteNamingStrategyBase.GetTableName(ServiceStack.OrmLite.ModelDefinition)">
            <summary>
            Gets the name of the table.
            </summary>
            <param name="modelDef">The model definition.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteNamingStrategyBase.GetColumnName(System.String)">
            <summary>
            Gets the name of the column.
            </summary>
            <param name="name">The name.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteNamingStrategyBase.GetSequenceName(System.String,System.String)">
            <summary>
            Gets the name of the sequence.
            </summary>
            <param name="modelName">Name of the model.</param>
            <param name="fieldName">Name of the field.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteNamingStrategyBase.ApplyNameRestrictions(System.String)">
            <summary>
            Applies the name restrictions.
            </summary>
            <param name="name">The name.</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.OrmLitePersistenceProvider">
            <summary>
            Allow for code-sharing between OrmLite, IPersistenceProvider and ICacheClient
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLitePersistenceProvider.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="F:ServiceStack.OrmLite.OrmLitePersistenceProvider.DisposeConnection">
            <summary>
            The dispose connection
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.OrmLitePersistenceProvider.connection">
            <summary>
            The connection
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLitePersistenceProvider.Connection">
            <summary>
            Gets the connection.
            </summary>
            <value>The connection.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLitePersistenceProvider.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.OrmLite.OrmLitePersistenceProvider" /> class.
            </summary>
            <param name="connectionString">The connection string.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLitePersistenceProvider.#ctor(System.Data.IDbConnection)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.OrmLite.OrmLitePersistenceProvider" /> class.
            </summary>
            <param name="connection">The connection.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLitePersistenceProvider.CreateCommand">
            <summary>
            Creates the command.
            </summary>
            <returns>IDbCommand.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLitePersistenceProvider.GetById``1(System.Object)">
            <summary>
            Gets the by identifier.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="id">The identifier.</param>
            <returns>T.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLitePersistenceProvider.GetByIds``1(System.Collections.ICollection)">
            <summary>
            Gets the by ids.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ids">The ids.</param>
            <returns>IList&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLitePersistenceProvider.Store``1(``0)">
            <summary>
            Stores the specified entity.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity">The entity.</param>
            <returns>T.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLitePersistenceProvider.StoreAll``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Stores all.
            </summary>
            <typeparam name="TEntity">The type of the t entity.</typeparam>
            <param name="entities">The entities.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLitePersistenceProvider.Delete``1(``0)">
            <summary>
            Deletes the specified entity.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLitePersistenceProvider.DeleteById``1(System.Object)">
            <summary>
            Deletes the by identifier.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="id">The identifier.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLitePersistenceProvider.DeleteByIds``1(System.Collections.ICollection)">
            <summary>
            Deletes the by ids.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ids">The ids.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLitePersistenceProvider.DeleteAll``1">
            <summary>
            Deletes all.
            </summary>
            <typeparam name="TEntity">The type of the t entity.</typeparam>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLitePersistenceProvider.Dispose">
            <summary>
            Disposes this instance.
            </summary>
        </member>
        <member name="T:ServiceStack.OrmLite.OrmLiteReadApi">
            <summary>
            Class OrmLiteReadApi.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.Select``1(System.Data.IDbConnection)">
            <summary>
            Returns results from the active connection.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <returns>List&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.Select``1(System.Data.IDbConnection,System.String)">
            <summary>
            Returns results from using sql. E.g:
            <para>db.Select&lt;Person&gt;("Age &gt; 40")</para><para>db.Select&lt;Person&gt;("SELECT * FROM Person WHERE Age &gt; 40")</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="sql">The SQL.</param>
            <returns>List&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.Select``1(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter})">
            <summary>
            Returns results from using sql. E.g:
            <para>db.Select&lt;Person&gt;("SELECT * FROM Person WHERE Age &gt; @age", new[] { db.CreateParam("age", 40) })</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="sql">The SQL.</param>
            <param name="sqlParams">The SQL parameters.</param>
            <returns>List&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.Select``1(System.Data.IDbConnection,System.String,System.Object)">
            <summary>
            Returns results from using a parameterized query. E.g:
            <para>db.Select&lt;Person&gt;("Age &gt; @age", new { age = 40})</para><para>db.Select&lt;Person&gt;("SELECT * FROM Person WHERE Age &gt; @age", new { age = 40})</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="sql">The SQL.</param>
            <param name="anonType">Type of the anon.</param>
            <returns>List&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.Select``1(System.Data.IDbConnection,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Returns results from using a parameterized query. E.g:
            <para>db.Select&lt;Person&gt;("Age &gt; @age", new Dictionary&lt;string, object&gt; { { "age", 40 } })</para><para>db.Select&lt;Person&gt;("SELECT * FROM Person WHERE Age &gt; @age", new Dictionary&lt;string, object&gt; { { "age", 40 } })</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="sql">The SQL.</param>
            <param name="dict">The dictionary.</param>
            <returns>List&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.Select``1(System.Data.IDbConnection,System.Type,System.String,System.Object)">
            <summary>
            Returns a partial subset of results from the specified tableType. E.g:
            <para>db.Select&lt;EntityWithId&gt;(typeof(Person))</para><para></para>
            </summary>
            <typeparam name="TModel">The type of the t model.</typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="fromTableType">Type of from table.</param>
            <param name="sql">The SQL.</param>
            <param name="anonType">Type of the anon.</param>
            <returns>List&lt;TModel&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.Select``1(System.Data.IDbConnection,System.Type)">
            <summary>
            Returns a partial subset of results from the specified tableType. E.g:
            <para>db.Select&lt;EntityWithId&gt;(typeof(Person))</para><para></para>
            </summary>
            <typeparam name="TModel">The type of the t model.</typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="fromTableType">Type of from table.</param>
            <returns>List&lt;TModel&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.Where``1(System.Data.IDbConnection,System.String,System.Object)">
            <summary>
            Returns results from using a single name, value filter. E.g:
            <para>db.Where&lt;Person&gt;("Age", 27)</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <returns>List&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.Where``1(System.Data.IDbConnection,System.Object)">
            <summary>
            Returns results from using an anonymous type filter. E.g:
            <para>db.Where&lt;Person&gt;(new { Age = 27 })</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="anonType">Type of the anon.</param>
            <returns>List&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.SelectByIds``1(System.Data.IDbConnection,System.Collections.IEnumerable)">
            <summary>
            Returns results using the supplied primary key ids. E.g:
            <para>db.SelectByIds&lt;Person&gt;(new[] { 1, 2, 3 })</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="idValues">The identifier values.</param>
            <returns>List&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.SelectNonDefaults``1(System.Data.IDbConnection,``0)">
            <summary>
            Query results using the non-default values in the supplied partially populated POCO example. E.g:
            <para>db.SelectNonDefaults(new Person { Id = 1 })</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="filter">The filter.</param>
            <returns>List&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.SelectNonDefaults``1(System.Data.IDbConnection,System.String,``0)">
            <summary>
            Query results using the non-default values in the supplied partially populated POCO example. E.g:
            <para>db.SelectNonDefaults("Age &gt; @Age", new Person { Age = 42 })</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="sql">The SQL.</param>
            <param name="filter">The filter.</param>
            <returns>List&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.SelectLazy``1(System.Data.IDbConnection)">
            <summary>
            Returns a lazyily loaded stream of results. E.g:
            <para>db.SelectLazy&lt;Person&gt;()</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <returns>IEnumerable&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.SelectLazy``1(System.Data.IDbConnection,System.String,System.Object)">
            <summary>
            Returns a lazyily loaded stream of results using a parameterized query. E.g:
            <para>db.SelectLazy&lt;Person&gt;("Age &gt; @age", new { age = 40 })</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="sql">The SQL.</param>
            <param name="anonType">Type of the anon.</param>
            <returns>IEnumerable&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.SelectLazy``1(System.Data.IDbConnection,ServiceStack.OrmLite.SqlExpression{``0})">
            <summary>
            Returns a lazyily loaded stream of results using a parameterized query. E.g:
            <para>db.SelectLazy(db.From&lt;Person&gt;().Where(x =&gt; x == 40))</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="expression">The expression.</param>
            <returns>IEnumerable&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.WhereLazy``1(System.Data.IDbConnection,System.Object)">
            <summary>
            Returns a stream of results that are lazily loaded using a parameterized query. E.g:
            <para>db.WhereLazy&lt;Person&gt;(new { Age = 27 })</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="anonType">Type of the anon.</param>
            <returns>IEnumerable&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.Single``1(System.Data.IDbConnection,System.Object)">
            <summary>
            Returns the first result using a parameterized query. E.g:
            <para>db.Single&lt;Person&gt;(new { Age = 42 })</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="anonType">Type of the anon.</param>
            <returns>T.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.Single``1(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter})">
            <summary>
            Returns results from using a single name, value filter. E.g:
            <para>db.Single&lt;Person&gt;("Age = @age", new[] { db.CreateParam("age",40) })</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="sql">The SQL.</param>
            <param name="sqlParams">The SQL parameters.</param>
            <returns>T.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.Single``1(System.Data.IDbConnection,System.String,System.Object)">
            <summary>
            Returns results from using a single name, value filter. E.g:
            <para>db.Single&lt;Person&gt;("Age = @age", new { age = 42 })</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="sql">The SQL.</param>
            <param name="anonType">Type of the anon.</param>
            <returns>T.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.SingleById``1(System.Data.IDbConnection,System.Object)">
            <summary>
            Returns the first result using a primary key id. E.g:
            <para>db.SingleById&lt;Person&gt;(1)</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="idValue">The identifier value.</param>
            <returns>T.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.SingleWhere``1(System.Data.IDbConnection,System.String,System.Object)">
            <summary>
            Returns the first result using a name, value filter. E.g:
            <para>db.SingleWhere&lt;Person&gt;("Age", 42)</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <returns>T.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.Scalar``1(System.Data.IDbConnection,ServiceStack.OrmLite.ISqlExpression)">
            <summary>
            Returns a single scalar value using an SqlExpression. E.g:
            <para>db.Column&lt;int&gt;(db.From&lt;Person&gt;().Select(x =&gt; Sql.Count("*")).Where(q =&gt; q.Age &gt; 40))</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="sqlExpression">The SQL expression.</param>
            <returns>T.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.Scalar``1(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter})">
            <summary>
            Returns a single scalar value using a parameterized query. E.g:
            <para>db.Scalar&lt;int&gt;("SELECT COUNT(*) FROM Person WHERE Age &gt; @age", new[] { db.CreateParam("age",40) })</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="sql">The SQL.</param>
            <param name="sqlParams">The SQL parameters.</param>
            <returns>T.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.Scalar``1(System.Data.IDbConnection,System.String,System.Object)">
            <summary>
            Returns a single scalar value using a parameterized query. E.g:
            <para>db.Scalar&lt;int&gt;("SELECT COUNT(*) FROM Person WHERE Age &gt; @age", new { age = 40 })</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="sql">The SQL.</param>
            <param name="anonType">Type of the anon.</param>
            <returns>T.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.Column``1(System.Data.IDbConnection,ServiceStack.OrmLite.ISqlExpression)">
            <summary>
            Returns the distinct first column values in a HashSet using an SqlExpression. E.g:
            <para>db.Column&lt;int&gt;(db.From&lt;Person&gt;().Select(x =&gt; x.LastName).Where(q =&gt; q.Age == 27))</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="query">The query.</param>
            <returns>List&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.Column``1(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter})">
            <summary>
            Returns the first column in a List using a SqlFormat query. E.g:
            <para>db.Column&lt;string&gt;("SELECT LastName FROM Person WHERE Age = @age", new[] { db.CreateParam("age",27) })</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="sql">The SQL.</param>
            <param name="sqlParams">The SQL parameters.</param>
            <returns>List&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.ColumnLazy``1(System.Data.IDbConnection,ServiceStack.OrmLite.ISqlExpression)">
            <summary>
            Returns the distinct first column values in a HashSet using an SqlExpression. E.g:
            <para>db.ColumnLazy&lt;int&gt;(db.From&lt;Person&gt;().Select(x =&gt; x.LastName).Where(q =&gt; q.Age == 27))</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="query">The query.</param>
            <returns>IEnumerable&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.ColumnLazy``1(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter})">
            <summary>
            Returns the first column in a List using a SqlFormat query. E.g:
            <para>db.ColumnLazy&lt;string&gt;("SELECT LastName FROM Person WHERE Age = @age", new[] { db.CreateParam("age",27) })</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="sql">The SQL.</param>
            <param name="sqlParams">The SQL parameters.</param>
            <returns>IEnumerable&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.ColumnLazy``1(System.Data.IDbConnection,System.String,System.Object)">
            <summary>
            Returns the first column in a List using a SqlFormat query. E.g:
            <para>db.ColumnLazy&lt;string&gt;("SELECT LastName FROM Person WHERE Age = @age", new { age = 27 })</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="sql">The SQL.</param>
            <param name="anonType">Type of the anon.</param>
            <returns>IEnumerable&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.Column``1(System.Data.IDbConnection,System.String,System.Object)">
            <summary>
            Returns the first column in a List using a SqlFormat query. E.g:
            <para>db.Column&lt;string&gt;("SELECT LastName FROM Person WHERE Age = @age", new { age = 27 })</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="sql">The SQL.</param>
            <param name="anonType">Type of the anon.</param>
            <returns>List&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.ColumnDistinct``1(System.Data.IDbConnection,ServiceStack.OrmLite.ISqlExpression)">
            <summary>
            Columns the distinct.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="query">The query.</param>
            <returns>HashSet&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.ColumnDistinct``1(System.Data.IDbConnection,System.String,System.Object)">
            <summary>
            Returns the distinct first column values in a HashSet using an SqlFormat query. E.g:
            <para>db.ColumnDistinct&lt;int&gt;("SELECT Age FROM Person WHERE Age &lt; @age", new { age = 50 })</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="sql">The SQL.</param>
            <param name="anonType">Type of the anon.</param>
            <returns>HashSet&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.ColumnDistinct``1(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter})">
            <summary>
            Returns the distinct first column values in a HashSet using an SqlFormat query. E.g:
            <para>db.ColumnDistinct&lt;int&gt;("SELECT Age FROM Person WHERE Age &lt; @age", new[] { db.CreateParam("age",50) })</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="sql">The SQL.</param>
            <param name="sqlParams">The SQL parameters.</param>
            <returns>HashSet&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.Lookup``2(System.Data.IDbConnection,ServiceStack.OrmLite.ISqlExpression)">
            <summary>
            Returns an Dictionary&lt;K, List&lt;V&gt;&gt; grouping made from the first two columns using an Sql Expression. E.g:
            <para>db.Lookup&lt;int, string&gt;(db.From&lt;Person&gt;().Select(x =&gt; new { x.Age, x.LastName }).Where(q =&gt; q.Age &lt; 50))</para>
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="sqlExpression">The SQL expression.</param>
            <returns>Dictionary&lt;K, List&lt;V&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.Lookup``2(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter})">
            <summary>
            Returns an Dictionary&lt;K, List&lt;V&gt;&gt; grouping made from the first two columns using an parameterized query. E.g:
            <para>db.Lookup&lt;int, string&gt;("SELECT Age, LastName FROM Person WHERE Age &lt; @age", new[] { db.CreateParam("age",50) })</para>
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="sql">The SQL.</param>
            <param name="sqlParams">The SQL parameters.</param>
            <returns>Dictionary&lt;K, List&lt;V&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.Lookup``2(System.Data.IDbConnection,System.String,System.Object)">
            <summary>
            Returns an Dictionary&lt;K, List&lt;V&gt;&gt; grouping made from the first two columns using an parameterized query. E.g:
            <para>db.Lookup&lt;int, string&gt;("SELECT Age, LastName FROM Person WHERE Age &lt; @age", new { age = 50 })</para>
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="sql">The SQL.</param>
            <param name="anonType">Type of the anon.</param>
            <returns>Dictionary&lt;K, List&lt;V&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.Dictionary``2(System.Data.IDbConnection,ServiceStack.OrmLite.ISqlExpression)">
            <summary>
            Dictionaries the specified query.
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="query">The query.</param>
            <returns>Dictionary&lt;K, V&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.Dictionary``2(System.Data.IDbConnection,System.String,System.Object)">
            <summary>
            Returns a Dictionary from the first 2 columns: Column 1 (Keys), Column 2 (Values) using sql. E.g:
            <para>db.Dictionary&lt;int, string&gt;("SELECT Id, LastName FROM Person WHERE Age &lt; @age", new { age = 50 })</para>
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="sql">The SQL.</param>
            <param name="anonType">Type of the anon.</param>
            <returns>Dictionary&lt;K, V&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.KeyValuePairs``2(System.Data.IDbConnection,ServiceStack.OrmLite.ISqlExpression)">
            <summary>
            Keys the value pairs.
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="query">The query.</param>
            <returns>List&lt;KeyValuePair&lt;K, V&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.KeyValuePairs``2(System.Data.IDbConnection,System.String,System.Object)">
            <summary>
            Returns a list of KeyValuePairs from the first 2 columns: Column 1 (Keys), Column 2 (Values) using sql. E.g:
            <para>db.KeyValuePairs&lt;int, string&gt;("SELECT Id, LastName FROM Person WHERE Age &lt; @age", new { age = 50 })</para>
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="sql">The SQL.</param>
            <param name="anonType">Type of the anon.</param>
            <returns>List&lt;KeyValuePair&lt;K, V&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.Exists``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Returns true if the Query returns any records that match the LINQ expression, E.g:
            <para>db.Exists&lt;Person&gt;(x =&gt; x.Age &lt; 50)</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="expression">The expression.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.Exists``1(System.Data.IDbConnection,ServiceStack.OrmLite.SqlExpression{``0})">
            <summary>
            Returns true if the Query returns any records that match the supplied SqlExpression, E.g:
            <para>db.Exists(db.From&lt;Person&gt;().Where(x =&gt; x.Age &lt; 50))</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="expression">The expression.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.Exists``1(System.Data.IDbConnection,System.Object)">
            <summary>
            Returns true if the Query returns any records, using an SqlFormat query. E.g:
            <para>db.Exists&lt;Person&gt;(new { Age = 42 })</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="anonType">Type of the anon.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.Exists``1(System.Data.IDbConnection,System.String,System.Object)">
            <summary>
            Returns true if the Query returns any records, using a parameterized query. E.g:
            <para>db.Exists&lt;Person&gt;("Age = @age", new { age = 42 })</para><para>db.Exists&lt;Person&gt;("SELECT * FROM Person WHERE Age = @age", new { age = 42 })</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="sql">The SQL.</param>
            <param name="anonType">Type of the anon.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.SqlList``1(System.Data.IDbConnection,ServiceStack.OrmLite.ISqlExpression)">
            <summary>
            Returns results from an arbitrary SqlExpression. E.g:
            <para>db.SqlList&lt;Person&gt;(db.From&lt;Person&gt;().Select("*").Where(q =&gt; q.Age &lt; 50))</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="sqlExpression">The SQL expression.</param>
            <returns>List&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.SqlList``1(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter})">
            <summary>
            Returns results from an arbitrary parameterized raw sql query. E.g:
            <para>db.SqlList&lt;Person&gt;("EXEC GetRockstarsAged @age", new[] { db.CreateParam("age",50) })</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="sql">The SQL.</param>
            <param name="sqlParams">The SQL parameters.</param>
            <returns>List&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.SqlList``1(System.Data.IDbConnection,System.String,System.Object)">
            <summary>
            Returns results from an arbitrary parameterized raw sql query. E.g:
            <para>db.SqlList&lt;Person&gt;("EXEC GetRockstarsAged @age", new { age = 50 })</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="sql">The SQL.</param>
            <param name="anonType">Type of the anon.</param>
            <returns>List&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.SqlList``1(System.Data.IDbConnection,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Returns results from an arbitrary parameterized raw sql query. E.g:
            <para>db.SqlList&lt;Person&gt;("EXEC GetRockstarsAged @age", new Dictionary&lt;string, object&gt; { { "age", 42 } })</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="sql">The SQL.</param>
            <param name="dict">The dictionary.</param>
            <returns>List&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.SqlList``1(System.Data.IDbConnection,System.String,System.Action{System.Data.IDbCommand})">
            <summary>
            Returns results from an arbitrary parameterized raw sql query with a dbCmd filter. E.g:
            <para>db.SqlList&lt;Person&gt;("EXEC GetRockstarsAged @age", dbCmd =&gt; ...)</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="sql">The SQL.</param>
            <param name="dbCmdFilter">The database command filter.</param>
            <returns>List&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.SqlProc(System.Data.IDbConnection,System.String,System.Object,System.Boolean)">
            <summary>
            Prepare Stored Procedure with Input parameters, optionally populated with Input Params. E.g:
            <para>var cmd = db.SqlProc("GetRockstarsAged", new { age = 42 })</para>
            </summary>
            <param name="dbConn">The database connection.</param>
            <param name="name">The name.</param>
            <param name="inParams">The in parameters.</param>
            <param name="excludeDefaults">if set to <c>true</c> [exclude defaults].</param>
            <returns>IDbCommand.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.SqlColumn``1(System.Data.IDbConnection,ServiceStack.OrmLite.ISqlExpression)">
            <summary>
            SQLs the column.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="sqlExpression">The SQL expression.</param>
            <returns>List&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.SqlColumn``1(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter})">
            <summary>
            Returns the first column in a List using a parameterized query. E.g:
            <para>db.SqlColumn&lt;string&gt;("SELECT LastName FROM Person WHERE Age &lt; @age", new[] { db.CreateParam("age",50) })</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="sql">The SQL.</param>
            <param name="sqlParams">The SQL parameters.</param>
            <returns>List&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.SqlColumn``1(System.Data.IDbConnection,System.String,System.Object)">
            <summary>
            Returns the first column in a List using a parameterized query. E.g:
            <para>db.SqlColumn&lt;string&gt;("SELECT LastName FROM Person WHERE Age &lt; @age", new { age = 50 })</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="sql">The SQL.</param>
            <param name="anonType">Type of the anon.</param>
            <returns>List&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.SqlColumn``1(System.Data.IDbConnection,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Returns the first column in a List using a parameterized query. E.g:
            <para>db.SqlColumn&lt;string&gt;("SELECT LastName FROM Person WHERE Age &lt; @age", new Dictionary&lt;string, object&gt; { { "age", 50 } })</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="sql">The SQL.</param>
            <param name="dict">The dictionary.</param>
            <returns>List&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.SqlScalar``1(System.Data.IDbConnection,ServiceStack.OrmLite.ISqlExpression)">
            <summary>
            Returns a single Scalar value using an SqlExpression. E.g:
            <para>db.SqlScalar&lt;int&gt;(db.From&lt;Person&gt;().Select(Sql.Count("*")).Where(q =&gt; q.Age &lt; 50))</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="sqlExpression">The SQL expression.</param>
            <returns>T.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.SqlScalar``1(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter})">
            <summary>
            Returns a single Scalar value using a parameterized query. E.g:
            <para>db.SqlScalar&lt;int&gt;("SELECT COUNT(*) FROM Person WHERE Age &lt; @age", new[]{ db.CreateParam("age",50) })</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="sql">The SQL.</param>
            <param name="sqlParams">The SQL parameters.</param>
            <returns>T.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.SqlScalar``1(System.Data.IDbConnection,System.String,System.Object)">
            <summary>
            Returns a single Scalar value using a parameterized query. E.g:
            <para>db.SqlScalar&lt;int&gt;("SELECT COUNT(*) FROM Person WHERE Age &lt; @age", new { age = 50 })</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="sql">The SQL.</param>
            <param name="anonType">Type of the anon.</param>
            <returns>T.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.SqlScalar``1(System.Data.IDbConnection,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Returns a single Scalar value using a parameterized query. E.g:
            <para>db.SqlScalar&lt;int&gt;("SELECT COUNT(*) FROM Person WHERE Age &lt; @age", new Dictionary&lt;string, object&gt; { { "age", 50 } })</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="sql">The SQL.</param>
            <param name="dict">The dictionary.</param>
            <returns>T.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.LastInsertId(System.Data.IDbConnection)">
            <summary>
            Returns the last insert Id made from this connection.
            </summary>
            <param name="dbConn">The database connection.</param>
            <returns>System.Int64.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.ExecuteNonQuery(System.Data.IDbConnection,System.String)">
            <summary>
            Executes a raw sql non-query using sql. E.g:
            <para>var rowsAffected = db.ExecuteNonQuery("UPDATE Person SET LastName={0} WHERE Id={1}".SqlFormat("WaterHouse", 7))</para>
            </summary>
            <param name="dbConn">The database connection.</param>
            <param name="sql">The SQL.</param>
            <returns>number of rows affected</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.ExecuteNonQuery(System.Data.IDbConnection,System.String,System.Object)">
            <summary>
            Executes a raw sql non-query using a parameterized query. E.g:
            <para>var rowsAffected = db.ExecuteNonQuery("UPDATE Person SET LastName=@name WHERE Id=@id", new { name = "WaterHouse", id = 7 })</para>
            </summary>
            <param name="dbConn">The database connection.</param>
            <param name="sql">The SQL.</param>
            <param name="anonType">Type of the anon.</param>
            <returns>number of rows affected</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.ExecuteNonQuery(System.Data.IDbConnection,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Executes a raw sql non-query using a parameterized query.
            </summary>
            <param name="dbConn">The database connection.</param>
            <param name="sql">The SQL.</param>
            <param name="dict">The dictionary.</param>
            <returns>number of rows affected</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.ExecuteNonQuery(System.Data.IDbConnection,System.String,System.Action{System.Data.IDbCommand})">
            <summary>
            Executes a raw sql non-query using a parameterized query with a dbCmd filter. E.g:
            </summary>
            <param name="dbConn">The database connection.</param>
            <param name="sql">The SQL.</param>
            <param name="dbCmdFilter">The database command filter.</param>
            <returns>number of rows affected</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.SqlProcedure``1(System.Data.IDbConnection,System.Object)">
            <summary>
            Returns results from a Stored Procedure, using a parameterized query.
            </summary>
            <typeparam name="TOutputModel">The type of the t output model.</typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="anonType">Type of the anon.</param>
            <returns>List&lt;TOutputModel&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.SqlProcedure``1(System.Data.IDbConnection,System.Object,System.String,System.Object[])">
            <summary>
            Returns results from a Stored Procedure using an SqlFormat query. E.g:
            <para></para>
            </summary>
            <typeparam name="TOutputModel">The type of the t output model.</typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="anonType">Type of the anon.</param>
            <param name="sqlFilter">The SQL filter.</param>
            <param name="filterParams">The filter parameters.</param>
            <returns>List&lt;TOutputModel&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.LongScalar(System.Data.IDbConnection)">
            <summary>
            Returns the scalar result as a long.
            </summary>
            <param name="dbConn">The database connection.</param>
            <returns>System.Int64.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.LoadSingleById``1(System.Data.IDbConnection,System.Object,System.String[])">
            <summary>
            Returns the first result with all its references loaded, using a primary key id. E.g:
            <para>db.LoadSingleById&lt;Person&gt;(1, include = new[]{ "Address" })</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="idValue">The identifier value.</param>
            <param name="include">The include.</param>
            <returns>T.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.LoadSingleById``1(System.Data.IDbConnection,System.Object,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Returns the first result with all its references loaded, using a primary key id. E.g:
            <para>db.LoadSingleById&lt;Person&gt;(1, include = x =&gt; new{ x.Address })</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="idValue">The identifier value.</param>
            <param name="include">The include.</param>
            <returns>T.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.LoadReferences``1(System.Data.IDbConnection,``0)">
            <summary>
            Loads all the related references onto the instance. E.g:
            <para>db.LoadReferences(customer)</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="instance">The instance.</param>
        </member>
        <member name="T:ServiceStack.OrmLite.OrmLiteReadApiAsync">
            <summary>
            Class OrmLiteReadApiAsync.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApiAsync.SelectAsync``1(System.Data.IDbConnection,System.Threading.CancellationToken)">
            <summary>
            Returns results from the active connection, E.g:
            <para>db.SelectAsync&lt;Person&gt;()</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;List&lt;T&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApiAsync.SelectAsync``1(System.Data.IDbConnection,System.String,System.Threading.CancellationToken)">
            <summary>
            Returns results from using sql. E.g:
            <para>db.SelectAsync&lt;Person&gt;("Age &gt; 40")</para><para>db.SelectAsync&lt;Person&gt;("SELECT * FROM Person WHERE Age &gt; 40")</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="sql">The SQL.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;List&lt;T&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApiAsync.SelectAsync``1(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter},System.Threading.CancellationToken)">
            <summary>
            Returns results from using a parameterized query. E.g:
            <para>db.SelectAsync&lt;Person&gt;("Age &gt; @age", new { age = 40})</para><para>db.SelectAsync&lt;Person&gt;("SELECT * FROM Person WHERE Age &gt; @age", new[] { db.CreateParam("age",40) })</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="sql">The SQL.</param>
            <param name="sqlParams">The SQL parameters.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;List&lt;T&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApiAsync.SelectAsync``1(System.Data.IDbConnection,System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Returns results from using a parameterized query. E.g:
            <para>db.SelectAsync&lt;Person&gt;("Age &gt; @age", new { age = 40})</para><para>db.SelectAsync&lt;Person&gt;("SELECT * FROM Person WHERE Age &gt; @age", new { age = 40})</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="sql">The SQL.</param>
            <param name="anonType">Type of the anon.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;List&lt;T&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApiAsync.SelectAsync``1(System.Data.IDbConnection,System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            Returns results from using a parameterized query. E.g:
            <para>db.SelectAsync&lt;Person&gt;("Age &gt; @age", new Dictionary&lt;string, object&gt; { { "age", 40 } })</para><para>db.SelectAsync&lt;Person&gt;("SELECT * FROM Person WHERE Age &gt; @age", new Dictionary&lt;string, object&gt; { { "age", 40 } })</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="sql">The SQL.</param>
            <param name="dict">The dictionary.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;List&lt;T&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApiAsync.SelectAsync``1(System.Data.IDbConnection,System.Type,System.Threading.CancellationToken)">
            <summary>
            Returns a partial subset of results from the specified tableType. E.g:
            <para>db.SelectAsync&lt;EntityWithId&gt;(typeof(Person))</para><para></para>
            </summary>
            <typeparam name="TModel">The type of the t model.</typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="fromTableType">Type of from table.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;List&lt;TModel&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApiAsync.SelectAsync``1(System.Data.IDbConnection,System.Type,System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Returns a partial subset of results from the specified tableType. E.g:
            <para>db.SelectAsync&lt;EntityWithId&gt;(typeof(Person), "Age = @age", new { age = 27 })</para><para></para>
            </summary>
            <typeparam name="TModel">The type of the t model.</typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="fromTableType">Type of from table.</param>
            <param name="sqlFilter">The SQL filter.</param>
            <param name="anonType">Type of the anon.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;List&lt;TModel&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApiAsync.WhereAsync``1(System.Data.IDbConnection,System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Returns results from using a single name, value filter. E.g:
            <para>db.WhereAsync&lt;Person&gt;("Age", 27)</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;List&lt;T&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApiAsync.WhereAsync``1(System.Data.IDbConnection,System.Object,System.Threading.CancellationToken)">
            <summary>
            Returns results from using an anonymous type filter. E.g:
            <para>db.WhereAsync&lt;Person&gt;(new { Age = 27 })</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="anonType">Type of the anon.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;List&lt;T&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApiAsync.SelectByIdsAsync``1(System.Data.IDbConnection,System.Collections.IEnumerable,System.Threading.CancellationToken)">
            <summary>
            Returns results using the supplied primary key ids. E.g:
            <para>db.SelectByIdsAsync&lt;Person&gt;(new[] { 1, 2, 3 })</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="idValues">The identifier values.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;List&lt;T&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApiAsync.SelectNonDefaultsAsync``1(System.Data.IDbConnection,``0,System.Threading.CancellationToken)">
            <summary>
            Query results using the non-default values in the supplied partially populated POCO example. E.g:
            <para>db.SelectNonDefaultsAsync(new Person { Id = 1 })</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="filter">The filter.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;List&lt;T&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApiAsync.SelectNonDefaultsAsync``1(System.Data.IDbConnection,System.String,``0,System.Threading.CancellationToken)">
            <summary>
            Query results using the non-default values in the supplied partially populated POCO example. E.g:
            <para>db.SelectNonDefaultsAsync("Age &gt; @Age", new Person { Age = 42 })</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="sql">The SQL.</param>
            <param name="filter">The filter.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;List&lt;T&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApiAsync.SingleAsync``1(System.Data.IDbConnection,System.Object,System.Threading.CancellationToken)">
            <summary>
            Returns the first result using a parameterized query. E.g:
            <para>db.SingleAsync&lt;Person&gt;(new { Age = 42 })</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="anonType">Type of the anon.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApiAsync.SingleAsync``1(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter},System.Threading.CancellationToken)">
            <summary>
            Returns results from using a single name, value filter. E.g:
            <para>db.SingleAsync&lt;Person&gt;("Age = @age", new[] { db.CreateParam("age",42) })</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="sql">The SQL.</param>
            <param name="sqlParams">The SQL parameters.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApiAsync.SingleAsync``1(System.Data.IDbConnection,System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Returns results from using a single name, value filter. E.g:
            <para>db.SingleAsync&lt;Person&gt;("Age = @age", new { age = 42 })</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="sql">The SQL.</param>
            <param name="anonType">Type of the anon.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApiAsync.SingleByIdAsync``1(System.Data.IDbConnection,System.Object,System.Threading.CancellationToken)">
            <summary>
            Returns the first result using a primary key id. E.g:
            <para>db.SingleByIdAsync&lt;Person&gt;(1)</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="idValue">The identifier value.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApiAsync.SingleWhereAsync``1(System.Data.IDbConnection,System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Returns the first result using a name, value filter. E.g:
            <para>db.SingleWhereAsync&lt;Person&gt;("Age", 42)</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApiAsync.ScalarAsync``1(System.Data.IDbCommand,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter})">
            <summary>
            Scalars the asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="sql">The SQL.</param>
            <param name="sqlParams">The SQL parameters.</param>
            <returns>T.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApiAsync.ScalarAsync``1(System.Data.IDbConnection,ServiceStack.OrmLite.ISqlExpression,System.Threading.CancellationToken)">
            <summary>
            Returns a single scalar value using an SqlExpression. E.g:
            <para>db.ScalarAsync&lt;int&gt;(db.From&lt;Person&gt;().Select(x =&gt; Sql.Count("*")).Where(q =&gt; q.Age &gt; 40))</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="sqlExpression">The SQL expression.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApiAsync.ScalarAsync``1(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter},System.Threading.CancellationToken)">
            <summary>
            Returns a single scalar value using a parameterized query. E.g:
            <para>db.ScalarAsync&lt;int&gt;("SELECT COUNT(*) FROM Person WHERE Age &gt; @age", new[] { db.CreateParam("age",40) })</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="sql">The SQL.</param>
            <param name="sqlParams">The SQL parameters.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApiAsync.ScalarAsync``1(System.Data.IDbConnection,System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Returns a single scalar value using a parameterized query. E.g:
            <para>db.ScalarAsync&lt;int&gt;("SELECT COUNT(*) FROM Person WHERE Age &gt; @age", new { age = 40 })</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="sql">The SQL.</param>
            <param name="anonType">Type of the anon.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApiAsync.ColumnAsync``1(System.Data.IDbConnection,ServiceStack.OrmLite.ISqlExpression,System.Threading.CancellationToken)">
            <summary>
            Returns the distinct first column values in a HashSet using an SqlExpression. E.g:
            <para>db.ColumnAsync&lt;int&gt;(db.From&lt;Person&gt;().Select(x =&gt; x.LastName).Where(q =&gt; q.Age == 27))</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="query">The query.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;List&lt;T&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApiAsync.ColumnAsync``1(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter},System.Threading.CancellationToken)">
            <summary>
            Returns the first column in a List using a SqlFormat query. E.g:
            <para>db.ColumnAsync&lt;string&gt;("SELECT LastName FROM Person WHERE Age = @age", new[] { db.CreateParam("age",27) })</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="sql">The SQL.</param>
            <param name="sqlParams">The SQL parameters.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;List&lt;T&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApiAsync.ColumnAsync``1(System.Data.IDbConnection,System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Returns the first column in a List using a SqlFormat query. E.g:
            <para>db.ColumnAsync&lt;string&gt;("SELECT LastName FROM Person WHERE Age = @age", new { age = 27 })</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="sql">The SQL.</param>
            <param name="anonType">Type of the anon.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;List&lt;T&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApiAsync.ColumnDistinctAsync``1(System.Data.IDbConnection,ServiceStack.OrmLite.ISqlExpression,System.Threading.CancellationToken)">
            <summary>
            Columns the distinct asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="query">The query.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;HashSet&lt;T&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApiAsync.ColumnDistinctAsync``1(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter},System.Threading.CancellationToken)">
            <summary>
            Returns the distinct first column values in a HashSet using an SqlFormat query. E.g:
            <para>db.ColumnDistinctAsync&lt;int&gt;("SELECT Age FROM Person WHERE Age &lt; @age", new[] { db.CreateParam("age",50) })</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="sql">The SQL.</param>
            <param name="sqlParams">The SQL parameters.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;HashSet&lt;T&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApiAsync.ColumnDistinctAsync``1(System.Data.IDbConnection,System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Returns the distinct first column values in a HashSet using an SqlFormat query. E.g:
            <para>db.ColumnDistinctAsync&lt;int&gt;("SELECT Age FROM Person WHERE Age &lt; @age", new { age = 50 })</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="sql">The SQL.</param>
            <param name="anonType">Type of the anon.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;HashSet&lt;T&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApiAsync.LookupAsync``2(System.Data.IDbConnection,ServiceStack.OrmLite.ISqlExpression,System.Threading.CancellationToken)">
            <summary>
            Lookups the asynchronous.
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="sqlExpression">The SQL expression.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;Dictionary&lt;K, List&lt;V&gt;&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApiAsync.LookupAsync``2(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter},System.Threading.CancellationToken)">
            <summary>
            Returns an Dictionary&lt;K, List&lt;V&gt;&gt; grouping made from the first two columns using an parameterized query. E.g:
            <para>db.LookupAsync&lt;int, string&gt;("SELECT Age, LastName FROM Person WHERE Age &lt; @age", new[] { db.CreateParam("age",50) })</para>
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="sql">The SQL.</param>
            <param name="sqlParams">The SQL parameters.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;Dictionary&lt;K, List&lt;V&gt;&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApiAsync.LookupAsync``2(System.Data.IDbConnection,System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Returns an Dictionary&lt;K, List&lt;V&gt;&gt; grouping made from the first two columns using an parameterized query. E.g:
            <para>db.LookupAsync&lt;int, string&gt;("SELECT Age, LastName FROM Person WHERE Age &lt; @age", new { age = 50 })</para>
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="sql">The SQL.</param>
            <param name="anonType">Type of the anon.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;Dictionary&lt;K, List&lt;V&gt;&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApiAsync.DictionaryAsync``2(System.Data.IDbConnection,ServiceStack.OrmLite.ISqlExpression,System.Threading.CancellationToken)">
            <summary>
            Dictionaries the asynchronous.
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="query">The query.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;Dictionary&lt;K, V&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApiAsync.DictionaryAsync``2(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter},System.Threading.CancellationToken)">
            <summary>
            Returns a Dictionary from the first 2 columns: Column 1 (Keys), Column 2 (Values) using sql. E.g:
            <para>db.DictionaryAsync&lt;int, string&gt;("SELECT Id, LastName FROM Person WHERE Age &lt; @age", new[] { db.CreateParam("age",50) })</para>
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="sql">The SQL.</param>
            <param name="sqlParams">The SQL parameters.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;Dictionary&lt;K, V&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApiAsync.DictionaryAsync``2(System.Data.IDbConnection,System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Returns a Dictionary from the first 2 columns: Column 1 (Keys), Column 2 (Values) using sql. E.g:
            <para>db.DictionaryAsync&lt;int, string&gt;("SELECT Id, LastName FROM Person WHERE Age &lt; @age", new { age = 50 })</para>
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="sql">The SQL.</param>
            <param name="anonType">Type of the anon.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;Dictionary&lt;K, V&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApiAsync.KeyValuePairsAsync``2(System.Data.IDbConnection,ServiceStack.OrmLite.ISqlExpression,System.Threading.CancellationToken)">
            <summary>
            Keys the value pairs asynchronous.
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="query">The query.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;List&lt;KeyValuePair&lt;K, V&gt;&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApiAsync.KeyValuePairsAsync``2(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter},System.Threading.CancellationToken)">
            <summary>
            Returns a list of KeyValuePairs from the first 2 columns: Column 1 (Keys), Column 2 (Values) using sql. E.g:
            <para>db.KeyValuePairsAsync&lt;int, string&gt;("SELECT Id, LastName FROM Person WHERE Age &lt; @age", new[] { db.CreateParam("age",50) })</para>
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="sql">The SQL.</param>
            <param name="sqlParams">The SQL parameters.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;List&lt;KeyValuePair&lt;K, V&gt;&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApiAsync.KeyValuePairsAsync``2(System.Data.IDbConnection,System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Returns a list of KeyValuePairs from the first 2 columns: Column 1 (Keys), Column 2 (Values) using sql. E.g:
            <para>db.KeyValuePairsAsync&lt;int, string&gt;("SELECT Id, LastName FROM Person WHERE Age &lt; @age", new { age = 50 })</para>
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="sql">The SQL.</param>
            <param name="anonType">Type of the anon.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;List&lt;KeyValuePair&lt;K, V&gt;&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApiAsync.ExistsAsync``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Returns true if the Query returns any records that match the LINQ expression, E.g:
            <para>db.ExistsAsync&lt;Person&gt;(x =&gt; x.Age &lt; 50)</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="expression">The expression.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;System.Boolean&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApiAsync.ExistsAsync``1(System.Data.IDbConnection,ServiceStack.OrmLite.SqlExpression{``0},System.Threading.CancellationToken)">
            <summary>
            Returns true if the Query returns any records that match the supplied SqlExpression, E.g:
            <para>db.ExistsAsync(db.From&lt;Person&gt;().Where(x =&gt; x.Age &lt; 50))</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="expression">The expression.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;System.Boolean&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApiAsync.ExistsAsync``1(System.Data.IDbConnection,System.Object,System.Threading.CancellationToken)">
            <summary>
            Returns true if the Query returns any records, using an SqlFormat query. E.g:
            <para>db.ExistsAsync&lt;Person&gt;(new { Age = 42 })</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="anonType">Type of the anon.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;System.Boolean&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApiAsync.ExistsAsync``1(System.Data.IDbConnection,System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Returns true if the Query returns any records, using a parameterized query. E.g:
            <para>db.ExistsAsync&lt;Person&gt;("Age = @age", new { age = 42 })</para><para>db.ExistsAsync&lt;Person&gt;("SELECT * FROM Person WHERE Age = @age", new { age = 42 })</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="sql">The SQL.</param>
            <param name="anonType">Type of the anon.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;System.Boolean&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApiAsync.SqlListAsync``1(System.Data.IDbConnection,ServiceStack.OrmLite.ISqlExpression,System.Threading.CancellationToken)">
            <summary>
            Returns results from an arbitrary SqlExpression. E.g:
            <para>db.SqlListAsync&lt;Person&gt;(db.From&lt;Person&gt;().Select("*").Where(q =&gt; q.Age &lt; 50))</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="sqlExpression">The SQL expression.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;List&lt;T&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApiAsync.SqlListAsync``1(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter},System.Threading.CancellationToken)">
            <summary>
            Returns results from an arbitrary parameterized raw sql query. E.g:
            <para>db.SqlListAsync&lt;Person&gt;("EXEC GetRockstarsAged @age", new { age = 50 })</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="sql">The SQL.</param>
            <param name="sqlParams">The SQL parameters.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;List&lt;T&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApiAsync.SqlListAsync``1(System.Data.IDbConnection,System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Returns results from an arbitrary parameterized raw sql query. E.g:
            <para>db.SqlListAsync&lt;Person&gt;("EXEC GetRockstarsAged @age", new { age = 50 })</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="sql">The SQL.</param>
            <param name="anonType">Type of the anon.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;List&lt;T&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApiAsync.SqlListAsync``1(System.Data.IDbConnection,System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            Returns results from an arbitrary parameterized raw sql query. E.g:
            <para>db.SqlListAsync&lt;Person&gt;("EXEC GetRockstarsAged @age", new Dictionary&lt;string, object&gt; { { "age", 42 } })</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="sql">The SQL.</param>
            <param name="dict">The dictionary.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;List&lt;T&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApiAsync.SqlListAsync``1(System.Data.IDbConnection,System.String,System.Action{System.Data.IDbCommand},System.Threading.CancellationToken)">
            <summary>
            Returns results from an arbitrary parameterized raw sql query with a dbCmd filter. E.g:
            <para>db.SqlListAsync&lt;Person&gt;("EXEC GetRockstarsAged @age", dbCmd =&gt; ...)</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="sql">The SQL.</param>
            <param name="dbCmdFilter">The database command filter.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;List&lt;T&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApiAsync.SqlColumnAsync``1(System.Data.IDbConnection,ServiceStack.OrmLite.ISqlExpression,System.Threading.CancellationToken)">
            <summary>
            SQLs the column asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="sqlExpression">The SQL expression.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;List&lt;T&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApiAsync.SqlColumnAsync``1(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter},System.Threading.CancellationToken)">
            <summary>
            Returns the first column in a List using a parameterized query. E.g:
            <para>db.SqlColumnAsync&lt;string&gt;("SELECT LastName FROM Person WHERE Age &lt; @age", new[] { db.CreateParam("age",50) })</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="sql">The SQL.</param>
            <param name="sqlParams">The SQL parameters.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;List&lt;T&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApiAsync.SqlColumnAsync``1(System.Data.IDbConnection,System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Returns the first column in a List using a parameterized query. E.g:
            <para>db.SqlColumnAsync&lt;string&gt;("SELECT LastName FROM Person WHERE Age &lt; @age", new { age = 50 })</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="sql">The SQL.</param>
            <param name="anonType">Type of the anon.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;List&lt;T&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApiAsync.SqlColumnAsync``1(System.Data.IDbConnection,System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            Returns the first column in a List using a parameterized query. E.g:
            <para>db.SqlColumnAsync&lt;string&gt;("SELECT LastName FROM Person WHERE Age &lt; @age", new Dictionary&lt;string, object&gt; { { "age", 50 } })</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="sql">The SQL.</param>
            <param name="dict">The dictionary.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;List&lt;T&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApiAsync.SqlScalarAsync``1(System.Data.IDbConnection,ServiceStack.OrmLite.ISqlExpression,System.Threading.CancellationToken)">
            <summary>
            Returns a single Scalar value using an SqlExpression. E.g:
            <para>db.SqlScalarAsync&lt;int&gt;(db.From&lt;Person&gt;().Select(Sql.Count("*")).Where(q =&gt; q.Age &lt; 50))</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="sqlExpression">The SQL expression.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApiAsync.SqlScalarAsync``1(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter},System.Threading.CancellationToken)">
            <summary>
            Returns a single Scalar value using a parameterized query. E.g:
            <para>db.SqlScalarAsync&lt;int&gt;("SELECT COUNT(*) FROM Person WHERE Age &lt; @age", new[] { db.CreateParam("age",50) })</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="sql">The SQL.</param>
            <param name="sqlParams">The SQL parameters.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApiAsync.SqlScalarAsync``1(System.Data.IDbConnection,System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Returns a single Scalar value using a parameterized query. E.g:
            <para>db.SqlScalarAsync&lt;int&gt;("SELECT COUNT(*) FROM Person WHERE Age &lt; @age", new { age = 50 })</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="sql">The SQL.</param>
            <param name="anonType">Type of the anon.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApiAsync.SqlScalarAsync``1(System.Data.IDbConnection,System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            Returns a single Scalar value using a parameterized query. E.g:
            <para>db.SqlScalarAsync&lt;int&gt;("SELECT COUNT(*) FROM Person WHERE Age &lt; @age", new Dictionary&lt;string, object&gt; { { "age", 50 } })</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="sql">The SQL.</param>
            <param name="dict">The dictionary.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApiAsync.ExecuteNonQueryAsync(System.Data.IDbConnection,System.String,System.Threading.CancellationToken)">
            <summary>
            Executes a raw sql non-query using sql. E.g:
            <para>var rowsAffected = db.ExecuteNonQueryAsync("UPDATE Person SET LastName={0} WHERE Id={1}".SqlFormat("WaterHouse", 7))</para>
            </summary>
            <param name="dbConn">The database connection.</param>
            <param name="sql">The SQL.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>number of rows affected</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApiAsync.ExecuteNonQueryAsync(System.Data.IDbConnection,System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Executes a raw sql non-query using a parameterized query. E.g:
            <para>var rowsAffected = db.ExecuteNonQueryAsync("UPDATE Person SET LastName=@name WHERE Id=@id", new { name = "WaterHouse", id = 7 })</para>
            </summary>
            <param name="dbConn">The database connection.</param>
            <param name="sql">The SQL.</param>
            <param name="anonType">Type of the anon.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>number of rows affected</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApiAsync.ExecuteNonQueryAsync(System.Data.IDbConnection,System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            Executes a raw sql non-query using a parameterized query.
            </summary>
            <param name="dbConn">The database connection.</param>
            <param name="sql">The SQL.</param>
            <param name="dict">The dictionary.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>number of rows affected</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApiAsync.SqlProcedureAsync``1(System.Data.IDbConnection,System.Object,System.Threading.CancellationToken)">
            <summary>
            Returns results from a Stored Procedure, using a parameterized query.
            </summary>
            <typeparam name="TOutputModel">The type of the t output model.</typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="anonType">Type of the anon.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;List&lt;TOutputModel&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApiAsync.LongScalarAsync(System.Data.IDbConnection,System.Threading.CancellationToken)">
            <summary>
            Returns the scalar result as a long.
            </summary>
            <param name="dbConn">The database connection.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;System.Int64&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApiAsync.LoadSingleByIdAsync``1(System.Data.IDbConnection,System.Object,System.String[],System.Threading.CancellationToken)">
            <summary>
            Returns the first result with all its references loaded, using a primary key id. E.g:
            <para>db.LoadSingleByIdAsync&lt;Person&gt;(1)</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="idValue">The identifier value.</param>
            <param name="include">The include.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApiAsync.LoadSingleByIdAsync``1(System.Data.IDbConnection,System.Object,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Threading.CancellationToken)">
            <summary>
            Returns the first result with all its references loaded, using a primary key id. E.g:
            <para>db.LoadSingleByIdAsync&lt;Person&gt;(1, include = x =&gt; new { x.Address })</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="idValue">The identifier value.</param>
            <param name="include">The include.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApiAsync.LoadReferencesAsync``1(System.Data.IDbConnection,``0,System.String[],System.Threading.CancellationToken)">
            <summary>
            Loads all the related references onto the instance. E.g:
            <para>db.LoadReferencesAsync(customer)</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="instance">The instance.</param>
            <param name="include">The include.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.GetValueDelegate">
            <summary>
            Delegate GetValueDelegate
            </summary>
            <param name="i">The i.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.OrmLiteReadCommandExtensions">
            <summary>
            Class OrmLiteReadCommandExtensions.
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.OrmLiteReadCommandExtensions.Log">
            <summary>
            The log
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.OrmLiteReadCommandExtensions.UseDbConnectionExtensions">
            <summary>
            The use database connection extensions
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensions.ExecReader(System.Data.IDbCommand,System.String)">
            <summary>
            Executes the reader.
            </summary>
            <param name="dbCmd">The database command.</param>
            <param name="sql">The SQL.</param>
            <returns>IDataReader.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensions.ExecReader(System.Data.IDbCommand,System.String,System.Data.CommandBehavior)">
            <summary>
            Executes the reader.
            </summary>
            <param name="dbCmd">The database command.</param>
            <param name="sql">The SQL.</param>
            <param name="commandBehavior">The command behavior.</param>
            <returns>IDataReader.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensions.ExecReader(System.Data.IDbCommand,System.String,System.Collections.Generic.IEnumerable{System.Data.IDataParameter})">
            <summary>
            Executes the reader.
            </summary>
            <param name="dbCmd">The database command.</param>
            <param name="sql">The SQL.</param>
            <param name="parameters">The parameters.</param>
            <returns>IDataReader.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensions.Select``1(System.Data.IDbCommand)">
            <summary>
            Selects the specified database command.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <returns>List&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensions.SetFilter``1(System.Data.IDbCommand,System.String,System.Object)">
            <summary>
            Sets the filter.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensions.SetFilters``1(System.Data.IDbCommand,System.Object,System.Boolean)">
            <summary>
            Sets the filters.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="anonType">Type of the anon.</param>
            <param name="excludeDefaults">if set to <c>true</c> [exclude defaults].</param>
            <returns>IDbCommand.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensions.PopulateWith(System.Data.IDbCommand,ServiceStack.OrmLite.ISqlExpression,ServiceStack.OrmLite.QueryType)">
            <summary>
            Populates the with.
            </summary>
            <param name="dbCmd">The database command.</param>
            <param name="expression">The expression.</param>
            <param name="queryType">Type of the query.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensions.SetParameters``1(System.Data.IDbCommand,System.Object,System.Boolean,System.String@)">
            <summary>
            Sets the parameters.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="anonType">Type of the anon.</param>
            <param name="excludeDefaults">if set to <c>true</c> [exclude defaults].</param>
            <param name="sql">The SQL.</param>
            <returns>IDbCommand.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensions.SetParameters(System.Data.IDbCommand,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter})">
            <summary>
            Sets the parameters.
            </summary>
            <param name="dbCmd">The database command.</param>
            <param name="sqlParams">The SQL parameters.</param>
            <returns>IDbCommand.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensions.GetMultiValues(System.Object)">
            <summary>
            Gets the multi values.
            </summary>
            <param name="value">The value.</param>
            <returns>IEnumerable.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensions.SetParameters(System.Data.IDbCommand,System.Collections.Generic.Dictionary{System.String,System.Object},System.Boolean,System.String@)">
            <summary>
            Sets the parameters.
            </summary>
            <param name="dbCmd">The database command.</param>
            <param name="dict">The dictionary.</param>
            <param name="excludeDefaults">if set to <c>true</c> [exclude defaults].</param>
            <param name="sql">The SQL.</param>
            <returns>IDbCommand.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensions.SetParameters(System.Data.IDbCommand,System.Type,System.Object,System.Boolean,System.String@)">
            <summary>
            Sets the parameters.
            </summary>
            <param name="dbCmd">The database command.</param>
            <param name="type">The type.</param>
            <param name="anonType">Type of the anon.</param>
            <param name="excludeDefaults">if set to <c>true</c> [exclude defaults].</param>
            <param name="sql">The SQL.</param>
            <returns>IDbCommand.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensions.SetParamValue(ServiceStack.OrmLite.IOrmLiteDialectProvider,System.Data.IDbDataParameter,System.Object,System.Type,ServiceStack.OrmLite.FieldDefinition)">
            <summary>
            Sets the parameter value.
            </summary>
            <param name="dialectProvider">The dialect provider.</param>
            <param name="p">The p.</param>
            <param name="value">The value.</param>
            <param name="propType">Type of the property.</param>
            <param name="fieldDef">The field definition.</param>
        </member>
        <member name="T:ServiceStack.OrmLite.OrmLiteReadCommandExtensions.ParamIterDelegate">
            <summary>
            Delegate ParamIterDelegate
            </summary>
            <param name="propName">Name of the property.</param>
            <param name="columnName">Name of the column.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensions.ForEachParam(System.Collections.Generic.Dictionary{System.String,System.Object},ServiceStack.OrmLite.ModelDefinition,System.Boolean,ServiceStack.OrmLite.OrmLiteReadCommandExtensions.ParamIterDelegate)">
            <summary>
            Fors the each parameter.
            </summary>
            <param name="values">The values.</param>
            <param name="modelDef">The model definition.</param>
            <param name="excludeDefaults">if set to <c>true</c> [exclude defaults].</param>
            <param name="fn">The function.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensions.AllFields``1(System.Object)">
            <summary>
            Alls the fields.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="anonType">Type of the anon.</param>
            <returns>List&lt;System.String&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensions.AllFieldsMap``1(System.Object)">
            <summary>
            Alls the fields map.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="anonType">Type of the anon.</param>
            <returns>Dictionary&lt;System.String, System.Object&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensions.NonDefaultsOnly(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Nons the defaults only.
            </summary>
            <param name="fieldValues">The field values.</param>
            <returns>Dictionary&lt;System.String, System.Object&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensions.SetFilters``1(System.Data.IDbCommand,System.Object)">
            <summary>
            Sets the filters.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="anonType">Type of the anon.</param>
            <returns>IDbCommand.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensions.ClearFilters(System.Data.IDbCommand)">
            <summary>
            Clears the filters.
            </summary>
            <param name="dbCmd">The database command.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensions.GetFilterSql``1(System.Data.IDbCommand)">
            <summary>
            Gets the filter SQL.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensions.SelectByIds``1(System.Data.IDbCommand,System.Collections.IEnumerable)">
            <summary>
            Selects the by ids.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="idValues">The identifier values.</param>
            <returns>List&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensions.SingleById``1(System.Data.IDbCommand,System.Object)">
            <summary>
            Singles the by identifier.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="value">The value.</param>
            <returns>T.</returns>
            <exception cref="T:System.ArgumentNullException">value</exception>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensions.SingleWhere``1(System.Data.IDbCommand,System.String,System.Object)">
            <summary>
            Singles the where.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <returns>T.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensions.Single``1(System.Data.IDbCommand,System.Object)">
            <summary>
            Singles the specified anon type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="anonType">Type of the anon.</param>
            <returns>T.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensions.Single``1(System.Data.IDbCommand,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter})">
            <summary>
            Singles the specified SQL.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="sql">The SQL.</param>
            <param name="sqlParams">The SQL parameters.</param>
            <returns>T.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensions.Single``1(System.Data.IDbCommand,System.String,System.Object)">
            <summary>
            Singles the specified SQL.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="sql">The SQL.</param>
            <param name="anonType">Type of the anon.</param>
            <returns>T.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensions.Where``1(System.Data.IDbCommand,System.String,System.Object)">
            <summary>
            Wheres the specified name.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <returns>List&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensions.Where``1(System.Data.IDbCommand,System.Object)">
            <summary>
            Wheres the specified anon type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="anonType">Type of the anon.</param>
            <returns>List&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensions.Select``1(System.Data.IDbCommand,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter})">
            <summary>
            Selects the specified SQL.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="sql">The SQL.</param>
            <param name="sqlParams">The SQL parameters.</param>
            <returns>List&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensions.Select``1(System.Data.IDbCommand,System.String,System.Object)">
            <summary>
            Selects the specified SQL.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="sql">The SQL.</param>
            <param name="anonType">Type of the anon.</param>
            <returns>List&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensions.Select``1(System.Data.IDbCommand,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Selects the specified SQL.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="sql">The SQL.</param>
            <param name="dict">The dictionary.</param>
            <returns>List&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensions.Select``1(System.Data.IDbCommand,System.Type)">
            <summary>
            Selects the specified from table type.
            </summary>
            <typeparam name="TModel">The type of the t model.</typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="fromTableType">Type of from table.</param>
            <returns>List&lt;TModel&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensions.Select``1(System.Data.IDbCommand,System.Type,System.String,System.Object)">
            <summary>
            Selects the specified from table type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="fromTableType">Type of from table.</param>
            <param name="sql">The SQL.</param>
            <param name="anonType">Type of the anon.</param>
            <returns>List&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensions.ToSelect``1(ServiceStack.OrmLite.IOrmLiteDialectProvider,System.Type,System.String)">
            <summary>
            Converts to select.
            </summary>
            <typeparam name="TModel">The type of the t model.</typeparam>
            <param name="dialectProvider">The dialect provider.</param>
            <param name="fromTableType">Type of from table.</param>
            <param name="sqlFilter">The SQL filter.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensions.SqlList``1(System.Data.IDbCommand,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter})">
            <summary>
            SQLs the list.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="sql">The SQL.</param>
            <param name="sqlParams">The SQL parameters.</param>
            <returns>List&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensions.SqlList``1(System.Data.IDbCommand,System.String,System.Object)">
            <summary>
            SQLs the list.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="sql">The SQL.</param>
            <param name="anonType">Type of the anon.</param>
            <returns>List&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensions.SqlList``1(System.Data.IDbCommand,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            SQLs the list.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="sql">The SQL.</param>
            <param name="dict">The dictionary.</param>
            <returns>List&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensions.SqlList``1(System.Data.IDbCommand,System.String,System.Action{System.Data.IDbCommand})">
            <summary>
            SQLs the list.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="sql">The SQL.</param>
            <param name="dbCmdFilter">The database command filter.</param>
            <returns>List&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensions.SqlColumn``1(System.Data.IDbCommand,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter})">
            <summary>
            SQLs the column.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="sql">The SQL.</param>
            <param name="sqlParams">The SQL parameters.</param>
            <returns>List&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensions.SqlColumn``1(System.Data.IDbCommand,System.String,System.Object)">
            <summary>
            SQLs the column.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="sql">The SQL.</param>
            <param name="anonType">Type of the anon.</param>
            <returns>List&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensions.SqlColumn``1(System.Data.IDbCommand,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            SQLs the column.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="sql">The SQL.</param>
            <param name="dict">The dictionary.</param>
            <returns>List&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensions.SqlScalar``1(System.Data.IDbCommand,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter})">
            <summary>
            SQLs the scalar.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="sql">The SQL.</param>
            <param name="sqlParams">The SQL parameters.</param>
            <returns>T.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensions.SqlScalar``1(System.Data.IDbCommand,System.String,System.Object)">
            <summary>
            SQLs the scalar.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="sql">The SQL.</param>
            <param name="anonType">Type of the anon.</param>
            <returns>T.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensions.SqlScalar``1(System.Data.IDbCommand,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            SQLs the scalar.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="sql">The SQL.</param>
            <param name="dict">The dictionary.</param>
            <returns>T.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensions.SelectNonDefaults``1(System.Data.IDbCommand,System.Object)">
            <summary>
            Selects the non defaults.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="filter">The filter.</param>
            <returns>List&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensions.SelectNonDefaults``1(System.Data.IDbCommand,System.String,System.Object)">
            <summary>
            Selects the non defaults.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="sql">The SQL.</param>
            <param name="anonType">Type of the anon.</param>
            <returns>List&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensions.SelectLazy``1(System.Data.IDbCommand,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter})">
            <summary>
            Selects the lazy.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="sql">The SQL.</param>
            <param name="sqlParams">The SQL parameters.</param>
            <returns>IEnumerable&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensions.SelectLazy``1(System.Data.IDbCommand,System.String,System.Object)">
            <summary>
            Selects the lazy.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="sql">The SQL.</param>
            <param name="anonType">Type of the anon.</param>
            <returns>IEnumerable&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensions.ColumnLazy``1(System.Data.IDbCommand,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter})">
            <summary>
            Columns the lazy.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="sql">The SQL.</param>
            <param name="sqlParams">The SQL parameters.</param>
            <returns>IEnumerable&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensions.ColumnLazy``1(System.Data.IDbCommand,System.String,System.Object)">
            <summary>
            Columns the lazy.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="sql">The SQL.</param>
            <param name="anonType">Type of the anon.</param>
            <returns>IEnumerable&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensions.ColumnLazy``1(System.Data.IDbCommand,System.String)">
            <summary>
            Columns the lazy.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="sql">The SQL.</param>
            <returns>IEnumerable&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensions.WhereLazy``1(System.Data.IDbCommand,System.Object)">
            <summary>
            Wheres the lazy.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="anonType">Type of the anon.</param>
            <returns>IEnumerable&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensions.SelectLazy``1(System.Data.IDbCommand)">
            <summary>
            Selects the lazy.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <returns>IEnumerable&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensions.Scalar``1(System.Data.IDbCommand,System.String,System.Object)">
            <summary>
            Scalars the specified SQL.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="sql">The SQL.</param>
            <param name="anonType">Type of the anon.</param>
            <returns>T.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensions.Scalar``1(System.Data.IDataReader,ServiceStack.OrmLite.IOrmLiteDialectProvider)">
            <summary>
            Scalars the specified dialect provider.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="reader">The reader.</param>
            <param name="dialectProvider">The dialect provider.</param>
            <returns>T.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensions.ToScalar``1(ServiceStack.OrmLite.IOrmLiteDialectProvider,System.Data.IDataReader,System.Int32)">
            <summary>
            Converts to scalar.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dialectProvider">The dialect provider.</param>
            <param name="reader">The reader.</param>
            <param name="columnIndex">Index of the column.</param>
            <returns>T.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensions.LastInsertId(System.Data.IDbCommand)">
            <summary>
            Lasts the insert identifier.
            </summary>
            <param name="dbCmd">The database command.</param>
            <returns>System.Int64.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensions.Column``1(System.Data.IDbCommand,System.String,System.Object)">
            <summary>
            Columns the specified SQL.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="sql">The SQL.</param>
            <param name="anonType">Type of the anon.</param>
            <returns>List&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensions.Column``1(System.Data.IDataReader,ServiceStack.OrmLite.IOrmLiteDialectProvider)">
            <summary>
            Columns the specified dialect provider.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="reader">The reader.</param>
            <param name="dialectProvider">The dialect provider.</param>
            <returns>List&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensions.ColumnDistinct``1(System.Data.IDbCommand,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter})">
            <summary>
            Columns the distinct.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="sql">The SQL.</param>
            <param name="sqlParams">The SQL parameters.</param>
            <returns>HashSet&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensions.ColumnDistinct``1(System.Data.IDbCommand,System.String,System.Object)">
            <summary>
            Columns the distinct.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="sql">The SQL.</param>
            <param name="anonType">Type of the anon.</param>
            <returns>HashSet&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensions.ColumnDistinct``1(System.Data.IDataReader,ServiceStack.OrmLite.IOrmLiteDialectProvider)">
            <summary>
            Columns the distinct.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="reader">The reader.</param>
            <param name="dialectProvider">The dialect provider.</param>
            <returns>HashSet&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensions.Lookup``2(System.Data.IDbCommand,System.String,System.Object)">
            <summary>
            Lookups the specified SQL.
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="sql">The SQL.</param>
            <param name="anonType">Type of the anon.</param>
            <returns>Dictionary&lt;K, List&lt;V&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensions.Lookup``2(System.Data.IDataReader,ServiceStack.OrmLite.IOrmLiteDialectProvider)">
            <summary>
            Lookups the specified dialect provider.
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="reader">The reader.</param>
            <param name="dialectProvider">The dialect provider.</param>
            <returns>Dictionary&lt;K, List&lt;V&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensions.Dictionary``2(System.Data.IDbCommand,System.String,System.Object)">
            <summary>
            Dictionaries the specified SQL.
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="sql">The SQL.</param>
            <param name="anonType">Type of the anon.</param>
            <returns>Dictionary&lt;K, V&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensions.Dictionary``2(System.Data.IDataReader,ServiceStack.OrmLite.IOrmLiteDialectProvider)">
            <summary>
            Dictionaries the specified dialect provider.
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="reader">The reader.</param>
            <param name="dialectProvider">The dialect provider.</param>
            <returns>Dictionary&lt;K, V&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensions.KeyValuePairs``2(System.Data.IDbCommand,System.String,System.Object)">
            <summary>
            Keys the value pairs.
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="sql">The SQL.</param>
            <param name="anonType">Type of the anon.</param>
            <returns>List&lt;KeyValuePair&lt;K, V&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensions.KeyValuePairs``2(System.Data.IDataReader,ServiceStack.OrmLite.IOrmLiteDialectProvider)">
            <summary>
            Keys the value pairs.
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="reader">The reader.</param>
            <param name="dialectProvider">The dialect provider.</param>
            <returns>List&lt;KeyValuePair&lt;K, V&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensions.Exists``1(System.Data.IDbCommand,System.Object)">
            <summary>
            Existses the specified anon type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="anonType">Type of the anon.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensions.Exists``1(System.Data.IDbCommand,System.String,System.Object)">
            <summary>
            Existses the specified SQL.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="sql">The SQL.</param>
            <param name="anonType">Type of the anon.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensions.SqlProcedure``1(System.Data.IDbCommand,System.Object)">
            <summary>
            SQLs the procedure.
            </summary>
            <typeparam name="TOutputModel">The type of the t output model.</typeparam>
            <param name="dbCommand">The database command.</param>
            <param name="fromObjWithProperties">From object with properties.</param>
            <returns>List&lt;TOutputModel&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensions.SqlProcedureFmt``1(System.Data.IDbCommand,System.Object,System.String,System.Object[])">
            <summary>
            SQLs the procedure FMT.
            </summary>
            <typeparam name="TOutputModel">The type of the t output model.</typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="fromObjWithProperties">From object with properties.</param>
            <param name="sqlFilter">The SQL filter.</param>
            <param name="filterParams">The filter parameters.</param>
            <returns>List&lt;TOutputModel&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensions.LongScalar(System.Data.IDbCommand)">
            <summary>
            Longs the scalar.
            </summary>
            <param name="dbCmd">The database command.</param>
            <returns>System.Int64.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensions.ToLong(System.Int32)">
            <summary>
            Converts to long.
            </summary>
            <param name="result">The result.</param>
            <returns>System.Int64.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensions.ToLong(System.Object)">
            <summary>
            Converts to long.
            </summary>
            <param name="result">The result.</param>
            <returns>System.Int64.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensions.LoadSingleById``1(System.Data.IDbCommand,System.Object,System.String[])">
            <summary>
            Loads the single by identifier.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="value">The value.</param>
            <param name="include">The include.</param>
            <returns>T.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensions.LoadReferences``1(System.Data.IDbCommand,``0,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Loads the references.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="instance">The instance.</param>
            <param name="include">The include.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensions.LoadListWithReferences``2(System.Data.IDbCommand,ServiceStack.OrmLite.SqlExpression{``1},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Loads the list with references.
            </summary>
            <typeparam name="Into">The type of the into.</typeparam>
            <typeparam name="From">The type of from.</typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="expr">The expr.</param>
            <param name="include">The include.</param>
            <returns>List&lt;Into&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensions.GetRefFieldDef(ServiceStack.OrmLite.ModelDefinition,ServiceStack.OrmLite.ModelDefinition,System.Type)">
            <summary>
            Gets the reference field definition.
            </summary>
            <param name="modelDef">The model definition.</param>
            <param name="refModelDef">The reference model definition.</param>
            <param name="refType">Type of the reference.</param>
            <returns>FieldDefinition.</returns>
            <exception cref="T:System.ArgumentException">Cant find '{modelDef.ModelName + "Id"}' Property on Type '{refType.Name}'</exception>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensions.GetRefFieldDefIfExists(ServiceStack.OrmLite.ModelDefinition,ServiceStack.OrmLite.ModelDefinition)">
            <summary>
            Gets the reference field definition if exists.
            </summary>
            <param name="modelDef">The model definition.</param>
            <param name="refModelDef">The reference model definition.</param>
            <returns>FieldDefinition.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensions.GetSelfRefFieldDefIfExists(ServiceStack.OrmLite.ModelDefinition,ServiceStack.OrmLite.ModelDefinition,ServiceStack.OrmLite.FieldDefinition)">
            <summary>
            Gets the self reference field definition if exists.
            </summary>
            <param name="modelDef">The model definition.</param>
            <param name="refModelDef">The reference model definition.</param>
            <param name="fieldDef">The field definition.</param>
            <returns>FieldDefinition.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensions.AddParam(System.Data.IDbCommand,System.String,System.Object,System.Data.ParameterDirection,System.Nullable{System.Data.DbType},System.Nullable{System.Byte},System.Nullable{System.Byte},System.Nullable{System.Int32},System.Action{System.Data.IDbDataParameter})">
            <summary>
            Adds the parameter.
            </summary>
            <param name="dbCmd">The database command.</param>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <param name="direction">The direction.</param>
            <param name="dbType">Type of the database.</param>
            <param name="precision">The precision.</param>
            <param name="scale">The scale.</param>
            <param name="size">The size.</param>
            <param name="paramFilter">The parameter filter.</param>
            <returns>IDbDataParameter.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensions.CreateParam(System.Data.IDbCommand,System.String,System.Object,System.Data.ParameterDirection,System.Nullable{System.Data.DbType},System.Nullable{System.Byte},System.Nullable{System.Byte},System.Nullable{System.Int32})">
            <summary>
            Creates the parameter.
            </summary>
            <param name="dbCmd">The database command.</param>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <param name="direction">The direction.</param>
            <param name="dbType">Type of the database.</param>
            <param name="precision">The precision.</param>
            <param name="scale">The scale.</param>
            <param name="size">The size.</param>
            <returns>IDbDataParameter.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadCommandExtensions.SqlProc(System.Data.IDbCommand,System.String,System.Object,System.Boolean)">
            <summary>
            SQLs the proc.
            </summary>
            <param name="dbCmd">The database command.</param>
            <param name="name">The name.</param>
            <param name="inParams">The in parameters.</param>
            <param name="excludeDefaults">if set to <c>true</c> [exclude defaults].</param>
            <returns>IDbCommand.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.OrmLiteReadExpressionsApi">
            <summary>
            Class OrmLiteReadExpressionsApi.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApi.Exec``1(System.Data.IDbConnection,System.Func{System.Data.IDbCommand,``0})">
            <summary>
            Executes the specified filter.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="filter">The filter.</param>
            <returns>T.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApi.Exec(System.Data.IDbConnection,System.Action{System.Data.IDbCommand})">
            <summary>
            Executes the specified filter.
            </summary>
            <param name="dbConn">The database connection.</param>
            <param name="filter">The filter.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApi.Exec``1(System.Data.IDbConnection,System.Func{System.Data.IDbCommand,System.Threading.Tasks.Task{``0}})">
            <summary>
            Executes the specified filter.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="filter">The filter.</param>
            <returns>Task&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApi.Exec(System.Data.IDbConnection,System.Func{System.Data.IDbCommand,System.Threading.Tasks.Task})">
            <summary>
            Executes the specified filter.
            </summary>
            <param name="dbConn">The database connection.</param>
            <param name="filter">The filter.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApi.ExecLazy``1(System.Data.IDbConnection,System.Func{System.Data.IDbCommand,System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Executes the lazy.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="filter">The filter.</param>
            <returns>IEnumerable&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApi.Exec(System.Data.IDbConnection,System.Func{System.Data.IDbCommand,System.Data.IDbCommand})">
            <summary>
            Executes the specified filter.
            </summary>
            <param name="dbConn">The database connection.</param>
            <param name="filter">The filter.</param>
            <returns>IDbCommand.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApi.Exec(System.Data.IDbConnection,System.Func{System.Data.IDbCommand,System.Threading.Tasks.Task{System.Data.IDbCommand}})">
            <summary>
            Executes the specified filter.
            </summary>
            <param name="dbConn">The database connection.</param>
            <param name="filter">The filter.</param>
            <returns>Task&lt;IDbCommand&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApi.From``1(System.Data.IDbConnection)">
            <summary>
            Creates a new SqlExpression builder allowing typed LINQ-like queries.
            Alias for SqlExpression.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <returns>SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApi.From``1(System.Data.IDbConnection,System.Action{ServiceStack.OrmLite.SqlExpression{``0}})">
            <summary>
            Froms the specified options.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="options">The options.</param>
            <returns>SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApi.From``2(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,``1,System.Boolean}})">
            <summary>
            Froms the specified join expr.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="JoinWith">The type of the join with.</typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="joinExpr">The join expr.</param>
            <returns>SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApi.From``1(System.Data.IDbConnection,System.String)">
            <summary>
            Creates a new SqlExpression builder for the specified type using a user-defined FROM sql expression.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="fromExpression">From expression.</param>
            <returns>SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApi.From``1(System.Data.IDbConnection,ServiceStack.OrmLite.TableOptions)">
            <summary>
            Froms the specified table options.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="tableOptions">The table options.</param>
            <returns>SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApi.From``1(System.Data.IDbConnection,ServiceStack.OrmLite.TableOptions,System.Action{ServiceStack.OrmLite.SqlExpression{``0}})">
            <summary>
            Froms the specified table options.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="tableOptions">The table options.</param>
            <param name="options">The options.</param>
            <returns>SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApi.TagWith``1(ServiceStack.OrmLite.SqlExpression{``0},System.String)">
            <summary>
            Tags the with.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="expression">The expression.</param>
            <param name="tag">The tag.</param>
            <returns>SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApi.TagWithCallSite``1(ServiceStack.OrmLite.SqlExpression{``0},System.String,System.Int32)">
            <summary>
            Tags the with call site.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="expression">The expression.</param>
            <param name="filePath">The file path.</param>
            <param name="lineNumber">The line number.</param>
            <returns>SqlExpression&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApi.TableAlias(System.Data.IDbConnection,System.String)">
            <summary>
            Tables the alias.
            </summary>
            <param name="db">The database.</param>
            <param name="alias">The alias.</param>
            <returns>TableOptions.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApi.GetTableName``1(System.Data.IDbConnection)">
            <summary>
            Gets the name of the table.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="db">The database.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApi.GetTableNames(System.Data.IDbConnection)">
            <summary>
            Gets the table names.
            </summary>
            <param name="db">The database.</param>
            <returns>List&lt;System.String&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApi.GetTableNames(System.Data.IDbConnection,System.String)">
            <summary>
            Gets the table names.
            </summary>
            <param name="db">The database.</param>
            <param name="schema">The schema.</param>
            <returns>List&lt;System.String&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApi.GetTableNamesAsync(System.Data.IDbConnection)">
            <summary>
            Gets the table names asynchronous.
            </summary>
            <param name="db">The database.</param>
            <returns>Task&lt;List&lt;System.String&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApi.GetTableNamesAsync(System.Data.IDbConnection,System.String)">
            <summary>
            Gets the table names asynchronous.
            </summary>
            <param name="db">The database.</param>
            <param name="schema">The schema.</param>
            <returns>Task&lt;List&lt;System.String&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApi.GetTableNamesWithRowCounts(System.Data.IDbConnection,System.Boolean,System.String)">
            <summary>
            Gets the table names with row counts.
            </summary>
            <param name="db">The database.</param>
            <param name="live">if set to <c>true</c> [live].</param>
            <param name="schema">The schema.</param>
            <returns>List&lt;KeyValuePair&lt;System.String, System.Int64&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApi.GetTableNamesWithRowCountsAsync(System.Data.IDbConnection,System.Boolean,System.String)">
            <summary>
            Get table names with row counts as an asynchronous operation.
            </summary>
            <param name="db">The database.</param>
            <param name="live">if set to <c>true</c> [live].</param>
            <param name="schema">The schema.</param>
            <returns>A Task&lt;List`1&gt; representing the asynchronous operation.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApi.CreateTableRowCountUnionSql(System.Data.IDbConnection,System.String)">
            <summary>
            Creates the table row count union SQL.
            </summary>
            <param name="db">The database.</param>
            <param name="schema">The schema.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApi.GetQuotedTableName``1(System.Data.IDbConnection)">
            <summary>
            Gets the name of the quoted table.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="db">The database.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApi.OpenTransaction(System.Data.IDbConnection)">
            <summary>
            Open a Transaction in OrmLite
            </summary>
            <param name="dbConn">The database connection.</param>
            <returns>IDbTransaction.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApi.OpenTransactionIfNotExists(System.Data.IDbConnection)">
            <summary>
            Returns a new transaction if not yet exists, otherwise null
            </summary>
            <param name="dbConn">The database connection.</param>
            <returns>IDbTransaction.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApi.OpenTransaction(System.Data.IDbConnection,System.Data.IsolationLevel)">
            <summary>
            Open a Transaction in OrmLite
            </summary>
            <param name="dbConn">The database connection.</param>
            <param name="isolationLevel">The isolation level.</param>
            <returns>IDbTransaction.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApi.OpenTransactionIfNotExists(System.Data.IDbConnection,System.Data.IsolationLevel)">
            <summary>
            Returns a new transaction if not yet exists, otherwise null
            </summary>
            <param name="dbConn">The database connection.</param>
            <param name="isolationLevel">The isolation level.</param>
            <returns>IDbTransaction.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApi.SavePoint(System.Data.IDbTransaction,System.String)">
            <summary>
            Create a SavePoint
            </summary>
            <param name="trans">The transaction.</param>
            <param name="name">The name.</param>
            <returns>SavePoint.</returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApi.SavePointAsync(System.Data.IDbTransaction,System.String)">
            <summary>
            Create a SavePoint
            </summary>
            <param name="trans">The transaction.</param>
            <param name="name">The name.</param>
            <returns>SavePoint.</returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApi.OpenCommand(System.Data.IDbConnection)">
            <summary>
            Create a managed OrmLite IDbCommand
            </summary>
            <param name="dbConn">The database connection.</param>
            <returns>IDbCommand.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApi.Select``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Returns results from using a LINQ Expression. E.g:
            <para>db.Select&lt;Person&gt;(x =&gt; x.Age &gt; 40)</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="predicate">The predicate.</param>
            <returns>List&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApi.Select``1(System.Data.IDbConnection,ServiceStack.OrmLite.SqlExpression{``0})">
            <summary>
            Returns results from using an SqlExpression lambda. E.g:
            <para>db.Select(db.From&lt;Person&gt;().Where(x =&gt; x.Age &gt; 40))</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="expression">The expression.</param>
            <returns>List&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApi.Select``1(System.Data.IDbConnection,ServiceStack.OrmLite.ISqlExpression,System.Object)">
            <summary>
            Returns results from using an SqlExpression lambda. E.g:
            <para>db.Select(db.From&lt;Person&gt;().Where(x =&gt; x.Age &gt; 40))</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="expression">The expression.</param>
            <param name="anonType">Type of the anon.</param>
            <returns>List&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApi.SelectMulti``2(System.Data.IDbConnection,ServiceStack.OrmLite.SqlExpression{``0})">
            <summary>
            Selects the multi.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="T2">The type of the t2.</typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="expression">The expression.</param>
            <returns>List&lt;Tuple&lt;T, T2&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApi.SelectMulti``3(System.Data.IDbConnection,ServiceStack.OrmLite.SqlExpression{``0})">
            <summary>
            Selects the multi.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="T2">The type of the t2.</typeparam>
            <typeparam name="T3">The type of the t3.</typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="expression">The expression.</param>
            <returns>List&lt;Tuple&lt;T, T2, T3&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApi.SelectMulti``4(System.Data.IDbConnection,ServiceStack.OrmLite.SqlExpression{``0})">
            <summary>
            Selects the multi.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="T2">The type of the t2.</typeparam>
            <typeparam name="T3">The type of the t3.</typeparam>
            <typeparam name="T4">The type of the t4.</typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="expression">The expression.</param>
            <returns>List&lt;Tuple&lt;T, T2, T3, T4&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApi.SelectMulti``5(System.Data.IDbConnection,ServiceStack.OrmLite.SqlExpression{``0})">
            <summary>
            Selects the multi.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="T2">The type of the t2.</typeparam>
            <typeparam name="T3">The type of the t3.</typeparam>
            <typeparam name="T4">The type of the t4.</typeparam>
            <typeparam name="T5">The type of the t5.</typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="expression">The expression.</param>
            <returns>List&lt;Tuple&lt;T, T2, T3, T4, T5&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApi.SelectMulti``6(System.Data.IDbConnection,ServiceStack.OrmLite.SqlExpression{``0})">
            <summary>
            Selects the multi.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="T2">The type of the t2.</typeparam>
            <typeparam name="T3">The type of the t3.</typeparam>
            <typeparam name="T4">The type of the t4.</typeparam>
            <typeparam name="T5">The type of the t5.</typeparam>
            <typeparam name="T6">The type of the t6.</typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="expression">The expression.</param>
            <returns>List&lt;Tuple&lt;T, T2, T3, T4, T5, T6&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApi.SelectMulti``7(System.Data.IDbConnection,ServiceStack.OrmLite.SqlExpression{``0})">
            <summary>
            Selects the multi.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="T2">The type of the t2.</typeparam>
            <typeparam name="T3">The type of the t3.</typeparam>
            <typeparam name="T4">The type of the t4.</typeparam>
            <typeparam name="T5">The type of the t5.</typeparam>
            <typeparam name="T6">The type of the t6.</typeparam>
            <typeparam name="T7">The type of the t7.</typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="expression">The expression.</param>
            <returns>List&lt;Tuple&lt;T, T2, T3, T4, T5, T6, T7&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApi.SelectMulti``8(System.Data.IDbConnection,ServiceStack.OrmLite.SqlExpression{``0})">
            <summary>
            Selects the multi.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="T2">The type of the t2.</typeparam>
            <typeparam name="T3">The type of the t3.</typeparam>
            <typeparam name="T4">The type of the t4.</typeparam>
            <typeparam name="T5">The type of the t5.</typeparam>
            <typeparam name="T6">The type of the t6.</typeparam>
            <typeparam name="T7">The type of the t7.</typeparam>
            <typeparam name="T8">The type of the t8.</typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="expression">The expression.</param>
            <returns>List&lt;Tuple&lt;T, T2, T3, T4, T5, T6, T7, T8&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApi.SelectMulti``2(System.Data.IDbConnection,ServiceStack.OrmLite.SqlExpression{``0},System.String[])">
            <summary>
            Selects the multi.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="T2">The type of the t2.</typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="expression">The expression.</param>
            <param name="tableSelects">The table selects.</param>
            <returns>List&lt;Tuple&lt;T, T2&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApi.SelectMulti``3(System.Data.IDbConnection,ServiceStack.OrmLite.SqlExpression{``0},System.String[])">
            <summary>
            Selects the multi.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="T2">The type of the t2.</typeparam>
            <typeparam name="T3">The type of the t3.</typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="expression">The expression.</param>
            <param name="tableSelects">The table selects.</param>
            <returns>List&lt;Tuple&lt;T, T2, T3&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApi.SelectMulti``4(System.Data.IDbConnection,ServiceStack.OrmLite.SqlExpression{``0},System.String[])">
            <summary>
            Selects the multi.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="T2">The type of the t2.</typeparam>
            <typeparam name="T3">The type of the t3.</typeparam>
            <typeparam name="T4">The type of the t4.</typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="expression">The expression.</param>
            <param name="tableSelects">The table selects.</param>
            <returns>List&lt;Tuple&lt;T, T2, T3, T4&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApi.SelectMulti``5(System.Data.IDbConnection,ServiceStack.OrmLite.SqlExpression{``0},System.String[])">
            <summary>
            Selects the multi.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="T2">The type of the t2.</typeparam>
            <typeparam name="T3">The type of the t3.</typeparam>
            <typeparam name="T4">The type of the t4.</typeparam>
            <typeparam name="T5">The type of the t5.</typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="expression">The expression.</param>
            <param name="tableSelects">The table selects.</param>
            <returns>List&lt;Tuple&lt;T, T2, T3, T4, T5&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApi.SelectMulti``6(System.Data.IDbConnection,ServiceStack.OrmLite.SqlExpression{``0},System.String[])">
            <summary>
            Selects the multi.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="T2">The type of the t2.</typeparam>
            <typeparam name="T3">The type of the t3.</typeparam>
            <typeparam name="T4">The type of the t4.</typeparam>
            <typeparam name="T5">The type of the t5.</typeparam>
            <typeparam name="T6">The type of the t6.</typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="expression">The expression.</param>
            <param name="tableSelects">The table selects.</param>
            <returns>List&lt;Tuple&lt;T, T2, T3, T4, T5, T6&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApi.SelectMulti``7(System.Data.IDbConnection,ServiceStack.OrmLite.SqlExpression{``0},System.String[])">
            <summary>
            Selects the multi.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="T2">The type of the t2.</typeparam>
            <typeparam name="T3">The type of the t3.</typeparam>
            <typeparam name="T4">The type of the t4.</typeparam>
            <typeparam name="T5">The type of the t5.</typeparam>
            <typeparam name="T6">The type of the t6.</typeparam>
            <typeparam name="T7">The type of the t7.</typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="expression">The expression.</param>
            <param name="tableSelects">The table selects.</param>
            <returns>List&lt;Tuple&lt;T, T2, T3, T4, T5, T6, T7&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApi.SelectMulti``8(System.Data.IDbConnection,ServiceStack.OrmLite.SqlExpression{``0},System.String[])">
            <summary>
            Selects the multi.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="T2">The type of the t2.</typeparam>
            <typeparam name="T3">The type of the t3.</typeparam>
            <typeparam name="T4">The type of the t4.</typeparam>
            <typeparam name="T5">The type of the t5.</typeparam>
            <typeparam name="T6">The type of the t6.</typeparam>
            <typeparam name="T7">The type of the t7.</typeparam>
            <typeparam name="T8">The type of the t8.</typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="expression">The expression.</param>
            <param name="tableSelects">The table selects.</param>
            <returns>List&lt;Tuple&lt;T, T2, T3, T4, T5, T6, T7, T8&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApi.Single``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Returns a single result from using a LINQ Expression. E.g:
            <para>db.Single&lt;Person&gt;(x =&gt; x.Age == 42)</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="predicate">The predicate.</param>
            <returns>T.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApi.Single``1(System.Data.IDbConnection,ServiceStack.OrmLite.SqlExpression{``0})">
            <summary>
            Returns results from using an SqlExpression lambda. E.g:
            <para>db.Select&lt;Person&gt;(x =&gt; x.Age &gt; 40)</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="expression">The expression.</param>
            <returns>T.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApi.Single``1(System.Data.IDbConnection,ServiceStack.OrmLite.ISqlExpression)">
            <summary>
            Returns results from using an SqlExpression lambda. E.g:
            <para>db.Single(db.From&lt;Person&gt;().Where(x =&gt; x.Age &gt; 40))</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="expression">The expression.</param>
            <returns>T.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApi.Scalar``2(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Returns a scalar result from using an SqlExpression lambda. E.g:
            <para>db.Scalar&lt;Person, int&gt;(x =&gt; Sql.Max(x.Age))</para>
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TKey">The type of the t key.</typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="field">The field.</param>
            <returns>TKey.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApi.Scalar``2(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Returns a scalar result from using an SqlExpression lambda. E.g:
            <para>db.Scalar&lt;Person, int&gt;(x =&gt; Sql.Max(x.Age), , x =&gt; x.Age &lt; 50)</para>
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TKey">The type of the t key.</typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="field">The field.</param>
            <param name="predicate">The predicate.</param>
            <returns>TKey.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApi.Count``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Returns the count of rows that match the LINQ expression, E.g:
            <para>db.Count&lt;Person&gt;(x =&gt; x.Age &lt; 50)</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="expression">The expression.</param>
            <returns>System.Int64.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApi.Count``1(System.Data.IDbConnection,ServiceStack.OrmLite.SqlExpression{``0})">
            <summary>
            Returns the count of rows that match the supplied SqlExpression, E.g:
            <para>db.Count(db.From&lt;Person&gt;().Where(x =&gt; x.Age &lt; 50))</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="expression">The expression.</param>
            <returns>System.Int64.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApi.Count``1(System.Data.IDbConnection)">
            <summary>
            Counts the specified database connection.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <returns>System.Int64.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApi.RowCount``1(System.Data.IDbConnection,ServiceStack.OrmLite.SqlExpression{``0})">
            <summary>
            Return the number of rows returned by the supplied expression
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="expression">The expression.</param>
            <returns>System.Int64.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApi.RowCount(System.Data.IDbConnection,System.String,System.Object)">
            <summary>
            Return the number of rows returned by the supplied sql
            </summary>
            <param name="dbConn">The database connection.</param>
            <param name="sql">The SQL.</param>
            <param name="anonType">Type of the anon.</param>
            <returns>System.Int64.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApi.RowCount(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter})">
            <summary>
            Return the number of rows returned by the supplied sql and db params
            </summary>
            <param name="dbConn">The database connection.</param>
            <param name="sql">The SQL.</param>
            <param name="sqlParams">The SQL parameters.</param>
            <returns>System.Int64.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApi.LoadSelect``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String[])">
            <summary>
            Returns results with references from using a LINQ Expression. E.g:
            <para>db.LoadSelect&lt;Person&gt;(x =&gt; x.Age &gt; 40)</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="predicate">The predicate.</param>
            <param name="include">The include.</param>
            <returns>List&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApi.LoadSelect``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Returns results with references from using a LINQ Expression. E.g:
            <para>db.LoadSelect&lt;Person&gt;(x =&gt; x.Age &gt; 40, include: x =&gt; new { x.PrimaryAddress })</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="predicate">The predicate.</param>
            <param name="include">The include.</param>
            <returns>List&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApi.LoadSelect``1(System.Data.IDbConnection,ServiceStack.OrmLite.SqlExpression{``0},System.String[])">
            <summary>
            Returns results with references from using an SqlExpression lambda. E.g:
            <para>db.LoadSelect(db.From&lt;Person&gt;().Where(x =&gt; x.Age &gt; 40))</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="expression">The expression.</param>
            <param name="include">The include.</param>
            <returns>List&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApi.LoadSelect``1(System.Data.IDbConnection,ServiceStack.OrmLite.SqlExpression{``0},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Returns results with references from using an SqlExpression lambda. E.g:
            <para>db.LoadSelect(db.From&lt;Person&gt;().Where(x =&gt; x.Age &gt; 40), include:q.OnlyFields)</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="expression">The expression.</param>
            <param name="include">The include.</param>
            <returns>List&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApi.LoadSelect``1(System.Data.IDbConnection,ServiceStack.OrmLite.SqlExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Returns results with references from using an SqlExpression lambda. E.g:
            <para>db.LoadSelect(db.From&lt;Person&gt;().Where(x =&gt; x.Age &gt; 40), include: x =&gt; new { x.PrimaryAddress })</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="expression">The expression.</param>
            <param name="include">The include.</param>
            <returns>List&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApi.LoadSelect``2(System.Data.IDbConnection,ServiceStack.OrmLite.SqlExpression{``1},System.String[])">
            <summary>
            Project results with references from a number of joined tables into a different model
            </summary>
            <typeparam name="Into">The type of the into.</typeparam>
            <typeparam name="From">The type of from.</typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="expression">The expression.</param>
            <param name="include">The include.</param>
            <returns>List&lt;Into&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApi.LoadSelect``2(System.Data.IDbConnection,ServiceStack.OrmLite.SqlExpression{``1},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Project results with references from a number of joined tables into a different model
            </summary>
            <typeparam name="Into">The type of the into.</typeparam>
            <typeparam name="From">The type of from.</typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="expression">The expression.</param>
            <param name="include">The include.</param>
            <returns>List&lt;Into&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApi.LoadSelect``2(System.Data.IDbConnection,ServiceStack.OrmLite.SqlExpression{``1},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Project results with references from a number of joined tables into a different model
            </summary>
            <typeparam name="Into">The type of the into.</typeparam>
            <typeparam name="From">The type of from.</typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="expression">The expression.</param>
            <param name="include">The include.</param>
            <returns>List&lt;Into&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApi.GetSchemaTable(System.Data.IDbConnection,System.String)">
            <summary>
            Return ADO.NET reader.GetSchemaTable() in a DataTable
            </summary>
            <param name="dbConn">The database connection.</param>
            <param name="sql">The SQL.</param>
            <returns>DataTable.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApi.GetTableColumns``1(System.Data.IDbConnection)">
            <summary>
            Get Table Column Schemas for specified table
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <returns>ColumnSchema[].</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApi.GetTableColumns(System.Data.IDbConnection,System.Type)">
            <summary>
            Get Table Column Schemas for specified table
            </summary>
            <param name="dbConn">The database connection.</param>
            <param name="type">The type.</param>
            <returns>ColumnSchema[].</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApi.GetTableColumns(System.Data.IDbConnection,System.String)">
            <summary>
            Get Table Column Schemas for result-set return from specified sql
            </summary>
            <param name="dbConn">The database connection.</param>
            <param name="sql">The SQL.</param>
            <returns>ColumnSchema[].</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApi.EnableForeignKeysCheck(System.Data.IDbConnection)">
            <summary>
            Enables the foreign keys check.
            </summary>
            <param name="dbConn">The database connection.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApi.DisableForeignKeysCheck(System.Data.IDbConnection)">
            <summary>
            Disables the foreign keys check.
            </summary>
            <param name="dbConn">The database connection.</param>
        </member>
        <member name="T:ServiceStack.OrmLite.OrmLiteReadExpressionsApiAsync">
            <summary>
            Class OrmLiteReadExpressionsApiAsync.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApiAsync.SelectAsync``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Returns results from using a LINQ Expression. E.g:
            <para>db.Select&lt;Person&gt;(x =&gt; x.Age &gt; 40)</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="predicate">The predicate.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;List&lt;T&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApiAsync.SelectAsync``1(System.Data.IDbConnection,ServiceStack.OrmLite.SqlExpression{``0},System.Threading.CancellationToken)">
            <summary>
            Returns results from using an SqlExpression lambda. E.g:
            <para>db.Select(db.From&lt;Person&gt;().Where(x =&gt; x.Age &gt; 40))</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="expression">The expression.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;List&lt;T&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApiAsync.SelectAsync``2(System.Data.IDbConnection,ServiceStack.OrmLite.SqlExpression{``1},System.Threading.CancellationToken)">
            <summary>
            Project results from a number of joined tables into a different model
            </summary>
            <typeparam name="Into">The type of the into.</typeparam>
            <typeparam name="From">The type of from.</typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="expression">The expression.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;List&lt;Into&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApiAsync.SelectAsync``1(System.Data.IDbConnection,ServiceStack.OrmLite.ISqlExpression,System.Threading.CancellationToken)">
            <summary>
            Returns results from using an SqlExpression lambda. E.g:
            <para>db.SelectAsync(db.From&lt;Person&gt;().Where(x =&gt; x.Age &gt; 40))</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="expression">The expression.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;List&lt;T&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApiAsync.SelectMultiAsync``2(System.Data.IDbConnection,ServiceStack.OrmLite.SqlExpression{``0},System.Threading.CancellationToken)">
            <summary>
            Selects the multi asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="T2">The type of the t2.</typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="expression">The expression.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;List&lt;Tuple&lt;T, T2&gt;&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApiAsync.SelectMultiAsync``3(System.Data.IDbConnection,ServiceStack.OrmLite.SqlExpression{``0},System.Threading.CancellationToken)">
            <summary>
            Selects the multi asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="T2">The type of the t2.</typeparam>
            <typeparam name="T3">The type of the t3.</typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="expression">The expression.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;List&lt;Tuple&lt;T, T2, T3&gt;&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApiAsync.SelectMultiAsync``4(System.Data.IDbConnection,ServiceStack.OrmLite.SqlExpression{``0},System.Threading.CancellationToken)">
            <summary>
            Selects the multi asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="T2">The type of the t2.</typeparam>
            <typeparam name="T3">The type of the t3.</typeparam>
            <typeparam name="T4">The type of the t4.</typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="expression">The expression.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;List&lt;Tuple&lt;T, T2, T3, T4&gt;&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApiAsync.SelectMultiAsync``5(System.Data.IDbConnection,ServiceStack.OrmLite.SqlExpression{``0},System.Threading.CancellationToken)">
            <summary>
            Selects the multi asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="T2">The type of the t2.</typeparam>
            <typeparam name="T3">The type of the t3.</typeparam>
            <typeparam name="T4">The type of the t4.</typeparam>
            <typeparam name="T5">The type of the t5.</typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="expression">The expression.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;List&lt;Tuple&lt;T, T2, T3, T4, T5&gt;&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApiAsync.SelectMultiAsync``6(System.Data.IDbConnection,ServiceStack.OrmLite.SqlExpression{``0},System.Threading.CancellationToken)">
            <summary>
            Selects the multi asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="T2">The type of the t2.</typeparam>
            <typeparam name="T3">The type of the t3.</typeparam>
            <typeparam name="T4">The type of the t4.</typeparam>
            <typeparam name="T5">The type of the t5.</typeparam>
            <typeparam name="T6">The type of the t6.</typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="expression">The expression.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;List&lt;Tuple&lt;T, T2, T3, T4, T5, T6&gt;&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApiAsync.SelectMultiAsync``7(System.Data.IDbConnection,ServiceStack.OrmLite.SqlExpression{``0},System.Threading.CancellationToken)">
            <summary>
            Selects the multi asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="T2">The type of the t2.</typeparam>
            <typeparam name="T3">The type of the t3.</typeparam>
            <typeparam name="T4">The type of the t4.</typeparam>
            <typeparam name="T5">The type of the t5.</typeparam>
            <typeparam name="T6">The type of the t6.</typeparam>
            <typeparam name="T7">The type of the t7.</typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="expression">The expression.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;List&lt;Tuple&lt;T, T2, T3, T4, T5, T6, T7&gt;&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApiAsync.SelectMultiAsync``2(System.Data.IDbConnection,ServiceStack.OrmLite.SqlExpression{``0},System.String[],System.Threading.CancellationToken)">
            <summary>
            Selects the multi asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="T2">The type of the t2.</typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="expression">The expression.</param>
            <param name="tableSelects">The table selects.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;List&lt;Tuple&lt;T, T2&gt;&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApiAsync.SelectMultiAsync``3(System.Data.IDbConnection,ServiceStack.OrmLite.SqlExpression{``0},System.String[],System.Threading.CancellationToken)">
            <summary>
            Selects the multi asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="T2">The type of the t2.</typeparam>
            <typeparam name="T3">The type of the t3.</typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="expression">The expression.</param>
            <param name="tableSelects">The table selects.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;List&lt;Tuple&lt;T, T2, T3&gt;&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApiAsync.SelectMultiAsync``4(System.Data.IDbConnection,ServiceStack.OrmLite.SqlExpression{``0},System.String[],System.Threading.CancellationToken)">
            <summary>
            Selects the multi asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="T2">The type of the t2.</typeparam>
            <typeparam name="T3">The type of the t3.</typeparam>
            <typeparam name="T4">The type of the t4.</typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="expression">The expression.</param>
            <param name="tableSelects">The table selects.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;List&lt;Tuple&lt;T, T2, T3, T4&gt;&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApiAsync.SelectMultiAsync``5(System.Data.IDbConnection,ServiceStack.OrmLite.SqlExpression{``0},System.String[],System.Threading.CancellationToken)">
            <summary>
            Selects the multi asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="T2">The type of the t2.</typeparam>
            <typeparam name="T3">The type of the t3.</typeparam>
            <typeparam name="T4">The type of the t4.</typeparam>
            <typeparam name="T5">The type of the t5.</typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="expression">The expression.</param>
            <param name="tableSelects">The table selects.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;List&lt;Tuple&lt;T, T2, T3, T4, T5&gt;&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApiAsync.SelectMultiAsync``6(System.Data.IDbConnection,ServiceStack.OrmLite.SqlExpression{``0},System.String[],System.Threading.CancellationToken)">
            <summary>
            Selects the multi asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="T2">The type of the t2.</typeparam>
            <typeparam name="T3">The type of the t3.</typeparam>
            <typeparam name="T4">The type of the t4.</typeparam>
            <typeparam name="T5">The type of the t5.</typeparam>
            <typeparam name="T6">The type of the t6.</typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="expression">The expression.</param>
            <param name="tableSelects">The table selects.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;List&lt;Tuple&lt;T, T2, T3, T4, T5, T6&gt;&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApiAsync.SelectMultiAsync``7(System.Data.IDbConnection,ServiceStack.OrmLite.SqlExpression{``0},System.String[],System.Threading.CancellationToken)">
            <summary>
            Selects the multi asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="T2">The type of the t2.</typeparam>
            <typeparam name="T3">The type of the t3.</typeparam>
            <typeparam name="T4">The type of the t4.</typeparam>
            <typeparam name="T5">The type of the t5.</typeparam>
            <typeparam name="T6">The type of the t6.</typeparam>
            <typeparam name="T7">The type of the t7.</typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="expression">The expression.</param>
            <param name="tableSelects">The table selects.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;List&lt;Tuple&lt;T, T2, T3, T4, T5, T6, T7&gt;&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApiAsync.SingleAsync``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Returns a single result from using a LINQ Expression. E.g:
            <para>db.Single&lt;Person&gt;(x =&gt; x.Age == 42)</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="predicate">The predicate.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApiAsync.SingleAsync``1(System.Data.IDbConnection,ServiceStack.OrmLite.SqlExpression{``0},System.Threading.CancellationToken)">
            <summary>
            Returns results from using an SqlExpression lambda. E.g:
            <para>db.SingleAsync&lt;Person&gt;(x =&gt; x.Age &gt; 40)</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="expression">The expression.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApiAsync.SingleAsync``1(System.Data.IDbConnection,ServiceStack.OrmLite.ISqlExpression,System.Threading.CancellationToken)">
            <summary>
            Returns results from using an SqlExpression lambda. E.g:
            <para>db.SingleAsync(db.From&lt;Person&gt;().Where(x =&gt; x.Age &gt; 40))</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="expression">The expression.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApiAsync.ScalarAsync``2(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Threading.CancellationToken)">
            <summary>
            Returns a scalar result from using an SqlExpression lambda. E.g:
            <para>db.Scalar&lt;Person, int&gt;(x =&gt; Sql.Max(x.Age))</para>
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TKey">The type of the t key.</typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="field">The field.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;TKey&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApiAsync.ScalarAsync``2(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Returns a scalar result from using an SqlExpression lambda. E.g:
            <para>db.Scalar&lt;Person, int&gt;(x =&gt; Sql.Max(x.Age), , x =&gt; x.Age &lt; 50)</para>
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TKey">The type of the t key.</typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="field">The field.</param>
            <param name="predicate">The predicate.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;TKey&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApiAsync.CountAsync``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Returns the count of rows that match the LINQ expression, E.g:
            <para>db.Count&lt;Person&gt;(x =&gt; x.Age &lt; 50)</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="expression">The expression.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;System.Int64&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApiAsync.CountAsync``1(System.Data.IDbConnection,ServiceStack.OrmLite.SqlExpression{``0},System.Threading.CancellationToken)">
            <summary>
            Returns the count of rows that match the supplied SqlExpression, E.g:
            <para>db.Count(db.From&lt;Person&gt;().Where(x =&gt; x.Age &lt; 50))</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="expression">The expression.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;System.Int64&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApiAsync.CountAsync``1(System.Data.IDbConnection,System.Threading.CancellationToken)">
            <summary>
            Counts the asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;System.Int64&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApiAsync.RowCountAsync``1(System.Data.IDbConnection,ServiceStack.OrmLite.SqlExpression{``0},System.Threading.CancellationToken)">
            <summary>
            Return the number of rows returned by the supplied expression
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="expression">The expression.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;System.Int64&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApiAsync.RowCountAsync(System.Data.IDbConnection,System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Return the number of rows returned by the supplied sql
            </summary>
            <param name="dbConn">The database connection.</param>
            <param name="sql">The SQL.</param>
            <param name="anonType">Type of the anon.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;System.Int64&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApiAsync.LoadSelectAsync``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String[],System.Threading.CancellationToken)">
            <summary>
            Returns results with references from using a LINQ Expression. E.g:
            <para>db.LoadSelectAsync&lt;Person&gt;(x =&gt; x.Age &gt; 40)</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="predicate">The predicate.</param>
            <param name="include">The include.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;List&lt;T&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApiAsync.LoadSelectAsync``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Returns results with references from using a LINQ Expression. E.g:
            <para>db.LoadSelectAsync&lt;Person&gt;(x =&gt; x.Age &gt; 40, include: x =&gt; new { x.PrimaryAddress })</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="predicate">The predicate.</param>
            <param name="include">The include.</param>
            <returns>Task&lt;List&lt;T&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApiAsync.LoadSelectAsync``1(System.Data.IDbConnection,ServiceStack.OrmLite.SqlExpression{``0},System.String[],System.Threading.CancellationToken)">
            <summary>
            Returns results with references from using an SqlExpression lambda. E.g:
            <para>db.LoadSelectAsync(db.From&lt;Person&gt;().Where(x =&gt; x.Age &gt; 40))</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="expression">The expression.</param>
            <param name="include">The include.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;List&lt;T&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApiAsync.LoadSelectAsync``1(System.Data.IDbConnection,ServiceStack.OrmLite.SqlExpression{``0},System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Returns results with references from using an SqlExpression lambda. E.g:
            <para>db.LoadSelectAsync(db.From&lt;Person&gt;().Where(x =&gt; x.Age &gt; 40), include:q.OnlyFields)</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="expression">The expression.</param>
            <param name="include">The include.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;List&lt;T&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApiAsync.LoadSelectAsync``2(System.Data.IDbConnection,ServiceStack.OrmLite.SqlExpression{``1},System.String[],System.Threading.CancellationToken)">
            <summary>
            Project results with references from a number of joined tables into a different model
            </summary>
            <typeparam name="Into">The type of the into.</typeparam>
            <typeparam name="From">The type of from.</typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="expression">The expression.</param>
            <param name="include">The include.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;List&lt;Into&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApiAsync.LoadSelectAsync``2(System.Data.IDbConnection,ServiceStack.OrmLite.SqlExpression{``1},System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Project results with references from a number of joined tables into a different model
            </summary>
            <typeparam name="Into">The type of the into.</typeparam>
            <typeparam name="From">The type of from.</typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="expression">The expression.</param>
            <param name="include">The include.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;List&lt;Into&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApiAsync.LoadSelectAsync``2(System.Data.IDbConnection,ServiceStack.OrmLite.SqlExpression{``1},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Project results with references from a number of joined tables into a different model
            </summary>
            <typeparam name="Into">The type of the into.</typeparam>
            <typeparam name="From">The type of from.</typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="expression">The expression.</param>
            <param name="include">The include.</param>
            <returns>Task&lt;List&lt;Into&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApiAsync.GetSchemaTableAsync(System.Data.IDbConnection,System.String,System.Threading.CancellationToken)">
            <summary>
            Return ADO.NET reader.GetSchemaTable() in a DataTable
            </summary>
            <param name="dbConn">The database connection.</param>
            <param name="sql">The SQL.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;DataTable&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApiAsync.GetTableColumnsAsync``1(System.Data.IDbConnection,System.Threading.CancellationToken)">
            <summary>
            Get Table Column Schemas for specified table
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;ColumnSchema[]&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApiAsync.GetTableColumnsAsync(System.Data.IDbConnection,System.Type,System.Threading.CancellationToken)">
            <summary>
            Get Table Column Schemas for specified table
            </summary>
            <param name="dbConn">The database connection.</param>
            <param name="type">The type.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;ColumnSchema[]&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApiAsync.GetTableColumnsAsync(System.Data.IDbConnection,System.String,System.Threading.CancellationToken)">
            <summary>
            Get Table Column Schemas for result-set return from specified sql
            </summary>
            <param name="dbConn">The database connection.</param>
            <param name="sql">The SQL.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;ColumnSchema[]&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApiAsync.EnableForeignKeysCheckAsync(System.Data.IDbConnection,System.Threading.CancellationToken)">
            <summary>
            Enables the foreign keys check asynchronous.
            </summary>
            <param name="dbConn">The database connection.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApiAsync.DisableForeignKeysCheckAsync(System.Data.IDbConnection,System.Threading.CancellationToken)">
            <summary>
            Disables the foreign keys check asynchronous.
            </summary>
            <param name="dbConn">The database connection.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.IOrmLiteResultsFilter">
            <summary>
            Interface IOrmLiteResultsFilter
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteResultsFilter.GetLastInsertId(System.Data.IDbCommand)">
            <summary>
            Gets the last insert identifier.
            </summary>
            <param name="dbCmd">The database command.</param>
            <returns>System.Int64.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteResultsFilter.GetList``1(System.Data.IDbCommand)">
            <summary>
            Gets the list.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <returns>List&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteResultsFilter.GetRefList(System.Data.IDbCommand,System.Type)">
            <summary>
            Gets the reference list.
            </summary>
            <param name="dbCmd">The database command.</param>
            <param name="refType">Type of the reference.</param>
            <returns>IList.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteResultsFilter.GetSingle``1(System.Data.IDbCommand)">
            <summary>
            Gets the single.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <returns>T.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteResultsFilter.GetRefSingle(System.Data.IDbCommand,System.Type)">
            <summary>
            Gets the reference single.
            </summary>
            <param name="dbCmd">The database command.</param>
            <param name="refType">Type of the reference.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteResultsFilter.GetScalar``1(System.Data.IDbCommand)">
            <summary>
            Gets the scalar.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <returns>T.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteResultsFilter.GetScalar(System.Data.IDbCommand)">
            <summary>
            Gets the scalar.
            </summary>
            <param name="dbCmd">The database command.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteResultsFilter.GetLongScalar(System.Data.IDbCommand)">
            <summary>
            Gets the long scalar.
            </summary>
            <param name="dbCmd">The database command.</param>
            <returns>System.Int64.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteResultsFilter.GetColumn``1(System.Data.IDbCommand)">
            <summary>
            Gets the column.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <returns>List&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteResultsFilter.GetColumnDistinct``1(System.Data.IDbCommand)">
            <summary>
            Gets the column distinct.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <returns>HashSet&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteResultsFilter.GetDictionary``2(System.Data.IDbCommand)">
            <summary>
            Gets the dictionary.
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="dbCmd">The database command.</param>
            <returns>Dictionary&lt;K, V&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteResultsFilter.GetKeyValuePairs``2(System.Data.IDbCommand)">
            <summary>
            Gets the key value pairs.
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="dbCmd">The database command.</param>
            <returns>List&lt;KeyValuePair&lt;K, V&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteResultsFilter.GetLookup``2(System.Data.IDbCommand)">
            <summary>
            Gets the lookup.
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="dbCmd">The database command.</param>
            <returns>Dictionary&lt;K, List&lt;V&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteResultsFilter.ExecuteSql(System.Data.IDbCommand)">
            <summary>
            Executes the SQL.
            </summary>
            <param name="dbCmd">The database command.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.OrmLiteResultsFilter">
            <summary>
            Class OrmLiteResultsFilter.
            Implements the <see cref="T:ServiceStack.OrmLite.IOrmLiteResultsFilter" />
            Implements the <see cref="T:System.IDisposable" />
            </summary>
            <seealso cref="T:ServiceStack.OrmLite.IOrmLiteResultsFilter" />
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteResultsFilter.Results">
            <summary>
            Gets or sets the results.
            </summary>
            <value>The results.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteResultsFilter.RefResults">
            <summary>
            Gets or sets the reference results.
            </summary>
            <value>The reference results.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteResultsFilter.ColumnResults">
            <summary>
            Gets or sets the column results.
            </summary>
            <value>The column results.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteResultsFilter.ColumnDistinctResults">
            <summary>
            Gets or sets the column distinct results.
            </summary>
            <value>The column distinct results.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteResultsFilter.DictionaryResults">
            <summary>
            Gets or sets the dictionary results.
            </summary>
            <value>The dictionary results.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteResultsFilter.LookupResults">
            <summary>
            Gets or sets the lookup results.
            </summary>
            <value>The lookup results.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteResultsFilter.SingleResult">
            <summary>
            Gets or sets the single result.
            </summary>
            <value>The single result.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteResultsFilter.RefSingleResult">
            <summary>
            Gets or sets the reference single result.
            </summary>
            <value>The reference single result.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteResultsFilter.ScalarResult">
            <summary>
            Gets or sets the scalar result.
            </summary>
            <value>The scalar result.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteResultsFilter.LongScalarResult">
            <summary>
            Gets or sets the long scalar result.
            </summary>
            <value>The long scalar result.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteResultsFilter.LastInsertId">
            <summary>
            Gets or sets the last insert identifier.
            </summary>
            <value>The last insert identifier.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteResultsFilter.ExecuteSqlResult">
            <summary>
            Gets or sets the execute SQL result.
            </summary>
            <value>The execute SQL result.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteResultsFilter.ExecuteSqlFn">
            <summary>
            Gets or sets the execute SQL function.
            </summary>
            <value>The execute SQL function.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteResultsFilter.ResultsFn">
            <summary>
            Gets or sets the results function.
            </summary>
            <value>The results function.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteResultsFilter.RefResultsFn">
            <summary>
            Gets or sets the reference results function.
            </summary>
            <value>The reference results function.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteResultsFilter.ColumnResultsFn">
            <summary>
            Gets or sets the column results function.
            </summary>
            <value>The column results function.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteResultsFilter.ColumnDistinctResultsFn">
            <summary>
            Gets or sets the column distinct results function.
            </summary>
            <value>The column distinct results function.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteResultsFilter.DictionaryResultsFn">
            <summary>
            Gets or sets the dictionary results function.
            </summary>
            <value>The dictionary results function.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteResultsFilter.LookupResultsFn">
            <summary>
            Gets or sets the lookup results function.
            </summary>
            <value>The lookup results function.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteResultsFilter.SingleResultFn">
            <summary>
            Gets or sets the single result function.
            </summary>
            <value>The single result function.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteResultsFilter.RefSingleResultFn">
            <summary>
            Gets or sets the reference single result function.
            </summary>
            <value>The reference single result function.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteResultsFilter.ScalarResultFn">
            <summary>
            Gets or sets the scalar result function.
            </summary>
            <value>The scalar result function.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteResultsFilter.LongScalarResultFn">
            <summary>
            Gets or sets the long scalar result function.
            </summary>
            <value>The long scalar result function.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteResultsFilter.LastInsertIdFn">
            <summary>
            Gets or sets the last insert identifier function.
            </summary>
            <value>The last insert identifier function.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteResultsFilter.SqlFilter">
            <summary>
            Gets or sets the SQL filter.
            </summary>
            <value>The SQL filter.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteResultsFilter.SqlCommandFilter">
            <summary>
            Gets or sets the SQL command filter.
            </summary>
            <value>The SQL command filter.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteResultsFilter.PrintSql">
            <summary>
            Gets or sets a value indicating whether [print SQL].
            </summary>
            <value><c>true</c> if [print SQL]; otherwise, <c>false</c>.</value>
        </member>
        <member name="F:ServiceStack.OrmLite.OrmLiteResultsFilter.previousFilter">
            <summary>
            The previous filter
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteResultsFilter.#ctor(System.Collections.IEnumerable)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.OrmLite.OrmLiteResultsFilter" /> class.
            </summary>
            <param name="results">The results.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteResultsFilter.Filter(System.Data.IDbCommand)">
            <summary>
            Filters the specified database command.
            </summary>
            <param name="dbCmd">The database command.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteResultsFilter.GetResults``1(System.Data.IDbCommand)">
            <summary>
            Gets the results.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <returns>IEnumerable.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteResultsFilter.GetRefResults(System.Data.IDbCommand,System.Type)">
            <summary>
            Gets the reference results.
            </summary>
            <param name="dbCmd">The database command.</param>
            <param name="refType">Type of the reference.</param>
            <returns>IEnumerable.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteResultsFilter.GetColumnResults``1(System.Data.IDbCommand)">
            <summary>
            Gets the column results.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <returns>IEnumerable.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteResultsFilter.GetColumnDistinctResults``1(System.Data.IDbCommand)">
            <summary>
            Gets the column distinct results.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <returns>IEnumerable.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteResultsFilter.GetDictionaryResults``2(System.Data.IDbCommand)">
            <summary>
            Gets the dictionary results.
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="dbCmd">The database command.</param>
            <returns>IDictionary.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteResultsFilter.GetLookupResults``2(System.Data.IDbCommand)">
            <summary>
            Gets the lookup results.
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="dbCmd">The database command.</param>
            <returns>IDictionary.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteResultsFilter.GetSingleResult``1(System.Data.IDbCommand)">
            <summary>
            Gets the single result.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteResultsFilter.GetRefSingleResult(System.Data.IDbCommand,System.Type)">
            <summary>
            Gets the reference single result.
            </summary>
            <param name="dbCmd">The database command.</param>
            <param name="refType">Type of the reference.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteResultsFilter.GetScalarResult``1(System.Data.IDbCommand)">
            <summary>
            Gets the scalar result.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteResultsFilter.GetLongScalarResult(System.Data.IDbCommand)">
            <summary>
            Gets the long scalar result.
            </summary>
            <param name="dbCmd">The database command.</param>
            <returns>System.Int64.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteResultsFilter.GetLastInsertId(System.Data.IDbCommand)">
            <summary>
            Gets the last insert identifier.
            </summary>
            <param name="dbCmd">The database command.</param>
            <returns>System.Int64.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteResultsFilter.GetList``1(System.Data.IDbCommand)">
            <summary>
            Gets the list.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <returns>List&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteResultsFilter.GetRefList(System.Data.IDbCommand,System.Type)">
            <summary>
            Gets the reference list.
            </summary>
            <param name="dbCmd">The database command.</param>
            <param name="refType">Type of the reference.</param>
            <returns>IList.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteResultsFilter.GetSingle``1(System.Data.IDbCommand)">
            <summary>
            Gets the single.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <returns>T.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteResultsFilter.GetRefSingle(System.Data.IDbCommand,System.Type)">
            <summary>
            Gets the reference single.
            </summary>
            <param name="dbCmd">The database command.</param>
            <param name="refType">Type of the reference.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteResultsFilter.GetScalar``1(System.Data.IDbCommand)">
            <summary>
            Gets the scalar.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <returns>T.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteResultsFilter.GetLongScalar(System.Data.IDbCommand)">
            <summary>
            Gets the long scalar.
            </summary>
            <param name="dbCmd">The database command.</param>
            <returns>System.Int64.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteResultsFilter.ConvertTo``1(System.Object)">
            <summary>
            Converts to.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The value.</param>
            <returns>T.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteResultsFilter.GetScalar(System.Data.IDbCommand)">
            <summary>
            Gets the scalar.
            </summary>
            <param name="dbCmd">The database command.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteResultsFilter.GetColumn``1(System.Data.IDbCommand)">
            <summary>
            Gets the column.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <returns>List&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteResultsFilter.GetColumnDistinct``1(System.Data.IDbCommand)">
            <summary>
            Gets the column distinct.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <returns>HashSet&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteResultsFilter.GetDictionary``2(System.Data.IDbCommand)">
            <summary>
            Gets the dictionary.
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="dbCmd">The database command.</param>
            <returns>Dictionary&lt;K, V&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteResultsFilter.GetKeyValuePairs``2(System.Data.IDbCommand)">
            <summary>
            Gets the key value pairs.
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="dbCmd">The database command.</param>
            <returns>List&lt;KeyValuePair&lt;K, V&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteResultsFilter.GetLookup``2(System.Data.IDbCommand)">
            <summary>
            Gets the lookup.
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="dbCmd">The database command.</param>
            <returns>Dictionary&lt;K, List&lt;V&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteResultsFilter.ExecuteSql(System.Data.IDbCommand)">
            <summary>
            Executes the SQL.
            </summary>
            <param name="dbCmd">The database command.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteResultsFilter.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:ServiceStack.OrmLite.CaptureSqlFilter">
            <summary>
            Class CaptureSqlFilter.
            Implements the <see cref="T:ServiceStack.OrmLite.OrmLiteResultsFilter" />
            </summary>
            <seealso cref="T:ServiceStack.OrmLite.OrmLiteResultsFilter" />
        </member>
        <member name="M:ServiceStack.OrmLite.CaptureSqlFilter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.OrmLite.CaptureSqlFilter" /> class.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.CaptureSqlFilter.CaptureSqlCommand(System.Data.IDbCommand)">
            <summary>
            Captures the SQL command.
            </summary>
            <param name="command">The command.</param>
        </member>
        <member name="P:ServiceStack.OrmLite.CaptureSqlFilter.SqlCommandHistory">
            <summary>
            Gets or sets the SQL command history.
            </summary>
            <value>The SQL command history.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.CaptureSqlFilter.SqlStatements">
            <summary>
            Gets the SQL statements.
            </summary>
            <value>The SQL statements.</value>
        </member>
        <member name="T:ServiceStack.OrmLite.SqlCommandDetails">
            <summary>
            Class SqlCommandDetails.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlCommandDetails.#ctor(System.Data.IDbCommand)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.OrmLite.SqlCommandDetails" /> class.
            </summary>
            <param name="command">The command.</param>
        </member>
        <member name="P:ServiceStack.OrmLite.SqlCommandDetails.Sql">
            <summary>
            Gets or sets the SQL.
            </summary>
            <value>The SQL.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.SqlCommandDetails.Parameters">
            <summary>
            Gets or sets the parameters.
            </summary>
            <value>The parameters.</value>
        </member>
        <member name="T:ServiceStack.OrmLite.OrmLiteResultsFilterExtensions">
            <summary>
            Class OrmLiteResultsFilterExtensions.
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.OrmLiteResultsFilterExtensions.Log">
            <summary>
            The log
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteResultsFilterExtensions.ExecNonQuery(System.Data.IDbCommand,System.String,System.Object)">
            <summary>
            Executes the non query.
            </summary>
            <param name="dbCmd">The database command.</param>
            <param name="sql">The SQL.</param>
            <param name="anonType">Type of the anon.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteResultsFilterExtensions.ExecNonQuery(System.Data.IDbCommand,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Executes the non query.
            </summary>
            <param name="dbCmd">The database command.</param>
            <param name="sql">The SQL.</param>
            <param name="dict">The dictionary.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteResultsFilterExtensions.ExecNonQuery(System.Data.IDbCommand)">
            <summary>
            Executes the non query.
            </summary>
            <param name="dbCmd">The database command.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteResultsFilterExtensions.ExecNonQuery(System.Data.IDbCommand,System.String,System.Action{System.Data.IDbCommand})">
            <summary>
            Executes the non query.
            </summary>
            <param name="dbCmd">The database command.</param>
            <param name="sql">The SQL.</param>
            <param name="dbCmdFilter">The database command filter.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteResultsFilterExtensions.ConvertToList``1(System.Data.IDbCommand,System.String)">
            <summary>
            Converts to list.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="sql">The SQL.</param>
            <returns>List&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteResultsFilterExtensions.ConvertToList(System.Data.IDbCommand,System.Type,System.String)">
            <summary>
            Converts to list.
            </summary>
            <param name="dbCmd">The database command.</param>
            <param name="refType">Type of the reference.</param>
            <param name="sql">The SQL.</param>
            <returns>IList.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteResultsFilterExtensions.PopulateWith(System.Data.IDbDataParameter,System.Data.IDbDataParameter)">
            <summary>
            Populates the with.
            </summary>
            <param name="to">To.</param>
            <param name="from">From.</param>
            <returns>IDbDataParameter.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteResultsFilterExtensions.ExprConvertToList``1(System.Data.IDbCommand,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter},System.Collections.Generic.HashSet{System.String})">
            <summary>
            Exprs the convert to list.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="sql">The SQL.</param>
            <param name="sqlParams">The SQL parameters.</param>
            <param name="onlyFields">The only fields.</param>
            <returns>List&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteResultsFilterExtensions.ConvertTo``1(System.Data.IDbCommand,System.String)">
            <summary>
            Converts to.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="sql">The SQL.</param>
            <returns>T.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteResultsFilterExtensions.ConvertTo(System.Data.IDbCommand,System.Type,System.String)">
            <summary>
            Converts to.
            </summary>
            <param name="dbCmd">The database command.</param>
            <param name="refType">Type of the reference.</param>
            <param name="sql">The SQL.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteResultsFilterExtensions.Scalar``1(System.Data.IDbCommand,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter})">
            <summary>
            Scalars the specified SQL.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="sql">The SQL.</param>
            <param name="sqlParams">The SQL parameters.</param>
            <returns>T.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteResultsFilterExtensions.Scalar``1(System.Data.IDbCommand,System.String)">
            <summary>
            Scalars the specified SQL.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="sql">The SQL.</param>
            <returns>T.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteResultsFilterExtensions.Scalar(System.Data.IDbCommand,ServiceStack.OrmLite.ISqlExpression)">
            <summary>
            Scalars the specified SQL expression.
            </summary>
            <param name="dbCmd">The database command.</param>
            <param name="sqlExpression">The SQL expression.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteResultsFilterExtensions.Scalar(System.Data.IDbCommand,System.String)">
            <summary>
            Scalars the specified SQL.
            </summary>
            <param name="dbCmd">The database command.</param>
            <param name="sql">The SQL.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteResultsFilterExtensions.ExecLongScalar(System.Data.IDbCommand,System.String)">
            <summary>
            Executes the long scalar.
            </summary>
            <param name="dbCmd">The database command.</param>
            <param name="sql">The SQL.</param>
            <returns>System.Int64.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteResultsFilterExtensions.ExprConvertTo``1(System.Data.IDbCommand,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter},System.Collections.Generic.HashSet{System.String})">
            <summary>
            Exprs the convert to.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="sql">The SQL.</param>
            <param name="sqlParams">The SQL parameters.</param>
            <param name="onlyFields">The only fields.</param>
            <returns>T.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteResultsFilterExtensions.Column``1(System.Data.IDbCommand,System.String)">
            <summary>
            Columns the specified SQL.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="sql">The SQL.</param>
            <returns>List&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteResultsFilterExtensions.Column``1(System.Data.IDbCommand,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter})">
            <summary>
            Columns the specified SQL.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="sql">The SQL.</param>
            <param name="sqlParams">The SQL parameters.</param>
            <returns>List&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteResultsFilterExtensions.ColumnDistinct``1(System.Data.IDbCommand,System.String)">
            <summary>
            Columns the distinct.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="sql">The SQL.</param>
            <returns>HashSet&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteResultsFilterExtensions.ColumnDistinct``1(System.Data.IDbCommand,ServiceStack.OrmLite.ISqlExpression)">
            <summary>
            Columns the distinct.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="expression">The expression.</param>
            <returns>HashSet&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteResultsFilterExtensions.Dictionary``2(System.Data.IDbCommand,System.String)">
            <summary>
            Dictionaries the specified SQL.
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="sql">The SQL.</param>
            <returns>Dictionary&lt;K, V&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteResultsFilterExtensions.Dictionary``2(System.Data.IDbCommand,ServiceStack.OrmLite.ISqlExpression)">
            <summary>
            Dictionaries the specified expression.
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="expression">The expression.</param>
            <returns>Dictionary&lt;K, V&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteResultsFilterExtensions.KeyValuePairs``2(System.Data.IDbCommand,System.String)">
            <summary>
            Keys the value pairs.
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="sql">The SQL.</param>
            <returns>List&lt;KeyValuePair&lt;K, V&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteResultsFilterExtensions.KeyValuePairs``2(System.Data.IDbCommand,ServiceStack.OrmLite.ISqlExpression)">
            <summary>
            Keys the value pairs.
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="expression">The expression.</param>
            <returns>List&lt;KeyValuePair&lt;K, V&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteResultsFilterExtensions.Lookup``2(System.Data.IDbCommand,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter})">
            <summary>
            Lookups the specified SQL.
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="sql">The SQL.</param>
            <param name="sqlParams">The SQL parameters.</param>
            <returns>Dictionary&lt;K, List&lt;V&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteResultsFilterExtensions.Lookup``2(System.Data.IDbCommand,System.String)">
            <summary>
            Lookups the specified SQL.
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="sql">The SQL.</param>
            <returns>Dictionary&lt;K, List&lt;V&gt;&gt;.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.OrmLiteSchemaApi">
            <summary>
            Class OrmLiteSchemaApi.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteSchemaApi.TableExists(System.Data.IDbConnection,System.String,System.String)">
            <summary>
            Checks whether a Table Exists. E.g:
            <para>db.TableExists("Person")</para>
            </summary>
            <param name="dbConn">The database connection.</param>
            <param name="tableName">Name of the table.</param>
            <param name="schema">The schema.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteSchemaApi.TableExistsAsync(System.Data.IDbConnection,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Checks whether a Table Exists. E.g:
            <para>db.TableExistsAsync("Person")</para>
            </summary>
            <param name="dbConn">The database connection.</param>
            <param name="tableName">Name of the table.</param>
            <param name="schema">The schema.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;System.Boolean&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteSchemaApi.TableExists``1(System.Data.IDbConnection)">
            <summary>
            Checks whether a Table Exists. E.g:
            <para>db.TableExists&lt;Person&gt;()</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteSchemaApi.TableExistsAsync``1(System.Data.IDbConnection,System.Threading.CancellationToken)">
            <summary>
            Checks whether a Table Exists. E.g:
            <para>db.TableExistsAsync&lt;Person&gt;()</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;System.Boolean&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteSchemaApi.ColumnExists(System.Data.IDbConnection,System.String,System.String,System.String)">
            <summary>
            Checks whether a Table Column Exists. E.g:
            <para>db.ColumnExists("Age", "Person")</para>
            </summary>
            <param name="dbConn">The database connection.</param>
            <param name="columnName">Name of the column.</param>
            <param name="tableName">Name of the table.</param>
            <param name="schema">The schema.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteSchemaApi.ColumnExistsAsync(System.Data.IDbConnection,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Checks whether a Table Column Exists. E.g:
            <para>db.ColumnExistsAsync("Age", "Person")</para>
            </summary>
            <param name="dbConn">The database connection.</param>
            <param name="columnName">Name of the column.</param>
            <param name="tableName">Name of the table.</param>
            <param name="schema">The schema.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;System.Boolean&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteSchemaApi.ColumnExists``1(System.Data.IDbConnection,System.String)">
            <summary>
            Checks whether a Table Column Exists. E.g:
            <para>
            db.ColumnExists&lt;Person&gt;("Age")
            </para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The db Conn.</param>
            <param name="columnName">The column Name.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteSchemaApi.ColumnExists``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Checks whether a Table Column Exists. E.g:
            <para>db.ColumnExists&lt;Person&gt;(x =&gt; x.Age)</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="field">The field.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteSchemaApi.ColumnExistsAsync``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Threading.CancellationToken)">
            <summary>
            Checks whether a Table Column Exists. E.g:
            <para>db.ColumnExistsAsync&lt;Person&gt;(x =&gt; x.Age)</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="field">The field.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;System.Boolean&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteSchemaApi.ColumnDataType``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Checks if The Column allows Null Values or not. E.g:
            <para>db.ColumnIsNullable&lt;Person&gt;(x =&gt; x.Age)</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="field">The field.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteSchemaApi.ColumnIsNullable``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Checks if The Column allows Null Values or not. E.g:
            <para>db.ColumnIsNullable&lt;Person&gt;(x =&gt; x.Age)</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="field">The field.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteSchemaApi.ColumnMaxLength``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Gets the Max. Length for the Column. E.g:
            <para>db.ColumnExists&lt;Person&gt;(x =&gt; x.Age)</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="field">The field.</param>
            <returns>System.Int64.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteSchemaApi.CreateSchema``1(System.Data.IDbConnection)">
            <summary>
            Create a DB Schema from the Schema attribute on the generic type. E.g:
            <para>db.CreateSchema&lt;Person&gt;() //default</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteSchemaApi.CreateSchema(System.Data.IDbConnection,System.String)">
            <summary>
            Create a DB Schema. E.g:
            <para>db.CreateSchema("schemaName")</para>
            </summary>
            <param name="dbConn">The database connection.</param>
            <param name="schemaName">Name of the schema.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteSchemaApi.CreateTables(System.Data.IDbConnection,System.Boolean,System.Type[])">
            <summary>
            Create DB Tables from the schemas of runtime types. E.g:
            <para>db.CreateTables(typeof(Table1), typeof(Table2))</para>
            </summary>
            <param name="dbConn">The database connection.</param>
            <param name="overwrite">if set to <c>true</c> [overwrite].</param>
            <param name="tableTypes">The table types.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteSchemaApi.CreateTable(System.Data.IDbConnection,System.Boolean,System.Type)">
            <summary>
            Create DB Table from the schema of the runtime type. Use overwrite to drop existing Table. E.g:
            <para>db.CreateTable(true, typeof(Table))</para>
            </summary>
            <param name="dbConn">The database connection.</param>
            <param name="overwrite">if set to <c>true</c> [overwrite].</param>
            <param name="modelType">Type of the model.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteSchemaApi.CreateTableIfNotExists(System.Data.IDbConnection,System.Type[])">
            <summary>
            Only Create new DB Tables from the schemas of runtime types if they don't already exist. E.g:
            <para>db.CreateTableIfNotExists(typeof(Table1), typeof(Table2))</para>
            </summary>
            <param name="dbConn">The database connection.</param>
            <param name="tableTypes">The table types.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteSchemaApi.DropAndCreateTables(System.Data.IDbConnection,System.Type[])">
            <summary>
            Drop existing DB Tables and re-create them from the schemas of runtime types. E.g:
            <para>db.DropAndCreateTables(typeof(Table1), typeof(Table2))</para>
            </summary>
            <param name="dbConn">The database connection.</param>
            <param name="tableTypes">The table types.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteSchemaApi.CreateTable``1(System.Data.IDbConnection,System.Boolean)">
            <summary>
            Create a DB Table from the generic type. Use overwrite to drop the existing table or not. E.g:
            <para>db.CreateTable&lt;Person&gt;(overwrite=false) //default</para><para>db.CreateTable&lt;Person&gt;(overwrite=true)</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="overwrite">if set to <c>true</c> [overwrite].</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteSchemaApi.CreateTableIfNotExists``1(System.Data.IDbConnection)">
            <summary>
            Only create a DB Table from the generic type if it doesn't already exist. E.g:
            <para>db.CreateTableIfNotExists&lt;Person&gt;()</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteSchemaApi.CreateTableIfNotExists(System.Data.IDbConnection,System.Type)">
            <summary>
            Only create a DB Table from the runtime type if it doesn't already exist. E.g:
            <para>db.CreateTableIfNotExists(typeof(Person))</para>
            </summary>
            <param name="dbConn">The database connection.</param>
            <param name="modelType">Type of the model.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteSchemaApi.DropAndCreateTable``1(System.Data.IDbConnection)">
            <summary>
            Drop existing table if exists and re-create a DB Table from the generic type. E.g:
            <para>db.DropAndCreateTable&lt;Person&gt;()</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteSchemaApi.DropAndCreateTable(System.Data.IDbConnection,System.Type)">
            <summary>
            Drop existing table if exists and re-create a DB Table from the runtime type. E.g:
            <para>db.DropAndCreateTable(typeof(Person))</para>
            </summary>
            <param name="dbConn">The database connection.</param>
            <param name="modelType">Type of the model.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteSchemaApi.DropTables(System.Data.IDbConnection,System.Type[])">
            <summary>
            Drop any existing tables from their runtime types. E.g:
            <para>db.DropTables(typeof(Table1),typeof(Table2))</para>
            </summary>
            <param name="dbConn">The database connection.</param>
            <param name="tableTypes">The table types.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteSchemaApi.DropTable(System.Data.IDbConnection,System.String)">
            <summary>
            Drop any existing tables from the runtime type. E.g:
            <para>db.DropTable("Person")</para>
            </summary>
            <param name="dbConn">The database connection.</param>
            <param name="tableName">Name of the table.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteSchemaApi.DropTable(System.Data.IDbConnection,System.Type)">
            <summary>
            Drop any existing tables from the runtime type. E.g:
            <para>db.DropTable(typeof(Person))</para>
            </summary>
            <param name="dbConn">The database connection.</param>
            <param name="modelType">Type of the model.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteSchemaApi.DropTable``1(System.Data.IDbConnection)">
            <summary>
            Drop any existing tables from the generic type. E.g:
            <para>db.DropTable&lt;Person&gt;()</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteSchemaApi.GetSchemas(System.Data.IDbConnection)">
            <summary>
            Get a list of available user schemas for this connection
            </summary>
            <param name="dbConn">The database connection.</param>
            <returns>List&lt;System.String&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteSchemaApi.GetSchemaTables(System.Data.IDbConnection)">
            <summary>
            Get available user Schemas and their tables for this connection
            </summary>
            <param name="dbConn">The database connection.</param>
            <returns>Dictionary&lt;System.String, List&lt;System.String&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteSchemaApi.Migrate``1(System.Data.IDbConnection)">
            <summary>
            Alter tables by adding properties for missing columns and removing properties annotated with [RemoveColumn]
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteSchemaApi.Revert``1(System.Data.IDbConnection)">
            <summary>
            Apply schema changes by Migrate in reverse to revert changes
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
        </member>
        <member name="T:ServiceStack.OrmLite.OnFkOption">
            <summary>
            Enum OnFkOption
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.OnFkOption.Cascade">
            <summary>
            The cascade
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.OnFkOption.SetNull">
            <summary>
            The set null
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.OnFkOption.NoAction">
            <summary>
            The no action
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.OnFkOption.SetDefault">
            <summary>
            The set default
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.OnFkOption.Restrict">
            <summary>
            The restrict
            </summary>
        </member>
        <member name="T:ServiceStack.OrmLite.OrmLiteSchemaModifyApi">
            <summary>
            Class OrmLiteSchemaModifyApi.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteSchemaModifyApi.InitUserFieldDefinition(System.Type,ServiceStack.OrmLite.FieldDefinition)">
            <summary>
            Initializes the user field definition.
            </summary>
            <param name="modelType">Type of the model.</param>
            <param name="fieldDef">The field definition.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteSchemaModifyApi.AlterTable``1(System.Data.IDbConnection,System.String)">
            <summary>
            Alters the table.
            </summary>
            <typeparam name="T">The Table Model</typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="command">The command.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteSchemaModifyApi.AlterTable(System.Data.IDbConnection,System.Type,System.String)">
            <summary>
            Alters the table.
            </summary>
            <param name="dbConn">The database connection.</param>
            <param name="modelType">Type of the model.</param>
            <param name="command">The command.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteSchemaModifyApi.AddColumnWithCommand``1(System.Data.IDbConnection,System.String)">
            <summary>
            Adds the column with command.
            </summary>
            <typeparam name="T">The Table Model</typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="command">The command.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteSchemaModifyApi.AddColumn``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Adds the column.
            </summary>
            <typeparam name="T">The Table Model</typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="field">The field.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteSchemaModifyApi.AddColumn(System.Data.IDbConnection,System.Type,ServiceStack.OrmLite.FieldDefinition)">
            <summary>
            Adds the column.
            </summary>
            <param name="dbConn">The database connection.</param>
            <param name="modelType">Type of the model.</param>
            <param name="fieldDef">The field definition.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteSchemaModifyApi.AlterColumn``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String)">
            <summary>
            Alters the column.
            </summary>
            <typeparam name="T">The Table Model</typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="field">The field.</param>
            <param name="oldTablePrefix">The old table prefix.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteSchemaModifyApi.AddColumn(System.Data.IDbConnection,System.String,ServiceStack.OrmLite.FieldDefinition)">
            <summary>
            Adds the column.
            </summary>
            <param name="dbConn">The database connection.</param>
            <param name="table">The table.</param>
            <param name="fieldDef">The field definition.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteSchemaModifyApi.AddColumn(System.Data.IDbConnection,System.String,System.String,ServiceStack.OrmLite.FieldDefinition)">
            <summary>
            Adds the column.
            </summary>
            <param name="dbConn">The database connection.</param>
            <param name="schema">The schema.</param>
            <param name="table">The table.</param>
            <param name="fieldDef">The field definition.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteSchemaModifyApi.AlterColumn``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Alters the column.
            </summary>
            <typeparam name="T">The Table Model</typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="field">The field.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteSchemaModifyApi.AlterColumn(System.Data.IDbConnection,System.Type,ServiceStack.OrmLite.FieldDefinition)">
            <summary>
            Alters the column.
            </summary>
            <param name="dbConn">The database connection.</param>
            <param name="modelType">Type of the model.</param>
            <param name="fieldDef">The field definition.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteSchemaModifyApi.AlterColumn(System.Data.IDbConnection,System.String,ServiceStack.OrmLite.FieldDefinition)">
            <summary>
            Alters the column.
            </summary>
            <param name="dbConn">The database connection.</param>
            <param name="table">The table.</param>
            <param name="fieldDef">The field definition.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteSchemaModifyApi.AlterColumn(System.Data.IDbConnection,System.String,System.String,ServiceStack.OrmLite.FieldDefinition)">
            <summary>
            Alters the column.
            </summary>
            <param name="dbConn">The database connection.</param>
            <param name="schema">The schema.</param>
            <param name="table">The table.</param>
            <param name="fieldDef">The field definition.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteSchemaModifyApi.ChangeColumnName``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String)">
            <summary>
            Changes the name of the column.
            </summary>
            <typeparam name="T">The Table Model</typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="field">The field.</param>
            <param name="oldColumn">Old name of the column.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteSchemaModifyApi.ChangeColumnName(System.Data.IDbConnection,System.Type,ServiceStack.OrmLite.FieldDefinition,System.String)">
            <summary>
            Changes the name of the column.
            </summary>
            <param name="dbConn">The database connection.</param>
            <param name="modelType">Type of the model.</param>
            <param name="fieldDef">The field definition.</param>
            <param name="oldColumn">Old name of the column.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteSchemaModifyApi.RenameColumn``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String)">
            <summary>
            Renames the column.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="field">The field.</param>
            <param name="oldColumn">The old column.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteSchemaModifyApi.RenameColumn``1(System.Data.IDbConnection,System.String,System.String)">
            <summary>
            Renames the column.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="oldColumn">The old column.</param>
            <param name="newColumn">The new column.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteSchemaModifyApi.RenameColumn(System.Data.IDbConnection,System.Type,System.String,System.String)">
            <summary>
            Renames the column.
            </summary>
            <param name="dbConn">The database connection.</param>
            <param name="modelType">Type of the model.</param>
            <param name="oldColumn">The old column.</param>
            <param name="newColumn">The new column.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteSchemaModifyApi.RenameColumn(System.Data.IDbConnection,System.String,System.String,System.String)">
            <summary>
            Renames the column.
            </summary>
            <param name="dbConn">The database connection.</param>
            <param name="table">The table.</param>
            <param name="oldColumn">The old column.</param>
            <param name="newColumn">The new column.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteSchemaModifyApi.RenameColumn(System.Data.IDbConnection,System.String,System.String,System.String,System.String)">
            <summary>
            Renames the column.
            </summary>
            <param name="dbConn">The database connection.</param>
            <param name="schema">The schema.</param>
            <param name="table">The table.</param>
            <param name="oldColumn">The old column.</param>
            <param name="newColumn">The new column.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteSchemaModifyApi.DropColumn``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Drops the column.
            </summary>
            <typeparam name="T">The Table Model</typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="field">The field.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteSchemaModifyApi.DropColumn``1(System.Data.IDbConnection,System.String)">
            <summary>
            Drops the column.
            </summary>
            <typeparam name="T">The Table Model</typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="column">Name of the column.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteSchemaModifyApi.DropColumn(System.Data.IDbConnection,System.Type,System.String)">
            <summary>
            Drops the column.
            </summary>
            <param name="dbConn">The database connection.</param>
            <param name="modelType">Type of the model.</param>
            <param name="column">The column.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteSchemaModifyApi.DropColumn(System.Data.IDbConnection,System.String,System.String)">
            <summary>
            Drops the column.
            </summary>
            <param name="dbConn">The database connection.</param>
            <param name="table">The table.</param>
            <param name="column">The column.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteSchemaModifyApi.DropColumn(System.Data.IDbConnection,System.String,System.String,System.String)">
            <summary>
            Drops the column.
            </summary>
            <param name="dbConn">The database connection.</param>
            <param name="schema">The schema.</param>
            <param name="table">The table.</param>
            <param name="column">The column.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteSchemaModifyApi.DropConstraint(System.Data.IDbConnection,System.Type,System.String)">
            <summary>
            Drops the constraint.
            </summary>
            <param name="dbConn">The database connection.</param>
            <param name="modelType">Type of the model.</param>
            <param name="constraint">The constraint.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteSchemaModifyApi.AddForeignKey``2(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``1,System.Object}},ServiceStack.OrmLite.OnFkOption,ServiceStack.OrmLite.OnFkOption,System.String)">
            <summary>
            Adds the foreign key.
            </summary>
            <typeparam name="T">The Table Model</typeparam>
            <typeparam name="TForeign">The type of the t foreign.</typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="field">The field.</param>
            <param name="foreignField">The foreign field.</param>
            <param name="onUpdate">The on update.</param>
            <param name="onDelete">The on delete.</param>
            <param name="foreignKeyName">Name of the foreign key.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteSchemaModifyApi.AddCompositePrimaryKey``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Drops the primary key.
            </summary>
            <typeparam name="T">The Table Model</typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="fieldA">The field A.</param>
            <param name="fieldB">The field B.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteSchemaModifyApi.GetPrimaryKey``1(System.Data.IDbConnection)">
            <summary>
            Gets the Primary Key name
            </summary>
            <typeparam name="T">The Model</typeparam>
            <param name="dbConn">The database connection.</param>
            <returns>Returns the key name</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteSchemaModifyApi.DropPrimaryKey``1(System.Data.IDbConnection,System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Drops the primary key.
            </summary>
            <typeparam name="T">The Table Model</typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="name">The name.</param>
            <param name="fieldA">The field A.</param>
            <param name="fieldB">The field B.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteSchemaModifyApi.DropForeignKeys``1(System.Data.IDbConnection)">
            <summary>
            Drops the foreign key.
            </summary>
            <typeparam name="T">The Table Model</typeparam>
            <param name="dbConn">The database connection.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteSchemaModifyApi.DropForeignKey``1(System.Data.IDbConnection,System.String)">
            <summary>
            Drops the foreign key.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="foreignKeyName">Name of the foreign key.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteSchemaModifyApi.GetConstraint``1(System.Data.IDbConnection,System.String)">
            <summary>
            Drops the constraint.
            </summary>
            <typeparam name="T">The Table Model</typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="field">The field.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteSchemaModifyApi.DropConstraint``1(System.Data.IDbConnection,System.String)">
            <summary>
            Drops the constraint.
            </summary>
            <typeparam name="T">The Table Model</typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteSchemaModifyApi.CreateIndex``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String,System.Boolean)">
            <summary>
            Creates the index.
            </summary>
            <typeparam name="T">The Table Model</typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="field">The field.</param>
            <param name="indexName">Name of the index.</param>
            <param name="unique">if set to <c>true</c> [unique].</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteSchemaModifyApi.DropIndex``1(System.Data.IDbConnection,System.String)">
            <summary>
            Drop Index of table
            </summary>
            <typeparam name="T">The Table Model</typeparam>
            <param name="dbConn">The db conn.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteSchemaModifyApi.CreateViewIndex``1(System.Data.IDbConnection,System.String,System.String)">
            <summary>
            Creates the index of the view.
            </summary>
            <typeparam name="T">The Table Model</typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="name">The name.</param>
            <param name="selectSql">The select SQL.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteSchemaModifyApi.DropViewIndex``1(System.Data.IDbConnection,System.String)">
            <summary>
            Drops the index of the view.
            </summary>
            <typeparam name="T">The Table Model</typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteSchemaModifyApi.CreateView``1(System.Data.IDbConnection,System.Text.StringBuilder)">
            <summary>
            Creates the view.
            </summary>
            <typeparam name="T">The Table Model</typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="selectSql">The select SQL.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteSchemaModifyApi.DropView``1(System.Data.IDbConnection)">
            <summary>
            Drops the view.
            </summary>
            <typeparam name="T">The Table Model</typeparam>
            <param name="dbConn">The database connection.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteSchemaModifyApi.DropFunction(System.Data.IDbConnection,System.String)">
            <summary>
            Drops the function.
            </summary>
            <param name="dbConn">The database connection.</param>
            <param name="functionName">Name of the function.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteSchemaModifyApi.Migrate(System.Data.IDbConnection,System.Type)">
            <summary>
            Alter tables by adding properties for missing columns and removing properties annotated with [RemoveColumn]
            </summary>
            <param name="dbConn">The database connection.</param>
            <param name="modelType">Type of the model.</param>
            <exception cref="T:System.Exception">$"Only 1 AlterColumnAttribute allowed on {modelType.Name}.{fieldDef.Name}</exception>
            <exception cref="T:System.Exception">$"Unsupported AlterColumnAttribute '{attr.GetType().Name}' on {modelType.Name}.{fieldDef.Name}</exception>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteSchemaModifyApi.Revert(System.Data.IDbConnection,System.Type)">
            <summary>
            Apply schema changes by Migrate in reverse to revert changes
            </summary>
            <param name="dbConn">The database connection.</param>
            <param name="modelType">Type of the model.</param>
            <exception cref="T:System.Exception">$"Only 1 AlterColumnAttribute allowed on {modelType.Name}.{fieldDef.Name}</exception>
            <exception cref="T:System.Exception">$"Unsupported AlterColumnAttribute '{attr.GetType().Name}' on {modelType.Name}.{fieldDef.Name}</exception>
        </member>
        <member name="T:ServiceStack.OrmLite.OrmLiteSPStatement">
            <summary>
            Class OrmLiteSPStatement.
            Implements the <see cref="T:System.IDisposable" />
            </summary>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="F:ServiceStack.OrmLite.OrmLiteSPStatement.db">
            <summary>
            The database
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.OrmLiteSPStatement.dbCmd">
            <summary>
            The database command
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.OrmLiteSPStatement.dialectProvider">
            <summary>
            The dialect provider
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteSPStatement.TryGetParameterValue(System.String,System.Object@)">
            <summary>
            Tries the get parameter value.
            </summary>
            <param name="parameterName">Name of the parameter.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteSPStatement.ReturnValue">
            <summary>
            Gets the return value.
            </summary>
            <value>The return value.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteSPStatement.#ctor(System.Data.IDbCommand)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.OrmLite.OrmLiteSPStatement" /> class.
            </summary>
            <param name="dbCmd">The database command.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteSPStatement.#ctor(System.Data.IDbConnection,System.Data.IDbCommand)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.OrmLite.OrmLiteSPStatement" /> class.
            </summary>
            <param name="db">The database.</param>
            <param name="dbCmd">The database command.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteSPStatement.ConvertToList``1">
            <summary>
            Converts to list.
            </summary>
            <typeparam name="T"></typeparam>
            <returns>List&lt;T&gt;.</returns>
            <exception cref="P:ServiceStack.OrmLite.Base.Text.DiagnosticEvent.Exception">Type " + typeof(T).Name + " is a primitive type. Use ConvertScalarToList function.</exception>
            <exception cref="T:System.Exception">Type " + typeof(T).Name + " is a primitive type. Use ConvertScalarToList function.</exception>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteSPStatement.ConvertToScalarList``1">
            <summary>
            Converts to scalar list.
            </summary>
            <typeparam name="T"></typeparam>
            <returns>List&lt;T&gt;.</returns>
            <exception cref="P:ServiceStack.OrmLite.Base.Text.DiagnosticEvent.Exception">Type " + typeof(T).Name + " is a non primitive type. Use ConvertToList function.</exception>
            <exception cref="T:System.Exception">Type " + typeof(T).Name + " is a non primitive type. Use ConvertToList function.</exception>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteSPStatement.ConvertTo``1">
            <summary>
            Converts to.
            </summary>
            <typeparam name="T"></typeparam>
            <returns>T.</returns>
            <exception cref="P:ServiceStack.OrmLite.Base.Text.DiagnosticEvent.Exception">Type " + typeof(T).Name + " is a primitive type. Use ConvertScalarTo function.</exception>
            <exception cref="T:System.Exception">Type " + typeof(T).Name + " is a primitive type. Use ConvertScalarTo function.</exception>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteSPStatement.ConvertToScalar``1">
            <summary>
            Converts to scalar.
            </summary>
            <typeparam name="T"></typeparam>
            <returns>T.</returns>
            <exception cref="P:ServiceStack.OrmLite.Base.Text.DiagnosticEvent.Exception">Type " + typeof(T).Name + " is a non primitive type. Use ConvertTo function.</exception>
            <exception cref="T:System.Exception">Type " + typeof(T).Name + " is a non primitive type. Use ConvertTo function.</exception>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteSPStatement.ConvertFirstColumnToList``1">
            <summary>
            Converts the first column to list.
            </summary>
            <typeparam name="T"></typeparam>
            <returns>List&lt;T&gt;.</returns>
            <exception cref="P:ServiceStack.OrmLite.Base.Text.DiagnosticEvent.Exception">Type " + typeof(T).Name + " is a non primitive type. Only primitive type can be used.</exception>
            <exception cref="T:System.Exception">Type " + typeof(T).Name + " is a non primitive type. Only primitive type can be used.</exception>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteSPStatement.ConvertFirstColumnToListDistinct``1">
            <summary>
            Converts the first column to list distinct.
            </summary>
            <typeparam name="T"></typeparam>
            <returns>HashSet&lt;T&gt;.</returns>
            <exception cref="P:ServiceStack.OrmLite.Base.Text.DiagnosticEvent.Exception">Type " + typeof(T).Name + " is a non primitive type. Only primitive type can be used.</exception>
            <exception cref="T:System.Exception">Type " + typeof(T).Name + " is a non primitive type. Only primitive type can be used.</exception>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteSPStatement.ExecuteNonQuery">
            <summary>
            Executes the non query.
            </summary>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteSPStatement.HasResult">
            <summary>
            Determines whether this instance has result.
            </summary>
            <returns><c>true</c> if this instance has result; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteSPStatement.Dispose">
            <summary>
            Disposes this instance.
            </summary>
        </member>
        <member name="T:ServiceStack.OrmLite.OrmLiteTransaction">
            <summary>
            Class OrmLiteTransaction.
            Implements the <see cref="T:System.Data.IDbTransaction" />
            Implements the <see cref="T:ServiceStack.Data.IHasDbTransaction" />
            </summary>
            <seealso cref="T:System.Data.IDbTransaction" />
            <seealso cref="T:ServiceStack.Data.IHasDbTransaction" />
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteTransaction.Transaction">
            <summary>
            Gets or sets the transaction.
            </summary>
            <value>The transaction.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteTransaction.DbTransaction">
            <summary>
            Gets the database transaction.
            </summary>
            <value>The database transaction.</value>
        </member>
        <member name="F:ServiceStack.OrmLite.OrmLiteTransaction.db">
            <summary>
            The database connection
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteTransaction.Db">
            <summary>
            Gets the database connection.
            </summary>
            <value>The database connection.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteTransaction.Create(System.Data.IDbConnection,System.Nullable{System.Data.IsolationLevel})">
            <summary>
            Creates the specified database.
            </summary>
            <param name="db">The database.</param>
            <param name="isolationLevel">The isolation level.</param>
            <returns>OrmLiteTransaction.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteTransaction.#ctor(System.Data.IDbConnection,System.Data.IDbTransaction)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.OrmLite.OrmLiteTransaction" /> class.
            </summary>
            <param name="db">The database.</param>
            <param name="transaction">The transaction.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteTransaction.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteTransaction.Commit">
            <summary>
            Commits the database transaction.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteTransaction.Rollback">
            <summary>
            Rolls back a transaction from a pending state.
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteTransaction.Connection">
            <summary>
            Specifies the Connection object to associate with the transaction.
            </summary>
            <value>The connection.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteTransaction.IsolationLevel">
            <summary>
            Gets the isolation level.
            </summary>
            <value>The isolation level.</value>
        </member>
        <member name="T:ServiceStack.OrmLite.EOT">
            <summary>
            Class EOT.
            </summary>
        </member>
        <member name="T:ServiceStack.OrmLite.OrmLiteUtils">
            <summary>
            Class OrmLiteUtils.
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.OrmLiteUtils.maxCachedIndexFields">
            <summary>
            The maximum cached index fields
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.OrmLiteUtils.indexFieldsCache">
            <summary>
            The index fields cache
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.OrmLiteUtils.Log">
            <summary>
            The log
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteUtils.HandleException(System.Exception,System.String,System.Object[])">
            <summary>
            Handles the exception.
            </summary>
            <param name="ex">The ex.</param>
            <param name="message">The message.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteUtils.DebugCommand(ServiceStack.Logging.ILog,System.Data.IDbCommand)">
            <summary>
            Debugs the command.
            </summary>
            <param name="log">The log.</param>
            <param name="cmd">The command.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteUtils.GetDebugString(System.Data.IDbCommand)">
            <summary>
            Gets the debug string.
            </summary>
            <param name="cmd">The command.</param>
            <returns>string.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteUtils.CreateInstance``1">
            <summary>
            Creates the instance.
            </summary>
            <typeparam name="T"></typeparam>
            <returns>T.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteUtils.IsTuple(System.Type)">
            <summary>
            Determines whether the specified type is tuple.
            </summary>
            <param name="type">The type.</param>
            <returns>bool.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteUtils.IsValueTuple(System.Type)">
            <summary>
            Determines whether [is value tuple] [the specified type].
            </summary>
            <param name="type">The type.</param>
            <returns>bool.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteUtils.IsScalar``1">
            <summary>
            Determines whether this instance is scalar.
            </summary>
            <typeparam name="T"></typeparam>
            <returns>bool.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteUtils.ConvertTo``1(System.Data.IDataReader,ServiceStack.OrmLite.IOrmLiteDialectProvider,System.Collections.Generic.HashSet{System.String})">
            <summary>
            Converts to.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="reader">The reader.</param>
            <param name="dialectProvider">The dialect provider.</param>
            <param name="onlyFields">The only fields.</param>
            <returns>T.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteUtils.ConvertToListObjects(System.Data.IDataReader)">
            <summary>
            Converts to list objects.
            </summary>
            <param name="dataReader">The data reader.</param>
            <returns>System.Collections.Generic.List&lt;object&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteUtils.ConvertToDictionaryObjects(System.Data.IDataReader)">
            <summary>
            Converts to dictionary objects.
            </summary>
            <param name="dataReader">The data reader.</param>
            <returns>System.Collections.Generic.Dictionary&lt;string, object&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteUtils.ConvertToExpandoObject(System.Data.IDataReader)">
            <summary>
            Converts to expando object.
            </summary>
            <param name="dataReader">The data reader.</param>
            <returns>System.Collections.Generic.IDictionary&lt;string, object&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteUtils.ConvertToValueTuple``1(System.Data.IDataReader,System.Object[],ServiceStack.OrmLite.IOrmLiteDialectProvider)">
            <summary>
            Converts to value tuple.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="reader">The reader.</param>
            <param name="values">The values.</param>
            <param name="dialectProvider">The dialect provider.</param>
            <returns>T.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteUtils.ConvertToList``1(System.Data.IDataReader,ServiceStack.OrmLite.IOrmLiteDialectProvider,System.Collections.Generic.HashSet{System.String})">
            <summary>
            Converts to list.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="reader">The reader.</param>
            <param name="dialectProvider">The dialect provider.</param>
            <param name="onlyFields">The only fields.</param>
            <returns>System.Collections.Generic.List&lt;T&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteUtils.ToMultiTuple(System.Data.IDataReader,ServiceStack.OrmLite.IOrmLiteDialectProvider,System.Collections.Generic.List{System.Tuple{ServiceStack.OrmLite.FieldDefinition,System.Int32,ServiceStack.OrmLite.IOrmLiteConverter}[]},System.Type[],System.Object[])">
            <summary>
            Converts to multituple.
            </summary>
            <param name="reader">The reader.</param>
            <param name="dialectProvider">The dialect provider.</param>
            <param name="modelIndexCaches">The model index caches.</param>
            <param name="genericArgs">The generic arguments.</param>
            <param name="values">The values.</param>
            <returns>System.Collections.Generic.List&lt;object&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteUtils.GetMultiIndexCaches(System.Data.IDataReader,ServiceStack.OrmLite.IOrmLiteDialectProvider,System.Collections.Generic.HashSet{System.String},System.Type[])">
            <summary>
            Gets the multi index caches.
            </summary>
            <param name="reader">The reader.</param>
            <param name="dialectProvider">The dialect provider.</param>
            <param name="onlyFields">The only fields.</param>
            <param name="genericArgs">The generic arguments.</param>
            <returns>System.Collections.Generic.List&lt;System.Tuple&lt;ServiceStack.OrmLite.FieldDefinition, int, ServiceStack.OrmLite.IOrmLiteConverter&gt;[]&gt;.</returns>
            <exception cref="P:ServiceStack.OrmLite.Base.Text.DiagnosticEvent.Exception">'{modelType.Name}' is not a table type</exception>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteUtils.ConvertTo(System.Data.IDataReader,ServiceStack.OrmLite.IOrmLiteDialectProvider,System.Type)">
            <summary>
            Converts to.
            </summary>
            <param name="reader">The reader.</param>
            <param name="dialectProvider">The dialect provider.</param>
            <param name="type">The type.</param>
            <returns>object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteUtils.ConvertToList(System.Data.IDataReader,ServiceStack.OrmLite.IOrmLiteDialectProvider,System.Type)">
            <summary>
            Converts to list.
            </summary>
            <param name="reader">The reader.</param>
            <param name="dialectProvider">The dialect provider.</param>
            <param name="type">The type.</param>
            <returns>System.Collections.IList.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteUtils.GetColumnNames(System.Type,ServiceStack.OrmLite.IOrmLiteDialectProvider)">
            <summary>
            Gets the column names.
            </summary>
            <param name="tableType">Type of the table.</param>
            <param name="dialect">The dialect.</param>
            <returns>string.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteUtils.GetColumnNames(ServiceStack.OrmLite.ModelDefinition,ServiceStack.OrmLite.IOrmLiteDialectProvider)">
            <summary>
            Gets the column names.
            </summary>
            <param name="modelDef">The model definition.</param>
            <param name="dialect">The dialect.</param>
            <returns>string.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteUtils.ToSelectString``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Converts to selectstring.
            </summary>
            <typeparam name="TItem">The type of the t item.</typeparam>
            <param name="items">The items.</param>
            <returns>string.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteUtils.SetIdsInSqlParams(System.Data.IDbCommand,System.Collections.IEnumerable)">
            <summary>
            Sets the ids in SQL parameters.
            </summary>
            <param name="dbCmd">The database command.</param>
            <param name="idValues">The identifier values.</param>
            <returns>string.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteUtils.SqlFmt(System.String,System.Object[])">
            <summary>
            SQLs the FMT.
            </summary>
            <param name="sqlText">The SQL text.</param>
            <param name="sqlParams">The SQL parameters.</param>
            <returns>string.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteUtils.SqlFmt(System.String,ServiceStack.OrmLite.IOrmLiteDialectProvider,System.Object[])">
            <summary>
            SQLs the FMT.
            </summary>
            <param name="sqlText">The SQL text.</param>
            <param name="dialect">The dialect.</param>
            <param name="sqlParams">The SQL parameters.</param>
            <returns>string.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteUtils.SqlColumn(System.String,ServiceStack.OrmLite.IOrmLiteDialectProvider)">
            <summary>
            SQLs the column.
            </summary>
            <param name="columnName">Name of the column.</param>
            <param name="dialect">The dialect.</param>
            <returns>string.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteUtils.SqlColumnRaw(System.String,ServiceStack.OrmLite.IOrmLiteDialectProvider)">
            <summary>
            SQLs the column raw.
            </summary>
            <param name="columnName">Name of the column.</param>
            <param name="dialect">The dialect.</param>
            <returns>string.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteUtils.SqlTable(System.String,ServiceStack.OrmLite.IOrmLiteDialectProvider)">
            <summary>
            SQLs the table.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="dialect">The dialect.</param>
            <returns>string.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteUtils.SqlTableRaw(System.String,ServiceStack.OrmLite.IOrmLiteDialectProvider)">
            <summary>
            SQLs the table raw.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="dialect">The dialect.</param>
            <returns>string.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteUtils.SqlValue(System.Object)">
            <summary>
            SQLs the value.
            </summary>
            <param name="value">The value.</param>
            <returns>string.</returns>
        </member>
        <member name="F:ServiceStack.OrmLite.OrmLiteUtils.VerifyFragmentRegEx">
            <summary>
            The verify fragment reg ex
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.OrmLiteUtils.VerifySqlRegEx">
            <summary>
            The verify SQL reg ex
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteUtils.SqlVerifyFragmentFn">
            <summary>
            Gets or sets the SQL verify fragment function.
            </summary>
            <value>The SQL verify fragment function.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteUtils.isUnsafeSql(System.String,System.Text.RegularExpressions.Regex)">
            <summary>
            Determines whether [is unsafe SQL] [the specified SQL].
            </summary>
            <param name="sql">The SQL.</param>
            <param name="verifySql">The verify SQL.</param>
            <returns>bool.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteUtils.SqlVerifyFragment(System.String)">
            <summary>
            SQLs the verify fragment.
            </summary>
            <param name="sqlFragment">The SQL fragment.</param>
            <returns>string.</returns>
            <exception cref="T:System.ArgumentException">Potential illegal fragment detected: " + sqlFragment</exception>
        </member>
        <member name="F:ServiceStack.OrmLite.OrmLiteUtils.IllegalSqlFragmentTokens">
            <summary>
            The illegal SQL fragment tokens
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteUtils.SqlVerifyFragment(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            SQLs the verify fragment.
            </summary>
            <param name="sqlFragment">The SQL fragment.</param>
            <param name="illegalFragments">The illegal fragments.</param>
            <returns>string.</returns>
            <exception cref="T:System.ArgumentException">Potential illegal fragment detected: " + sqlFragment</exception>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteUtils.SqlParam(System.String)">
            <summary>
            SQLs the parameter.
            </summary>
            <param name="paramValue">The parameter value.</param>
            <returns>string.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteUtils.StripQuotedStrings(System.String,System.Char)">
            <summary>
            Strips the quoted strings.
            </summary>
            <param name="text">The text.</param>
            <param name="quote">The quote.</param>
            <returns>string.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteUtils.SqlJoin``1(System.Collections.Generic.List{``0},ServiceStack.OrmLite.IOrmLiteDialectProvider)">
            <summary>
            SQLs the join.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="values">The values.</param>
            <param name="dialect">The dialect.</param>
            <returns>string.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteUtils.SqlJoin(System.Collections.IEnumerable,ServiceStack.OrmLite.IOrmLiteDialectProvider)">
            <summary>
            SQLs the join.
            </summary>
            <param name="values">The values.</param>
            <param name="dialect">The dialect.</param>
            <returns>string.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteUtils.SqlInValues``1(``0[],ServiceStack.OrmLite.IOrmLiteDialectProvider)">
            <summary>
            SQLs the in values.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="values">The values.</param>
            <param name="dialect">The dialect.</param>
            <returns>ServiceStack.OrmLite.SqlInValues.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteUtils.SqlInParams``1(``0[],ServiceStack.OrmLite.IOrmLiteDialectProvider)">
            <summary>
            SQLs the in parameters.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="values">The values.</param>
            <param name="dialect">The dialect.</param>
            <returns>string.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteUtils.GetFieldNames(System.Data.IDataReader)">
            <summary>
            Gets the field names.
            </summary>
            <param name="reader">The reader.</param>
            <returns>System.String[].</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteUtils.GetIndexFieldsCache(System.Data.IDataReader,ServiceStack.OrmLite.ModelDefinition,ServiceStack.OrmLite.IOrmLiteDialectProvider,System.Collections.Generic.HashSet{System.String},System.Int32,System.Nullable{System.Int32})">
            <summary>
            Gets the index fields cache.
            </summary>
            <param name="reader">The reader.</param>
            <param name="modelDefinition">The model definition.</param>
            <param name="dialect">The dialect.</param>
            <param name="onlyFields">The only fields.</param>
            <param name="startPos">The start position.</param>
            <param name="endPos">The end position.</param>
            <returns>System.Tuple&lt;ServiceStack.OrmLite.FieldDefinition, int, ServiceStack.OrmLite.IOrmLiteConverter&gt;[].</returns>
        </member>
        <member name="F:ServiceStack.OrmLite.OrmLiteUtils.NotFound">
            <summary>
            The not found
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteUtils.FindColumnIndex(ServiceStack.OrmLite.IOrmLiteDialectProvider,ServiceStack.OrmLite.FieldDefinition,System.Collections.Generic.Dictionary{System.String,System.Int32})">
            <summary>
            Finds the index of the column.
            </summary>
            <param name="dialectProvider">The dialect provider.</param>
            <param name="fieldDef">The field definition.</param>
            <param name="dbFieldMap">The database field map.</param>
            <returns>int.</returns>
        </member>
        <member name="F:ServiceStack.OrmLite.OrmLiteUtils.AllowedPropertyCharsRegex">
            <summary>
            The allowed property chars regex
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteUtils.TryGuessColumnIndex(System.String,System.Collections.Generic.Dictionary{System.String,System.Int32})">
            <summary>
            Tries the index of the guess column.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="dbFieldMap">The database field map.</param>
            <returns>int.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteUtils.IsRefType(System.Type)">
            <summary>
            Determines whether [is reference type] [the specified field type].
            </summary>
            <param name="fieldType">Type of the field.</param>
            <returns>bool.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteUtils.StripTablePrefixes(System.String)">
            <summary>
            Strips the table prefixes.
            </summary>
            <param name="selectExpression">The select expression.</param>
            <returns>string.</returns>
        </member>
        <member name="F:ServiceStack.OrmLite.OrmLiteUtils.QuotedChars">
            <summary>
            The quoted chars
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteUtils.AliasOrColumn(System.String)">
            <summary>
            Aliases the or column.
            </summary>
            <param name="quotedExpr">The quoted expr.</param>
            <returns>string.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteUtils.StripDbQuotes(System.String)">
            <summary>
            Strips the database quotes.
            </summary>
            <param name="quotedExpr">The quoted expr.</param>
            <returns>string.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteUtils.PrintSql">
            <summary>
            Prints the SQL.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteUtils.UnPrintSql">
            <summary>
            Uns the print SQL.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteUtils.CaptureSql">
            <summary>
            Captures the SQL.
            </summary>
            <returns>System.Text.StringBuilder.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteUtils.CaptureSql(System.Text.StringBuilder)">
            <summary>
            Captures the SQL.
            </summary>
            <param name="sb">The sb.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteUtils.UnCaptureSql">
            <summary>
            Uns the capture SQL.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteUtils.UnCaptureSqlAndFree(System.Text.StringBuilder)">
            <summary>
            Uns the capture SQL and free.
            </summary>
            <param name="sb">The sb.</param>
            <returns>string.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteUtils.GetModelDefinition(System.Type)">
            <summary>
            Gets the model definition.
            </summary>
            <param name="modelType">Type of the model.</param>
            <returns>ServiceStack.OrmLite.ModelDefinition.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteUtils.ConvertToULong(System.Byte[])">
            <summary>
            Converts to u long.
            </summary>
            <param name="bytes">The bytes.</param>
            <returns>ulong.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteUtils.Merge``2(``0,System.Collections.Generic.List{``1})">
            <summary>
            Merges the specified parent.
            </summary>
            <typeparam name="Parent">The type of the parent.</typeparam>
            <typeparam name="Child">The type of the child.</typeparam>
            <param name="parent">The parent.</param>
            <param name="children">The children.</param>
            <returns>System.Collections.Generic.List&lt;Parent&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteUtils.Merge``2(System.Collections.Generic.List{``0},System.Collections.Generic.List{``1})">
            <summary>
            Merges the specified parents.
            </summary>
            <typeparam name="Parent">The type of the parent.</typeparam>
            <typeparam name="Child">The type of the child.</typeparam>
            <param name="parents">The parents.</param>
            <param name="children">The children.</param>
            <returns>System.Collections.Generic.List&lt;Parent&gt;.</returns>
            <exception cref="P:ServiceStack.OrmLite.Base.Text.DiagnosticEvent.Exception">Could not find Child Reference for '{typeof(Child).Name}' on Parent '{typeof(Parent).Name}'</exception>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteUtils.SetListChildResults``1(System.Collections.Generic.List{``0},ServiceStack.OrmLite.ModelDefinition,ServiceStack.OrmLite.FieldDefinition,System.Type,System.Collections.IList,ServiceStack.OrmLite.FieldDefinition)">
            <summary>
            Sets the list child results.
            </summary>
            <typeparam name="Parent">The type of the parent.</typeparam>
            <param name="parents">The parents.</param>
            <param name="modelDef">The model definition.</param>
            <param name="fieldDef">The field definition.</param>
            <param name="refType">Type of the reference.</param>
            <param name="childResults">The child results.</param>
            <param name="refField">The reference field.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteUtils.SetRefSelfChildResults``1(System.Collections.Generic.List{``0},ServiceStack.OrmLite.FieldDefinition,ServiceStack.OrmLite.ModelDefinition,ServiceStack.OrmLite.FieldDefinition,System.Collections.IList)">
            <summary>
            Sets the reference self child results.
            </summary>
            <typeparam name="Parent">The type of the parent.</typeparam>
            <param name="parents">The parents.</param>
            <param name="fieldDef">The field definition.</param>
            <param name="refModelDef">The reference model definition.</param>
            <param name="refSelf">The reference self.</param>
            <param name="childResults">The child results.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteUtils.SetRefFieldChildResults``1(System.Collections.Generic.List{``0},ServiceStack.OrmLite.ModelDefinition,ServiceStack.OrmLite.FieldDefinition,ServiceStack.OrmLite.FieldDefinition,System.Collections.IList)">
            <summary>
            Sets the reference field child results.
            </summary>
            <typeparam name="Parent">The type of the parent.</typeparam>
            <param name="parents">The parents.</param>
            <param name="modelDef">The model definition.</param>
            <param name="fieldDef">The field definition.</param>
            <param name="refField">The reference field.</param>
            <param name="childResults">The child results.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteUtils.AssertNotAnonType``1">
            <summary>
            Asserts the type of the not anon.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteUtils.GetNonDefaultValueInsertFields``1(ServiceStack.OrmLite.IOrmLiteDialectProvider,System.Object)">
            <summary>
            Gets the non default value insert fields.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dialectProvider">The dialect provider.</param>
            <param name="obj">The object.</param>
            <returns>System.Collections.Generic.List&lt;string&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteUtils.ParseTokens(System.String)">
            <summary>
            Parses the tokens.
            </summary>
            <param name="expr">The expr.</param>
            <returns>System.Collections.Generic.List&lt;string&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteUtils.AllAnonFields(System.Type)">
            <summary>
            Alls the anon fields.
            </summary>
            <param name="type">The type.</param>
            <returns>string[].</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteUtils.EvalFactoryFn``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Evals the factory function.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="expr">The expr.</param>
            <returns>T.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteUtils.JoinAlias(System.String)">
            <summary>
            Joins the alias.
            </summary>
            <param name="alias">The alias.</param>
            <returns>ServiceStack.OrmLite.JoinFormatDelegate.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteUtils.QuotedLiteral(System.String)">
            <summary>
            RDBMS Quoted string 'literal'
            </summary>
            <param name="text">The text.</param>
            <returns>string.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteUtils.UnquotedColumnName(System.String)">
            <summary>
            Unquoteds the name of the column.
            </summary>
            <param name="columnExpr">The column expr.</param>
            <returns>string.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteUtils.OrderByFields(ServiceStack.OrmLite.IOrmLiteDialectProvider,System.String)">
            <summary>
            Orders the by fields.
            </summary>
            <param name="dialect">The dialect.</param>
            <param name="orderBy">The order by.</param>
            <returns>string.</returns>
        </member>
        <member name="F:ServiceStack.OrmLite.OrmLiteUtils.RegexPassword">
            <summary>
            The regex password
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteUtils.MaskPassword(System.String)">
            <summary>
            Masks the password.
            </summary>
            <param name="connectionString">The connection string.</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.OrmLiteVariables">
            <summary>
            Class OrmLiteVariables.
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.OrmLiteVariables.SystemUtc">
            <summary>
            The system UTC
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.OrmLiteVariables.MaxText">
            <summary>
            The maximum text
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.OrmLiteVariables.MaxTextUnicode">
            <summary>
            The maximum text unicode
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.OrmLiteVariables.True">
            <summary>
            The true
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.OrmLiteVariables.False">
            <summary>
            The false
            </summary>
        </member>
        <member name="T:ServiceStack.OrmLite.Messages">
            <summary>
            Class Messages.
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Messages.LegacyApi">
            <summary>
            The legacy API
            </summary>
        </member>
        <member name="T:ServiceStack.OrmLite.OrmLiteWriteApi">
            <summary>
            Class OrmLiteWriteApi.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApi.GetLastSql(System.Data.IDbConnection)">
            <summary>
            Get the last SQL statement that was executed.
            </summary>
            <param name="dbConn">The database connection.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApi.GetMergedParamsLastSql(System.Data.IDbConnection)">
            <summary>
            Get the last SQL statement that was executed (include parameters).
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApi.GetLastSqlAndParams(System.Data.IDbCommand)">
            <summary>
            Gets the last SQL and parameters.
            </summary>
            <param name="dbCmd">The database command.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApi.ExecuteSql(System.Data.IDbConnection,System.String)">
            <summary>
            Execute any arbitrary raw SQL.
            </summary>
            <param name="dbConn">The database connection.</param>
            <param name="sql">The SQL.</param>
            <returns>number of rows affected</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApi.ExecuteSql(System.Data.IDbConnection,System.String,System.Object)">
            <summary>
            Execute any arbitrary raw SQL with db params.
            </summary>
            <param name="dbConn">The database connection.</param>
            <param name="sql">The SQL.</param>
            <param name="dbParams">The database parameters.</param>
            <returns>number of rows affected</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApi.ExecuteSql(System.Data.IDbConnection,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Execute any arbitrary raw SQL with db params.
            </summary>
            <param name="dbConn">The database connection.</param>
            <param name="sql">The SQL.</param>
            <param name="dbParams">The database parameters.</param>
            <returns>number of rows affected</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApi.Insert``1(System.Data.IDbConnection,``0,System.Boolean,System.Boolean)">
            <summary>
            Insert 1 POCO, use selectIdentity to retrieve the last insert AutoIncrement id (if any). E.g:
            <para>var id = db.Insert(new Person { Id = 1, FirstName = "Jimi }, selectIdentity:true)</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="obj">The object.</param>
            <param name="selectIdentity">if set to <c>true</c> [select identity].</param>
            <param name="enableIdentityInsert">Enable Identity Insert</param>
            <returns>System.Int64.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApi.Insert``1(System.Data.IDbConnection,``0,System.Action{System.Data.IDbCommand},System.Boolean)">
            <summary>
            Insert 1 POCO and modify populated IDbCommand with a commandFilter. E.g:
            <para>var id = db.Insert(new Person { Id = 1, FirstName = "Jimi }, dbCmd =&gt; applyFilter(dbCmd))</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="obj">The object.</param>
            <param name="commandFilter">The command filter.</param>
            <param name="selectIdentity">if set to <c>true</c> [select identity].</param>
            <returns>System.Int64.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApi.Insert``1(System.Data.IDbConnection,System.Collections.Generic.Dictionary{System.String,System.Object},System.Boolean)">
            <summary>
            Insert 1 POCO, use selectIdentity to retrieve the last insert AutoIncrement id (if any). E.g:
            <para>var id = db.Insert(new Dictionary&lt;string,object&gt; { ["Id"] = 1, ["FirstName"] = "Jimi }, selectIdentity:true)</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="obj">The object.</param>
            <param name="selectIdentity">if set to <c>true</c> [select identity].</param>
            <returns>System.Int64.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApi.Insert``1(System.Data.IDbConnection,System.Action{System.Data.IDbCommand},System.Collections.Generic.Dictionary{System.String,System.Object},System.Boolean)">
            <summary>
            Insert 1 POCO, use selectIdentity to retrieve the last insert AutoIncrement id (if any). E.g:
            <para>var id = db.Insert(new Dictionary&lt;string,object&gt; { ["Id"] = 1, ["FirstName"] = "Jimi }, dbCmd =&gt; applyFilter(dbCmd))</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="commandFilter">The command filter.</param>
            <param name="obj">The object.</param>
            <param name="selectIdentity">if set to <c>true</c> [select identity].</param>
            <returns>System.Int64.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApi.InsertUsingDefaults``1(System.Data.IDbConnection,``0[])">
            <summary>
            Insert 1 or more POCOs in a transaction using Table default values when defined. E.g:
            <para>db.InsertUsingDefaults(new Person { FirstName = "Tupac", LastName = "Shakur" },</para><para>                       new Person { FirstName = "Biggie", LastName = "Smalls" })</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="objs">The objs.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApi.InsertIntoSelect``1(System.Data.IDbConnection,ServiceStack.OrmLite.ISqlExpression)">
            <summary>
            Insert results from SELECT SqlExpression, use selectIdentity to retrieve the last insert AutoIncrement id (if any). E.g:
            <para>db.InsertIntoSelect&lt;Contact&gt;(db.From&lt;Person&gt;().Select(x =&gt; new { x.Id, Surname == x.LastName }))</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="query">The query.</param>
            <returns>System.Int64.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApi.InsertIntoSelect``1(System.Data.IDbConnection,ServiceStack.OrmLite.ISqlExpression,System.Action{System.Data.IDbCommand})">
            <summary>
            Insert results from SELECT SqlExpression, use selectIdentity to retrieve the last insert AutoIncrement id (if any). E.g:
            <para>db.InsertIntoSelect&lt;Contact&gt;(db.From&lt;Person&gt;().Select(x =&gt; new { x.Id, Surname == x.LastName }))</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="query">The query.</param>
            <param name="commandFilter">The command filter.</param>
            <returns>System.Int64.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApi.InsertAll``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Insert a collection of POCOs in a transaction. E.g:
            <para>db.InsertAll(new[] { new Person { Id = 9, FirstName = "Biggie", LastName = "Smalls", Age = 24 } })</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="objs">The objs.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApi.InsertAll``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{``0},System.Action{System.Data.IDbCommand})">
            <summary>
            Insert a collection of POCOs in a transaction and modify populated IDbCommand with a commandFilter. E.g:
            <para>db.InsertAll(new[] { new Person { Id = 9, FirstName = "Biggie", LastName = "Smalls", Age = 24 } },</para><para>             dbCmd =&gt; applyFilter(dbCmd))</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="objs">The objs.</param>
            <param name="commandFilter">The command filter.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApi.Insert``1(System.Data.IDbConnection,``0[])">
            <summary>
            Insert 1 or more POCOs in a transaction. E.g:
            <para>db.Insert(new Person { Id = 1, FirstName = "Tupac", LastName = "Shakur", Age = 25 },</para><para>          new Person { Id = 2, FirstName = "Biggie", LastName = "Smalls", Age = 24 })</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="objs">The objs.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApi.Insert``1(System.Data.IDbConnection,System.Action{System.Data.IDbCommand},``0[])">
            <summary>
            Insert 1 or more POCOs in a transaction and modify populated IDbCommand with a commandFilter. E.g:
            <para>db.Insert(dbCmd =&gt; applyFilter(dbCmd),</para><para>          new Person { Id = 1, FirstName = "Tupac", LastName = "Shakur", Age = 25 },</para><para>          new Person { Id = 2, FirstName = "Biggie", LastName = "Smalls", Age = 24 })</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="commandFilter">The command filter.</param>
            <param name="objs">The objs.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApi.BulkInsert``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{``0},ServiceStack.OrmLite.BulkInsertConfig)">
            <summary>
            Uses the most optimal approach to bulk insert multiple rows for each RDBMS provider 
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApi.Update``1(System.Data.IDbConnection,``0,System.Action{System.Data.IDbCommand})">
            <summary>
            Updates 1 POCO. All fields are updated except for the PrimaryKey which is used as the identity selector. E.g:
            <para>db.Update(new Person { Id = 1, FirstName = "Jimi", LastName = "Hendrix", Age = 27 })</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="obj">The object.</param>
            <param name="commandFilter">The command filter.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApi.Update``1(System.Data.IDbConnection,System.Collections.Generic.Dictionary{System.String,System.Object},System.Action{System.Data.IDbCommand})">
            <summary>
            Updates 1 POCO. All fields are updated except for the PrimaryKey which is used as the identity selector. E.g:
            <para>db.Update(new Dictionary&lt;string,object&gt; { ["Id"] = 1, ["FirstName"] = "Jimi" })</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="obj">The object.</param>
            <param name="commandFilter">The command filter.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApi.Update``1(System.Data.IDbConnection,``0[])">
            <summary>
            Updates 1 or more POCOs in a transaction. E.g:
            <para>db.Update(new Person { Id = 1, FirstName = "Tupac", LastName = "Shakur", Age = 25 },</para><para>new Person { Id = 2, FirstName = "Biggie", LastName = "Smalls", Age = 24 })</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="objs">The objs.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApi.Update``1(System.Data.IDbConnection,System.Action{System.Data.IDbCommand},``0[])">
            <summary>
            Updates the specified command filter.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="commandFilter">The command filter.</param>
            <param name="objs">The objs.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApi.UpdateAll``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{``0},System.Action{System.Data.IDbCommand})">
            <summary>
            Updates 1 or more POCOs in a transaction. E.g:
            <para>db.UpdateAll(new[] { new Person { Id = 1, FirstName = "Jimi", LastName = "Hendrix", Age = 27 } })</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="objs">The objs.</param>
            <param name="commandFilter">The command filter.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApi.Delete``1(System.Data.IDbConnection,System.Object,System.Action{System.Data.IDbCommand})">
            <summary>
            Delete rows using an anonymous type filter. E.g:
            <para>db.Delete&lt;Person&gt;(new { FirstName = "Jimi", Age = 27 })</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="anonFilter">The anon filter.</param>
            <param name="commandFilter">The command filter.</param>
            <returns>number of rows deleted</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApi.Delete``1(System.Data.IDbConnection,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Delete rows using an Object Dictionary filters. E.g:
            <para>db.Delete&lt;Person&gt;(new Dictionary&lt;string,object&gt; { ["FirstName"] = "Jimi", ["Age"] = 27 })</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="filters">The filters.</param>
            <returns>number of rows deleted</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApi.Delete``1(System.Data.IDbConnection,``0,System.Action{System.Data.IDbCommand})">
            <summary>
            Delete 1 row using all fields in the filter. E.g:
            <para>db.Delete(new Person { Id = 1, FirstName = "Jimi", LastName = "Hendrix", Age = 27 })</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="allFieldsFilter">All fields filter.</param>
            <param name="commandFilter">The command filter.</param>
            <returns>number of rows deleted</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApi.Delete``1(System.Data.IDbConnection,``0[])">
            <summary>
            Delete 1 or more rows in a transaction using all fields in the filter. E.g:
            <para>db.Delete(new Person { Id = 1, FirstName = "Jimi", LastName = "Hendrix", Age = 27 })</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="allFieldsFilters">All fields filters.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApi.DeleteNonDefaults``1(System.Data.IDbConnection,``0)">
            <summary>
            Delete 1 or more rows using only field with non-default values in the filter. E.g:
            <para>db.DeleteNonDefaults(new Person { FirstName = "Jimi", Age = 27 })</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="nonDefaultsFilter">The non defaults filter.</param>
            <returns>number of rows deleted</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApi.DeleteNonDefaults``1(System.Data.IDbConnection,``0[])">
            <summary>
            Delete 1 or more rows in a transaction using only field with non-default values in the filter. E.g:
            <para>db.DeleteNonDefaults(new Person { FirstName = "Jimi", Age = 27 },
            new Person { FirstName = "Janis", Age = 27 })</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="nonDefaultsFilters">The non defaults filters.</param>
            <returns>number of rows deleted</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApi.DeleteById``1(System.Data.IDbConnection,System.Object,System.Action{System.Data.IDbCommand})">
            <summary>
            Delete 1 row by the PrimaryKey. E.g:
            <para>db.DeleteById&lt;Person&gt;(1)</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="id">The identifier.</param>
            <param name="commandFilter">The command filter.</param>
            <returns>number of rows deleted</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApi.DeleteById``1(System.Data.IDbConnection,System.Object,System.UInt64,System.Action{System.Data.IDbCommand})">
            <summary>
            Delete 1 row by the PrimaryKey where the rowVersion matches the optimistic concurrency field.
            Will throw <exception cref="T:ServiceStack.Data.OptimisticConcurrencyException">RowModifiedException</exception> if the
            row does not exist or has a different row version.
            E.g: <para>db.DeleteById&lt;Person&gt;(1)</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="id">The identifier.</param>
            <param name="rowVersion">The row version.</param>
            <param name="commandFilter">The command filter.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApi.DeleteByIds``1(System.Data.IDbConnection,System.Collections.IEnumerable)">
            <summary>
            Delete all rows identified by the PrimaryKeys. E.g:
            <para>db.DeleteById&lt;Person&gt;(new[] { 1, 2, 3 })</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="idValues">The identifier values.</param>
            <returns>number of rows deleted</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApi.DeleteAll``1(System.Data.IDbConnection)">
            <summary>
            Delete all rows in the generic table type. E.g:
            <para>db.DeleteAll&lt;Person&gt;()</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <returns>number of rows deleted</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApi.DeleteAll``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Delete all rows provided. E.g:
            <para>db.DeleteAll&lt;Person&gt;(people)</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="rows">The rows.</param>
            <returns>number of rows deleted</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApi.DeleteAll(System.Data.IDbConnection,System.Type)">
            <summary>
            Delete all rows in the runtime table type. E.g:
            <para>db.DeleteAll(typeof(Person))</para>
            </summary>
            <param name="dbConn">The database connection.</param>
            <param name="tableType">Type of the table.</param>
            <returns>number of rows deleted</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApi.Delete``1(System.Data.IDbConnection,System.String,System.Object)">
            <summary>
            Delete rows using a SqlFormat filter. E.g:
            <para>db.Delete&lt;Person&gt;("Age &gt; @age", new { age = 42 })</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="sqlFilter">The SQL filter.</param>
            <param name="anonType">Type of the anon.</param>
            <returns>number of rows deleted</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApi.Delete(System.Data.IDbConnection,System.Type,System.String,System.Object)">
            <summary>
            Delete rows using a SqlFormat filter. E.g:
            <para>db.Delete(typeof(Person), "Age &gt; @age", new { age = 42 })</para>
            </summary>
            <param name="dbConn">The database connection.</param>
            <param name="tableType">Type of the table.</param>
            <param name="sqlFilter">The SQL filter.</param>
            <param name="anonType">Type of the anon.</param>
            <returns>number of rows deleted</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApi.Save``1(System.Data.IDbConnection,``0,System.Boolean)">
            <summary>
            Insert a new row or update existing row. Returns true if a new row was inserted.
            Optional references param decides whether to save all related references as well. E.g:
            <para>db.Save(customer, references:true)</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="obj">The object.</param>
            <param name="references">if set to <c>true</c> [references].</param>
            <returns>true if a row was inserted; false if it was updated</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApi.Save``1(System.Data.IDbConnection,``0[])">
            <summary>
            Insert new rows or update existing rows. Return number of rows added E.g:
            <para>db.Save(new Person { Id = 10, FirstName = "Amy", LastName = "Winehouse", Age = 27 })</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="objs">The objs.</param>
            <returns>number of rows added</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApi.SaveAll``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Insert new rows or update existing rows. Return number of rows added E.g:
            <para>db.SaveAll(new [] { new Person { Id = 10, FirstName = "Amy", LastName = "Winehouse", Age = 27 } })</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="objs">The objs.</param>
            <returns>number of rows added</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApi.SaveAllReferences``1(System.Data.IDbConnection,``0)">
            <summary>
            Populates all related references on the instance with its primary key and saves them. Uses '(T)Id' naming convention. E.g:
            <para>db.SaveAllReferences(customer)</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="instance">The instance.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApi.SaveReferences``2(System.Data.IDbConnection,``0,``1[])">
            <summary>
            Populates the related references with the instance primary key and saves them. Uses '(T)Id' naming convention. E.g:
            <para>db.SaveReference(customer, customer.Orders)</para>
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TRef">The type of the t reference.</typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="instance">The instance.</param>
            <param name="refs">The refs.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApi.SaveReferences``2(System.Data.IDbConnection,``0,System.Collections.Generic.List{``1})">
            <summary>
            Populates the related references with the instance primary key and saves them. Uses '(T)Id' naming convention. E.g:
            <para>db.SaveReference(customer, customer.Orders)</para>
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TRef">The type of the t reference.</typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="instance">The instance.</param>
            <param name="refs">The refs.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApi.SaveReferences``2(System.Data.IDbConnection,``0,System.Collections.Generic.IEnumerable{``1})">
            <summary>
            Populates the related references with the instance primary key and saves them. Uses '(T)Id' naming convention. E.g:
            <para>db.SaveReferences(customer, customer.Orders)</para>
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TRef">The type of the t reference.</typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="instance">The instance.</param>
            <param name="refs">The refs.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApi.GetRowVersion``1(System.Data.IDbConnection,System.Object)">
            <summary>
            Gets the row version.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="id">The identifier.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApi.GetRowVersion(System.Data.IDbConnection,System.Type,System.Object)">
            <summary>
            Gets the row version.
            </summary>
            <param name="dbConn">The database connection.</param>
            <param name="modelType">Type of the model.</param>
            <param name="id">The identifier.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApi.ExecuteProcedure``1(System.Data.IDbConnection,``0)">
            <summary>
            Executes the procedure.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="obj">The object.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApi.ToUpdateStatement``1(System.Data.IDbConnection,``0,System.Collections.Generic.ICollection{System.String})">
            <summary>
            Generates inline UPDATE SQL Statement
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="item">The item.</param>
            <param name="updateFields">The update fields.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApi.ToInsertStatement``1(System.Data.IDbConnection,``0,System.Collections.Generic.ICollection{System.String})">
            <summary>
            Generates inline INSERT SQL Statement
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="item">The item.</param>
            <param name="insertFields">The insert fields.</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.OrmLiteWriteApiAsync">
            <summary>
            Class OrmLiteWriteApiAsync.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApiAsync.ExecuteSqlAsync(System.Data.IDbConnection,System.String,System.Threading.CancellationToken)">
            <summary>
            Execute any arbitrary raw SQL.
            </summary>
            <param name="dbConn">The database connection.</param>
            <param name="sql">The SQL.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>number of rows affected</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApiAsync.ExecuteSqlAsync(System.Data.IDbConnection,System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Execute any arbitrary raw SQL with db params.
            </summary>
            <param name="dbConn">The database connection.</param>
            <param name="sql">The SQL.</param>
            <param name="dbParams">The database parameters.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>number of rows affected</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApiAsync.InsertAsync``1(System.Data.IDbConnection,``0,System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Insert 1 POCO, use selectIdentity to retrieve the last insert AutoIncrement id (if any). E.g:
            <para>var id = db.Insert(new Person { Id = 1, FirstName = "Jimi }, selectIdentity:true)</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="obj">The object.</param>
            <param name="selectIdentity">if set to <c>true</c> [select identity].</param>
            <param name="enableIdentityInsert">if set to <c>true</c> [enable identity insert].</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;System.Int64&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApiAsync.InsertAsync``1(System.Data.IDbConnection,``0,System.Action{System.Data.IDbCommand},System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Insert 1 POCO, use selectIdentity to retrieve the last insert AutoIncrement id (if any). E.g:
            <para>var id = db.Insert(new Person { Id = 1, FirstName = "Jimi }, selectIdentity:true)</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="obj">The object.</param>
            <param name="commandFilter">The command filter.</param>
            <param name="selectIdentity">if set to <c>true</c> [select identity].</param>
            <param name="enableIdentityInsert">if set to <c>true</c> [enable identity insert].</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;System.Int64&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApiAsync.InsertAsync``1(System.Data.IDbConnection,System.Collections.Generic.Dictionary{System.String,System.Object},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Insert 1 POCO, use selectIdentity to retrieve the last insert AutoIncrement id (if any). E.g:
            <para>var id = db.Insert(new Dictionary&lt;string,object&gt; { ["Id"] = 1, ["FirstName"] = "Jimi }, selectIdentity:true)</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="obj">The object.</param>
            <param name="selectIdentity">if set to <c>true</c> [select identity].</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;System.Int64&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApiAsync.InsertAsync``1(System.Data.IDbConnection,System.Action{System.Data.IDbCommand},System.Collections.Generic.Dictionary{System.String,System.Object},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Insert 1 POCO, use selectIdentity to retrieve the last insert AutoIncrement id (if any). E.g:
            <para>var id = db.Insert(new Dictionary&lt;string,object&gt; { ["Id"] = 1, ["FirstName"] = "Jimi }, dbCmd =&gt; applyFilter(dbCmd))</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="commandFilter">The command filter.</param>
            <param name="obj">The object.</param>
            <param name="selectIdentity">if set to <c>true</c> [select identity].</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;System.Int64&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApiAsync.InsertAsync``1(System.Data.IDbConnection,System.Threading.CancellationToken,``0[])">
            <summary>
            Insert 1 or more POCOs in a transaction. E.g:
            <para>db.InsertAsync(new Person { Id = 1, FirstName = "Tupac", LastName = "Shakur", Age = 25 },</para><para>               new Person { Id = 2, FirstName = "Biggie", LastName = "Smalls", Age = 24 })</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <param name="objs">The objs.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApiAsync.InsertAsync``1(System.Data.IDbConnection,``0[])">
            <summary>
            Inserts the asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="objs">The objs.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApiAsync.InsertAsync``1(System.Data.IDbConnection,System.Action{System.Data.IDbCommand},System.Threading.CancellationToken,``0[])">
            <summary>
            Insert 1 or more POCOs in a transaction and modify populated IDbCommand with a commandFilter. E.g:
            <para>db.InsertAsync(dbCmd =&gt; applyFilter(dbCmd), token, </para><para>               new Person { Id = 1, FirstName = "Tupac", LastName = "Shakur", Age = 25 },</para><para>               new Person { Id = 2, FirstName = "Biggie", LastName = "Smalls", Age = 24 })</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="commandFilter">The command filter.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <param name="objs">The objs.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApiAsync.InsertUsingDefaultsAsync``1(System.Data.IDbConnection,``0[],System.Threading.CancellationToken)">
            <summary>
            Insert 1 or more POCOs in a transaction using Table default values when defined. E.g:
            <para>db.InsertUsingDefaultsAsync(new Person { FirstName = "Tupac", LastName = "Shakur" },</para><para>                            new Person { FirstName = "Biggie", LastName = "Smalls" })</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="objs">The objs.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApiAsync.InsertIntoSelectAsync``1(System.Data.IDbConnection,ServiceStack.OrmLite.ISqlExpression,System.Threading.CancellationToken)">
            <summary>
            Insert results from SELECT SqlExpression, use selectIdentity to retrieve the last insert AutoIncrement id (if any). E.g:
            <para>db.InsertIntoSelectAsync&lt;Contact&gt;(db.From&lt;Person&gt;().Select(x =&gt; new { x.Id, Surname == x.LastName }))</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="query">The query.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;System.Int64&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApiAsync.InsertIntoSelectAsync``1(System.Data.IDbConnection,ServiceStack.OrmLite.ISqlExpression,System.Action{System.Data.IDbCommand},System.Threading.CancellationToken)">
            <summary>
            Insert results from SELECT SqlExpression, use selectIdentity to retrieve the last insert AutoIncrement id (if any). E.g:
            <para>db.InsertIntoSelectAsync&lt;Contact&gt;(db.From&lt;Person&gt;().Select(x =&gt; new { x.Id, Surname == x.LastName }))</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="query">The query.</param>
            <param name="commandFilter">The command filter.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;System.Int64&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApiAsync.InsertAllAsync``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken)">
            <summary>
            Insert a collection of POCOs in a transaction. E.g:
            <para>db.InsertAllAsync(new[] { new Person { Id = 9, FirstName = "Biggie", LastName = "Smalls", Age = 24 } })</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="objs">The objs.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApiAsync.InsertAllAsync``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{``0},System.Action{System.Data.IDbCommand},System.Threading.CancellationToken)">
            <summary>
            Insert a collection of POCOs in a transaction and modify populated IDbCommand with a commandFilter. E.g:
            <para>db.InsertAllAsync(new[] { new Person { Id = 9, FirstName = "Biggie", LastName = "Smalls", Age = 24 } },</para><para>                  dbCmd =&gt; applyFilter(dbCmd))</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="objs">The objs.</param>
            <param name="commandFilter">The command filter.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApiAsync.UpdateAsync``1(System.Data.IDbConnection,``0,System.Action{System.Data.IDbCommand},System.Threading.CancellationToken)">
            <summary>
            Updates 1 POCO. All fields are updated except for the PrimaryKey which is used as the identity selector. E.g:
            <para>db.Update(new Person { Id = 1, FirstName = "Jimi", LastName = "Hendrix", Age = 27 })</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="obj">The object.</param>
            <param name="commandFilter">The command filter.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;System.Int32&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApiAsync.UpdateAsync``1(System.Data.IDbConnection,System.Collections.Generic.Dictionary{System.String,System.Object},System.Action{System.Data.IDbCommand},System.Threading.CancellationToken)">
            <summary>
            Updates 1 POCO. All fields are updated except for the PrimaryKey which is used as the identity selector. E.g:
            <para>db.Update(new Dictionary&lt;string,object&gt; { ["Id"] = 1, ["FirstName"] = "Jimi", ["Age"] = 27 })</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="obj">The object.</param>
            <param name="commandFilter">The command filter.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;System.Int32&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApiAsync.UpdateAsync``1(System.Data.IDbConnection,System.Threading.CancellationToken,``0[])">
            <summary>
            Updates 1 or more POCOs in a transaction. E.g:
            <para>db.Update(new Person { Id = 1, FirstName = "Tupac", LastName = "Shakur", Age = 25 },</para><para>new Person { Id = 2, FirstName = "Biggie", LastName = "Smalls", Age = 24 })</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <param name="objs">The objs.</param>
            <returns>Task&lt;System.Int32&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApiAsync.UpdateAsync``1(System.Data.IDbConnection,``0[])">
            <summary>
            Updates the asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="objs">The objs.</param>
            <returns>Task&lt;System.Int32&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApiAsync.UpdateAsync``1(System.Data.IDbConnection,System.Action{System.Data.IDbCommand},System.Threading.CancellationToken,``0[])">
            <summary>
            Updates the asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="commandFilter">The command filter.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <param name="objs">The objs.</param>
            <returns>Task&lt;System.Int32&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApiAsync.UpdateAsync``1(System.Data.IDbConnection,System.Action{System.Data.IDbCommand},``0[])">
            <summary>
            Updates the asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="commandFilter">The command filter.</param>
            <param name="objs">The objs.</param>
            <returns>Task&lt;System.Int32&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApiAsync.UpdateAllAsync``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{``0},System.Action{System.Data.IDbCommand},System.Threading.CancellationToken)">
            <summary>
            Updates 1 or more POCOs in a transaction. E.g:
            <para>db.UpdateAllAsync(new[] { new Person { Id = 1, FirstName = "Jimi", LastName = "Hendrix", Age = 27 } })</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="objs">The objs.</param>
            <param name="commandFilter">The command filter.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;System.Int32&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApiAsync.DeleteAsync``1(System.Data.IDbConnection,System.Object,System.Action{System.Data.IDbCommand},System.Threading.CancellationToken)">
            <summary>
            Delete rows using an anonymous type filter. E.g:
            <para>db.DeleteAsync&lt;Person&gt;(new { FirstName = "Jimi", Age = 27 })</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="anonFilter">The anon filter.</param>
            <param name="commandFilter">The command filter.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>number of rows deleted</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApiAsync.DeleteAsync``1(System.Data.IDbConnection,System.Collections.Generic.Dictionary{System.String,System.Object},System.Action{System.Data.IDbCommand},System.Threading.CancellationToken)">
            <summary>
            Delete rows using an Object Dictionary filters. E.g:
            <para>db.DeleteAsync&lt;Person&gt;(new Dictionary&lt;string,object&gt; { ["FirstName"] = "Jimi", ["Age"] = 27 })</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="filters">The filters.</param>
            <param name="commandFilter">The command filter.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>number of rows deleted</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApiAsync.DeleteAsync``1(System.Data.IDbConnection,``0,System.Action{System.Data.IDbCommand},System.Threading.CancellationToken)">
            <summary>
            Delete 1 row using all fields in the commandFilter. E.g:
            <para>db.DeleteAsync(new Person { Id = 1, FirstName = "Jimi", LastName = "Hendrix", Age = 27 })</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="allFieldsFilter">All fields filter.</param>
            <param name="commandFilter">The command filter.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>number of rows deleted</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApiAsync.DeleteAsync``1(System.Data.IDbConnection,System.Action{System.Data.IDbCommand},System.Threading.CancellationToken,``0[])">
            <summary>
            Delete 1 or more rows in a transaction using all fields in the commandFilter. E.g:
            <para>db.DeleteAsync(new Person { Id = 1, FirstName = "Jimi", LastName = "Hendrix", Age = 27 })</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="commandFilter">The command filter.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <param name="allFieldsFilters">All fields filters.</param>
            <returns>Task&lt;System.Int32&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApiAsync.DeleteAsync``1(System.Data.IDbConnection,System.Action{System.Data.IDbCommand},``0[])">
            <summary>
            Deletes the asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="commandFilter">The command filter.</param>
            <param name="allFieldsFilters">All fields filters.</param>
            <returns>Task&lt;System.Int32&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApiAsync.DeleteNonDefaultsAsync``1(System.Data.IDbConnection,``0,System.Threading.CancellationToken)">
            <summary>
            Delete 1 or more rows using only field with non-default values in the commandFilter. E.g:
            <para>db.DeleteNonDefaultsAsync(new Person { FirstName = "Jimi", Age = 27 })</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="nonDefaultsFilter">The non defaults filter.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>number of rows deleted</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApiAsync.DeleteNonDefaultsAsync``1(System.Data.IDbConnection,System.Threading.CancellationToken,``0[])">
            <summary>
            Delete 1 or more rows in a transaction using only field with non-default values in the commandFilter. E.g:
            <para>db.DeleteNonDefaultsAsync(new Person { FirstName = "Jimi", Age = 27 },
            new Person { FirstName = "Janis", Age = 27 })</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <param name="nonDefaultsFilters">The non defaults filters.</param>
            <returns>number of rows deleted</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApiAsync.DeleteNonDefaultsAsync``1(System.Data.IDbConnection,``0[])">
            <summary>
            Deletes the non defaults asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="nonDefaultsFilters">The non defaults filters.</param>
            <returns>Task&lt;System.Int32&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApiAsync.DeleteByIdAsync``1(System.Data.IDbConnection,System.Object,System.Action{System.Data.IDbCommand},System.Threading.CancellationToken)">
            <summary>
            Delete 1 row by the PrimaryKey. E.g:
            <para>db.DeleteByIdAsync&lt;Person&gt;(1)</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="id">The identifier.</param>
            <param name="commandFilter">The command filter.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>number of rows deleted</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApiAsync.DeleteByIdAsync``1(System.Data.IDbConnection,System.Object,System.UInt64,System.Action{System.Data.IDbCommand},System.Threading.CancellationToken)">
            <summary>
            Delete 1 row by the PrimaryKey where the rowVersion matches the optimistic concurrency field.
            Will throw <exception cref="T:ServiceStack.Data.OptimisticConcurrencyException">RowModifiedException</exception> if the
            row does not exist or has a different row version.
            E.g: <para>db.DeleteByIdAsync&lt;Person&gt;(1)</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="id">The identifier.</param>
            <param name="rowVersion">The row version.</param>
            <param name="commandFilter">The command filter.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApiAsync.DeleteByIdsAsync``1(System.Data.IDbConnection,System.Collections.IEnumerable,System.Action{System.Data.IDbCommand},System.Threading.CancellationToken)">
            <summary>
            Delete all rows identified by the PrimaryKeys. E.g:
            <para>db.DeleteByIdsAsync&lt;Person&gt;(new[] { 1, 2, 3 })</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="idValues">The identifier values.</param>
            <param name="commandFilter">The command filter.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>number of rows deleted</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApiAsync.DeleteAllAsync``1(System.Data.IDbConnection,System.Threading.CancellationToken)">
            <summary>
            Delete all rows in the generic table type. E.g:
            <para>db.DeleteAllAsync&lt;Person&gt;()</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>number of rows deleted</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApiAsync.DeleteAllAsync(System.Data.IDbConnection,System.Type,System.Threading.CancellationToken)">
            <summary>
            Delete all rows in the runtime table type. E.g:
            <para>db.DeleteAllAsync(typeof(Person))</para>
            </summary>
            <param name="dbConn">The database connection.</param>
            <param name="tableType">Type of the table.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>number of rows deleted</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApiAsync.DeleteAsync``1(System.Data.IDbConnection,System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Delete rows using sqlfilter, e.g:
            <para>db.DeleteAsync&lt;Person&gt;("FirstName = @FirstName AND Age = @Age", new { FirstName = "Jimi", Age = 27 })</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="sqlFilter">The SQL filter.</param>
            <param name="anonType">Type of the anon.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;System.Int32&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApiAsync.DeleteAsync(System.Data.IDbConnection,System.Type,System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Delete rows using sqlfilter and Runtime Type, e.g:
            <para>db.DeleteAsync(typeof(Person), "FirstName = @FirstName AND Age = @Age", new { FirstName = "Jimi", Age = 27 })</para>
            </summary>
            <param name="dbConn">The database connection.</param>
            <param name="tableType">Type of the table.</param>
            <param name="sqlFilter">The SQL filter.</param>
            <param name="anonType">Type of the anon.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;System.Int32&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApiAsync.SaveAsync``1(System.Data.IDbConnection,``0,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Insert a new row or update existing row. Returns true if a new row was inserted.
            Optional references param decides whether to save all related references as well. E.g:
            <para>db.SaveAsync(customer, references:true)</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="obj">The object.</param>
            <param name="references">if set to <c>true</c> [references].</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>true if a row was inserted; false if it was updated</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApiAsync.SaveAsync``1(System.Data.IDbConnection,System.Threading.CancellationToken,``0[])">
            <summary>
            Insert new rows or update existing rows. Return number of rows added E.g:
            <para>db.SaveAsync(new Person { Id = 10, FirstName = "Amy", LastName = "Winehouse", Age = 27 })</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <param name="objs">The objs.</param>
            <returns>number of rows added</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApiAsync.SaveAsync``1(System.Data.IDbConnection,``0[])">
            <summary>
            Saves the asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="objs">The objs.</param>
            <returns>Task&lt;System.Int32&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApiAsync.SaveAllAsync``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken)">
            <summary>
            Insert new rows or update existing rows. Return number of rows added E.g:
            <para>db.SaveAllAsync(new [] { new Person { Id = 10, FirstName = "Amy", LastName = "Winehouse", Age = 27 } })</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="objs">The objs.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>number of rows added</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApiAsync.SaveAllReferencesAsync``1(System.Data.IDbConnection,``0,System.Threading.CancellationToken)">
            <summary>
            Populates all related references on the instance with its primary key and saves them. Uses '(T)Id' naming convention. E.g:
            <para>db.SaveAllReferences(customer)</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="instance">The instance.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApiAsync.SaveReferencesAsync``2(System.Data.IDbConnection,System.Threading.CancellationToken,``0,``1[])">
            <summary>
            Populates the related references with the instance primary key and saves them. Uses '(T)Id' naming convention. E.g:
            <para>db.SaveReference(customer, customer.Orders)</para>
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TRef">The type of the t reference.</typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <param name="instance">The instance.</param>
            <param name="refs">The refs.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApiAsync.SaveReferencesAsync``2(System.Data.IDbConnection,``0,``1[])">
            <summary>
            Saves the references asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TRef">The type of the t reference.</typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="instance">The instance.</param>
            <param name="refs">The refs.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApiAsync.SaveReferencesAsync``2(System.Data.IDbConnection,``0,System.Collections.Generic.List{``1},System.Threading.CancellationToken)">
            <summary>
            Populates the related references with the instance primary key and saves them. Uses '(T)Id' naming convention. E.g:
            <para>db.SaveReference(customer, customer.Orders)</para>
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TRef">The type of the t reference.</typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="instance">The instance.</param>
            <param name="refs">The refs.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApiAsync.SaveReferencesAsync``2(System.Data.IDbConnection,``0,System.Collections.Generic.IEnumerable{``1},System.Threading.CancellationToken)">
            <summary>
            Populates the related references with the instance primary key and saves them. Uses '(T)Id' naming convention. E.g:
            <para>db.SaveReferences(customer, customer.Orders)</para>
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TRef">The type of the t reference.</typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="instance">The instance.</param>
            <param name="refs">The refs.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApiAsync.GetRowVersionAsync``1(System.Data.IDbConnection,System.Object,System.Threading.CancellationToken)">
            <summary>
            Gets the row version asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="id">The identifier.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;System.Object&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApiAsync.GetRowVersionAsync(System.Data.IDbConnection,System.Type,System.Object,System.Threading.CancellationToken)">
            <summary>
            Gets the row version asynchronous.
            </summary>
            <param name="dbConn">The database connection.</param>
            <param name="modelType">Type of the model.</param>
            <param name="id">The identifier.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;System.Object&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApiAsync.ExecuteProcedureAsync``1(System.Data.IDbConnection,``0,System.Threading.CancellationToken)">
            <summary>
            Executes the procedure asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="obj">The object.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.OrmLiteWriteCommandExtensions">
            <summary>
            Class OrmLiteWriteCommandExtensions.
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.OrmLiteWriteCommandExtensions.Log">
            <summary>
            The log
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteCommandExtensions.CreateSchema``1(System.Data.IDbCommand)">
            <summary>
            Creates the schema.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
            <exception cref="T:System.InvalidOperationException">Type {typeof(T).Name} does not have a schema attribute, just CreateSchema(string schemaName) instead</exception>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteCommandExtensions.CreateSchema(System.Data.IDbCommand,System.String)">
            <summary>
            Creates the schema.
            </summary>
            <param name="dbCmd">The database command.</param>
            <param name="schemaName">Name of the schema.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteCommandExtensions.CreateTables(System.Data.IDbCommand,System.Boolean,System.Type[])">
            <summary>
            Creates the tables.
            </summary>
            <param name="dbCmd">The database command.</param>
            <param name="overwrite">if set to <c>true</c> [overwrite].</param>
            <param name="tableTypes">The table types.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteCommandExtensions.CreateTable``1(System.Data.IDbCommand,System.Boolean)">
            <summary>
            Creates the table.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="overwrite">if set to <c>true</c> [overwrite].</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteCommandExtensions.CreateTable(System.Data.IDbCommand,System.Boolean,System.Type)">
            <summary>
            Creates the table.
            </summary>
            <param name="dbCmd">The database command.</param>
            <param name="overwrite">if set to <c>true</c> [overwrite].</param>
            <param name="modelType">Type of the model.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteCommandExtensions.DropTable(System.Data.IDbCommand,System.String)">
            <summary>
            Drops the table.
            </summary>
            <param name="dbCmd">The database command.</param>
            <param name="tableName">Name of the table.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteCommandExtensions.DropTable``1(System.Data.IDbCommand)">
            <summary>
            Drops the table.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteCommandExtensions.DropTable(System.Data.IDbCommand,System.Type)">
            <summary>
            Drops the table.
            </summary>
            <param name="dbCmd">The database command.</param>
            <param name="modelType">Type of the model.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteCommandExtensions.DropTables(System.Data.IDbCommand,System.Type[])">
            <summary>
            Drops the tables.
            </summary>
            <param name="dbCmd">The database command.</param>
            <param name="tableTypes">The table types.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteCommandExtensions.DropTable(System.Data.IDbCommand,ServiceStack.OrmLite.ModelDefinition)">
            <summary>
            Drops the table.
            </summary>
            <param name="dbCmd">The database command.</param>
            <param name="modelDef">The model definition.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteCommandExtensions.LastSql(System.Data.IDbCommand)">
            <summary>
            Lasts the SQL.
            </summary>
            <param name="dbCmd">The database command.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteCommandExtensions.ExecuteSql(System.Data.IDbCommand,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter},System.Action{System.Data.IDbCommand})">
            <summary>
            Executes the SQL.
            </summary>
            <param name="dbCmd">The database command.</param>
            <param name="sql">The SQL.</param>
            <param name="sqlParams">The SQL parameters.</param>
            <param name="commandFilter">The command filter.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteCommandExtensions.ExecuteSql(System.Data.IDbCommand,System.String,System.Object,System.Action{System.Data.IDbCommand})">
            <summary>
            Executes the SQL.
            </summary>
            <param name="dbCmd">The database command.</param>
            <param name="sql">The SQL.</param>
            <param name="anonType">Type of the anon.</param>
            <param name="commandFilter">The command filter.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteCommandExtensions.IgnoreAlreadyExistsError(System.Exception)">
            <summary>
            Ignores the already exists error.
            </summary>
            <param name="ex">The ex.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteCommandExtensions.IgnoreAlreadyExistsGeneratorError(System.Exception)">
            <summary>
            Ignores the already exists generator error.
            </summary>
            <param name="ex">The ex.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteCommandExtensions.PopulateWithSqlReader``1(``0,ServiceStack.OrmLite.IOrmLiteDialectProvider,System.Data.IDataReader)">
            <summary>
            Populates the with SQL reader.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="objWithProperties">The object with properties.</param>
            <param name="dialectProvider">The dialect provider.</param>
            <param name="reader">The reader.</param>
            <returns>T.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteCommandExtensions.GetColumnIndex(System.Data.IDataReader,ServiceStack.OrmLite.IOrmLiteDialectProvider,System.String)">
            <summary>
            Gets the index of the column.
            </summary>
            <param name="reader">The reader.</param>
            <param name="dialectProvider">The dialect provider.</param>
            <param name="fieldName">Name of the field.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="F:ServiceStack.OrmLite.OrmLiteWriteCommandExtensions.NotFound">
            <summary>
            The not found
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteCommandExtensions.PopulateWithSqlReader``1(``0,ServiceStack.OrmLite.IOrmLiteDialectProvider,System.Data.IDataReader,System.Tuple{ServiceStack.OrmLite.FieldDefinition,System.Int32,ServiceStack.OrmLite.IOrmLiteConverter}[],System.Object[])">
            <summary>
            Populates the with SQL reader.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="objWithProperties">The object with properties.</param>
            <param name="dialectProvider">The dialect provider.</param>
            <param name="reader">The reader.</param>
            <param name="indexCache">The index cache.</param>
            <param name="values">The values.</param>
            <returns>T.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteCommandExtensions.PopulateObjectWithSqlReader``1(ServiceStack.OrmLite.IOrmLiteDialectProvider,System.Object,System.Data.IDataReader,System.Tuple{ServiceStack.OrmLite.FieldDefinition,System.Int32,ServiceStack.OrmLite.IOrmLiteConverter}[],System.Object[])">
            <summary>
            Populates the object with SQL reader.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dialectProvider">The dialect provider.</param>
            <param name="objWithProperties">The object with properties.</param>
            <param name="reader">The reader.</param>
            <param name="indexCache">The index cache.</param>
            <param name="values">The values.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteCommandExtensions.PopulateValues(System.Data.IDataReader,System.Object[],ServiceStack.OrmLite.IOrmLiteDialectProvider)">
            <summary>
            Populates the values.
            </summary>
            <param name="reader">The reader.</param>
            <param name="values">The values.</param>
            <param name="dialectProvider">The dialect provider.</param>
            <returns>System.Object[].</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteCommandExtensions.Update``1(System.Data.IDbCommand,``0,System.Action{System.Data.IDbCommand})">
            <summary>
            Updates the specified object.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="obj">The object.</param>
            <param name="commandFilter">The command filter.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteCommandExtensions.Update``1(System.Data.IDbCommand,System.Collections.Generic.Dictionary{System.String,System.Object},System.Action{System.Data.IDbCommand})">
            <summary>
            Updates the specified object.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="obj">The object.</param>
            <param name="commandFilter">The command filter.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteCommandExtensions.UpdateInternal``1(System.Data.IDbCommand,System.Object,System.Action{System.Data.IDbCommand})">
            <summary>
            Updates the internal.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="obj">The object.</param>
            <param name="commandFilter">The command filter.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteCommandExtensions.UpdateAndVerify``1(System.Data.IDbCommand,System.Action{System.Data.IDbCommand},System.Boolean)">
            <summary>
            Updates the and verify.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="commandFilter">The command filter.</param>
            <param name="hadRowVersion">if set to <c>true</c> [had row version].</param>
            <returns>System.Int32.</returns>
            <exception cref="T:ServiceStack.Data.OptimisticConcurrencyException"></exception>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteCommandExtensions.Update``1(System.Data.IDbCommand,``0[],System.Action{System.Data.IDbCommand})">
            <summary>
            Updates the specified objs.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="objs">The objs.</param>
            <param name="commandFilter">The command filter.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteCommandExtensions.UpdateAll``1(System.Data.IDbCommand,System.Collections.Generic.IEnumerable{``0},System.Action{System.Data.IDbCommand})">
            <summary>
            Updates all.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="objs">The objs.</param>
            <param name="commandFilter">The command filter.</param>
            <returns>System.Int32.</returns>
            <exception cref="T:ServiceStack.Data.OptimisticConcurrencyException"></exception>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteCommandExtensions.AssertRowsUpdated(System.Data.IDbCommand,System.Boolean)">
            <summary>
            Asserts the rows updated.
            </summary>
            <param name="dbCmd">The database command.</param>
            <param name="hadRowVersion">if set to <c>true</c> [had row version].</param>
            <returns>System.Int32.</returns>
            <exception cref="T:ServiceStack.Data.OptimisticConcurrencyException"></exception>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteCommandExtensions.Delete``1(System.Data.IDbCommand,``0,System.Action{System.Data.IDbCommand})">
            <summary>
            Deletes the specified anon type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="anonType">Type of the anon.</param>
            <param name="commandFilter">The command filter.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteCommandExtensions.Delete``1(System.Data.IDbCommand,System.Object,System.Action{System.Data.IDbCommand})">
            <summary>
            Deletes the specified anon type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="anonType">Type of the anon.</param>
            <param name="commandFilter">The command filter.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteCommandExtensions.DeleteNonDefaults``1(System.Data.IDbCommand,``0)">
            <summary>
            Deletes the non defaults.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="filter">The filter.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteCommandExtensions.Delete``1(System.Data.IDbCommand,``0[])">
            <summary>
            Deletes the specified objs.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="objs">The objs.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteCommandExtensions.DeleteNonDefaults``1(System.Data.IDbCommand,``0[])">
            <summary>
            Deletes the non defaults.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="filters">The filters.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteCommandExtensions.DeleteAll``1(System.Data.IDbCommand,System.Collections.Generic.IEnumerable{``0},System.Func{System.Object,System.Collections.Generic.Dictionary{System.String,System.Object}},System.Action{System.Data.IDbCommand})">
            <summary>
            Deletes all.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="objs">The objs.</param>
            <param name="fieldValuesFn">The field values function.</param>
            <param name="commandFilter">The command filter.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteCommandExtensions.DeleteById``1(System.Data.IDbCommand,System.Object,System.Action{System.Data.IDbCommand})">
            <summary>
            Deletes the by identifier.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="id">The identifier.</param>
            <param name="commandFilter">The command filter.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteCommandExtensions.DeleteByIdSql``1(System.Data.IDbCommand,System.Object)">
            <summary>
            Deletes the by identifier SQL.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="id">The identifier.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteCommandExtensions.DeleteById``1(System.Data.IDbCommand,System.Object,System.UInt64,System.Action{System.Data.IDbCommand})">
            <summary>
            Deletes the by identifier.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="id">The identifier.</param>
            <param name="rowVersion">The row version.</param>
            <param name="commandFilter">The command filter.</param>
            <exception cref="T:ServiceStack.Data.OptimisticConcurrencyException">The row was modified or deleted since the last read</exception>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteCommandExtensions.DeleteByIdSql``1(System.Data.IDbCommand,System.Object,System.UInt64)">
            <summary>
            Deletes the by identifier SQL.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="id">The identifier.</param>
            <param name="rowVersion">The row version.</param>
            <returns>System.String.</returns>
            <exception cref="T:System.InvalidOperationException">Cannot use DeleteById with rowVersion for model type without a row version column</exception>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteCommandExtensions.DeleteByIds``1(System.Data.IDbCommand,System.Collections.IEnumerable)">
            <summary>
            Deletes the by ids.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="idValues">The identifier values.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteCommandExtensions.GetDeleteByIdsSql``1(System.String,ServiceStack.OrmLite.IOrmLiteDialectProvider)">
            <summary>
            Gets the delete by ids SQL.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sqlIn">The SQL in.</param>
            <param name="dialectProvider">The dialect provider.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteCommandExtensions.DeleteAll``1(System.Data.IDbCommand)">
            <summary>
            Deletes all.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteCommandExtensions.DeleteAll``1(System.Data.IDbCommand,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Deletes all.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="rows">The rows.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteCommandExtensions.DeleteAll(System.Data.IDbCommand,System.Type)">
            <summary>
            Deletes all.
            </summary>
            <param name="dbCmd">The database command.</param>
            <param name="tableType">Type of the table.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteCommandExtensions.Delete``1(System.Data.IDbCommand,System.String,System.Object)">
            <summary>
            Deletes the specified SQL.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="sql">The SQL.</param>
            <param name="anonType">Type of the anon.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteCommandExtensions.Delete(System.Data.IDbCommand,System.Type,System.String,System.Object)">
            <summary>
            Deletes the specified table type.
            </summary>
            <param name="dbCmd">The database command.</param>
            <param name="tableType">Type of the table.</param>
            <param name="sql">The SQL.</param>
            <param name="anonType">Type of the anon.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteCommandExtensions.Insert``1(System.Data.IDbCommand,``0,System.Action{System.Data.IDbCommand},System.Boolean,System.Boolean)">
            <summary>
            Inserts the specified object.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="obj">The object.</param>
            <param name="commandFilter">The command filter.</param>
            <param name="selectIdentity">if set to <c>true</c> [select identity].</param>
            <param name="enableIdentityInsert">if set to <c>true</c> [enable identity insert].</param>
            <returns>System.Int64.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteCommandExtensions.Insert``1(System.Data.IDbCommand,System.Collections.Generic.Dictionary{System.String,System.Object},System.Action{System.Data.IDbCommand},System.Boolean)">
            <summary>
            Inserts the specified object.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="obj">The object.</param>
            <param name="commandFilter">The command filter.</param>
            <param name="selectIdentity">if set to <c>true</c> [select identity].</param>
            <returns>System.Int64.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteCommandExtensions.RemovePrimaryKeyWithDefaultValue``1(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Removes the primary key with default value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj">The object.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteCommandExtensions.InsertInternal``1(ServiceStack.OrmLite.IOrmLiteDialectProvider,System.Data.IDbCommand,System.Object,System.Action{System.Data.IDbCommand},System.Boolean)">
            <summary>
            Inserts the internal.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dialectProvider">The dialect provider.</param>
            <param name="dbCmd">The database command.</param>
            <param name="obj">The object.</param>
            <param name="commandFilter">The command filter.</param>
            <param name="selectIdentity">if set to <c>true</c> [select identity].</param>
            <returns>System.Int64.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteCommandExtensions.PopulateReturnValues``1(System.Data.IDataReader,ServiceStack.OrmLite.IOrmLiteDialectProvider,System.Object)">
            <summary>
            Populates the return values.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="reader">The reader.</param>
            <param name="dialectProvider">The dialect provider.</param>
            <param name="obj">The object.</param>
            <returns>System.Int64.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteCommandExtensions.Insert``1(System.Data.IDbCommand,System.Action{System.Data.IDbCommand},``0[])">
            <summary>
            Inserts the specified command filter.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="commandFilter">The command filter.</param>
            <param name="objs">The objs.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteCommandExtensions.InsertIntoSelect``1(System.Data.IDbCommand,ServiceStack.OrmLite.ISqlExpression,System.Action{System.Data.IDbCommand})">
            <summary>
            Inserts the into select.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="query">The query.</param>
            <param name="commandFilter">The command filter.</param>
            <returns>System.Int64.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteCommandExtensions.InsertIntoSelectInternal``1(System.Data.IDbCommand,ServiceStack.OrmLite.ISqlExpression,System.Action{System.Data.IDbCommand})">
            <summary>
            Inserts the into select internal.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="query">The query.</param>
            <param name="commandFilter">The command filter.</param>
            <returns>IDbCommand.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteCommandExtensions.InsertAll``1(System.Data.IDbCommand,System.Collections.Generic.IEnumerable{``0},System.Action{System.Data.IDbCommand})">
            <summary>
            Inserts all.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="objs">The objs.</param>
            <param name="commandFilter">The command filter.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteCommandExtensions.InsertUsingDefaults``1(System.Data.IDbCommand,``0[])">
            <summary>
            Inserts the using defaults.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="objs">The objs.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteCommandExtensions.Save``1(System.Data.IDbCommand,``0[])">
            <summary>
            Saves the specified objs.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="objs">The objs.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteCommandExtensions.Save``1(System.Data.IDbCommand,``0)">
            <summary>
            Saves the specified object.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="obj">The object.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
            <exception cref="T:ServiceStack.Data.OptimisticConcurrencyException">No rows were inserted or updated</exception>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteCommandExtensions.SaveAll``1(System.Data.IDbCommand,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Saves all.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="objs">The objs.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteCommandExtensions.SaveAllReferences``1(System.Data.IDbCommand,``0)">
            <summary>
            Saves all references.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="instance">The instance.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteCommandExtensions.SaveAllReferences(System.Data.IDbCommand,ServiceStack.OrmLite.ModelDefinition,System.Object)">
            <summary>
            Saves all references.
            </summary>
            <param name="dbCmd">The database command.</param>
            <param name="modelDef">The model definition.</param>
            <param name="instance">The instance.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteCommandExtensions.SaveReferences``2(System.Data.IDbCommand,``0,``1[])">
            <summary>
            Saves the references.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TRef">The type of the t reference.</typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="instance">The instance.</param>
            <param name="refs">The refs.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteCommandExtensions.ExecuteProcedure``1(System.Data.IDbCommand,``0)">
            <summary>
            Executes the procedure.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbCmd">The database command.</param>
            <param name="obj">The object.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteCommandExtensions.GetRowVersion(System.Data.IDbCommand,ServiceStack.OrmLite.ModelDefinition,System.Object)">
            <summary>
            Gets the row version.
            </summary>
            <param name="dbCmd">The database command.</param>
            <param name="modelDef">The model definition.</param>
            <param name="id">The identifier.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteCommandExtensions.RowVersionSql(System.Data.IDbCommand,ServiceStack.OrmLite.ModelDefinition,System.Object)">
            <summary>
            Rows the version SQL.
            </summary>
            <param name="dbCmd">The database command.</param>
            <param name="modelDef">The model definition.</param>
            <param name="id">The identifier.</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.OrmLiteWriteExpressionsApi">
            <summary>
            Class OrmLiteWriteExpressionsApi.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteExpressionsApi.UpdateOnlyFields``1(System.Data.IDbConnection,``0,ServiceStack.OrmLite.SqlExpression{``0},System.Action{System.Data.IDbCommand})">
            <summary>
            Use an SqlExpression to select which fields to update and construct the where expression, E.g:
            var q = db.From&gt;Person&lt;());
            db.UpdateOnlyFields(new Person { FirstName = "JJ" }, q.Update(p =&gt; p.FirstName).Where(x =&gt; x.FirstName == "Jimi"));
            UPDATE "Person" SET "FirstName" = 'JJ' WHERE ("FirstName" = 'Jimi')
            What's not in the update expression doesn't get updated. No where expression updates all rows. E.g:
            db.UpdateOnlyFields(new Person { FirstName = "JJ", LastName = "Hendo" }, ev.Update(p =&gt; p.FirstName));
            UPDATE "Person" SET "FirstName" = 'JJ'
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="model">The model.</param>
            <param name="onlyFields">The only fields.</param>
            <param name="commandFilter">The command filter.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteExpressionsApi.UpdateOnlyFields``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Action{System.Data.IDbCommand})">
            <summary>
            Update only fields in the specified expression that matches the where condition (if any), E.g:
            db.UpdateOnlyFields(() =&gt; new Person { FirstName = "JJ" }, where: p =&gt; p.LastName == "Hendrix");
            UPDATE "Person" SET "FirstName" = 'JJ' WHERE ("LastName" = 'Hendrix')
            db.UpdateOnlyFields(() =&gt; new Person { FirstName = "JJ" });
            UPDATE "Person" SET "FirstName" = 'JJ'
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="updateFields">The update fields.</param>
            <param name="where">The where.</param>
            <param name="commandFilter">The command filter.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteExpressionsApi.UpdateOnlyFields``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0}},ServiceStack.OrmLite.SqlExpression{``0},System.Action{System.Data.IDbCommand})">
            <summary>
            Update only fields in the specified expression that matches the where condition (if any), E.g:
            db.UpdateOnlyFields(() =&gt; new Person { FirstName = "JJ" }, db.From&gt;Person&lt;().Where(p =&gt; p.LastName == "Hendrix"));
            UPDATE "Person" SET "FirstName" = 'JJ' WHERE ("LastName" = 'Hendrix')
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="updateFields">The update fields.</param>
            <param name="q">The q.</param>
            <param name="commandFilter">The command filter.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteExpressionsApi.UpdateOnlyFields``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0}},System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter},System.Action{System.Data.IDbCommand})">
            <summary>
            Update only fields in the specified expression that matches the where condition (if any), E.g:
            var q = db.From&gt;Person&lt;().Where(p =&gt; p.LastName == "Hendrix");
            db.UpdateOnlyFields(() =&gt; new Person { FirstName = "JJ" }, q.WhereExpression, q.Params);
            UPDATE "Person" SET "FirstName" = 'JJ' WHERE ("LastName" = 'Hendrix')
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="updateFields">The update fields.</param>
            <param name="whereExpression">The where expression.</param>
            <param name="sqlParams">The SQL parameters.</param>
            <param name="commandFilter">The command filter.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteExpressionsApi.UpdateOnlyFields``1(System.Data.IDbConnection,``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Action{System.Data.IDbCommand})">
            <summary>
            Update record, updating only fields specified in updateOnly that matches the where condition (if any), E.g:
            db.UpdateOnlyFields(new Person { FirstName = "JJ" }, p =&gt; p.FirstName, p =&gt; p.LastName == "Hendrix");
            UPDATE "Person" SET "FirstName" = 'JJ' WHERE ("LastName" = 'Hendrix')
            db.UpdateOnlyFields(new Person { FirstName = "JJ" }, p =&gt; p.FirstName);
            UPDATE "Person" SET "FirstName" = 'JJ'
            db.UpdateOnlyFields(new Person { FirstName = "JJ", Age = 27 }, p =&gt; new { p.FirstName, p.Age );
            UPDATE "Person" SET "FirstName" = 'JJ', "Age" = 27
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="obj">The object.</param>
            <param name="onlyFields">The only fields.</param>
            <param name="where">The where.</param>
            <param name="commandFilter">The command filter.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteExpressionsApi.UpdateOnlyFields``1(System.Data.IDbConnection,``0,System.String[],System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Action{System.Data.IDbCommand})">
            <summary>
            Update record, updating only fields specified in updateOnly that matches the where condition (if any), E.g:
            db.UpdateOnlyFields(new Person { FirstName = "JJ" }, new[]{ "FirstName" }, p =&gt; p.LastName == "Hendrix");
            UPDATE "Person" SET "FirstName" = 'JJ' WHERE ("LastName" = 'Hendrix')
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="obj">The object.</param>
            <param name="onlyFields">The only fields.</param>
            <param name="where">The where.</param>
            <param name="commandFilter">The command filter.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteExpressionsApi.UpdateOnly``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Action{System.Data.IDbCommand})">
            <summary>
            Update only fields in the specified expression that matches the where condition (if any), E.g:
            db.UpdateOnly(() =&gt; new Person { FirstName = "JJ" }, where: p =&gt; p.LastName == "Hendrix");
            UPDATE "Person" SET "FirstName" = 'JJ' WHERE ("LastName" = 'Hendrix')
            db.UpdateOnly(() =&gt; new Person { FirstName = "JJ" });
            UPDATE "Person" SET "FirstName" = 'JJ'
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="updateFields">The update fields.</param>
            <param name="where">The where.</param>
            <param name="commandFilter">The command filter.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteExpressionsApi.UpdateAdd``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Action{System.Data.IDbCommand})">
            <summary>
            Update record, updating only fields specified in updateOnly that matches the where condition (if any), E.g:
            Numeric fields generates an increment sql which is useful to increment counters, etc...
            avoiding concurrency conflicts
            db.UpdateAdd(() =&gt; new Person { Age = 5 }, where: p =&gt; p.LastName == "Hendrix");
            UPDATE "Person" SET "Age" = "Age" + 5 WHERE ("LastName" = 'Hendrix')
            db.UpdateAdd(() =&gt; new Person { Age = 5 });
            UPDATE "Person" SET "Age" = "Age" + 5
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="updateFields">The update fields.</param>
            <param name="where">The where.</param>
            <param name="commandFilter">The command filter.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteExpressionsApi.UpdateAdd``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0}},ServiceStack.OrmLite.SqlExpression{``0},System.Action{System.Data.IDbCommand})">
            <summary>
            Update record, updating only fields specified in updateOnly that matches the where condition (if any), E.g:
            Numeric fields generates an increment sql which is useful to increment counters, etc...
            avoiding concurrency conflicts
            db.UpdateAdd(() =&gt; new Person { Age = 5 }, db.From&lt;Person&gt;().Where(p =&gt; p.LastName == "Hendrix"));
            UPDATE "Person" SET "Age" = "Age" + 5 WHERE ("LastName" = 'Hendrix')
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="updateFields">The update fields.</param>
            <param name="q">The q.</param>
            <param name="commandFilter">The command filter.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteExpressionsApi.UpdateOnlyFields``1(System.Data.IDbConnection,System.Collections.Generic.Dictionary{System.String,System.Object},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Updates all values from Object Dictionary matching the where condition. E.g
            db.UpdateOnlyFields&lt;Person&gt;(new Dictionary&lt;string,object&lt; { {"FirstName", "JJ"} }, where:p =&gt; p.FirstName == "Jimi");
            UPDATE "Person" SET "FirstName" = 'JJ' WHERE ("FirstName" = 'Jimi')
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="updateFields">The update fields.</param>
            <param name="obj">The object.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteExpressionsApi.UpdateOnlyFields``1(System.Data.IDbConnection,System.Collections.Generic.Dictionary{System.String,System.Object},System.Action{System.Data.IDbCommand})">
            <summary>
            Updates all values from Object Dictionary, Requires Id which is used as a Primary Key Filter. E.g
            db.UpdateOnlyFields&lt;Person&gt;(new Dictionary&lt;string,object&lt; { {"Id", 1}, {"FirstName", "JJ"} });
            UPDATE "Person" SET "FirstName" = 'JJ' WHERE ("Id" = 1)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="updateFields">The update fields.</param>
            <param name="commandFilter">The command filter.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteExpressionsApi.UpdateOnlyFields``1(System.Data.IDbConnection,System.Collections.Generic.Dictionary{System.String,System.Object},System.String,System.Object[],System.Action{System.Data.IDbCommand})">
            <summary>
            Updates all values from Object Dictionary matching the where condition. E.g
            db.UpdateOnlyFields&lt;Person&gt;(new Dictionary&lt;string,object&lt; { {"FirstName", "JJ"} }, "FirstName == {0}", new[] { "Jimi" });
            UPDATE "Person" SET "FirstName" = 'JJ' WHERE ("FirstName" = 'Jimi')
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="updateFields">The update fields.</param>
            <param name="whereExpression">The where expression.</param>
            <param name="whereParams">The where parameters.</param>
            <param name="commandFilter">The command filter.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteExpressionsApi.UpdateNonDefaults``1(System.Data.IDbConnection,``0,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Updates all non-default values set on item matching the where condition (if any). E.g
            db.UpdateNonDefaults(new Person { FirstName = "JJ" }, p =&gt; p.FirstName == "Jimi");
            UPDATE "Person" SET "FirstName" = 'JJ' WHERE ("FirstName" = 'Jimi')
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="item">The item.</param>
            <param name="obj">The object.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteExpressionsApi.Update``1(System.Data.IDbConnection,``0,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Action{System.Data.IDbCommand})">
            <summary>
            Updates all values set on item matching the where condition (if any). E.g
            db.Update(new Person { Id = 1, FirstName = "JJ" }, p =&gt; p.LastName == "Hendrix");
            UPDATE "Person" SET "Id" = 1,"FirstName" = 'JJ',"LastName" = NULL,"Age" = 0 WHERE ("LastName" = 'Hendrix')
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="item">The item.</param>
            <param name="where">The where.</param>
            <param name="commandFilter">The command filter.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteExpressionsApi.Update``1(System.Data.IDbConnection,System.Object,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Action{System.Data.IDbCommand})">
            <summary>
            Updates all matching fields populated on anonymousType that matches where condition (if any). E.g:
            db.Update&lt;Person&gt;(new { FirstName = "JJ" }, p =&gt; p.LastName == "Hendrix");
            UPDATE "Person" SET "FirstName" = 'JJ' WHERE ("LastName" = 'Hendrix')
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="updateOnly">The update only.</param>
            <param name="where">The where.</param>
            <param name="commandFilter">The command filter.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteExpressionsApi.InsertOnly``1(System.Data.IDbConnection,``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Boolean)">
            <summary>
            Using an SqlExpression to only Insert the fields specified, e.g:
            db.InsertOnly(new Person { FirstName = "Amy" }, p =&gt; p.FirstName));
            INSERT INTO "Person" ("FirstName") VALUES ('Amy');
            db.InsertOnly(new Person { Id =1 , FirstName="Amy" }, p =&gt; new { p.Id, p.FirstName }));
            INSERT INTO "Person" ("Id", "FirstName") VALUES (1, 'Amy');
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="obj">The object.</param>
            <param name="onlyFields">The only fields.</param>
            <param name="selectIdentity">if set to <c>true</c> [select identity].</param>
            <returns>System.Int64.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteExpressionsApi.InsertOnly``1(System.Data.IDbConnection,``0,System.String[],System.Boolean)">
            <summary>
            Using an SqlExpression to only Insert the fields specified, e.g:
            db.InsertOnly(new Person { FirstName = "Amy" }, new[]{ "FirstName" }));
            INSERT INTO "Person" ("FirstName") VALUES ('Amy');
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="obj">The object.</param>
            <param name="onlyFields">The only fields.</param>
            <param name="selectIdentity">if set to <c>true</c> [select identity].</param>
            <returns>System.Int64.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteExpressionsApi.InsertOnly``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0}},System.Boolean)">
            <summary>
            Using an SqlExpression to only Insert the fields specified, e.g:
            db.InsertOnly(() =&gt; new Person { FirstName = "Amy" }));
            INSERT INTO "Person" ("FirstName") VALUES (@FirstName);
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="insertFields">The insert fields.</param>
            <param name="selectIdentity">if set to <c>true</c> [select identity].</param>
            <returns>System.Int64.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteExpressionsApi.Upsert``1(System.Data.IDbConnection,``0,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Action{System.Data.IDbCommand})">
            <summary>
            Update/Insert the specified model.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="model">The model.</param>
            <param name="where">The where.</param>
            <param name="commandFilter">The command filter.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteExpressionsApi.Delete``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Action{System.Data.IDbCommand})">
            <summary>
            Delete the rows that matches the where expression, e.g:
            db.Delete&lt;Person&gt;(p =&gt; p.Age == 27);
            DELETE FROM "Person" WHERE ("Age" = 27)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="where">The where.</param>
            <param name="commandFilter">The command filter.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteExpressionsApi.Delete``1(System.Data.IDbConnection,ServiceStack.OrmLite.SqlExpression{``0},System.Action{System.Data.IDbCommand})">
            <summary>
            Delete the rows that matches the where expression, e.g:
            var q = db.From&lt;Person&gt;());
            db.Delete&lt;Person&gt;(q.Where(p =&gt; p.Age == 27));
            DELETE FROM "Person" WHERE ("Age" = 27)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="where">The where.</param>
            <param name="commandFilter">The command filter.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteExpressionsApi.DeleteWhere``1(System.Data.IDbConnection,System.String,System.Object[])">
            <summary>
            Delete the rows that matches the where filter, e.g:
            db.DeleteWhere&lt;Person&gt;("Age = {0}", new object[] { 27 });
            DELETE FROM "Person" WHERE ("Age" = 27)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="whereFilter">The where filter.</param>
            <param name="whereParams">The where parameters.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.OrmLiteWriteExpressionsApiAsync">
            <summary>
            Class OrmLiteWriteExpressionsApiAsync.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteExpressionsApiAsync.UpdateOnlyFieldsAsync``1(System.Data.IDbConnection,``0,ServiceStack.OrmLite.SqlExpression{``0},System.Action{System.Data.IDbCommand},System.Threading.CancellationToken)">
            <summary>
            Use an SqlExpression to select which fields to update and construct the where expression, E.g:
            var q = db.From&gt;Person&lt;());
            db.UpdateOnlyFieldsAsync(new Person { FirstName = "JJ" }, q.Update(p =&gt; p.FirstName).Where(x =&gt; x.FirstName == "Jimi"));
            UPDATE "Person" SET "FirstName" = 'JJ' WHERE ("FirstName" = 'Jimi')
            What's not in the update expression doesn't get updated. No where expression updates all rows. E.g:
            db.UpdateOnlyFieldsAsync(new Person { FirstName = "JJ", LastName = "Hendo" }, ev.Update(p =&gt; p.FirstName));
            UPDATE "Person" SET "FirstName" = 'JJ'
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="model">The model.</param>
            <param name="onlyFields">The only fields.</param>
            <param name="commandFilter">The command filter.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;System.Int32&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteExpressionsApiAsync.UpdateOnlyFieldsAsync``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Action{System.Data.IDbCommand},System.Threading.CancellationToken)">
            <summary>
            Update record, updating only fields specified in updateOnly that matches the where condition (if any), E.g:
            db.UpdateOnlyFieldsAsync(() =&gt; new Person { FirstName = "JJ" }, where: p =&gt; p.LastName == "Hendrix");
            UPDATE "Person" SET "FirstName" = 'JJ' WHERE ("LastName" = 'Hendrix')
            db.UpdateOnlyFieldsAsync(() =&gt; new Person { FirstName = "JJ" });
            UPDATE "Person" SET "FirstName" = 'JJ'
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="updateFields">The update fields.</param>
            <param name="where">The where.</param>
            <param name="commandFilter">The command filter.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;System.Int32&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteExpressionsApiAsync.UpdateOnlyFieldsAsync``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0}},ServiceStack.OrmLite.SqlExpression{``0},System.Action{System.Data.IDbCommand},System.Threading.CancellationToken)">
            <summary>
            Update record, updating only fields specified in updateOnly that matches the where condition (if any), E.g:
            db.UpdateOnlyFieldsAsync(() =&gt; new Person { FirstName = "JJ" }, db.From&lt;Person&gt;().Where(p =&gt; p.LastName == "Hendrix"));
            UPDATE "Person" SET "FirstName" = 'JJ' WHERE ("LastName" = 'Hendrix')
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="updateFields">The update fields.</param>
            <param name="q">The q.</param>
            <param name="commandFilter">The command filter.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;System.Int32&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteExpressionsApiAsync.UpdateOnlyFieldsAsync``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0}},System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter},System.Action{System.Data.IDbCommand},System.Threading.CancellationToken)">
            <summary>
            Update record, updating only fields specified in updateOnly that matches the where condition (if any), E.g:
            var q = db.From&gt;Person&lt;().Where(p =&gt; p.LastName == "Hendrix");
            db.UpdateOnlyFieldsAsync(() =&gt; new Person { FirstName = "JJ" }, q.WhereExpression, q.Params);
            UPDATE "Person" SET "FirstName" = 'JJ' WHERE ("LastName" = 'Hendrix')
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="updateFields">The update fields.</param>
            <param name="whereExpression">The where expression.</param>
            <param name="sqlParams">The SQL parameters.</param>
            <param name="commandFilter">The command filter.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;System.Int32&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteExpressionsApiAsync.UpdateOnlyFieldsAsync``1(System.Data.IDbConnection,``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Action{System.Data.IDbCommand},System.Threading.CancellationToken)">
            <summary>
            Update record, updating only fields specified in updateOnly that matches the where condition (if any), E.g:
            db.UpdateOnlyFieldsAsync(new Person { FirstName = "JJ" }, p =&gt; p.FirstName, p =&gt; p.LastName == "Hendrix");
            UPDATE "Person" SET "FirstName" = 'JJ' WHERE ("LastName" = 'Hendrix')
            db.UpdateOnlyFieldsAsync(new Person { FirstName = "JJ" }, p =&gt; p.FirstName);
            UPDATE "Person" SET "FirstName" = 'JJ'
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="obj">The object.</param>
            <param name="onlyFields">The only fields.</param>
            <param name="where">The where.</param>
            <param name="commandFilter">The command filter.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;System.Int32&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteExpressionsApiAsync.UpdateAddAsync``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Action{System.Data.IDbCommand},System.Threading.CancellationToken)">
            <summary>
            Update record, updating only fields specified in updateOnly that matches the where condition (if any), E.g:
            Numeric fields generates an increment sql which is useful to increment counters, etc...
            avoiding concurrency conflicts
            db.UpdateAddAsync(() =&gt; new Person { Age = 5 }, where: p =&gt; p.LastName == "Hendrix");
            UPDATE "Person" SET "Age" = "Age" + 5 WHERE ("LastName" = 'Hendrix')
            db.UpdateAddAsync(() =&gt; new Person { Age = 5 });
            UPDATE "Person" SET "Age" = "Age" + 5
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="updateFields">The update fields.</param>
            <param name="where">The where.</param>
            <param name="commandFilter">The command filter.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;System.Int32&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteExpressionsApiAsync.UpdateOnlyFieldsAsync``1(System.Data.IDbConnection,``0,System.String[],System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Action{System.Data.IDbCommand},System.Threading.CancellationToken)">
            <summary>
            Update record, updating only fields specified in updateOnly that matches the where condition (if any), E.g:
            db.UpdateOnlyFieldsAsync(new Person { FirstName = "JJ" }, new[]{ "FirstName" }, p =&gt; p.LastName == "Hendrix");
            UPDATE "Person" SET "FirstName" = 'JJ' WHERE ("LastName" = 'Hendrix')
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="obj">The object.</param>
            <param name="onlyFields">The only fields.</param>
            <param name="where">The where.</param>
            <param name="commandFilter">The command filter.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;System.Int32&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteExpressionsApiAsync.UpdateAddAsync``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0}},ServiceStack.OrmLite.SqlExpression{``0},System.Action{System.Data.IDbCommand},System.Threading.CancellationToken)">
            <summary>
            Update record, updating only fields specified in updateOnly that matches the where condition (if any), E.g:
            Numeric fields generates an increment sql which is useful to increment counters, etc...
            avoiding concurrency conflicts
            db.UpdateAddAsync(() =&gt; new Person { Age = 5 }, db.From&lt;Person&gt;().Where(p =&gt; p.LastName == "Hendrix"));
            UPDATE "Person" SET "Age" = "Age" + 5 WHERE ("LastName" = 'Hendrix')
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="updateFields">The update fields.</param>
            <param name="q">The q.</param>
            <param name="commandFilter">The command filter.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;System.Int32&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteExpressionsApiAsync.UpdateOnlyFieldsAsync``1(System.Data.IDbConnection,System.Collections.Generic.Dictionary{System.String,System.Object},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Action{System.Data.IDbCommand},System.Threading.CancellationToken)">
            <summary>
            Updates all values from Object Dictionary matching the where condition. E.g
            db.UpdateOnlyFieldsAsync&lt;Person&gt;(new Dictionary&lt;string,object&lt; { {"FirstName", "JJ"} }, where:p =&gt; p.FirstName == "Jimi");
            UPDATE "Person" SET "FirstName" = 'JJ' WHERE ("FirstName" = 'Jimi')
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="updateFields">The update fields.</param>
            <param name="where">The where.</param>
            <param name="commandFilter">The command filter.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;System.Int32&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteExpressionsApiAsync.UpdateOnlyFieldsAsync``1(System.Data.IDbConnection,System.Collections.Generic.Dictionary{System.String,System.Object},System.Action{System.Data.IDbCommand},System.Threading.CancellationToken)">
            <summary>
            Updates all values from Object Dictionary, Requires Id which is used as a Primary Key Filter. E.g
            db.UpdateOnlyFieldsAsync&lt;Person&gt;(new Dictionary&lt;string,object&lt; { {"Id", 1}, {"FirstName", "JJ"} });
            UPDATE "Person" SET "FirstName" = 'JJ' WHERE ("Id" = 1)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="updateFields">The update fields.</param>
            <param name="commandFilter">The command filter.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;System.Int32&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteExpressionsApiAsync.UpdateOnlyFieldsAsync``1(System.Data.IDbConnection,System.Collections.Generic.Dictionary{System.String,System.Object},System.String,System.Object[],System.Action{System.Data.IDbCommand},System.Threading.CancellationToken)">
            <summary>
            Updates all values from Object Dictionary matching the where condition. E.g
            db.UpdateOnlyFieldsAsync&lt;Person&gt;(new Dictionary&lt;string,object&lt; { {"FirstName", "JJ"} }, "FirstName == {0}", new[]{ "Jimi" });
            UPDATE "Person" SET "FirstName" = 'JJ' WHERE ("FirstName" = 'Jimi')
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="updateFields">The update fields.</param>
            <param name="whereExpression">The where expression.</param>
            <param name="whereParams">The where parameters.</param>
            <param name="commandFilter">The command filter.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;System.Int32&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteExpressionsApiAsync.UpdateNonDefaultsAsync``1(System.Data.IDbConnection,``0,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Updates all non-default values set on item matching the where condition (if any). E.g
            db.UpdateNonDefaultsAsync(new Person { FirstName = "JJ" }, p =&gt; p.FirstName == "Jimi");
            UPDATE "Person" SET "FirstName" = 'JJ' WHERE ("FirstName" = 'Jimi')
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="item">The item.</param>
            <param name="obj">The object.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;System.Int32&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteExpressionsApiAsync.UpdateAsync``1(System.Data.IDbConnection,``0,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Action{System.Data.IDbCommand},System.Threading.CancellationToken)">
            <summary>
            Updates all values set on item matching the where condition (if any). E.g
            db.UpdateAsync(new Person { Id = 1, FirstName = "JJ" }, p =&gt; p.LastName == "Hendrix");
            UPDATE "Person" SET "Id" = 1,"FirstName" = 'JJ',"LastName" = NULL,"Age" = 0 WHERE ("LastName" = 'Hendrix')
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="item">The item.</param>
            <param name="where">The where.</param>
            <param name="commandFilter">The command filter.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;System.Int32&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteExpressionsApiAsync.UpdateAsync``1(System.Data.IDbConnection,System.Object,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Action{System.Data.IDbCommand},System.Threading.CancellationToken)">
            <summary>
            Updates all matching fields populated on anonymousType that matches where condition (if any). E.g:
            db.UpdateAsync&lt;Person&gt;(new { FirstName = "JJ" }, p =&gt; p.LastName == "Hendrix");
            UPDATE "Person" SET "FirstName" = 'JJ' WHERE ("LastName" = 'Hendrix')
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="updateOnly">The update only.</param>
            <param name="where">The where.</param>
            <param name="commandFilter">The command filter.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;System.Int32&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteExpressionsApiAsync.InsertOnlyAsync``1(System.Data.IDbConnection,``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Threading.CancellationToken)">
            <summary>
            Using an SqlExpression to only Insert the fields specified, e.g:
            db.InsertOnlyAsync(new Person { FirstName = "Amy" }, p =&gt; p.FirstName));
            INSERT INTO "Person" ("FirstName") VALUES ('Amy');
            db.InsertOnlyAsync(new Person { Id =1 , FirstName="Amy" }, p =&gt; new { p.Id, p.FirstName }));
            INSERT INTO "Person" ("Id", "FirstName") VALUES (1, 'Amy');
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="obj">The object.</param>
            <param name="onlyFields">The only fields.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteExpressionsApiAsync.InsertOnlyAsync``1(System.Data.IDbConnection,``0,System.String[],System.Threading.CancellationToken)">
            <summary>
            Using an SqlExpression to only Insert the fields specified, e.g:
            db.InsertOnlyAsync(new Person { FirstName = "Amy" }, new[]{ "FirstName" }));
            INSERT INTO "Person" ("FirstName") VALUES ('Amy');
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="obj">The object.</param>
            <param name="onlyFields">The only fields.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteExpressionsApiAsync.InsertOnlyAsync``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0}},System.Threading.CancellationToken)">
            <summary>
            Using an SqlExpression to only Insert the fields specified, e.g:
            db.InsertOnlyAsync(() =&gt; new Person { FirstName = "Amy" }));
            INSERT INTO "Person" ("FirstName") VALUES (@FirstName);
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="insertFields">The insert fields.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;System.Int32&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteExpressionsApiAsync.DeleteAsync``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Action{System.Data.IDbCommand},System.Threading.CancellationToken)">
            <summary>
            Delete the rows that matches the where expression, e.g:
            db.DeleteAsync&lt;Person&gt;(p =&gt; p.Age == 27);
            DELETE FROM "Person" WHERE ("Age" = 27)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="where">The where.</param>
            <param name="commandFilter">The command filter.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;System.Int32&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteExpressionsApiAsync.DeleteAsync``1(System.Data.IDbConnection,ServiceStack.OrmLite.SqlExpression{``0},System.Action{System.Data.IDbCommand},System.Threading.CancellationToken)">
            <summary>
            Delete the rows that matches the where expression, e.g:
            var q = db.From&gt;Person&lt;());
            db.DeleteAsync&lt;Person&gt;(q.Where(p =&gt; p.Age == 27));
            DELETE FROM "Person" WHERE ("Age" = 27)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="where">The where.</param>
            <param name="commandFilter">The command filter.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;System.Int32&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteExpressionsApiAsync.DeleteWhereAsync``1(System.Data.IDbConnection,System.String,System.Object[],System.Action{System.Data.IDbCommand},System.Threading.CancellationToken)">
            <summary>
            Delete the rows that matches the where filter, e.g:
            db.DeleteWhereAsync&lt;Person&gt;("Age = {0}", new object[] { 27 });
            DELETE FROM "Person" WHERE ("Age" = 27)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConn">The database connection.</param>
            <param name="whereFilter">The where filter.</param>
            <param name="whereParams">The where parameters.</param>
            <param name="commandFilter">The command filter.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;System.Int32&gt;.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.SavePoint">
            <summary>
            Class SavePoint.
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.SavePoint.Transaction">
            <summary>
            Gets the transaction.
            </summary>
            <value>The transaction.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.SavePoint.DialectProvider">
            <summary>
            Gets the dialect provider.
            </summary>
            <value>The dialect provider.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.SavePoint.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="F:ServiceStack.OrmLite.SavePoint.didRelease">
            <summary>
            The did release
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.SavePoint.didRollback">
            <summary>
            The did rollback
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.SavePoint.#ctor(ServiceStack.OrmLite.OrmLiteTransaction,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.OrmLite.SavePoint"/> class.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.SavePoint.VerifyValidState">
            <summary>
            Verifies the state of the valid.
            </summary>
            <exception cref="T:System.InvalidOperationException">SAVEPOINT {Name} already RELEASED</exception>
            <exception cref="T:System.InvalidOperationException">SAVEPOINT {Name} already ROLLBACKED</exception>
        </member>
        <member name="M:ServiceStack.OrmLite.SavePoint.Save">
            <summary>
            Saves this instance.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.SavePoint.SaveAsync">
            <summary>
            Save as an asynchronous operation.
            </summary>
            <returns>A Task representing the asynchronous operation.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SavePoint.Release">
            <summary>
            Releases this instance.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.SavePoint.ReleaseAsync">
            <summary>
            Release as an asynchronous operation.
            </summary>
            <returns>A Task representing the asynchronous operation.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SavePoint.Rollback">
            <summary>
            Rollbacks this instance.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.SavePoint.RollbackAsync">
            <summary>
            Rollback as an asynchronous operation.
            </summary>
            <returns>A Task representing the asynchronous operation.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.SqlBuilder">
            <summary>
            Nice SqlBuilder class by @samsaffron from Dapper.Contrib:
            http://samsaffron.com/archive/2011/09/05/Digging+ourselves+out+of+the+mess+Linq-2-SQL+created
            Modified to work in .NET 3.5
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.SqlBuilder.data">
            <summary>
            The data
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.SqlBuilder.seq">
            <summary>
            The seq
            </summary>
        </member>
        <member name="T:ServiceStack.OrmLite.SqlBuilder.Clause">
            <summary>
            Class Clause.
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.SqlBuilder.Clause.Sql">
            <summary>
            Gets or sets the SQL.
            </summary>
            <value>The SQL.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.SqlBuilder.Clause.Parameters">
            <summary>
            Gets or sets the parameters.
            </summary>
            <value>The parameters.</value>
        </member>
        <member name="T:ServiceStack.OrmLite.SqlBuilder.DynamicParameters">
            <summary>
            Class DynamicParameters.
            </summary>
        </member>
        <member name="T:ServiceStack.OrmLite.SqlBuilder.DynamicParameters.Property">
            <summary>
            Class Property.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlBuilder.DynamicParameters.Property.#ctor(System.String,System.Type,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.OrmLite.SqlBuilder.DynamicParameters.Property" /> class.
            </summary>
            <param name="name">The name.</param>
            <param name="type">The type.</param>
            <param name="value">The value.</param>
        </member>
        <member name="F:ServiceStack.OrmLite.SqlBuilder.DynamicParameters.Property.Name">
            <summary>
            The name
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.SqlBuilder.DynamicParameters.Property.Type">
            <summary>
            The type
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.SqlBuilder.DynamicParameters.Property.Value">
            <summary>
            The value
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.SqlBuilder.DynamicParameters.properties">
            <summary>
            The properties
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlBuilder.DynamicParameters.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.OrmLite.SqlBuilder.DynamicParameters" /> class.
            </summary>
            <param name="initParams">The initialize parameters.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlBuilder.DynamicParameters.AddDynamicParams(System.Object)">
            <summary>
            Adds the dynamic parameters.
            </summary>
            <param name="cmdParams">The command parameters.</param>
        </member>
        <member name="F:ServiceStack.OrmLite.SqlBuilder.DynamicParameters.GetSetAttr">
            <summary>
            The get set attribute
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlBuilder.DynamicParameters.CreateDynamicType">
            <summary>
            Creates the type of the dynamic.
            </summary>
            <returns>System.Object.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.SqlBuilder.Clauses">
            <summary>
            Class Clauses.
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.SqlBuilder.Clauses.joiner">
            <summary>
            The joiner
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.SqlBuilder.Clauses.prefix">
            <summary>
            The prefix
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.SqlBuilder.Clauses.postfix">
            <summary>
            The postfix
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlBuilder.Clauses.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.OrmLite.SqlBuilder.Clauses" /> class.
            </summary>
            <param name="joiner">The joiner.</param>
            <param name="prefix">The prefix.</param>
            <param name="postfix">The postfix.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlBuilder.Clauses.ResolveClauses(ServiceStack.OrmLite.SqlBuilder.DynamicParameters)">
            <summary>
            Resolves the clauses.
            </summary>
            <param name="p">The p.</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.SqlBuilder.Template">
            <summary>
            Class Template.
            Implements the <see cref="T:ServiceStack.OrmLite.ISqlExpression" />
            </summary>
            <seealso cref="T:ServiceStack.OrmLite.ISqlExpression" />
        </member>
        <member name="F:ServiceStack.OrmLite.SqlBuilder.Template.sql">
            <summary>
            The SQL
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.SqlBuilder.Template.builder">
            <summary>
            The builder
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.SqlBuilder.Template.initParams">
            <summary>
            The initialize parameters
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.SqlBuilder.Template.dataSeq">
            <summary>
            The data seq
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlBuilder.Template.#ctor(ServiceStack.OrmLite.SqlBuilder,System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.OrmLite.SqlBuilder.Template" /> class.
            </summary>
            <param name="builder">The builder.</param>
            <param name="sql">The SQL.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="F:ServiceStack.OrmLite.SqlBuilder.Template.regex">
            <summary>
            The regex
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlBuilder.Template.ResolveSql">
            <summary>
            Resolves the SQL.
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.SqlBuilder.Template.rawSql">
            <summary>
            The raw SQL
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.SqlBuilder.Template.parameters">
            <summary>
            The parameters
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.SqlBuilder.Template.RawSql">
            <summary>
            Gets the raw SQL.
            </summary>
            <value>The raw SQL.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.SqlBuilder.Template.Parameters">
            <summary>
            Gets the parameters.
            </summary>
            <value>The parameters.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.SqlBuilder.Template.Params">
            <summary>
            Gets the parameters.
            </summary>
            <value>The parameters.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlBuilder.Template.ToSelectStatement">
            <summary>
            Converts to selectstatement.
            </summary>
            <returns>string.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlBuilder.Template.ToSelectStatement(ServiceStack.OrmLite.QueryType)">
            <summary>
            Converts to selectstatement.
            </summary>
            <param name="forType">For type.</param>
            <returns>string.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlBuilder.Template.SelectInto``1">
            <summary>
            Selects the into.
            </summary>
            <typeparam name="T"></typeparam>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlBuilder.Template.SelectInto``1(ServiceStack.OrmLite.QueryType)">
            <summary>
            Selects the into.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="queryType">Type of the query.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlBuilder.AddTemplate(System.String,System.Object)">
            <summary>
            Adds the template.
            </summary>
            <param name="sql">The SQL.</param>
            <param name="parameters">The parameters.</param>
            <returns>Template.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlBuilder.AddClause(System.String,System.String,System.Object,System.String,System.String,System.String)">
            <summary>
            Adds the clause.
            </summary>
            <param name="name">The name.</param>
            <param name="sql">The SQL.</param>
            <param name="parameters">The parameters.</param>
            <param name="joiner">The joiner.</param>
            <param name="prefix">The prefix.</param>
            <param name="postfix">The postfix.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlBuilder.LeftJoin(System.String,System.Object)">
            <summary>
            Lefts the join.
            </summary>
            <param name="sql">The SQL.</param>
            <param name="parameters">The parameters.</param>
            <returns>SqlBuilder.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlBuilder.Where(System.String,System.Object)">
            <summary>
            Wheres the specified SQL.
            </summary>
            <param name="sql">The SQL.</param>
            <param name="parameters">The parameters.</param>
            <returns>SqlBuilder.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlBuilder.OrderBy(System.String,System.Object)">
            <summary>
            Orders the by.
            </summary>
            <param name="sql">The SQL.</param>
            <param name="parameters">The parameters.</param>
            <returns>SqlBuilder.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlBuilder.Select(System.String,System.Object)">
            <summary>
            Selects the specified SQL.
            </summary>
            <param name="sql">The SQL.</param>
            <param name="parameters">The parameters.</param>
            <returns>SqlBuilder.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlBuilder.AddParameters(System.Object)">
            <summary>
            Adds the parameters.
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>SqlBuilder.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlBuilder.Join(System.String,System.Object)">
            <summary>
            Joins the specified SQL.
            </summary>
            <param name="sql">The SQL.</param>
            <param name="parameters">The parameters.</param>
            <returns>SqlBuilder.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.SqlInValues">
            <summary>
            Class SqlInValues.
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.SqlInValues.EmptyIn">
            <summary>
            The empty in
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.SqlInValues.values">
            <summary>
            The values
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.SqlInValues.dialectProvider">
            <summary>
            The dialect provider
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.SqlInValues.Count">
            <summary>
            Gets the count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlInValues.#ctor(System.Collections.IEnumerable,ServiceStack.OrmLite.IOrmLiteDialectProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.OrmLite.SqlInValues" /> class.
            </summary>
            <param name="values">The values.</param>
            <param name="dialectProvider">The dialect provider.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlInValues.ToSqlInString">
            <summary>
            Converts to sqlinstring.
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlInValues.GetValues">
            <summary>
            Gets the values.
            </summary>
            <returns>IEnumerable.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Support.LoadList`2">
            <summary>
            Class LoadList.
            </summary>
            <typeparam name="Into">The type of the into.</typeparam>
            <typeparam name="From">The type of from.</typeparam>
        </member>
        <member name="F:ServiceStack.OrmLite.Support.LoadList`2.dbCmd">
            <summary>
            The database command
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Support.LoadList`2.q">
            <summary>
            The q
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Support.LoadList`2.dialectProvider">
            <summary>
            The dialect provider
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Support.LoadList`2.parentResults">
            <summary>
            The parent results
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Support.LoadList`2.modelDef">
            <summary>
            The model definition
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Support.LoadList`2.fieldDefs">
            <summary>
            The field defs
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Support.LoadList`2.subSql">
            <summary>
            The sub SQL
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Support.LoadList`2.FieldDefs">
            <summary>
            Gets the field defs.
            </summary>
            <value>The field defs.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.Support.LoadList`2.ParentResults">
            <summary>
            Gets the parent results.
            </summary>
            <value>The parent results.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.Support.LoadList`2.#ctor(System.Data.IDbCommand,ServiceStack.OrmLite.SqlExpression{`1})">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.OrmLite.Support.LoadList`2" /> class.
            </summary>
            <param name="dbCmd">The database command.</param>
            <param name="q">The q.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Support.LoadList`2.GetRefListSql(ServiceStack.OrmLite.ModelDefinition,ServiceStack.OrmLite.FieldDefinition)">
            <summary>
            Gets the reference list SQL.
            </summary>
            <param name="refModelDef">The reference model definition.</param>
            <param name="refField">The reference field.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Support.LoadList`2.SetListChildResults(ServiceStack.OrmLite.FieldDefinition,System.Type,System.Collections.IList,ServiceStack.OrmLite.FieldDefinition)">
            <summary>
            Sets the list child results.
            </summary>
            <param name="fieldDef">The field definition.</param>
            <param name="refType">Type of the reference.</param>
            <param name="childResults">The child results.</param>
            <param name="refField">The reference field.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Support.LoadList`2.GetRefSelfSql(ServiceStack.OrmLite.ModelDefinition,ServiceStack.OrmLite.FieldDefinition,ServiceStack.OrmLite.ModelDefinition,ServiceStack.OrmLite.FieldDefinition)">
            <summary>
            Gets the reference self SQL.
            </summary>
            <param name="modelDef">The model definition.</param>
            <param name="refSelf">The reference self.</param>
            <param name="refModelDef">The reference model definition.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Support.LoadList`2.GetRefFieldSql(ServiceStack.OrmLite.ModelDefinition,ServiceStack.OrmLite.FieldDefinition)">
            <summary>
            Gets the reference field SQL.
            </summary>
            <param name="refModelDef">The reference model definition.</param>
            <param name="refField">The reference field.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Support.LoadList`2.GetFieldReferenceSql(ServiceStack.OrmLite.FieldDefinition,ServiceStack.OrmLite.FieldReference)">
            <summary>
            Gets the field reference SQL.
            </summary>
            <param name="fieldDef">The field definition.</param>
            <param name="fieldRef">The field reference.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Support.LoadList`2.CreateRefMap">
            <summary>
            Creates the reference map.
            </summary>
            <returns>Dictionary&lt;System.Object, System.Object&gt;.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Support.LoadList`2.CaseInsensitiveObjectComparer">
            <summary>
            Class CaseInsensitiveObjectComparer.
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Support.LoadList`2.CaseInsensitiveObjectComparer.Instance">
            <summary>
            The instance
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Support.LoadList`2.CaseInsensitiveObjectComparer.Equals(System.Object,System.Object)">
            <summary>
            Determines whether the specified objects are equal.
            </summary>
            <param name="x">The first object of type T to compare.</param>
            <param name="y">The second object of type T to compare.</param>
            <returns><see langword="true" /> if the specified objects are equal; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Support.LoadList`2.CaseInsensitiveObjectComparer.GetHashCode(System.Object)">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> for which a hash code is to be returned.</param>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Support.LoadList`2.SetRefSelfChildResults(ServiceStack.OrmLite.FieldDefinition,ServiceStack.OrmLite.ModelDefinition,ServiceStack.OrmLite.FieldDefinition,System.Collections.IList,ServiceStack.OrmLite.FieldDefinition)">
            <summary>
            Sets the reference self child results.
            </summary>
            <param name="fieldDef">The field definition.</param>
            <param name="refModelDef">The reference model definition.</param>
            <param name="refSelf">The reference self.</param>
            <param name="childResults">The child results.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Support.LoadList`2.SetRefFieldChildResults(ServiceStack.OrmLite.FieldDefinition,ServiceStack.OrmLite.FieldDefinition,System.Collections.IList)">
            <summary>
            Sets the reference field child results.
            </summary>
            <param name="fieldDef">The field definition.</param>
            <param name="refField">The reference field.</param>
            <param name="childResults">The child results.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Support.LoadList`2.SetFieldReferenceChildResults(ServiceStack.OrmLite.FieldDefinition,ServiceStack.OrmLite.FieldReference,System.Collections.IList)">
            <summary>
            Sets the field reference child results.
            </summary>
            <param name="fieldDef">The field definition.</param>
            <param name="fieldRef">The field reference.</param>
            <param name="childResults">The child results.</param>
        </member>
        <member name="T:ServiceStack.OrmLite.Support.LoadListSync`2">
            <summary>
            Class LoadListSync.
            Implements the <see cref="T:ServiceStack.OrmLite.Support.LoadList`2" />
            </summary>
            <typeparam name="Into">The type of the into.</typeparam>
            <typeparam name="From">The type of from.</typeparam>
            <seealso cref="T:ServiceStack.OrmLite.Support.LoadList`2" />
        </member>
        <member name="M:ServiceStack.OrmLite.Support.LoadListSync`2.#ctor(System.Data.IDbCommand,ServiceStack.OrmLite.SqlExpression{`1})">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.OrmLite.Support.LoadListSync`2" /> class.
            </summary>
            <param name="dbCmd">The database command.</param>
            <param name="q">The q.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Support.LoadListSync`2.SetRefFieldList(ServiceStack.OrmLite.FieldDefinition,System.Type)">
            <summary>
            Sets the reference field list.
            </summary>
            <param name="fieldDef">The field definition.</param>
            <param name="refType">Type of the reference.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Support.LoadListSync`2.SetRefField(ServiceStack.OrmLite.FieldDefinition,System.Type)">
            <summary>
            Sets the reference field.
            </summary>
            <param name="fieldDef">The field definition.</param>
            <param name="refType">Type of the reference.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Support.LoadListSync`2.SetFieldReference(ServiceStack.OrmLite.FieldDefinition,ServiceStack.OrmLite.FieldReference)">
            <summary>
            Sets the field reference.
            </summary>
            <param name="fieldDef">The field definition.</param>
            <param name="fieldRef">The field reference.</param>
        </member>
        <member name="T:ServiceStack.OrmLite.Support.LoadListAsync`2">
            <summary>
            Class LoadListAsync.
            Implements the <see cref="T:ServiceStack.OrmLite.Support.LoadList`2" />
            </summary>
            <typeparam name="Into">The type of the into.</typeparam>
            <typeparam name="From">The type of from.</typeparam>
            <seealso cref="T:ServiceStack.OrmLite.Support.LoadList`2" />
        </member>
        <member name="M:ServiceStack.OrmLite.Support.LoadListAsync`2.#ctor(System.Data.IDbCommand,ServiceStack.OrmLite.SqlExpression{`1})">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.OrmLite.Support.LoadListAsync`2" /> class.
            </summary>
            <param name="dbCmd">The database command.</param>
            <param name="expr">The expr.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Support.LoadListAsync`2.SetRefFieldListAsync(ServiceStack.OrmLite.FieldDefinition,System.Type,System.Threading.CancellationToken)">
            <summary>
            Set reference field list as an asynchronous operation.
            </summary>
            <param name="fieldDef">The field definition.</param>
            <param name="refType">Type of the reference.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>A Task representing the asynchronous operation.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Support.LoadListAsync`2.SetRefFieldAsync(ServiceStack.OrmLite.FieldDefinition,System.Type,System.Threading.CancellationToken)">
            <summary>
            Set reference field as an asynchronous operation.
            </summary>
            <param name="fieldDef">The field definition.</param>
            <param name="refType">Type of the reference.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>A Task representing the asynchronous operation.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Support.LoadListAsync`2.SetFieldReferenceAsync(ServiceStack.OrmLite.FieldDefinition,ServiceStack.OrmLite.FieldReference,System.Threading.CancellationToken)">
            <summary>
            Set field reference as an asynchronous operation.
            </summary>
            <param name="fieldDef">The field definition.</param>
            <param name="fieldRef">The field reference.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>A Task representing the asynchronous operation.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Support.LoadReferences`1">
            <summary>
            Class LoadReferences.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:ServiceStack.OrmLite.Support.LoadReferences`1.dbCmd">
            <summary>
            The database command
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Support.LoadReferences`1.instance">
            <summary>
            The instance
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Support.LoadReferences`1.modelDef">
            <summary>
            The model definition
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Support.LoadReferences`1.fieldDefs">
            <summary>
            The field defs
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Support.LoadReferences`1.pkValue">
            <summary>
            The pk value
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Support.LoadReferences`1.dialectProvider">
            <summary>
            The dialect provider
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Support.LoadReferences`1.#ctor(System.Data.IDbCommand,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.OrmLite.Support.LoadReferences`1" /> class.
            </summary>
            <param name="dbCmd">The database command.</param>
            <param name="instance">The instance.</param>
        </member>
        <member name="P:ServiceStack.OrmLite.Support.LoadReferences`1.FieldDefs">
            <summary>
            Gets the field defs.
            </summary>
            <value>The field defs.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.Support.LoadReferences`1.GetRefListSql(System.Type)">
            <summary>
            Gets the reference list SQL.
            </summary>
            <param name="refType">Type of the reference.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Support.LoadReferences`1.GetRefFieldSql(System.Type,ServiceStack.OrmLite.FieldDefinition)">
            <summary>
            Gets the reference field SQL.
            </summary>
            <param name="refType">Type of the reference.</param>
            <param name="refField">The reference field.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Support.LoadReferences`1.GetRefSelfSql(System.Type,ServiceStack.OrmLite.FieldDefinition,ServiceStack.OrmLite.ModelDefinition)">
            <summary>
            Gets the reference self SQL.
            </summary>
            <param name="refType">Type of the reference.</param>
            <param name="refSelf">The reference self.</param>
            <param name="refModelDef">The reference model definition.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Support.LoadReferences`1.GetFieldReferenceSql(ServiceStack.OrmLite.FieldDefinition,ServiceStack.OrmLite.FieldReference)">
            <summary>
            Gets the field reference SQL.
            </summary>
            <param name="fieldDef">The field definition.</param>
            <param name="fieldRef">The field reference.</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Support.LoadReferencesSync`1">
            <summary>
            Class LoadReferencesSync.
            Implements the <see cref="T:ServiceStack.OrmLite.Support.LoadReferences`1" />
            </summary>
            <typeparam name="T"></typeparam>
            <seealso cref="T:ServiceStack.OrmLite.Support.LoadReferences`1" />
        </member>
        <member name="M:ServiceStack.OrmLite.Support.LoadReferencesSync`1.#ctor(System.Data.IDbCommand,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.OrmLite.Support.LoadReferencesSync`1" /> class.
            </summary>
            <param name="dbCmd">The database command.</param>
            <param name="instance">The instance.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Support.LoadReferencesSync`1.SetRefFieldList(ServiceStack.OrmLite.FieldDefinition,System.Type)">
            <summary>
            Sets the reference field list.
            </summary>
            <param name="fieldDef">The field definition.</param>
            <param name="refType">Type of the reference.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Support.LoadReferencesSync`1.SetRefField(ServiceStack.OrmLite.FieldDefinition,System.Type)">
            <summary>
            Sets the reference field.
            </summary>
            <param name="fieldDef">The field definition.</param>
            <param name="refType">Type of the reference.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Support.LoadReferencesSync`1.SetFieldReference(ServiceStack.OrmLite.FieldDefinition,ServiceStack.OrmLite.FieldReference)">
            <summary>
            Sets the field reference.
            </summary>
            <param name="fieldDef">The field definition.</param>
            <param name="fieldRef">The field reference.</param>
        </member>
        <member name="T:ServiceStack.OrmLite.Support.LoadReferencesAsync`1">
            <summary>
            Class LoadReferencesAsync.
            Implements the <see cref="T:ServiceStack.OrmLite.Support.LoadReferences`1" />
            </summary>
            <typeparam name="T"></typeparam>
            <seealso cref="T:ServiceStack.OrmLite.Support.LoadReferences`1" />
        </member>
        <member name="M:ServiceStack.OrmLite.Support.LoadReferencesAsync`1.#ctor(System.Data.IDbCommand,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.OrmLite.Support.LoadReferencesAsync`1" /> class.
            </summary>
            <param name="dbCmd">The database command.</param>
            <param name="instance">The instance.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Support.LoadReferencesAsync`1.SetRefFieldList(ServiceStack.OrmLite.FieldDefinition,System.Type,System.Threading.CancellationToken)">
            <summary>
            Sets the reference field list.
            </summary>
            <param name="fieldDef">The field definition.</param>
            <param name="refType">Type of the reference.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Support.LoadReferencesAsync`1.SetRefField(ServiceStack.OrmLite.FieldDefinition,System.Type,System.Threading.CancellationToken)">
            <summary>
            Sets the reference field.
            </summary>
            <param name="fieldDef">The field definition.</param>
            <param name="refType">Type of the reference.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Support.LoadReferencesAsync`1.SetFieldReference(ServiceStack.OrmLite.FieldDefinition,ServiceStack.OrmLite.FieldReference,System.Threading.CancellationToken)">
            <summary>
            Sets the field reference.
            </summary>
            <param name="fieldDef">The field definition.</param>
            <param name="fieldRef">The field reference.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        </member>
        <member name="T:ServiceStack.OrmLite.UntypedApiExtensions">
            <summary>
            Class UntypedApiExtensions.
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.UntypedApiExtensions.untypedApiMap">
            <summary>
            The untyped API map
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.UntypedApiExtensions.CreateTypedApi(System.Data.IDbConnection,System.Type)">
            <summary>
            Creates the typed API.
            </summary>
            <param name="db">The database.</param>
            <param name="forType">For type.</param>
            <returns>IUntypedApi.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.UntypedApiExtensions.CreateTypedApi(System.Data.IDbCommand,System.Type)">
            <summary>
            Creates the typed API.
            </summary>
            <param name="dbCmd">The database command.</param>
            <param name="forType">For type.</param>
            <returns>IUntypedApi.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.UntypedApiExtensions.CreateTypedApi(System.Type)">
            <summary>
            Creates the typed API.
            </summary>
            <param name="forType">For type.</param>
            <returns>IUntypedApi.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.UntypedApi`1">
            <summary>
            Class UntypedApi.
            Implements the <see cref="T:ServiceStack.OrmLite.IUntypedApi" />
            </summary>
            <typeparam name="T"></typeparam>
            <seealso cref="T:ServiceStack.OrmLite.IUntypedApi" />
        </member>
        <member name="P:ServiceStack.OrmLite.UntypedApi`1.Db">
            <summary>
            Gets or sets the database.
            </summary>
            <value>The database.</value>
        </member>
        <member name="P:ServiceStack.OrmLite.UntypedApi`1.DbCmd">
            <summary>
            Gets or sets the database command.
            </summary>
            <value>The database command.</value>
        </member>
        <member name="M:ServiceStack.OrmLite.UntypedApi`1.Exec``1(System.Func{System.Data.IDbCommand,``0})">
            <summary>
            Executes the specified filter.
            </summary>
            <typeparam name="TReturn">The type of the t return.</typeparam>
            <param name="filter">The filter.</param>
            <returns>TReturn.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.UntypedApi`1.Exec``1(System.Func{System.Data.IDbCommand,System.Threading.Tasks.Task{``0}})">
            <summary>
            Executes the specified filter.
            </summary>
            <typeparam name="TReturn">The type of the t return.</typeparam>
            <param name="filter">The filter.</param>
            <returns>Task&lt;TReturn&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.UntypedApi`1.Exec(System.Action{System.Data.IDbCommand})">
            <summary>
            Executes the specified filter.
            </summary>
            <param name="filter">The filter.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.UntypedApi`1.SaveAll(System.Collections.IEnumerable)">
            <summary>
            Saves all.
            </summary>
            <param name="objs">The objs.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.UntypedApi`1.Save(System.Object)">
            <summary>
            Saves the specified object.
            </summary>
            <param name="obj">The object.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.UntypedApi`1.SaveAllAsync(System.Collections.IEnumerable,System.Threading.CancellationToken)">
            <summary>
            Saves all asynchronous.
            </summary>
            <param name="objs">The objs.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;System.Int32&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.UntypedApi`1.SaveAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            Saves the asynchronous.
            </summary>
            <param name="obj">The object.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;System.Boolean&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.UntypedApi`1.InsertAll(System.Collections.IEnumerable)">
            <summary>
            Inserts all.
            </summary>
            <param name="objs">The objs.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.UntypedApi`1.InsertAll(System.Collections.IEnumerable,System.Action{System.Data.IDbCommand})">
            <summary>
            Inserts all.
            </summary>
            <param name="objs">The objs.</param>
            <param name="commandFilter">The command filter.</param>
        </member>
        <member name="M:ServiceStack.OrmLite.UntypedApi`1.Insert(System.Object,System.Boolean)">
            <summary>
            Inserts the specified object.
            </summary>
            <param name="obj">The object.</param>
            <param name="selectIdentity">if set to <c>true</c> [select identity].</param>
            <returns>System.Int64.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.UntypedApi`1.Insert(System.Object,System.Action{System.Data.IDbCommand},System.Boolean)">
            <summary>
            Inserts the specified object.
            </summary>
            <param name="obj">The object.</param>
            <param name="commandFilter">The command filter.</param>
            <param name="selectIdentity">if set to <c>true</c> [select identity].</param>
            <returns>System.Int64.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.UntypedApi`1.UpdateAll(System.Collections.IEnumerable)">
            <summary>
            Updates all.
            </summary>
            <param name="objs">The objs.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.UntypedApi`1.UpdateAll(System.Collections.IEnumerable,System.Action{System.Data.IDbCommand})">
            <summary>
            Updates all.
            </summary>
            <param name="objs">The objs.</param>
            <param name="commandFilter">The command filter.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.UntypedApi`1.Update(System.Object)">
            <summary>
            Updates the specified object.
            </summary>
            <param name="obj">The object.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.UntypedApi`1.UpdateAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            Updates the asynchronous.
            </summary>
            <param name="obj">The object.</param>
            <param name="token">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;System.Int32&gt;.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.UntypedApi`1.Update(System.Object,System.Action{System.Data.IDbCommand})">
            <summary>
            Updates the specified object.
            </summary>
            <param name="obj">The object.</param>
            <param name="commandFilter">The command filter.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.UntypedApi`1.DeleteAll">
            <summary>
            Deletes all.
            </summary>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.UntypedApi`1.Delete(System.Object,System.Object)">
            <summary>
            Deletes the specified object.
            </summary>
            <param name="obj">The object.</param>
            <param name="anonType">Type of the anon.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.UntypedApi`1.DeleteNonDefaults(System.Object,System.Object)">
            <summary>
            Deletes the non defaults.
            </summary>
            <param name="obj">The object.</param>
            <param name="filter">The filter.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.UntypedApi`1.DeleteById(System.Object)">
            <summary>
            Deletes the by identifier.
            </summary>
            <param name="id">The identifier.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.UntypedApi`1.DeleteByIds(System.Collections.IEnumerable)">
            <summary>
            Deletes the by ids.
            </summary>
            <param name="idValues">The identifier values.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.UntypedApi`1.Cast(System.Collections.IEnumerable)">
            <summary>
            Casts the specified results.
            </summary>
            <param name="results">The results.</param>
            <returns>IEnumerable.</returns>
        </member>
        <member name="T:ServiceStack.IAppTask">
            <summary>
            Interface IAppTask
            </summary>
        </member>
        <member name="P:ServiceStack.IAppTask.Log">
            <summary>
            Gets or sets the log.
            </summary>
            <value>The log.</value>
        </member>
        <member name="P:ServiceStack.IAppTask.StartedAt">
            <summary>
            Gets or sets the started at.
            </summary>
            <value>The started at.</value>
        </member>
        <member name="P:ServiceStack.IAppTask.CompletedDate">
            <summary>
            Gets or sets the completed date.
            </summary>
            <value>The completed date.</value>
        </member>
        <member name="P:ServiceStack.IAppTask.Error">
            <summary>
            Gets or sets the error.
            </summary>
            <value>The error.</value>
        </member>
        <member name="T:ServiceStack.AppTaskResult">
            <summary>
            Class AppTaskResult.
            </summary>
        </member>
        <member name="M:ServiceStack.AppTaskResult.#ctor(System.Collections.Generic.List{ServiceStack.IAppTask})">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.AppTaskResult" /> class.
            </summary>
            <param name="tasksRun">The tasks run.</param>
        </member>
        <member name="M:ServiceStack.AppTaskResult.GetLogs">
            <summary>
            Gets the logs.
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="P:ServiceStack.AppTaskResult.Error">
            <summary>
            Gets or sets the error.
            </summary>
            <value>The error.</value>
        </member>
        <member name="P:ServiceStack.AppTaskResult.TypesCompleted">
            <summary>
            Gets the types completed.
            </summary>
            <value>The types completed.</value>
        </member>
        <member name="P:ServiceStack.AppTaskResult.TasksRun">
            <summary>
            Gets the tasks run.
            </summary>
            <value>The tasks run.</value>
        </member>
        <member name="P:ServiceStack.AppTaskResult.Succeeded">
            <summary>
            Gets a value indicating whether this <see cref="T:ServiceStack.AppTaskResult" /> is succeeded.
            </summary>
            <value><c>true</c> if succeeded; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:ServiceStack.AppTasks">
            <summary>
            Class AppTasks.
            </summary>
        </member>
        <member name="P:ServiceStack.AppTasks.Instance">
            <summary>
            Gets or sets the instance.
            </summary>
            <value>The instance.</value>
        </member>
        <member name="P:ServiceStack.AppTasks.Log">
            <summary>
            Gets or sets the log.
            </summary>
            <value>The log.</value>
        </member>
        <member name="P:ServiceStack.AppTasks.Tasks">
            <summary>
            Gets the tasks.
            </summary>
            <value>The tasks.</value>
        </member>
        <member name="M:ServiceStack.AppTasks.Register(System.String,System.Action{System.String[]})">
            <summary>
            Register Task to run in APP_TASKS=task1;task2
            </summary>
            <param name="taskName">Name of the task.</param>
            <param name="appTask">The application task.</param>
        </member>
        <member name="M:ServiceStack.AppTasks.GetAppTaskCommands">
            <summary>
            Gets the application task commands.
            </summary>
            <returns>System.Nullable&lt;System.String&gt;.</returns>
        </member>
        <member name="M:ServiceStack.AppTasks.GetAppTaskCommands(System.String[])">
            <summary>
            Gets the application task commands.
            </summary>
            <param name="args">The arguments.</param>
            <returns>System.Nullable&lt;System.String&gt;.</returns>
        </member>
        <member name="M:ServiceStack.AppTasks.RanAsTask">
            <summary>
            Rans as task.
            </summary>
            <returns>System.Nullable&lt;System.Int32&gt;.</returns>
        </member>
        <member name="M:ServiceStack.AppTasks.Run(System.Action)">
            <summary>
            Runs the specified on exit.
            </summary>
            <param name="onExit">The on exit.</param>
        </member>
        <member name="M:ServiceStack.AppTasks.GetDescFmt(System.Type)">
            <summary>
            Gets the desc FMT.
            </summary>
            <param name="nextRun">The next run.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.AppTasks.GetDesc(System.Type)">
            <summary>
            Gets the desc.
            </summary>
            <param name="nextRun">The next run.</param>
            <returns>System.Nullable&lt;System.String&gt;.</returns>
        </member>
        <member name="T:ServiceStack.Common.AssertExtensions">
            <summary>
            Class AssertExtensions.
            </summary>
        </member>
        <member name="M:ServiceStack.Common.AssertExtensions.ThrowIfNullOrEmpty(System.String,System.String)">
            <summary>
            Throws if null or empty.
            </summary>
            <param name="strValue">The string value.</param>
            <param name="varName">Name of the variable.</param>
            <returns>System.String.</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="T:ServiceStack.AttributeExtensions">
            <summary>
            Class AttributeExtensions.
            </summary>
        </member>
        <member name="M:ServiceStack.AttributeExtensions.GetDescription(System.Type)">
            <summary>
            Gets the description.
            </summary>
            <param name="type">The type.</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:ServiceStack.CachedExpressionCompiler">
            <summary>
            Class CachedExpressionCompiler.
            </summary>
        </member>
        <member name="F:ServiceStack.CachedExpressionCompiler._unusedParameterExpr">
            <summary>
            The unused parameter expr
            </summary>
        </member>
        <member name="M:ServiceStack.CachedExpressionCompiler.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Compiles the specified lambda expression.
            </summary>
            <typeparam name="TModel">The type of the t model.</typeparam>
            <typeparam name="TValue">The type of the t value.</typeparam>
            <param name="lambdaExpression">The lambda expression.</param>
            <returns>Func&lt;TModel, TValue&gt;.</returns>
            <exception cref="T:System.ArgumentNullException">lambdaExpression</exception>
        </member>
        <member name="M:ServiceStack.CachedExpressionCompiler.Evaluate(System.Linq.Expressions.Expression)">
            <summary>
            Evaluates the specified argument.
            </summary>
            <param name="arg">The argument.</param>
            <returns>System.Object.</returns>
            <exception cref="T:System.ArgumentNullException">arg</exception>
        </member>
        <member name="M:ServiceStack.CachedExpressionCompiler.Wrap(System.Linq.Expressions.Expression)">
            <summary>
            Wraps the specified argument.
            </summary>
            <param name="arg">The argument.</param>
            <returns>Func&lt;System.Object, System.Object&gt;.</returns>
        </member>
        <member name="T:ServiceStack.ExpressionUtil.BinaryExpressionFingerprint">
            <summary>
            Class BinaryExpressionFingerprint. This class cannot be inherited.
            Implements the <see cref="T:ServiceStack.ExpressionUtil.ExpressionFingerprint" />
            </summary>
            <seealso cref="T:ServiceStack.ExpressionUtil.ExpressionFingerprint" />
        </member>
        <member name="M:ServiceStack.ExpressionUtil.BinaryExpressionFingerprint.#ctor(System.Linq.Expressions.ExpressionType,System.Type,System.Reflection.MethodInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.ExpressionUtil.BinaryExpressionFingerprint" /> class.
            </summary>
            <param name="nodeType">Type of the node.</param>
            <param name="type">The type.</param>
            <param name="method">The method.</param>
        </member>
        <member name="P:ServiceStack.ExpressionUtil.BinaryExpressionFingerprint.Method">
            <summary>
            Gets the method.
            </summary>
            <value>The method.</value>
        </member>
        <member name="M:ServiceStack.ExpressionUtil.BinaryExpressionFingerprint.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ServiceStack.ExpressionUtil.BinaryExpressionFingerprint.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:ServiceStack.ExpressionUtil.BinaryExpressionFingerprint.AddToHashCodeCombiner(ServiceStack.ExpressionUtil.HashCodeCombiner)">
            <summary>
            Adds to hash code combiner.
            </summary>
            <param name="combiner">The combiner.</param>
        </member>
        <member name="T:ServiceStack.ExpressionUtil.CachedExpressionCompiler">
            <summary>
            Class CachedExpressionCompiler.
            </summary>
        </member>
        <member name="M:ServiceStack.ExpressionUtil.CachedExpressionCompiler.Process``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Processes the specified lambda expression.
            </summary>
            <typeparam name="TModel">The type of the t model.</typeparam>
            <typeparam name="TValue">The type of the t value.</typeparam>
            <param name="lambdaExpression">The lambda expression.</param>
            <returns>Func&lt;TModel, TValue&gt;.</returns>
        </member>
        <member name="T:ServiceStack.ExpressionUtil.CachedExpressionCompiler.Compiler`2">
            <summary>
            Class Compiler.
            </summary>
            <typeparam name="TIn">The type of the t in.</typeparam>
            <typeparam name="TOut">The type of the t out.</typeparam>
        </member>
        <member name="F:ServiceStack.ExpressionUtil.CachedExpressionCompiler.Compiler`2._identityFunc">
            <summary>
            The identity function
            </summary>
        </member>
        <member name="F:ServiceStack.ExpressionUtil.CachedExpressionCompiler.Compiler`2._simpleMemberAccessDict">
            <summary>
            The simple member access dictionary
            </summary>
        </member>
        <member name="F:ServiceStack.ExpressionUtil.CachedExpressionCompiler.Compiler`2._constMemberAccessDict">
            <summary>
            The constant member access dictionary
            </summary>
        </member>
        <member name="F:ServiceStack.ExpressionUtil.CachedExpressionCompiler.Compiler`2._fingerprintedCache">
            <summary>
            The fingerprinted cache
            </summary>
        </member>
        <member name="M:ServiceStack.ExpressionUtil.CachedExpressionCompiler.Compiler`2.Compile(System.Linq.Expressions.Expression{System.Func{`0,`1}})">
            <summary>
            Compiles the specified expr.
            </summary>
            <param name="expr">The expr.</param>
            <returns>Func&lt;TIn, TOut&gt;.</returns>
        </member>
        <member name="M:ServiceStack.ExpressionUtil.CachedExpressionCompiler.Compiler`2.CompileFromConstLookup(System.Linq.Expressions.Expression{System.Func{`0,`1}})">
            <summary>
            Compiles from constant lookup.
            </summary>
            <param name="expr">The expr.</param>
            <returns>Func&lt;TIn, TOut&gt;.</returns>
        </member>
        <member name="M:ServiceStack.ExpressionUtil.CachedExpressionCompiler.Compiler`2.CompileFromIdentityFunc(System.Linq.Expressions.Expression{System.Func{`0,`1}})">
            <summary>
            Compiles from identity function.
            </summary>
            <param name="expr">The expr.</param>
            <returns>Func&lt;TIn, TOut&gt;.</returns>
        </member>
        <member name="M:ServiceStack.ExpressionUtil.CachedExpressionCompiler.Compiler`2.CompileFromFingerprint(System.Linq.Expressions.Expression{System.Func{`0,`1}})">
            <summary>
            Compiles from fingerprint.
            </summary>
            <param name="expr">The expr.</param>
            <returns>Func&lt;TIn, TOut&gt;.</returns>
        </member>
        <member name="M:ServiceStack.ExpressionUtil.CachedExpressionCompiler.Compiler`2.CompileFromMemberAccess(System.Linq.Expressions.Expression{System.Func{`0,`1}})">
            <summary>
            Compiles from member access.
            </summary>
            <param name="expr">The expr.</param>
            <returns>Func&lt;TIn, TOut&gt;.</returns>
        </member>
        <member name="M:ServiceStack.ExpressionUtil.CachedExpressionCompiler.Compiler`2.CompileSlow(System.Linq.Expressions.Expression{System.Func{`0,`1}})">
            <summary>
            Compiles the slow.
            </summary>
            <param name="expr">The expr.</param>
            <returns>Func&lt;TIn, TOut&gt;.</returns>
        </member>
        <member name="T:ServiceStack.ExpressionUtil.ConditionalExpressionFingerprint">
            <summary>
            Class ConditionalExpressionFingerprint. This class cannot be inherited.
            Implements the <see cref="T:ServiceStack.ExpressionUtil.ExpressionFingerprint" />
            </summary>
            <seealso cref="T:ServiceStack.ExpressionUtil.ExpressionFingerprint" />
        </member>
        <member name="M:ServiceStack.ExpressionUtil.ConditionalExpressionFingerprint.#ctor(System.Linq.Expressions.ExpressionType,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.ExpressionUtil.ConditionalExpressionFingerprint" /> class.
            </summary>
            <param name="nodeType">Type of the node.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:ServiceStack.ExpressionUtil.ConditionalExpressionFingerprint.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ServiceStack.ExpressionUtil.ConditionalExpressionFingerprint.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="T:ServiceStack.ExpressionUtil.ConstantExpressionFingerprint">
            <summary>
            Class ConstantExpressionFingerprint. This class cannot be inherited.
            Implements the <see cref="T:ServiceStack.ExpressionUtil.ExpressionFingerprint" />
            </summary>
            <seealso cref="T:ServiceStack.ExpressionUtil.ExpressionFingerprint" />
        </member>
        <member name="M:ServiceStack.ExpressionUtil.ConstantExpressionFingerprint.#ctor(System.Linq.Expressions.ExpressionType,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.ExpressionUtil.ConstantExpressionFingerprint" /> class.
            </summary>
            <param name="nodeType">Type of the node.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:ServiceStack.ExpressionUtil.ConstantExpressionFingerprint.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ServiceStack.ExpressionUtil.ConstantExpressionFingerprint.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="T:ServiceStack.ExpressionUtil.DefaultExpressionFingerprint">
            <summary>
            Class DefaultExpressionFingerprint. This class cannot be inherited.
            Implements the <see cref="T:ServiceStack.ExpressionUtil.ExpressionFingerprint" />
            </summary>
            <seealso cref="T:ServiceStack.ExpressionUtil.ExpressionFingerprint" />
        </member>
        <member name="M:ServiceStack.ExpressionUtil.DefaultExpressionFingerprint.#ctor(System.Linq.Expressions.ExpressionType,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.ExpressionUtil.DefaultExpressionFingerprint" /> class.
            </summary>
            <param name="nodeType">Type of the node.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:ServiceStack.ExpressionUtil.DefaultExpressionFingerprint.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ServiceStack.ExpressionUtil.DefaultExpressionFingerprint.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="T:ServiceStack.ExpressionUtil.ExpressionFingerprint">
            <summary>
            Class ExpressionFingerprint.
            </summary>
        </member>
        <member name="M:ServiceStack.ExpressionUtil.ExpressionFingerprint.#ctor(System.Linq.Expressions.ExpressionType,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.ExpressionUtil.ExpressionFingerprint" /> class.
            </summary>
            <param name="nodeType">Type of the node.</param>
            <param name="type">The type.</param>
        </member>
        <member name="P:ServiceStack.ExpressionUtil.ExpressionFingerprint.NodeType">
            <summary>
            Gets the type of the node.
            </summary>
            <value>The type of the node.</value>
        </member>
        <member name="P:ServiceStack.ExpressionUtil.ExpressionFingerprint.Type">
            <summary>
            Gets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="M:ServiceStack.ExpressionUtil.ExpressionFingerprint.AddToHashCodeCombiner(ServiceStack.ExpressionUtil.HashCodeCombiner)">
            <summary>
            Adds to hash code combiner.
            </summary>
            <param name="combiner">The combiner.</param>
        </member>
        <member name="M:ServiceStack.ExpressionUtil.ExpressionFingerprint.Equals(ServiceStack.ExpressionUtil.ExpressionFingerprint)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ServiceStack.ExpressionUtil.ExpressionFingerprint.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ServiceStack.ExpressionUtil.ExpressionFingerprint.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="T:ServiceStack.ExpressionUtil.ExpressionFingerprintChain">
            <summary>
            Class ExpressionFingerprintChain. This class cannot be inherited.
            Implements the <see cref="T:ServiceStack.ExpressionUtil.ExpressionFingerprintChain" />
            </summary>
            <seealso cref="T:ServiceStack.ExpressionUtil.ExpressionFingerprintChain" />
        </member>
        <member name="F:ServiceStack.ExpressionUtil.ExpressionFingerprintChain.Elements">
            <summary>
            The elements
            </summary>
        </member>
        <member name="M:ServiceStack.ExpressionUtil.ExpressionFingerprintChain.Equals(ServiceStack.ExpressionUtil.ExpressionFingerprintChain)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns><see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:ServiceStack.ExpressionUtil.ExpressionFingerprintChain.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ServiceStack.ExpressionUtil.ExpressionFingerprintChain.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="T:ServiceStack.ExpressionUtil.FingerprintingExpressionVisitor">
            <summary>
            Class FingerprintingExpressionVisitor. This class cannot be inherited.
            Implements the <see cref="T:System.Linq.Expressions.ExpressionVisitor" />
            </summary>
            <seealso cref="T:System.Linq.Expressions.ExpressionVisitor" />
        </member>
        <member name="F:ServiceStack.ExpressionUtil.FingerprintingExpressionVisitor._seenConstants">
            <summary>
            The seen constants
            </summary>
        </member>
        <member name="F:ServiceStack.ExpressionUtil.FingerprintingExpressionVisitor._seenParameters">
            <summary>
            The seen parameters
            </summary>
        </member>
        <member name="F:ServiceStack.ExpressionUtil.FingerprintingExpressionVisitor._currentChain">
            <summary>
            The current chain
            </summary>
        </member>
        <member name="F:ServiceStack.ExpressionUtil.FingerprintingExpressionVisitor._gaveUp">
            <summary>
            The gave up
            </summary>
        </member>
        <member name="M:ServiceStack.ExpressionUtil.FingerprintingExpressionVisitor.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:ServiceStack.ExpressionUtil.FingerprintingExpressionVisitor" /> class from being created.
            </summary>
        </member>
        <member name="M:ServiceStack.ExpressionUtil.FingerprintingExpressionVisitor.GiveUp``1(``0)">
            <summary>
            Gives up.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="node">The node.</param>
            <returns>T.</returns>
        </member>
        <member name="M:ServiceStack.ExpressionUtil.FingerprintingExpressionVisitor.GetFingerprintChain(System.Linq.Expressions.Expression,System.Collections.Generic.List{System.Object}@)">
            <summary>
            Gets the fingerprint chain.
            </summary>
            <param name="expr">The expr.</param>
            <param name="capturedConstants">The captured constants.</param>
            <returns>ExpressionFingerprintChain.</returns>
        </member>
        <member name="M:ServiceStack.ExpressionUtil.FingerprintingExpressionVisitor.Visit(System.Linq.Expressions.Expression)">
            <summary>
            Dispatches the expression to one of the more specialized visit methods in this class.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
        </member>
        <member name="M:ServiceStack.ExpressionUtil.FingerprintingExpressionVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)">
            <summary>
            Visits the children of the <see cref="T:System.Linq.Expressions.BinaryExpression" />.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
        </member>
        <member name="M:ServiceStack.ExpressionUtil.FingerprintingExpressionVisitor.VisitBlock(System.Linq.Expressions.BlockExpression)">
            <summary>
            Visits the children of the <see cref="T:System.Linq.Expressions.BlockExpression" />.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
        </member>
        <member name="M:ServiceStack.ExpressionUtil.FingerprintingExpressionVisitor.VisitCatchBlock(System.Linq.Expressions.CatchBlock)">
            <summary>
            Visits the children of the <see cref="T:System.Linq.Expressions.CatchBlock" />.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
        </member>
        <member name="M:ServiceStack.ExpressionUtil.FingerprintingExpressionVisitor.VisitConditional(System.Linq.Expressions.ConditionalExpression)">
            <summary>
            Visits the children of the <see cref="T:System.Linq.Expressions.ConditionalExpression" />.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
        </member>
        <member name="M:ServiceStack.ExpressionUtil.FingerprintingExpressionVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression)">
            <summary>
            Visits the <see cref="T:System.Linq.Expressions.ConstantExpression" />.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
        </member>
        <member name="M:ServiceStack.ExpressionUtil.FingerprintingExpressionVisitor.VisitDebugInfo(System.Linq.Expressions.DebugInfoExpression)">
            <summary>
            Visits the <see cref="T:System.Linq.Expressions.DebugInfoExpression" />.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
        </member>
        <member name="M:ServiceStack.ExpressionUtil.FingerprintingExpressionVisitor.VisitDefault(System.Linq.Expressions.DefaultExpression)">
            <summary>
            Visits the <see cref="T:System.Linq.Expressions.DefaultExpression" />.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
        </member>
        <member name="M:ServiceStack.ExpressionUtil.FingerprintingExpressionVisitor.VisitDynamic(System.Linq.Expressions.DynamicExpression)">
            <summary>
            Visits the children of the <see cref="T:System.Linq.Expressions.DynamicExpression" />.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
        </member>
        <member name="M:ServiceStack.ExpressionUtil.FingerprintingExpressionVisitor.VisitElementInit(System.Linq.Expressions.ElementInit)">
            <summary>
            Visits the children of the <see cref="T:System.Linq.Expressions.ElementInit" />.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
        </member>
        <member name="M:ServiceStack.ExpressionUtil.FingerprintingExpressionVisitor.VisitExtension(System.Linq.Expressions.Expression)">
            <summary>
            Visits the children of the extension expression.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
        </member>
        <member name="M:ServiceStack.ExpressionUtil.FingerprintingExpressionVisitor.VisitGoto(System.Linq.Expressions.GotoExpression)">
            <summary>
            Visits the children of the <see cref="T:System.Linq.Expressions.GotoExpression" />.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
        </member>
        <member name="M:ServiceStack.ExpressionUtil.FingerprintingExpressionVisitor.VisitIndex(System.Linq.Expressions.IndexExpression)">
            <summary>
            Visits the children of the <see cref="T:System.Linq.Expressions.IndexExpression" />.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
        </member>
        <member name="M:ServiceStack.ExpressionUtil.FingerprintingExpressionVisitor.VisitInvocation(System.Linq.Expressions.InvocationExpression)">
            <summary>
            Visits the children of the <see cref="T:System.Linq.Expressions.InvocationExpression" />.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
        </member>
        <member name="M:ServiceStack.ExpressionUtil.FingerprintingExpressionVisitor.VisitLabel(System.Linq.Expressions.LabelExpression)">
            <summary>
            Visits the children of the <see cref="T:System.Linq.Expressions.LabelExpression" />.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
        </member>
        <member name="M:ServiceStack.ExpressionUtil.FingerprintingExpressionVisitor.VisitLabelTarget(System.Linq.Expressions.LabelTarget)">
            <summary>
            Visits the <see cref="T:System.Linq.Expressions.LabelTarget" />.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
        </member>
        <member name="M:ServiceStack.ExpressionUtil.FingerprintingExpressionVisitor.VisitLambda``1(System.Linq.Expressions.Expression{``0})">
            <summary>
            Visits the children of the <see cref="T:System.Linq.Expressions.Expression`1" />.
            </summary>
            <typeparam name="T">The type of the delegate.</typeparam>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
        </member>
        <member name="M:ServiceStack.ExpressionUtil.FingerprintingExpressionVisitor.VisitListInit(System.Linq.Expressions.ListInitExpression)">
            <summary>
            Visits the children of the <see cref="T:System.Linq.Expressions.ListInitExpression" />.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
        </member>
        <member name="M:ServiceStack.ExpressionUtil.FingerprintingExpressionVisitor.VisitLoop(System.Linq.Expressions.LoopExpression)">
            <summary>
            Visits the children of the <see cref="T:System.Linq.Expressions.LoopExpression" />.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
        </member>
        <member name="M:ServiceStack.ExpressionUtil.FingerprintingExpressionVisitor.VisitMember(System.Linq.Expressions.MemberExpression)">
            <summary>
            Visits the children of the <see cref="T:System.Linq.Expressions.MemberExpression" />.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
        </member>
        <member name="M:ServiceStack.ExpressionUtil.FingerprintingExpressionVisitor.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)">
            <summary>
            Visits the children of the <see cref="T:System.Linq.Expressions.MemberAssignment" />.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
        </member>
        <member name="M:ServiceStack.ExpressionUtil.FingerprintingExpressionVisitor.VisitMemberBinding(System.Linq.Expressions.MemberBinding)">
            <summary>
            Visits the children of the <see cref="T:System.Linq.Expressions.MemberBinding" />.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
        </member>
        <member name="M:ServiceStack.ExpressionUtil.FingerprintingExpressionVisitor.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)">
            <summary>
            Visits the children of the <see cref="T:System.Linq.Expressions.MemberInitExpression" />.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
        </member>
        <member name="M:ServiceStack.ExpressionUtil.FingerprintingExpressionVisitor.VisitMemberListBinding(System.Linq.Expressions.MemberListBinding)">
            <summary>
            Visits the children of the <see cref="T:System.Linq.Expressions.MemberListBinding" />.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
        </member>
        <member name="M:ServiceStack.ExpressionUtil.FingerprintingExpressionVisitor.VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)">
            <summary>
            Visits the children of the <see cref="T:System.Linq.Expressions.MemberMemberBinding" />.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
        </member>
        <member name="M:ServiceStack.ExpressionUtil.FingerprintingExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Visits the children of the <see cref="T:System.Linq.Expressions.MethodCallExpression" />.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
        </member>
        <member name="M:ServiceStack.ExpressionUtil.FingerprintingExpressionVisitor.VisitNew(System.Linq.Expressions.NewExpression)">
            <summary>
            Visits the children of the <see cref="T:System.Linq.Expressions.NewExpression" />.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
        </member>
        <member name="M:ServiceStack.ExpressionUtil.FingerprintingExpressionVisitor.VisitNewArray(System.Linq.Expressions.NewArrayExpression)">
            <summary>
            Visits the children of the <see cref="T:System.Linq.Expressions.NewArrayExpression" />.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
        </member>
        <member name="M:ServiceStack.ExpressionUtil.FingerprintingExpressionVisitor.VisitParameter(System.Linq.Expressions.ParameterExpression)">
            <summary>
            Visits the <see cref="T:System.Linq.Expressions.ParameterExpression" />.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
        </member>
        <member name="M:ServiceStack.ExpressionUtil.FingerprintingExpressionVisitor.VisitRuntimeVariables(System.Linq.Expressions.RuntimeVariablesExpression)">
            <summary>
            Visits the children of the <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" />.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
        </member>
        <member name="M:ServiceStack.ExpressionUtil.FingerprintingExpressionVisitor.VisitSwitch(System.Linq.Expressions.SwitchExpression)">
            <summary>
            Visits the children of the <see cref="T:System.Linq.Expressions.SwitchExpression" />.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
        </member>
        <member name="M:ServiceStack.ExpressionUtil.FingerprintingExpressionVisitor.VisitSwitchCase(System.Linq.Expressions.SwitchCase)">
            <summary>
            Visits the children of the <see cref="T:System.Linq.Expressions.SwitchCase" />.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
        </member>
        <member name="M:ServiceStack.ExpressionUtil.FingerprintingExpressionVisitor.VisitTry(System.Linq.Expressions.TryExpression)">
            <summary>
            Visits the children of the <see cref="T:System.Linq.Expressions.TryExpression" />.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
        </member>
        <member name="M:ServiceStack.ExpressionUtil.FingerprintingExpressionVisitor.VisitTypeBinary(System.Linq.Expressions.TypeBinaryExpression)">
            <summary>
            Visits the children of the <see cref="T:System.Linq.Expressions.TypeBinaryExpression" />.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
        </member>
        <member name="M:ServiceStack.ExpressionUtil.FingerprintingExpressionVisitor.VisitUnary(System.Linq.Expressions.UnaryExpression)">
            <summary>
            Visits the children of the <see cref="T:System.Linq.Expressions.UnaryExpression" />.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
        </member>
        <member name="T:ServiceStack.ExpressionUtil.HashCodeCombiner">
            <summary>
            Class HashCodeCombiner.
            </summary>
        </member>
        <member name="F:ServiceStack.ExpressionUtil.HashCodeCombiner._combinedHash64">
            <summary>
            The combined hash64
            </summary>
        </member>
        <member name="P:ServiceStack.ExpressionUtil.HashCodeCombiner.CombinedHash">
            <summary>
            Gets the combined hash.
            </summary>
            <value>The combined hash.</value>
        </member>
        <member name="M:ServiceStack.ExpressionUtil.HashCodeCombiner.AddFingerprint(ServiceStack.ExpressionUtil.ExpressionFingerprint)">
            <summary>
            Adds the fingerprint.
            </summary>
            <param name="fingerprint">The fingerprint.</param>
        </member>
        <member name="M:ServiceStack.ExpressionUtil.HashCodeCombiner.AddEnumerable(System.Collections.IEnumerable)">
            <summary>
            Adds the enumerable.
            </summary>
            <param name="e">The e.</param>
        </member>
        <member name="M:ServiceStack.ExpressionUtil.HashCodeCombiner.AddInt32(System.Int32)">
            <summary>
            Adds the int32.
            </summary>
            <param name="i">The i.</param>
        </member>
        <member name="M:ServiceStack.ExpressionUtil.HashCodeCombiner.AddObject(System.Object)">
            <summary>
            Adds the object.
            </summary>
            <param name="o">The o.</param>
        </member>
        <member name="T:ServiceStack.ExpressionUtil.Hoisted`2">
            <summary>
            Delegate Hoisted
            </summary>
            <typeparam name="TModel">The type of the t model.</typeparam>
            <typeparam name="TValue">The type of the t value.</typeparam>
            <param name="model">The model.</param>
            <param name="capturedConstants">The captured constants.</param>
            <returns>TValue.</returns>
        </member>
        <member name="T:ServiceStack.ExpressionUtil.HoistingExpressionVisitor`2">
            <summary>
            Class HoistingExpressionVisitor. This class cannot be inherited.
            Implements the <see cref="T:System.Linq.Expressions.ExpressionVisitor" />
            </summary>
            <typeparam name="TIn">The type of the t in.</typeparam>
            <typeparam name="TOut">The type of the t out.</typeparam>
            <seealso cref="T:System.Linq.Expressions.ExpressionVisitor" />
        </member>
        <member name="F:ServiceStack.ExpressionUtil.HoistingExpressionVisitor`2._hoistedConstantsParamExpr">
            <summary>
            The hoisted constants parameter expr
            </summary>
        </member>
        <member name="F:ServiceStack.ExpressionUtil.HoistingExpressionVisitor`2._numConstantsProcessed">
            <summary>
            The number constants processed
            </summary>
        </member>
        <member name="M:ServiceStack.ExpressionUtil.HoistingExpressionVisitor`2.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:ServiceStack.ExpressionUtil.HoistingExpressionVisitor`2" /> class from being created.
            </summary>
        </member>
        <member name="M:ServiceStack.ExpressionUtil.HoistingExpressionVisitor`2.Hoist(System.Linq.Expressions.Expression{System.Func{`0,`1}})">
            <summary>
            Hoists the specified expr.
            </summary>
            <param name="expr">The expr.</param>
            <returns>Expression&lt;Hoisted&lt;TIn, TOut&gt;&gt;.</returns>
        </member>
        <member name="M:ServiceStack.ExpressionUtil.HoistingExpressionVisitor`2.VisitConstant(System.Linq.Expressions.ConstantExpression)">
            <summary>
            Visits the <see cref="T:System.Linq.Expressions.ConstantExpression" />.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
        </member>
        <member name="T:ServiceStack.ExpressionUtil.IndexExpressionFingerprint">
            <summary>
            Class IndexExpressionFingerprint. This class cannot be inherited.
            Implements the <see cref="T:ServiceStack.ExpressionUtil.ExpressionFingerprint" />
            </summary>
            <seealso cref="T:ServiceStack.ExpressionUtil.ExpressionFingerprint" />
        </member>
        <member name="M:ServiceStack.ExpressionUtil.IndexExpressionFingerprint.#ctor(System.Linq.Expressions.ExpressionType,System.Type,System.Reflection.PropertyInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.ExpressionUtil.IndexExpressionFingerprint" /> class.
            </summary>
            <param name="nodeType">Type of the node.</param>
            <param name="type">The type.</param>
            <param name="indexer">The indexer.</param>
        </member>
        <member name="P:ServiceStack.ExpressionUtil.IndexExpressionFingerprint.Indexer">
            <summary>
            Gets the indexer.
            </summary>
            <value>The indexer.</value>
        </member>
        <member name="M:ServiceStack.ExpressionUtil.IndexExpressionFingerprint.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ServiceStack.ExpressionUtil.IndexExpressionFingerprint.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:ServiceStack.ExpressionUtil.IndexExpressionFingerprint.AddToHashCodeCombiner(ServiceStack.ExpressionUtil.HashCodeCombiner)">
            <summary>
            Adds to hash code combiner.
            </summary>
            <param name="combiner">The combiner.</param>
        </member>
        <member name="T:ServiceStack.ExpressionUtil.LambdaExpressionFingerprint">
            <summary>
            Class LambdaExpressionFingerprint. This class cannot be inherited.
            Implements the <see cref="T:ServiceStack.ExpressionUtil.ExpressionFingerprint" />
            </summary>
            <seealso cref="T:ServiceStack.ExpressionUtil.ExpressionFingerprint" />
        </member>
        <member name="M:ServiceStack.ExpressionUtil.LambdaExpressionFingerprint.#ctor(System.Linq.Expressions.ExpressionType,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.ExpressionUtil.LambdaExpressionFingerprint" /> class.
            </summary>
            <param name="nodeType">Type of the node.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:ServiceStack.ExpressionUtil.LambdaExpressionFingerprint.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ServiceStack.ExpressionUtil.LambdaExpressionFingerprint.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="T:ServiceStack.ExpressionUtil.MemberExpressionFingerprint">
            <summary>
            Class MemberExpressionFingerprint. This class cannot be inherited.
            Implements the <see cref="T:ServiceStack.ExpressionUtil.ExpressionFingerprint" />
            </summary>
            <seealso cref="T:ServiceStack.ExpressionUtil.ExpressionFingerprint" />
        </member>
        <member name="M:ServiceStack.ExpressionUtil.MemberExpressionFingerprint.#ctor(System.Linq.Expressions.ExpressionType,System.Type,System.Reflection.MemberInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.ExpressionUtil.MemberExpressionFingerprint" /> class.
            </summary>
            <param name="nodeType">Type of the node.</param>
            <param name="type">The type.</param>
            <param name="member">The member.</param>
        </member>
        <member name="P:ServiceStack.ExpressionUtil.MemberExpressionFingerprint.Member">
            <summary>
            Gets the member.
            </summary>
            <value>The member.</value>
        </member>
        <member name="M:ServiceStack.ExpressionUtil.MemberExpressionFingerprint.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ServiceStack.ExpressionUtil.MemberExpressionFingerprint.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:ServiceStack.ExpressionUtil.MemberExpressionFingerprint.AddToHashCodeCombiner(ServiceStack.ExpressionUtil.HashCodeCombiner)">
            <summary>
            Adds to hash code combiner.
            </summary>
            <param name="combiner">The combiner.</param>
        </member>
        <member name="T:ServiceStack.ExpressionUtil.MethodCallExpressionFingerprint">
            <summary>
            Class MethodCallExpressionFingerprint. This class cannot be inherited.
            Implements the <see cref="T:ServiceStack.ExpressionUtil.ExpressionFingerprint" />
            </summary>
            <seealso cref="T:ServiceStack.ExpressionUtil.ExpressionFingerprint" />
        </member>
        <member name="M:ServiceStack.ExpressionUtil.MethodCallExpressionFingerprint.#ctor(System.Linq.Expressions.ExpressionType,System.Type,System.Reflection.MethodInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.ExpressionUtil.MethodCallExpressionFingerprint" /> class.
            </summary>
            <param name="nodeType">Type of the node.</param>
            <param name="type">The type.</param>
            <param name="method">The method.</param>
        </member>
        <member name="P:ServiceStack.ExpressionUtil.MethodCallExpressionFingerprint.Method">
            <summary>
            Gets the method.
            </summary>
            <value>The method.</value>
        </member>
        <member name="M:ServiceStack.ExpressionUtil.MethodCallExpressionFingerprint.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ServiceStack.ExpressionUtil.MethodCallExpressionFingerprint.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:ServiceStack.ExpressionUtil.MethodCallExpressionFingerprint.AddToHashCodeCombiner(ServiceStack.ExpressionUtil.HashCodeCombiner)">
            <summary>
            Adds to hash code combiner.
            </summary>
            <param name="combiner">The combiner.</param>
        </member>
        <member name="T:ServiceStack.ExpressionUtil.ParameterExpressionFingerprint">
            <summary>
            Class ParameterExpressionFingerprint. This class cannot be inherited.
            Implements the <see cref="T:ServiceStack.ExpressionUtil.ExpressionFingerprint" />
            </summary>
            <seealso cref="T:ServiceStack.ExpressionUtil.ExpressionFingerprint" />
        </member>
        <member name="M:ServiceStack.ExpressionUtil.ParameterExpressionFingerprint.#ctor(System.Linq.Expressions.ExpressionType,System.Type,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.ExpressionUtil.ParameterExpressionFingerprint" /> class.
            </summary>
            <param name="nodeType">Type of the node.</param>
            <param name="type">The type.</param>
            <param name="parameterIndex">Index of the parameter.</param>
        </member>
        <member name="P:ServiceStack.ExpressionUtil.ParameterExpressionFingerprint.ParameterIndex">
            <summary>
            Gets the index of the parameter.
            </summary>
            <value>The index of the parameter.</value>
        </member>
        <member name="M:ServiceStack.ExpressionUtil.ParameterExpressionFingerprint.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ServiceStack.ExpressionUtil.ParameterExpressionFingerprint.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:ServiceStack.ExpressionUtil.ParameterExpressionFingerprint.AddToHashCodeCombiner(ServiceStack.ExpressionUtil.HashCodeCombiner)">
            <summary>
            Adds to hash code combiner.
            </summary>
            <param name="combiner">The combiner.</param>
        </member>
        <member name="T:ServiceStack.ExpressionUtil.TypeBinaryExpressionFingerprint">
            <summary>
            Class TypeBinaryExpressionFingerprint. This class cannot be inherited.
            Implements the <see cref="T:ServiceStack.ExpressionUtil.ExpressionFingerprint" />
            </summary>
            <seealso cref="T:ServiceStack.ExpressionUtil.ExpressionFingerprint" />
        </member>
        <member name="M:ServiceStack.ExpressionUtil.TypeBinaryExpressionFingerprint.#ctor(System.Linq.Expressions.ExpressionType,System.Type,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.ExpressionUtil.TypeBinaryExpressionFingerprint" /> class.
            </summary>
            <param name="nodeType">Type of the node.</param>
            <param name="type">The type.</param>
            <param name="typeOperand">The type operand.</param>
        </member>
        <member name="P:ServiceStack.ExpressionUtil.TypeBinaryExpressionFingerprint.TypeOperand">
            <summary>
            Gets the type operand.
            </summary>
            <value>The type operand.</value>
        </member>
        <member name="M:ServiceStack.ExpressionUtil.TypeBinaryExpressionFingerprint.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ServiceStack.ExpressionUtil.TypeBinaryExpressionFingerprint.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:ServiceStack.ExpressionUtil.TypeBinaryExpressionFingerprint.AddToHashCodeCombiner(ServiceStack.ExpressionUtil.HashCodeCombiner)">
            <summary>
            Adds to hash code combiner.
            </summary>
            <param name="combiner">The combiner.</param>
        </member>
        <member name="T:ServiceStack.ExpressionUtil.UnaryExpressionFingerprint">
            <summary>
            Class UnaryExpressionFingerprint. This class cannot be inherited.
            Implements the <see cref="T:ServiceStack.ExpressionUtil.ExpressionFingerprint" />
            </summary>
            <seealso cref="T:ServiceStack.ExpressionUtil.ExpressionFingerprint" />
        </member>
        <member name="M:ServiceStack.ExpressionUtil.UnaryExpressionFingerprint.#ctor(System.Linq.Expressions.ExpressionType,System.Type,System.Reflection.MethodInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.ExpressionUtil.UnaryExpressionFingerprint" /> class.
            </summary>
            <param name="nodeType">Type of the node.</param>
            <param name="type">The type.</param>
            <param name="method">The method.</param>
        </member>
        <member name="P:ServiceStack.ExpressionUtil.UnaryExpressionFingerprint.Method">
            <summary>
            Gets the method.
            </summary>
            <value>The method.</value>
        </member>
        <member name="M:ServiceStack.ExpressionUtil.UnaryExpressionFingerprint.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ServiceStack.ExpressionUtil.UnaryExpressionFingerprint.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:ServiceStack.ExpressionUtil.UnaryExpressionFingerprint.AddToHashCodeCombiner(ServiceStack.ExpressionUtil.HashCodeCombiner)">
            <summary>
            Adds to hash code combiner.
            </summary>
            <param name="combiner">The combiner.</param>
        </member>
        <member name="T:ServiceStack.Command">
            <summary>
            Class Command.
            </summary>
        </member>
        <member name="P:ServiceStack.Command.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:ServiceStack.Command.Original">
            <summary>
            Gets or sets the original.
            </summary>
            <value>The original.</value>
        </member>
        <member name="P:ServiceStack.Command.Args">
            <summary>
            Gets the arguments.
            </summary>
            <value>The arguments.</value>
        </member>
        <member name="P:ServiceStack.Command.Suffix">
            <summary>
            Gets or sets the suffix.
            </summary>
            <value>The suffix.</value>
        </member>
        <member name="M:ServiceStack.Command.IndexOfMethodEnd(System.ReadOnlyMemory{System.Char},System.Int32)">
            <summary>
            Indexes the of method end.
            </summary>
            <param name="commandsString">The commands string.</param>
            <param name="pos">The position.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:ServiceStack.Command.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="T:ServiceStack.ConnectionInfo">
            <summary>
            Class ConnectionInfo.
            </summary>
        </member>
        <member name="P:ServiceStack.ConnectionInfo.NamedConnection">
            <summary>
            Gets or sets the named connection.
            </summary>
            <value>The named connection.</value>
        </member>
        <member name="P:ServiceStack.ConnectionInfo.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ServiceStack.ConnectionInfo.ProviderName">
            <summary>
            Gets or sets the name of the provider.
            </summary>
            <value>The name of the provider.</value>
        </member>
        <member name="T:ServiceStack.Data.DbConnectionFactory">
            <summary>
            Class DbConnectionFactory.
            Implements the <see cref="T:ServiceStack.Data.IDbConnectionFactory" />
            </summary>
            <seealso cref="T:ServiceStack.Data.IDbConnectionFactory" />
        </member>
        <member name="F:ServiceStack.Data.DbConnectionFactory.connectionFactoryFn">
            <summary>
            The connection factory function
            </summary>
        </member>
        <member name="M:ServiceStack.Data.DbConnectionFactory.#ctor(System.Func{System.Data.IDbConnection})">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.Data.DbConnectionFactory" /> class.
            </summary>
            <param name="connectionFactoryFn">The connection factory function.</param>
        </member>
        <member name="M:ServiceStack.Data.DbConnectionFactory.OpenDbConnection">
            <summary>
            Opens the database connection.
            </summary>
            <returns>IDbConnection.</returns>
        </member>
        <member name="M:ServiceStack.Data.DbConnectionFactory.CreateDbConnection">
            <summary>
            Creates the database connection.
            </summary>
            <returns>IDbConnection.</returns>
        </member>
        <member name="T:ServiceStack.Data.IDbConnectionFactory">
            <summary>
            Interface IDbConnectionFactory
            </summary>
        </member>
        <member name="M:ServiceStack.Data.IDbConnectionFactory.OpenDbConnection">
            <summary>
            Opens the database connection.
            </summary>
            <returns>IDbConnection.</returns>
        </member>
        <member name="M:ServiceStack.Data.IDbConnectionFactory.CreateDbConnection">
            <summary>
            Creates the database connection.
            </summary>
            <returns>IDbConnection.</returns>
        </member>
        <member name="T:ServiceStack.Data.IDbConnectionFactoryExtended">
            <summary>
            Interface IDbConnectionFactoryExtended
            Implements the <see cref="T:ServiceStack.Data.IDbConnectionFactory" />
            </summary>
            <seealso cref="T:ServiceStack.Data.IDbConnectionFactory" />
        </member>
        <member name="M:ServiceStack.Data.IDbConnectionFactoryExtended.OpenDbConnection(System.String)">
            <summary>
            Opens the database connection.
            </summary>
            <param name="namedConnection">The named connection.</param>
            <returns>IDbConnection.</returns>
        </member>
        <member name="M:ServiceStack.Data.IDbConnectionFactoryExtended.OpenDbConnectionString(System.String)">
            <summary>
            Opens the database connection string.
            </summary>
            <param name="connectionString">The connection string.</param>
            <returns>IDbConnection.</returns>
        </member>
        <member name="M:ServiceStack.Data.IDbConnectionFactoryExtended.OpenDbConnectionString(System.String,System.String)">
            <summary>
            Opens the database connection string.
            </summary>
            <param name="connectionString">The connection string.</param>
            <param name="providerName">Name of the provider.</param>
            <returns>IDbConnection.</returns>
        </member>
        <member name="M:ServiceStack.Data.IDbConnectionFactoryExtended.Use(System.Data.IDbConnection,System.Data.IDbTransaction)">
            <summary>
            Uses the specified connection.
            </summary>
            <param name="connection">The connection.</param>
            <param name="trans">The trans.</param>
            <returns>IDbConnection.</returns>
        </member>
        <member name="T:ServiceStack.Data.IHasDbConnection">
            <summary>
            Interface IHasDbConnection
            </summary>
        </member>
        <member name="P:ServiceStack.Data.IHasDbConnection.DbConnection">
            <summary>
            Gets the database connection.
            </summary>
            <value>The database connection.</value>
        </member>
        <member name="T:ServiceStack.Data.IHasDbCommand">
            <summary>
            Interface IHasDbCommand
            </summary>
        </member>
        <member name="P:ServiceStack.Data.IHasDbCommand.DbCommand">
            <summary>
            Gets the database command.
            </summary>
            <value>The database command.</value>
        </member>
        <member name="T:ServiceStack.Data.IHasDbTransaction">
            <summary>
            Interface IHasDbTransaction
            </summary>
        </member>
        <member name="P:ServiceStack.Data.IHasDbTransaction.DbTransaction">
            <summary>
            Gets the database transaction.
            </summary>
            <value>The database transaction.</value>
        </member>
        <member name="T:ServiceStack.Data.DataException">
            <summary>
            Class DataException.
            Implements the <see cref="T:System.Exception" />
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:ServiceStack.Data.DataException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.Data.DataException" /> class.
            </summary>
        </member>
        <member name="M:ServiceStack.Data.DataException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.Data.DataException" /> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="T:ServiceStack.Data.IEntityStore">
            <summary>
            Interface IEntityStore
            Implements the <see cref="T:System.IDisposable" />
            </summary>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="M:ServiceStack.Data.IEntityStore.GetById``1(System.Object)">
            <summary>
            Gets the by identifier.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="id">The identifier.</param>
            <returns>T.</returns>
        </member>
        <member name="M:ServiceStack.Data.IEntityStore.Store``1(``0)">
            <summary>
            Stores the specified entity.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity">The entity.</param>
            <returns>T.</returns>
        </member>
        <member name="M:ServiceStack.Data.IEntityStore.StoreAll``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Stores all.
            </summary>
            <typeparam name="TEntity">The type of the t entity.</typeparam>
            <param name="entities">The entities.</param>
        </member>
        <member name="M:ServiceStack.Data.IEntityStore.Delete``1(``0)">
            <summary>
            Deletes the specified entity.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:ServiceStack.Data.IEntityStore.DeleteById``1(System.Object)">
            <summary>
            Deletes the by identifier.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="id">The identifier.</param>
        </member>
        <member name="M:ServiceStack.Data.IEntityStore.DeleteAll``1">
            <summary>
            Deletes all.
            </summary>
            <typeparam name="TEntity">The type of the t entity.</typeparam>
        </member>
        <member name="T:ServiceStack.Data.OptimisticConcurrencyException">
            <summary>
            Class OptimisticConcurrencyException.
            Implements the <see cref="T:ServiceStack.Data.DataException" />
            </summary>
            <seealso cref="T:ServiceStack.Data.DataException" />
        </member>
        <member name="M:ServiceStack.Data.OptimisticConcurrencyException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.Data.OptimisticConcurrencyException" /> class.
            </summary>
        </member>
        <member name="M:ServiceStack.Data.OptimisticConcurrencyException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.Data.OptimisticConcurrencyException" /> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="T:ServiceStack.DictionaryExtensions">
            <summary>
            Class DictionaryExtensions.
            </summary>
        </member>
        <member name="M:ServiceStack.DictionaryExtensions.TryRemove``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1@)">
            <summary>
            Tries the remove.
            </summary>
            <typeparam name="TKey">The type of the t key.</typeparam>
            <typeparam name="TValue">The type of the t value.</typeparam>
            <param name="map">The map.</param>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:ServiceStack.ExpressionUtils">
            <summary>
            Class ExpressionUtils.
            </summary>
        </member>
        <member name="F:ServiceStack.ExpressionUtils.Log">
            <summary>
            The log
            </summary>
        </member>
        <member name="M:ServiceStack.ExpressionUtils.ToPropertyInfo(System.Linq.Expressions.Expression)">
            <summary>
            Converts to propertyinfo.
            </summary>
            <param name="fieldExpr">The field expr.</param>
            <returns>PropertyInfo.</returns>
        </member>
        <member name="M:ServiceStack.ExpressionUtils.ToPropertyInfo(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Converts to propertyinfo.
            </summary>
            <param name="lambda">The lambda.</param>
            <returns>PropertyInfo.</returns>
        </member>
        <member name="M:ServiceStack.ExpressionUtils.ToPropertyInfo(System.Linq.Expressions.MemberExpression)">
            <summary>
            Converts to propertyinfo.
            </summary>
            <param name="m">The m.</param>
            <returns>PropertyInfo.</returns>
        </member>
        <member name="M:ServiceStack.ExpressionUtils.GetMemberName``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Gets the name of the member.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fieldExpr">The field expr.</param>
            <returns>System.String.</returns>
            <exception cref="T:System.NotSupportedException">Expected Property Expression</exception>
        </member>
        <member name="M:ServiceStack.ExpressionUtils.GetMemberExpression``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Gets the member expression.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="expr">The expr.</param>
            <returns>MemberExpression.</returns>
        </member>
        <member name="M:ServiceStack.ExpressionUtils.AssignedValues``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Assigneds the values.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="expr">The expr.</param>
            <returns>Dictionary&lt;System.String, System.Object&gt;.</returns>
        </member>
        <member name="M:ServiceStack.ExpressionUtils.GetFieldNames``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Gets the field names.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="expr">The expr.</param>
            <returns>System.String[].</returns>
            <exception cref="T:System.ArgumentException">Invalid Fields List Expression: " + expr</exception>
        </member>
        <member name="M:ServiceStack.ExpressionUtils.GetValue(System.Linq.Expressions.MemberBinding)">
            <summary>
            Gets the value.
            </summary>
            <param name="binding">The binding.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="T:ServiceStack.IdUtils`1">
            <summary>
            Class IdUtils.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:ServiceStack.IdUtils`1.CanGetId">
            <summary>
            The can get identifier
            </summary>
        </member>
        <member name="M:ServiceStack.IdUtils`1.#cctor">
            <summary>
            Initializes static members of the <see cref="T:ServiceStack.IdUtils`1" /> class.
            </summary>
        </member>
        <member name="M:ServiceStack.IdUtils`1.GetId(`0)">
            <summary>
            Gets the identifier.
            </summary>
            <param name="entity">The entity.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="T:ServiceStack.HasPropertyId`1">
            <summary>
            Class HasPropertyId.
            </summary>
            <typeparam name="TEntity">The type of the t entity.</typeparam>
        </member>
        <member name="F:ServiceStack.HasPropertyId`1.GetIdFn">
            <summary>
            The get identifier function
            </summary>
        </member>
        <member name="M:ServiceStack.HasPropertyId`1.#cctor">
            <summary>
            Initializes static members of the <see cref="T:ServiceStack.HasPropertyId`1" /> class.
            </summary>
        </member>
        <member name="M:ServiceStack.HasPropertyId`1.GetId(`0)">
            <summary>
            Gets the identifier.
            </summary>
            <param name="entity">The entity.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="T:ServiceStack.HasId`1">
            <summary>
            Class HasId.
            </summary>
            <typeparam name="TEntity">The type of the t entity.</typeparam>
        </member>
        <member name="F:ServiceStack.HasId`1.GetIdFn">
            <summary>
            The get identifier function
            </summary>
        </member>
        <member name="M:ServiceStack.HasId`1.#cctor">
            <summary>
            Initializes static members of the <see cref="T:ServiceStack.HasId`1" /> class.
            </summary>
        </member>
        <member name="M:ServiceStack.HasId`1.GetId(`0)">
            <summary>
            Gets the identifier.
            </summary>
            <param name="entity">The entity.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="T:ServiceStack.HasIdGetter`2">
            <summary>
            Class HasIdGetter.
            </summary>
            <typeparam name="TEntity">The type of the t entity.</typeparam>
            <typeparam name="TId">The type of the t identifier.</typeparam>
        </member>
        <member name="M:ServiceStack.HasIdGetter`2.GetId(`0)">
            <summary>
            Gets the identifier.
            </summary>
            <param name="entity">The entity.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="T:ServiceStack.IdUtils">
            <summary>
            Class IdUtils.
            </summary>
        </member>
        <member name="F:ServiceStack.IdUtils.IdField">
            <summary>
            The identifier field
            </summary>
        </member>
        <member name="M:ServiceStack.IdUtils.GetObjectId(System.Object)">
            <summary>
            Gets the object identifier.
            </summary>
            <param name="entity">The entity.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.IdUtils.ToId``1(``0)">
            <summary>
            Converts to id.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity">The entity.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.IdUtils.ToUrn``1(``0)">
            <summary>
            Converts to urn.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity">The entity.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.IdUtils.ToUrn``1(System.Object)">
            <summary>
            Converts to urn.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="id">The identifier.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.IdUtils.GetId``1(``0)">
            <summary>
            Gets the identifier.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity">The entity.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.IdUtils.CreateUrn``1(System.Object)">
            <summary>
            Creates the urn.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="id">The identifier.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.IdUtils.CreateUrn(System.Type,System.Object)">
            <summary>
            Creates the urn.
            </summary>
            <param name="type">The type.</param>
            <param name="id">The identifier.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.IdUtils.CreateUrn(System.String,System.Object)">
            <summary>
            Creates the urn.
            </summary>
            <param name="type">The type.</param>
            <param name="id">The identifier.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.IdUtils.CreateUrn``1(``0)">
            <summary>
            Creates the urn.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity">The entity.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.IdUtils.GetIdProperty(System.Type)">
            <summary>
            Gets the identifier property.
            </summary>
            <param name="type">The type.</param>
            <returns>PropertyInfo.</returns>
        </member>
        <member name="T:ServiceStack.Logging.ConsoleLogFactory">
            <summary>
            Creates a Console Logger, that logs all messages to: System.Console
            Made public so its testable
            </summary>
        </member>
        <member name="F:ServiceStack.Logging.ConsoleLogFactory.debugEnabled">
            <summary>
            The debug enabled
            </summary>
        </member>
        <member name="M:ServiceStack.Logging.ConsoleLogFactory.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.Logging.ConsoleLogFactory" /> class.
            </summary>
            <param name="debugEnabled">if set to <c>true</c> [debug enabled].</param>
        </member>
        <member name="M:ServiceStack.Logging.ConsoleLogFactory.GetLogger(System.Type)">
            <summary>
            Gets the logger.
            </summary>
            <param name="type">The type.</param>
            <returns>ILog.</returns>
        </member>
        <member name="M:ServiceStack.Logging.ConsoleLogFactory.GetLogger(System.String)">
            <summary>
            Gets the logger.
            </summary>
            <param name="typeName">Name of the type.</param>
            <returns>ILog.</returns>
        </member>
        <member name="M:ServiceStack.Logging.ConsoleLogFactory.Configure(System.Boolean)">
            <summary>
            Configures the specified debug enabled.
            </summary>
            <param name="debugEnabled">if set to <c>true</c> [debug enabled].</param>
        </member>
        <member name="T:ServiceStack.Logging.ConsoleLogger">
            <summary>
            Default logger is to Console.WriteLine
            Made public so its testable
            </summary>
        </member>
        <member name="F:ServiceStack.Logging.ConsoleLogger.DEBUG">
            <summary>
            The debug
            </summary>
        </member>
        <member name="F:ServiceStack.Logging.ConsoleLogger.ERROR">
            <summary>
            The error
            </summary>
        </member>
        <member name="F:ServiceStack.Logging.ConsoleLogger.WARN">
            <summary>
            The warn
            </summary>
        </member>
        <member name="M:ServiceStack.Logging.ConsoleLogger.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.Logging.DebugLogger" /> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:ServiceStack.Logging.ConsoleLogger.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.Logging.DebugLogger" /> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="P:ServiceStack.Logging.ConsoleLogger.IsDebugEnabled">
            <summary>
            Gets or sets a value indicating whether this instance is debug enabled.
            </summary>
            <value><c>true</c> if this instance is debug enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:ServiceStack.Logging.ConsoleLogger.Log(System.Object,System.Exception)">
            <summary>
            Logs the specified message.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:ServiceStack.Logging.ConsoleLogger.LogFormat(System.Object,System.Object[])">
            <summary>
            Logs the format.
            </summary>
            <param name="message">The message.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:ServiceStack.Logging.ConsoleLogger.Log(System.Object)">
            <summary>
            Logs the specified message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ServiceStack.Logging.ConsoleLogger.Debug(System.Object,System.Exception)">
            <summary>
            Logs a Debug message and exception.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:ServiceStack.Logging.ConsoleLogger.Debug(System.Object)">
            <summary>
            Logs a Debug message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ServiceStack.Logging.ConsoleLogger.DebugFormat(System.String,System.Object[])">
            <summary>
            Logs a Debug format message.
            </summary>
            <param name="format">The format.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:ServiceStack.Logging.ConsoleLogger.Error(System.Object,System.Exception)">
            <summary>
            Logs a Error message and exception.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:ServiceStack.Logging.ConsoleLogger.Error(System.Object)">
            <summary>
            Logs a Error message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ServiceStack.Logging.ConsoleLogger.ErrorFormat(System.String,System.Object[])">
            <summary>
            Logs a Error format message.
            </summary>
            <param name="format">The format.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:ServiceStack.Logging.ConsoleLogger.Info(System.Object,System.Exception)">
            <summary>
            Logs an Info message and exception.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:ServiceStack.Logging.ConsoleLogger.Info(System.Object)">
            <summary>
            Logs an Info message and exception.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ServiceStack.Logging.ConsoleLogger.Warn(System.Object,System.Exception)">
            <summary>
            Logs a Warning message and exception.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:ServiceStack.Logging.ConsoleLogger.Warn(System.Object)">
            <summary>
            Logs a Warning message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ServiceStack.Logging.ConsoleLogger.WarnFormat(System.String,System.Object[])">
            <summary>
            Logs a Warning format message.
            </summary>
            <param name="format">The format.</param>
            <param name="args">The args.</param>
        </member>
        <member name="T:ServiceStack.Logging.DebugLogFactory">
            <summary>
            Creates a Debug Logger, that logs all messages to: System.Diagnostics.Debug
            Made public so its testable
            </summary>
        </member>
        <member name="F:ServiceStack.Logging.DebugLogFactory.debugEnabled">
            <summary>
            The debug enabled
            </summary>
        </member>
        <member name="M:ServiceStack.Logging.DebugLogFactory.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.Logging.DebugLogFactory" /> class.
            </summary>
            <param name="debugEnabled">if set to <c>true</c> [debug enabled].</param>
        </member>
        <member name="M:ServiceStack.Logging.DebugLogFactory.GetLogger(System.Type)">
            <summary>
            Gets the logger.
            </summary>
            <param name="type">The type.</param>
            <returns>ILog.</returns>
        </member>
        <member name="M:ServiceStack.Logging.DebugLogFactory.GetLogger(System.String)">
            <summary>
            Gets the logger.
            </summary>
            <param name="typeName">Name of the type.</param>
            <returns>ILog.</returns>
        </member>
        <member name="T:ServiceStack.Logging.DebugLogger">
            <summary>
            Default logger is to System.Diagnostics.Debug.WriteLine
            Made public so its testable
            </summary>
        </member>
        <member name="F:ServiceStack.Logging.DebugLogger.DEBUG">
            <summary>
            The debug
            </summary>
        </member>
        <member name="F:ServiceStack.Logging.DebugLogger.ERROR">
            <summary>
            The error
            </summary>
        </member>
        <member name="F:ServiceStack.Logging.DebugLogger.INFO">
            <summary>
            The information
            </summary>
        </member>
        <member name="F:ServiceStack.Logging.DebugLogger.WARN">
            <summary>
            The warn
            </summary>
        </member>
        <member name="M:ServiceStack.Logging.DebugLogger.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.Logging.DebugLogger" /> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:ServiceStack.Logging.DebugLogger.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.Logging.DebugLogger" /> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:ServiceStack.Logging.DebugLogger.Log(System.Object,System.Exception)">
            <summary>
            Logs the specified message.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:ServiceStack.Logging.DebugLogger.LogFormat(System.Object,System.Object[])">
            <summary>
            Logs the format.
            </summary>
            <param name="message">The message.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:ServiceStack.Logging.DebugLogger.Log(System.Object)">
            <summary>
            Logs the specified message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ServiceStack.Logging.DebugLogger.Debug(System.Object,System.Exception)">
            <summary>
            Logs a Debug message and exception.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="P:ServiceStack.Logging.DebugLogger.IsDebugEnabled">
            <summary>
            Gets or sets a value indicating whether this instance is debug enabled.
            </summary>
            <value><c>true</c> if this instance is debug enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:ServiceStack.Logging.DebugLogger.Debug(System.Object)">
            <summary>
            Logs a Debug message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ServiceStack.Logging.DebugLogger.DebugFormat(System.String,System.Object[])">
            <summary>
            Logs a Debug format message.
            </summary>
            <param name="format">The format.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:ServiceStack.Logging.DebugLogger.Error(System.Object,System.Exception)">
            <summary>
            Logs a Error message and exception.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:ServiceStack.Logging.DebugLogger.Error(System.Object)">
            <summary>
            Logs a Error message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ServiceStack.Logging.DebugLogger.ErrorFormat(System.String,System.Object[])">
            <summary>
            Logs a Error format message.
            </summary>
            <param name="format">The format.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:ServiceStack.Logging.DebugLogger.Info(System.Object,System.Exception)">
            <summary>
            Logs an Info message and exception.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:ServiceStack.Logging.DebugLogger.Info(System.Object)">
            <summary>
            Logs an Info message and exception.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ServiceStack.Logging.DebugLogger.Warn(System.Object,System.Exception)">
            <summary>
            Logs a Warning message and exception.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:ServiceStack.Logging.DebugLogger.Warn(System.Object)">
            <summary>
            Logs a Warning message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ServiceStack.Logging.DebugLogger.WarnFormat(System.String,System.Object[])">
            <summary>
            Logs a Warning format message.
            </summary>
            <param name="format">The format.</param>
            <param name="args">The args.</param>
        </member>
        <member name="T:ServiceStack.Logging.ILog">
            <summary>
            Logs a message in a running application
            </summary>
        </member>
        <member name="P:ServiceStack.Logging.ILog.IsDebugEnabled">
            <summary>
            Gets or sets a value indicating whether this instance is debug enabled.
            </summary>
            <value><c>true</c> if this instance is debug enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:ServiceStack.Logging.ILog.Debug(System.Object)">
            <summary>
            Logs a Debug message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ServiceStack.Logging.ILog.Debug(System.Object,System.Exception)">
            <summary>
            Logs a Debug message and exception.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:ServiceStack.Logging.ILog.DebugFormat(System.String,System.Object[])">
            <summary>
            Logs a Debug format message.
            </summary>
            <param name="format">The format.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:ServiceStack.Logging.ILog.Error(System.Object)">
            <summary>
            Logs a Error message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ServiceStack.Logging.ILog.Error(System.Object,System.Exception)">
            <summary>
            Logs a Error message and exception.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:ServiceStack.Logging.ILog.ErrorFormat(System.String,System.Object[])">
            <summary>
            Logs a Error format message.
            </summary>
            <param name="format">The format.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:ServiceStack.Logging.ILog.Info(System.Object)">
            <summary>
            Logs an Info message and exception.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ServiceStack.Logging.ILog.Info(System.Object,System.Exception)">
            <summary>
            Logs an Info message and exception.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:ServiceStack.Logging.ILog.Warn(System.Object)">
            <summary>
            Logs a Warning message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ServiceStack.Logging.ILog.Warn(System.Object,System.Exception)">
            <summary>
            Logs a Warning message and exception.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:ServiceStack.Logging.ILog.WarnFormat(System.String,System.Object[])">
            <summary>
            Logs a Warning format message.
            </summary>
            <param name="format">The format.</param>
            <param name="args">The args.</param>
        </member>
        <member name="T:ServiceStack.Logging.ILogTrace">
            <summary>
            When implemented will log as TRACE otherwise as DEBUG
            </summary>
        </member>
        <member name="P:ServiceStack.Logging.ILogTrace.IsTraceEnabled">
            <summary>
            Gets or sets a value indicating whether this instance is trace enabled.
            </summary>
            <value>
            	<c>true</c> if this instance is trace enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:ServiceStack.Logging.ILogTrace.Trace(System.Object)">
            <summary>
            Logs a trace message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ServiceStack.Logging.ILogTrace.Trace(System.Object,System.Exception)">
            <summary>
            Logs a trace message and exception.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:ServiceStack.Logging.ILogTrace.TraceFormat(System.String,System.Object[])">
            <summary>
            Logs a trace format message.
            </summary>
            <param name="format">The format.</param>
            <param name="args">The args.</param>
        </member>
        <member name="T:ServiceStack.Logging.LogUtils">
            <summary>
            Class LogUtils.
            </summary>
        </member>
        <member name="M:ServiceStack.Logging.LogUtils.IsTraceEnabled(ServiceStack.Logging.ILog)">
            <summary>
            Determines whether [is trace enabled] [the specified log].
            </summary>
            <param name="log">The log.</param>
            <returns><c>true</c> if [is trace enabled] [the specified log]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ServiceStack.Logging.LogUtils.Trace(ServiceStack.Logging.ILog,System.Object)">
            <summary>
            Traces the specified message.
            </summary>
            <param name="log">The log.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:ServiceStack.Logging.LogUtils.Trace(ServiceStack.Logging.ILog,System.Object,System.Exception)">
            <summary>
            Traces the specified message.
            </summary>
            <param name="log">The log.</param>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:ServiceStack.Logging.LogUtils.TraceFormat(ServiceStack.Logging.ILog,System.String,System.Object[])">
            <summary>
            Traces the format.
            </summary>
            <param name="log">The log.</param>
            <param name="format">The format.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="T:ServiceStack.Logging.ILogFactory">
            <summary>
            Factory to create ILog instances
            </summary>
        </member>
        <member name="M:ServiceStack.Logging.ILogFactory.GetLogger(System.Type)">
            <summary>
            Gets the logger.
            </summary>
            <param name="type">The type.</param>
            <returns>ILog.</returns>
        </member>
        <member name="M:ServiceStack.Logging.ILogFactory.GetLogger(System.String)">
            <summary>
            Gets the logger.
            </summary>
            <param name="typeName">Name of the type.</param>
            <returns>ILog.</returns>
        </member>
        <member name="T:ServiceStack.Logging.ILogWithException">
            <summary>
            Interface ILogWithException
            Implements the <see cref="T:ServiceStack.Logging.ILog" />
            </summary>
            <seealso cref="T:ServiceStack.Logging.ILog" />
        </member>
        <member name="M:ServiceStack.Logging.ILogWithException.Debug(System.Exception,System.String,System.Object[])">
            <summary>
            Logs a Debug format message and exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="format">The format.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:ServiceStack.Logging.ILogWithException.Info(System.Exception,System.String,System.Object[])">
            <summary>
            Logs an Info format message and exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="format">The format.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:ServiceStack.Logging.ILogWithException.Warn(System.Exception,System.String,System.Object[])">
            <summary>
            Logs a Warn format message and exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="format">The format.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:ServiceStack.Logging.ILogWithException.Error(System.Exception,System.String,System.Object[])">
            <summary>
            Logs an Error format message and exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="format">The format.</param>
            <param name="args">The args.</param>
        </member>
        <member name="T:ServiceStack.Logging.ILogWithExceptionExtensions">
            <summary>
            Class ILogWithExceptionExtensions.
            </summary>
        </member>
        <member name="M:ServiceStack.Logging.ILogWithExceptionExtensions.Debug(ServiceStack.Logging.ILog,System.Exception,System.String,System.Object[])">
            <summary>
            Logs a Debug format message and exception.
            </summary>
            <param name="logger">The logger</param>
            <param name="exception">Exception related to the event.</param>
            <param name="format">The format.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:ServiceStack.Logging.ILogWithExceptionExtensions.Info(ServiceStack.Logging.ILog,System.Exception,System.String,System.Object[])">
            <summary>
            Logs an Info format message and exception.
            </summary>
            <param name="logger">The logger</param>
            <param name="exception">Exception related to the event.</param>
            <param name="format">The format.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:ServiceStack.Logging.ILogWithExceptionExtensions.Warn(ServiceStack.Logging.ILog,System.Exception,System.String,System.Object[])">
            <summary>
            Logs a Warn format message and exception.
            </summary>
            <param name="logger">The logger</param>
            <param name="exception">Exception related to the event.</param>
            <param name="format">The format.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:ServiceStack.Logging.ILogWithExceptionExtensions.Error(ServiceStack.Logging.ILog,System.Exception,System.String,System.Object[])">
            <summary>
            Logs an Error format message and exception.
            </summary>
            <param name="logger">The logger</param>
            <param name="exception">Exception related to the event.</param>
            <param name="format">The format.</param>
            <param name="args">The args.</param>
        </member>
        <member name="T:ServiceStack.Logging.LogManager">
            <summary>
            Logging API for this library. You can inject your own implementation otherwise
            will use the DebugLogFactory to write to System.Diagnostics.Debug
            </summary>
        </member>
        <member name="F:ServiceStack.Logging.LogManager.logFactory">
            <summary>
            The log factory
            </summary>
        </member>
        <member name="P:ServiceStack.Logging.LogManager.LogFactory">
            <summary>
            Gets or sets the log factory.
            Use this to override the factory that is used to create loggers
            </summary>
            <value>The log factory.</value>
        </member>
        <member name="M:ServiceStack.Logging.LogManager.GetLogger(System.Type)">
            <summary>
            Gets the logger.
            </summary>
            <param name="type">The type.</param>
            <returns>ILog.</returns>
        </member>
        <member name="M:ServiceStack.Logging.LogManager.GetLogger(System.String)">
            <summary>
            Gets the logger.
            </summary>
            <param name="typeName">Name of the type.</param>
            <returns>ILog.</returns>
        </member>
        <member name="T:ServiceStack.Logging.NullDebugLogger">
            <summary>
            Default logger is to System.Diagnostics.Debug.Print
            Made public so its testable
            </summary>
        </member>
        <member name="M:ServiceStack.Logging.NullDebugLogger.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.Logging.NullDebugLogger" /> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:ServiceStack.Logging.NullDebugLogger.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.Logging.NullDebugLogger" /> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:ServiceStack.Logging.NullDebugLogger.Debug(System.Object,System.Exception)">
            <summary>
            Logs a Debug message and exception.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="P:ServiceStack.Logging.NullDebugLogger.IsDebugEnabled">
            <summary>
            Gets or sets a value indicating whether this instance is debug enabled.
            </summary>
            <value><c>true</c> if this instance is debug enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:ServiceStack.Logging.NullDebugLogger.Debug(System.Object)">
            <summary>
            Logs a Debug message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ServiceStack.Logging.NullDebugLogger.DebugFormat(System.String,System.Object[])">
            <summary>
            Logs a Debug format message.
            </summary>
            <param name="format">The format.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:ServiceStack.Logging.NullDebugLogger.Error(System.Object,System.Exception)">
            <summary>
            Logs a Error message and exception.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:ServiceStack.Logging.NullDebugLogger.Error(System.Object)">
            <summary>
            Logs a Error message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ServiceStack.Logging.NullDebugLogger.ErrorFormat(System.String,System.Object[])">
            <summary>
            Logs a Error format message.
            </summary>
            <param name="format">The format.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:ServiceStack.Logging.NullDebugLogger.Info(System.Object,System.Exception)">
            <summary>
            Logs an Info message and exception.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:ServiceStack.Logging.NullDebugLogger.Info(System.Object)">
            <summary>
            Logs an Info message and exception.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ServiceStack.Logging.NullDebugLogger.Warn(System.Object,System.Exception)">
            <summary>
            Logs a Warning message and exception.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:ServiceStack.Logging.NullDebugLogger.Warn(System.Object)">
            <summary>
            Logs a Warning message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ServiceStack.Logging.NullDebugLogger.WarnFormat(System.String,System.Object[])">
            <summary>
            Warns the format.
            </summary>
            <param name="format">The format.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="T:ServiceStack.Logging.NullLogFactory">
            <summary>
            Creates a Debug Logger, that logs all messages to: System.Diagnostics.Debug
            Made public so its testable
            </summary>
        </member>
        <member name="F:ServiceStack.Logging.NullLogFactory.debugEnabled">
            <summary>
            The debug enabled
            </summary>
        </member>
        <member name="M:ServiceStack.Logging.NullLogFactory.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.Logging.NullLogFactory" /> class.
            </summary>
            <param name="debugEnabled">if set to <c>true</c> [debug enabled].</param>
        </member>
        <member name="M:ServiceStack.Logging.NullLogFactory.GetLogger(System.Type)">
            <summary>
            Gets the logger.
            </summary>
            <param name="type">The type.</param>
            <returns>ILog.</returns>
        </member>
        <member name="M:ServiceStack.Logging.NullLogFactory.GetLogger(System.String)">
            <summary>
            Gets the logger.
            </summary>
            <param name="typeName">Name of the type.</param>
            <returns>ILog.</returns>
        </member>
        <member name="T:ServiceStack.MiniProfiler.Data.ExecuteType">
            <summary>
            Categories of sql statements.
            </summary>
        </member>
        <member name="F:ServiceStack.MiniProfiler.Data.ExecuteType.None">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:ServiceStack.MiniProfiler.Data.ExecuteType.NonQuery">
            <summary>
            DML statements that alter database state, e.g. INSERT, UPDATE
            </summary>
        </member>
        <member name="F:ServiceStack.MiniProfiler.Data.ExecuteType.Scalar">
            <summary>
            Statements that return a single record
            </summary>
        </member>
        <member name="F:ServiceStack.MiniProfiler.Data.ExecuteType.Reader">
            <summary>
            Statements that iterate over a result set
            </summary>
        </member>
        <member name="T:ServiceStack.MiniProfiler.Data.IDbProfiler">
            <summary>
            A callback for ProfiledDbConnection and family
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Data.IDbProfiler.ExecuteStart(System.Data.Common.DbCommand,ServiceStack.MiniProfiler.Data.ExecuteType)">
            <summary>
            Called when a command starts executing
            </summary>
            <param name="profiledDbCommand">The profiled database command.</param>
            <param name="executeType">Type of the execute.</param>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Data.IDbProfiler.ExecuteFinish(System.Data.Common.DbCommand,ServiceStack.MiniProfiler.Data.ExecuteType,System.Data.Common.DbDataReader)">
            <summary>
            Called when a reader finishes executing
            </summary>
            <param name="profiledDbCommand">The profiled database command.</param>
            <param name="executeType">Type of the execute.</param>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Data.IDbProfiler.ReaderFinish(System.Data.Common.DbDataReader)">
            <summary>
            Called when a reader is done iterating through the data
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Data.IDbProfiler.OnError(System.Data.Common.DbCommand,ServiceStack.MiniProfiler.Data.ExecuteType,System.Exception)">
            <summary>
            Called when an error happens during execution of a command
            </summary>
            <param name="profiledDbCommand">The profiled database command.</param>
            <param name="executeType">Type of the execute.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Data.IDbProfiler.IsActive">
            <summary>
            True if the profiler instance is active
            </summary>
            <value><c>true</c> if this instance is active; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:ServiceStack.MiniProfiler.Data.ProfiledCommand">
            <summary>
            Class ProfiledCommand.
            Implements the <see cref="T:System.Data.Common.DbCommand" />
            Implements the <see cref="T:ServiceStack.Data.IHasDbCommand" />
            </summary>
            <seealso cref="T:System.Data.Common.DbCommand" />
            <seealso cref="T:ServiceStack.Data.IHasDbCommand" />
        </member>
        <member name="F:ServiceStack.MiniProfiler.Data.ProfiledCommand.cmd">
            <summary>
            The command
            </summary>
        </member>
        <member name="F:ServiceStack.MiniProfiler.Data.ProfiledCommand.conn">
            <summary>
            The connection
            </summary>
        </member>
        <member name="F:ServiceStack.MiniProfiler.Data.ProfiledCommand.tran">
            <summary>
            The tran
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Data.ProfiledCommand.#ctor(System.Data.Common.DbCommand,System.Data.Common.DbConnection,ServiceStack.MiniProfiler.Data.IDbProfiler)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.MiniProfiler.Data.ProfiledCommand" /> class.
            </summary>
            <param name="cmd">The command.</param>
            <param name="conn">The connection.</param>
            <param name="profiler">The profiler.</param>
            <exception cref="T:System.ArgumentNullException">cmd</exception>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Data.ProfiledCommand.CommandText">
            <summary>
            Gets or sets the text command to run against the data source.
            </summary>
            <value>The command text.</value>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Data.ProfiledCommand.CommandTimeout">
            <summary>
            Gets or sets the wait time before terminating the attempt to execute a command and generating an error.
            </summary>
            <value>The command timeout.</value>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Data.ProfiledCommand.CommandType">
            <summary>
            Indicates or specifies how the <see cref="P:System.Data.Common.DbCommand.CommandText" /> property is interpreted.
            </summary>
            <value>The type of the command.</value>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Data.ProfiledCommand.DbCommand">
            <summary>
            Gets the database command.
            </summary>
            <value>The database command.</value>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Data.ProfiledCommand.ServiceStack#Data#IHasDbCommand#DbCommand">
            <summary>
            Gets the database command.
            </summary>
            <value>The database command.</value>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Data.ProfiledCommand.DbConnection">
            <summary>
            Gets or sets the <see cref="T:System.Data.Common.DbConnection" /> used by this <see cref="T:System.Data.Common.DbCommand" />.
            </summary>
            <value>The database connection.</value>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Data.ProfiledCommand.DbParameterCollection">
            <summary>
            Gets the collection of <see cref="T:System.Data.Common.DbParameter" /> objects.
            </summary>
            <value>The database parameter collection.</value>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Data.ProfiledCommand.DbTransaction">
            <summary>
            Gets or sets the <see cref="P:System.Data.Common.DbCommand.DbTransaction" /> within which this <see cref="T:System.Data.Common.DbCommand" /> object executes.
            </summary>
            <value>The database transaction.</value>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Data.ProfiledCommand.DbProfiler">
            <summary>
            Gets or sets the database profiler.
            </summary>
            <value>The database profiler.</value>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Data.ProfiledCommand.DesignTimeVisible">
            <summary>
            Gets or sets a value indicating whether the command object should be visible in a customized interface control.
            </summary>
            <value><c>true</c> if [design time visible]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Data.ProfiledCommand.UpdatedRowSource">
            <summary>
            Gets or sets how command results are applied to the <see cref="T:System.Data.DataRow" /> when used by the Update method of a <see cref="T:System.Data.Common.DbDataAdapter" />.
            </summary>
            <value>The updated row source.</value>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Data.ProfiledCommand.ExecuteDbDataReader(System.Data.CommandBehavior)">
            <summary>
            Executes the command text against the connection.
            </summary>
            <param name="behavior">An instance of <see cref="T:System.Data.CommandBehavior" />.</param>
            <returns>A task representing the operation.</returns>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Data.ProfiledCommand.ExecuteNonQuery">
            <summary>
            Executes a SQL statement against a connection object.
            </summary>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Data.ProfiledCommand.ExecuteScalar">
            <summary>
            Executes the query and returns the first column of the first row in the result set returned by the query. All other columns and rows are ignored.
            </summary>
            <returns>The first column of the first row in the result set.</returns>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Data.ProfiledCommand.Cancel">
            <summary>
            Attempts to cancels the execution of a <see cref="T:System.Data.Common.DbCommand" />.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Data.ProfiledCommand.Prepare">
            <summary>
            Creates a prepared (or compiled) version of the command on the data source.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Data.ProfiledCommand.CreateDbParameter">
            <summary>
            Creates a new instance of a <see cref="T:System.Data.Common.DbParameter" /> object.
            </summary>
            <returns>A <see cref="T:System.Data.Common.DbParameter" /> object.</returns>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Data.ProfiledCommand.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:System.ComponentModel.Component" /> and optionally releases the managed resources.
            </summary>
            <param name="disposing"><see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</param>
        </member>
        <member name="T:ServiceStack.MiniProfiler.Data.ProfiledConnection">
            <summary>
            Wraps a database connection, allowing sql execution timings to be collected when a <see cref="T:ServiceStack.MiniProfiler.Data.IDbProfiler" /> session is started.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Data.ProfiledConnection.#ctor(System.Data.Common.DbConnection,ServiceStack.MiniProfiler.Data.IDbProfiler,System.Boolean)">
            <summary>
            Returns a new <see cref="T:ServiceStack.MiniProfiler.Data.ProfiledConnection" /> that wraps <paramref name="connection" />,
            providing query execution profiling.  If profiler is null, no profiling will occur.
            </summary>
            <param name="connection">Your provider-specific flavor of connection, e.g. SqlConnection, OracleConnection</param>
            <param name="profiler">The currently started <see cref="T:ServiceStack.MiniProfiler.Data.IDbProfiler" /> or null.</param>
            <param name="autoDisposeConnection">Determines whether the ProfiledDbConnection will dispose the underlying connection.</param>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Data.ProfiledConnection.#ctor(System.Data.IDbConnection,ServiceStack.MiniProfiler.Data.IDbProfiler,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.MiniProfiler.Data.ProfiledConnection" /> class.
            </summary>
            <param name="connection">The connection.</param>
            <param name="profiler">The profiler.</param>
            <param name="autoDisposeConnection">if set to <c>true</c> [automatic dispose connection].</param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Data.ProfiledConnection.Init(System.Data.Common.DbConnection,ServiceStack.MiniProfiler.Data.IDbProfiler,System.Boolean)">
            <summary>
            Initializes the specified connection.
            </summary>
            <param name="connection">The connection.</param>
            <param name="profiler">The profiler.</param>
            <param name="autoDisposeConnection">if set to <c>true</c> [automatic dispose connection].</param>
            <exception cref="T:System.ArgumentNullException">connection</exception>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Data.ProfiledConnection.InnerConnection">
            <summary>
            The underlying, real database connection to your db provider.
            </summary>
            <value>The inner connection.</value>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Data.ProfiledConnection.DbConnection">
            <summary>
            Gets the database connection.
            </summary>
            <value>The database connection.</value>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Data.ProfiledConnection.Profiler">
            <summary>
            The current profiler instance; could be null.
            </summary>
            <value>The profiler.</value>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Data.ProfiledConnection.WrappedConnection">
            <summary>
            The raw connection this is wrapping
            </summary>
            <value>The wrapped connection.</value>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Data.ProfiledConnection.CanRaiseEvents">
            <summary>
            Gets a value indicating whether the component can raise an event.
            </summary>
            <value><c>true</c> if this instance can raise events; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Data.ProfiledConnection.ConnectionString">
            <summary>
            Gets or sets the string used to open the connection.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Data.ProfiledConnection.ConnectionTimeout">
            <summary>
            Gets the time to wait while establishing a connection before terminating the attempt and generating an error.
            </summary>
            <value>The connection timeout.</value>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Data.ProfiledConnection.Database">
            <summary>
            Gets the name of the current database after a connection is opened, or the database name specified in the connection string before the connection is opened.
            </summary>
            <value>The database.</value>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Data.ProfiledConnection.DataSource">
            <summary>
            Gets the name of the database server to which to connect.
            </summary>
            <value>The data source.</value>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Data.ProfiledConnection.ServerVersion">
            <summary>
            Gets a string that represents the version of the server to which the object is connected.
            </summary>
            <value>The server version.</value>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Data.ProfiledConnection.State">
            <summary>
            Gets a string that describes the state of the connection.
            </summary>
            <value>The state.</value>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Data.ProfiledConnection.AutoDisposeConnection">
            <summary>
            Gets or sets a value indicating whether [automatic dispose connection].
            </summary>
            <value><c>true</c> if [automatic dispose connection]; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Data.ProfiledConnection.ChangeDatabase(System.String)">
            <summary>
            Changes the current database for an open connection.
            </summary>
            <param name="databaseName">Specifies the name of the database for the connection to use.</param>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Data.ProfiledConnection.Close">
            <summary>
            Closes the connection to the database. This is the preferred method of closing any open connection.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Data.ProfiledConnection.Open">
            <summary>
            Opens a database connection with the settings specified by the <see cref="P:System.Data.Common.DbConnection.ConnectionString" />.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Data.ProfiledConnection.BeginDbTransaction(System.Data.IsolationLevel)">
            <summary>
            Starts a database transaction.
            </summary>
            <param name="isolationLevel">Specifies the isolation level for the transaction.</param>
            <returns>An object representing the new transaction.</returns>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Data.ProfiledConnection.CreateDbCommand">
            <summary>
            Creates and returns a <see cref="T:System.Data.Common.DbCommand" /> object associated with the current connection.
            </summary>
            <returns>A <see cref="T:System.Data.Common.DbCommand" /> object.</returns>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Data.ProfiledConnection.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:System.ComponentModel.Component" /> and optionally releases the managed resources.
            </summary>
            <param name="disposing"><see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</param>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Data.ProfiledConnection.StateChangeHandler(System.Object,System.Data.StateChangeEventArgs)">
            <summary>
            States the change handler.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Data.StateChangeEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="T:ServiceStack.MiniProfiler.Data.ProfiledDbDataReader">
            <summary>
            Class ProfiledDbDataReader.
            Implements the <see cref="T:System.Data.Common.DbDataReader" />
            </summary>
            <seealso cref="T:System.Data.Common.DbDataReader" />
        </member>
        <member name="F:ServiceStack.MiniProfiler.Data.ProfiledDbDataReader.db">
            <summary>
            The database
            </summary>
        </member>
        <member name="F:ServiceStack.MiniProfiler.Data.ProfiledDbDataReader.reader">
            <summary>
            The reader
            </summary>
        </member>
        <member name="F:ServiceStack.MiniProfiler.Data.ProfiledDbDataReader.profiler">
            <summary>
            The profiler
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Data.ProfiledDbDataReader.#ctor(System.Data.Common.DbDataReader,System.Data.Common.DbConnection,ServiceStack.MiniProfiler.Data.IDbProfiler)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.MiniProfiler.Data.ProfiledDbDataReader" /> class.
            </summary>
            <param name="reader">The reader.</param>
            <param name="connection">The connection.</param>
            <param name="profiler">The profiler.</param>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Data.ProfiledDbDataReader.Depth">
            <summary>
            Gets a value indicating the depth of nesting for the current row.
            </summary>
            <value>The depth.</value>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Data.ProfiledDbDataReader.FieldCount">
            <summary>
            Gets the number of columns in the current row.
            </summary>
            <value>The field count.</value>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Data.ProfiledDbDataReader.HasRows">
            <summary>
            Gets a value that indicates whether this <see cref="T:System.Data.Common.DbDataReader" /> contains one or more rows.
            </summary>
            <value><c>true</c> if this instance has rows; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Data.ProfiledDbDataReader.IsClosed">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Data.Common.DbDataReader" /> is closed.
            </summary>
            <value><c>true</c> if this instance is closed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Data.ProfiledDbDataReader.RecordsAffected">
            <summary>
            Gets the number of rows changed, inserted, or deleted by execution of the SQL statement.
            </summary>
            <value>The records affected.</value>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Data.ProfiledDbDataReader.Item(System.String)">
            <summary>
            Gets the <see cref="T:System.Object" /> with the specified name.
            </summary>
            <param name="name">The name.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Data.ProfiledDbDataReader.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:System.Object" /> with the specified ordinal.
            </summary>
            <param name="ordinal">The ordinal.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Data.ProfiledDbDataReader.Close">
            <summary>
            Closes the <see cref="T:System.Data.Common.DbDataReader" /> object.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Data.ProfiledDbDataReader.GetBoolean(System.Int32)">
            <summary>
            Gets the value of the specified column as a Boolean.
            </summary>
            <param name="ordinal">The zero-based column ordinal.</param>
            <returns>The value of the specified column.</returns>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Data.ProfiledDbDataReader.GetByte(System.Int32)">
            <summary>
            Gets the value of the specified column as a byte.
            </summary>
            <param name="ordinal">The zero-based column ordinal.</param>
            <returns>The value of the specified column.</returns>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Data.ProfiledDbDataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a stream of bytes from the specified column, starting at location indicated by <paramref name="dataOffset" />, into the buffer, starting at the location indicated by <paramref name="bufferOffset" />.
            </summary>
            <param name="ordinal">The zero-based column ordinal.</param>
            <param name="dataOffset">The index within the row from which to begin the read operation.</param>
            <param name="buffer">The buffer into which to copy the data.</param>
            <param name="bufferOffset">The index with the buffer to which the data will be copied.</param>
            <param name="length">The maximum number of characters to read.</param>
            <returns>The actual number of bytes read.</returns>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Data.ProfiledDbDataReader.GetChar(System.Int32)">
            <summary>
            Gets the value of the specified column as a single character.
            </summary>
            <param name="ordinal">The zero-based column ordinal.</param>
            <returns>The value of the specified column.</returns>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Data.ProfiledDbDataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
            <summary>
            Reads a stream of characters from the specified column, starting at location indicated by <paramref name="dataOffset" />, into the buffer, starting at the location indicated by <paramref name="bufferOffset" />.
            </summary>
            <param name="ordinal">The zero-based column ordinal.</param>
            <param name="dataOffset">The index within the row from which to begin the read operation.</param>
            <param name="buffer">The buffer into which to copy the data.</param>
            <param name="bufferOffset">The index with the buffer to which the data will be copied.</param>
            <param name="length">The maximum number of characters to read.</param>
            <returns>The actual number of characters read.</returns>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Data.ProfiledDbDataReader.GetDataTypeName(System.Int32)">
            <summary>
            Gets name of the data type of the specified column.
            </summary>
            <param name="ordinal">The zero-based column ordinal.</param>
            <returns>A string representing the name of the data type.</returns>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Data.ProfiledDbDataReader.GetDateTime(System.Int32)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.DateTime" /> object.
            </summary>
            <param name="ordinal">The zero-based column ordinal.</param>
            <returns>The value of the specified column.</returns>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Data.ProfiledDbDataReader.GetDecimal(System.Int32)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Decimal" /> object.
            </summary>
            <param name="ordinal">The zero-based column ordinal.</param>
            <returns>The value of the specified column.</returns>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Data.ProfiledDbDataReader.GetDouble(System.Int32)">
            <summary>
            Gets the value of the specified column as a double-precision floating point number.
            </summary>
            <param name="ordinal">The zero-based column ordinal.</param>
            <returns>The value of the specified column.</returns>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Data.ProfiledDbDataReader.GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator" /> that can be used to iterate through the rows in the data reader.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator" /> that can be used to iterate through the rows in the data reader.</returns>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Data.ProfiledDbDataReader.GetFieldType(System.Int32)">
            <summary>
            Gets the data type of the specified column.
            </summary>
            <param name="ordinal">The zero-based column ordinal.</param>
            <returns>The data type of the specified column.</returns>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Data.ProfiledDbDataReader.GetFloat(System.Int32)">
            <summary>
            Gets the value of the specified column as a single-precision floating point number.
            </summary>
            <param name="ordinal">The zero-based column ordinal.</param>
            <returns>The value of the specified column.</returns>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Data.ProfiledDbDataReader.GetGuid(System.Int32)">
            <summary>
            Gets the value of the specified column as a globally-unique identifier (GUID).
            </summary>
            <param name="ordinal">The zero-based column ordinal.</param>
            <returns>The value of the specified column.</returns>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Data.ProfiledDbDataReader.GetInt16(System.Int32)">
            <summary>
            Gets the value of the specified column as a 16-bit signed integer.
            </summary>
            <param name="ordinal">The zero-based column ordinal.</param>
            <returns>The value of the specified column.</returns>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Data.ProfiledDbDataReader.GetInt32(System.Int32)">
            <summary>
            Gets the value of the specified column as a 32-bit signed integer.
            </summary>
            <param name="ordinal">The zero-based column ordinal.</param>
            <returns>The value of the specified column.</returns>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Data.ProfiledDbDataReader.GetInt64(System.Int32)">
            <summary>
            Gets the value of the specified column as a 64-bit signed integer.
            </summary>
            <param name="ordinal">The zero-based column ordinal.</param>
            <returns>The value of the specified column.</returns>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Data.ProfiledDbDataReader.GetName(System.Int32)">
            <summary>
            Gets the name of the column, given the zero-based column ordinal.
            </summary>
            <param name="ordinal">The zero-based column ordinal.</param>
            <returns>The name of the specified column.</returns>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Data.ProfiledDbDataReader.GetOrdinal(System.String)">
            <summary>
            Gets the column ordinal given the name of the column.
            </summary>
            <param name="name">The name of the column.</param>
            <returns>The zero-based column ordinal.</returns>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Data.ProfiledDbDataReader.GetString(System.Int32)">
            <summary>
            Gets the value of the specified column as an instance of <see cref="T:System.String" />.
            </summary>
            <param name="ordinal">The zero-based column ordinal.</param>
            <returns>The value of the specified column.</returns>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Data.ProfiledDbDataReader.GetValue(System.Int32)">
            <summary>
            Gets the value of the specified column as an instance of <see cref="T:System.Object" />.
            </summary>
            <param name="ordinal">The zero-based column ordinal.</param>
            <returns>The value of the specified column.</returns>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Data.ProfiledDbDataReader.GetValues(System.Object[])">
            <summary>
            Populates an array of objects with the column values of the current row.
            </summary>
            <param name="values">An array of <see cref="T:System.Object" /> into which to copy the attribute columns.</param>
            <returns>The number of instances of <see cref="T:System.Object" /> in the array.</returns>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Data.ProfiledDbDataReader.IsDBNull(System.Int32)">
            <summary>
            Gets a value that indicates whether the column contains nonexistent or missing values.
            </summary>
            <param name="ordinal">The zero-based column ordinal.</param>
            <returns><see langword="true" /> if the specified column is equivalent to <see cref="T:System.DBNull" />; otherwise <see langword="false" />.</returns>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Data.ProfiledDbDataReader.NextResult">
            <summary>
            Advances the reader to the next result when reading the results of a batch of statements.
            </summary>
            <returns><see langword="true" /> if there are more result sets; otherwise <see langword="false" />.</returns>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Data.ProfiledDbDataReader.Read">
            <summary>
            Advances the reader to the next record in a result set.
            </summary>
            <returns><see langword="true" /> if there are more rows; otherwise <see langword="false" />.</returns>
        </member>
        <member name="T:ServiceStack.MiniProfiler.Data.ProfiledDbTransaction">
            <summary>
            Class ProfiledDbTransaction.
            Implements the <see cref="T:System.Data.Common.DbTransaction" />
            Implements the <see cref="T:ServiceStack.Data.IHasDbTransaction" />
            </summary>
            <seealso cref="T:System.Data.Common.DbTransaction" />
            <seealso cref="T:ServiceStack.Data.IHasDbTransaction" />
        </member>
        <member name="F:ServiceStack.MiniProfiler.Data.ProfiledDbTransaction.db">
            <summary>
            The database
            </summary>
        </member>
        <member name="F:ServiceStack.MiniProfiler.Data.ProfiledDbTransaction.trans">
            <summary>
            The trans
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Data.ProfiledDbTransaction.#ctor(System.Data.Common.DbTransaction,ServiceStack.MiniProfiler.Data.ProfiledConnection)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.MiniProfiler.Data.ProfiledDbTransaction" /> class.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="connection">The connection.</param>
            <exception cref="T:System.ArgumentNullException">transaction</exception>
            <exception cref="T:System.ArgumentNullException">connection</exception>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Data.ProfiledDbTransaction.DbConnection">
            <summary>
            Specifies the <see cref="T:System.Data.Common.DbConnection" /> object associated with the transaction.
            </summary>
            <value>The database connection.</value>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Data.ProfiledDbTransaction.DbTransaction">
            <summary>
            Gets the database transaction.
            </summary>
            <value>The database transaction.</value>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Data.ProfiledDbTransaction.IsolationLevel">
            <summary>
            Specifies the <see cref="T:System.Data.IsolationLevel" /> for this transaction.
            </summary>
            <value>The isolation level.</value>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Data.ProfiledDbTransaction.Commit">
            <summary>
            Commits the database transaction.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Data.ProfiledDbTransaction.Rollback">
            <summary>
            Rolls back a transaction from a pending state.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Data.ProfiledDbTransaction.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:System.Data.Common.DbTransaction" /> and optionally releases the managed resources.
            </summary>
            <param name="disposing">If <see langword="true" />, this method releases all resources held by any managed objects that this <see cref="T:System.Data.Common.DbTransaction" /> references.</param>
        </member>
        <member name="T:ServiceStack.MiniProfiler.Data.ProfiledProviderFactory">
            <summary>
            Wrapper for a db provider factory to enable profiling
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Data.ProfiledProviderFactory.Instance">
            <summary>
            Every provider factory must have an Instance public field
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Data.ProfiledProviderFactory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.MiniProfiler.Data.ProfiledProviderFactory" /> class.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Data.ProfiledProviderFactory.Profiler">
            <summary>
            Gets the profiler.
            </summary>
            <value>The profiler.</value>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Data.ProfiledProviderFactory.WrappedFactory">
            <summary>
            Gets the wrapped factory.
            </summary>
            <value>The wrapped factory.</value>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Data.ProfiledProviderFactory.#ctor(ServiceStack.MiniProfiler.Data.IDbProfiler,System.Data.Common.DbProviderFactory)">
            <summary>
            proxy
            </summary>
            <param name="profiler">The profiler.</param>
            <param name="wrappedFactory">The wrapped factory.</param>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Data.ProfiledProviderFactory.CreateCommand">
            <summary>
            proxy
            </summary>
            <returns>A new instance of <see cref="T:System.Data.Common.DbCommand" />.</returns>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Data.ProfiledProviderFactory.CreateConnection">
            <summary>
            proxy
            </summary>
            <returns>A new instance of <see cref="T:System.Data.Common.DbConnection" />.</returns>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Data.ProfiledProviderFactory.CreateParameter">
            <summary>
            proxy
            </summary>
            <returns>A new instance of <see cref="T:System.Data.Common.DbParameter" />.</returns>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Data.ProfiledProviderFactory.CreateConnectionStringBuilder">
            <summary>
            proxy
            </summary>
            <returns>A new instance of <see cref="T:System.Data.Common.DbConnectionStringBuilder" />.</returns>
        </member>
        <member name="T:ServiceStack.StopExecutionException">
            <summary>
            Class StopExecutionException.
            Implements the <see cref="T:System.Exception" />
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:ServiceStack.StopExecutionException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.StopExecutionException" /> class.
            </summary>
        </member>
        <member name="M:ServiceStack.StopExecutionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.StopExecutionException" /> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:ServiceStack.StopExecutionException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.StopExecutionException" /> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (<see langword="Nothing" /> in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:ServiceStack.TextNode">
            <summary>
            Class TextNode.
            </summary>
        </member>
        <member name="M:ServiceStack.TextNode.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.TextNode" /> class.
            </summary>
        </member>
        <member name="P:ServiceStack.TextNode.Text">
            <summary>
            Gets or sets the text.
            </summary>
            <value>The text.</value>
        </member>
        <member name="P:ServiceStack.TextNode.Children">
            <summary>
            Gets or sets the children.
            </summary>
            <value>The children.</value>
        </member>
        <member name="T:ServiceStack.StringUtils">
            <summary>
            Class StringUtils.
            </summary>
        </member>
        <member name="M:ServiceStack.StringUtils.ParseCommands(System.String)">
            <summary>
            Parses the commands.
            </summary>
            <param name="commandsString">The commands string.</param>
            <returns>List&lt;Command&gt;.</returns>
        </member>
        <member name="M:ServiceStack.StringUtils.ParseCommands(System.ReadOnlyMemory{System.Char},System.Char)">
            <summary>
            Parses the commands.
            </summary>
            <param name="commandsString">The commands string.</param>
            <param name="separator">The separator.</param>
            <returns>List&lt;Command&gt;.</returns>
            <exception cref="P:ServiceStack.OrmLite.Base.Text.DiagnosticEvent.Exception">Illegal syntax near '{commandsString.SafeSlice(pos - 10, 50)}...'</exception>
            <exception cref="T:System.Exception">Illegal syntax near '{commandsString.SafeSlice(pos - 10, 50)}...'</exception>
        </member>
        <member name="M:ServiceStack.StringUtils.ParseArguments(System.ReadOnlyMemory{System.Char},System.Collections.Generic.List{System.ReadOnlyMemory{System.Char}}@)">
            <summary>
            Parses the arguments.
            </summary>
            <param name="argsString">The arguments string.</param>
            <param name="args">The arguments.</param>
            <returns>ReadOnlyMemory&lt;System.Char&gt;.</returns>
        </member>
        <member name="M:ServiceStack.StringUtils.HtmlEncode(System.String)">
            <summary>
            HTMLs the encode.
            </summary>
            <param name="html">The HTML.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.StringUtils.SplitGenericArgs(System.String)">
            <summary>
            Splits the generic arguments.
            </summary>
            <param name="argList">The argument list.</param>
            <returns>List&lt;System.String&gt;.</returns>
        </member>
        <member name="F:ServiceStack.StringUtils.blockChars">
            <summary>
            The block chars
            </summary>
        </member>
        <member name="M:ServiceStack.StringUtils.ParseTypeIntoNodes(System.String)">
            <summary>
            Parses the type into nodes.
            </summary>
            <param name="typeDef">The type definition.</param>
            <returns>TextNode.</returns>
        </member>
        <member name="M:ServiceStack.StringUtils.IsWhiteSpace(System.Char)">
            <summary>
            Determines whether [is white space] [the specified c].
            </summary>
            <param name="c">The c.</param>
            <returns>bool.</returns>
        </member>
        <member name="M:ServiceStack.StringUtils.FirstCharEquals(System.String,System.Char)">
            <summary>
            Firsts the character equals.
            </summary>
            <param name="literal">The literal.</param>
            <param name="c">The c.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:ServiceStack.ObjectActivator">
            <summary>
            Delegate ObjectActivator
            </summary>
            <param name="args">The arguments.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="T:ServiceStack.MethodInvoker">
            <summary>
            Delegate MethodInvoker
            </summary>
            <param name="instance">The instance.</param>
            <param name="args">The arguments.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="T:ServiceStack.StaticMethodInvoker">
            <summary>
            Delegate StaticMethodInvoker
            </summary>
            <param name="args">The arguments.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="T:ServiceStack.ActionInvoker">
            <summary>
            Delegate ActionInvoker
            </summary>
            <param name="instance">The instance.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="T:ServiceStack.StaticActionInvoker">
            <summary>
            Delegate StaticActionInvoker
            </summary>
            <param name="args">The arguments.</param>
        </member>
        <member name="T:ServiceStack.InstanceMapper">
            <summary>
            Delegate to return a different value from an instance (e.g. member accessor)
            </summary>
            <param name="instance">The instance.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="T:ServiceStack.TypeExtensions">
            <summary>
            Class TypeExtensions.
            </summary>
        </member>
        <member name="M:ServiceStack.TypeExtensions.AddReferencedTypes(System.Type,System.Collections.Generic.HashSet{System.Type})">
            <summary>
            Adds the referenced types.
            </summary>
            <param name="type">The type.</param>
            <param name="refTypes">The reference types.</param>
        </member>
        <member name="M:ServiceStack.TypeExtensions.GetActivatorToCache(System.Reflection.ConstructorInfo)">
            <summary>
            Gets the activator to cache.
            </summary>
            <param name="ctor">The ctor.</param>
            <returns>ObjectActivator.</returns>
        </member>
        <member name="F:ServiceStack.TypeExtensions.activatorCache">
            <summary>
            The activator cache
            </summary>
        </member>
        <member name="M:ServiceStack.TypeExtensions.GetActivator(System.Reflection.ConstructorInfo)">
            <summary>
            Gets the activator.
            </summary>
            <param name="ctor">The ctor.</param>
            <returns>ObjectActivator.</returns>
        </member>
        <member name="M:ServiceStack.TypeExtensions.CreateInvokerParamExpressions(System.Reflection.MethodInfo,System.Linq.Expressions.ParameterExpression)">
            <summary>
            Creates the invoker parameter expressions.
            </summary>
            <param name="method">The method.</param>
            <param name="paramArgs">The parameter arguments.</param>
            <returns>Expression[].</returns>
        </member>
        <member name="M:ServiceStack.TypeExtensions.UseCorrectInvokerErrorMessage(System.Reflection.MethodInfo)">
            <summary>
            Uses the correct invoker error message.
            </summary>
            <param name="method">The method.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.TypeExtensions.GetInvokerToCache(System.Reflection.MethodInfo)">
            <summary>
            Gets the invoker to cache.
            </summary>
            <param name="method">The method.</param>
            <returns>MethodInvoker.</returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:ServiceStack.TypeExtensions.GetStaticInvokerToCache(System.Reflection.MethodInfo)">
            <summary>
            Gets the static invoker to cache.
            </summary>
            <param name="method">The method.</param>
            <returns>StaticMethodInvoker.</returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:ServiceStack.TypeExtensions.GetActionInvokerToCache(System.Reflection.MethodInfo)">
            <summary>
            Gets the action invoker to cache.
            </summary>
            <param name="method">The method.</param>
            <returns>ActionInvoker.</returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:ServiceStack.TypeExtensions.GetStaticActionInvokerToCache(System.Reflection.MethodInfo)">
            <summary>
            Gets the static action invoker to cache.
            </summary>
            <param name="method">The method.</param>
            <returns>StaticActionInvoker.</returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="F:ServiceStack.TypeExtensions.invokerCache">
            <summary>
            The invoker cache
            </summary>
        </member>
        <member name="M:ServiceStack.TypeExtensions.GetInvoker(System.Reflection.MethodInfo)">
            <summary>
            Create an Invoker for public instance methods
            </summary>
            <param name="method">The method.</param>
            <returns>MethodInvoker.</returns>
        </member>
        <member name="F:ServiceStack.TypeExtensions.staticInvokerCache">
            <summary>
            The static invoker cache
            </summary>
        </member>
        <member name="M:ServiceStack.TypeExtensions.GetStaticInvoker(System.Reflection.MethodInfo)">
            <summary>
            Create an Invoker for public static methods
            </summary>
            <param name="method">The method.</param>
            <returns>StaticMethodInvoker.</returns>
        </member>
        <member name="F:ServiceStack.TypeExtensions.actionInvokerCache">
            <summary>
            The action invoker cache
            </summary>
        </member>
        <member name="M:ServiceStack.TypeExtensions.GetActionInvoker(System.Reflection.MethodInfo)">
            <summary>
            Create an Invoker for public instance void methods
            </summary>
            <param name="method">The method.</param>
            <returns>ActionInvoker.</returns>
        </member>
        <member name="F:ServiceStack.TypeExtensions.staticActionInvokerCache">
            <summary>
            The static action invoker cache
            </summary>
        </member>
        <member name="M:ServiceStack.TypeExtensions.GetStaticActionInvoker(System.Reflection.MethodInfo)">
            <summary>
            Create an Invoker for public static void methods
            </summary>
            <param name="method">The method.</param>
            <returns>StaticActionInvoker.</returns>
        </member>
        <member name="M:ServiceStack.TypeExtensions.ConvertFromObject``1(System.Object)">
            <summary>
            Converts from object.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The value.</param>
            <returns>T.</returns>
        </member>
        <member name="M:ServiceStack.TypeExtensions.ConvertToObject``1(``0)">
            <summary>
            Converts to object.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The value.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="T:ServiceStack.XLinqExtensions">
            <summary>
            Class XLinqExtensions.
            </summary>
        </member>
        <member name="M:ServiceStack.XLinqExtensions.GetString(System.Xml.Linq.XElement,System.String)">
            <summary>
            Gets the string.
            </summary>
            <param name="el">The el.</param>
            <param name="name">The name.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.XLinqExtensions.GetStringAttributeOrDefault(System.Xml.Linq.XElement,System.String)">
            <summary>
            Gets the string attribute or default.
            </summary>
            <param name="element">The element.</param>
            <param name="name">The name.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ServiceStack.XLinqExtensions.GetAttributeValueOrDefault``1(System.Xml.Linq.XAttribute,System.String,System.Func{System.Xml.Linq.XAttribute,``0})">
            <summary>
            Gets the attribute value or default.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="attr">The attribute.</param>
            <param name="name">The name.</param>
            <param name="converter">The converter.</param>
            <returns>T.</returns>
            <exception cref="T:System.ArgumentNullException">converter</exception>
        </member>
        <member name="M:ServiceStack.XLinqExtensions.GetBool(System.Xml.Linq.XElement,System.String)">
            <summary>
            Gets the bool.
            </summary>
            <param name="el">The el.</param>
            <param name="name">The name.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ServiceStack.XLinqExtensions.GetInt(System.Xml.Linq.XElement,System.String)">
            <summary>
            Gets the int.
            </summary>
            <param name="el">The el.</param>
            <param name="name">The name.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:ServiceStack.XLinqExtensions.GetIntOrDefault(System.Xml.Linq.XElement,System.String)">
            <summary>
            Gets the int or default.
            </summary>
            <param name="el">The el.</param>
            <param name="name">The name.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:ServiceStack.XLinqExtensions.GetLong(System.Xml.Linq.XElement,System.String)">
            <summary>
            Gets the long.
            </summary>
            <param name="el">The el.</param>
            <param name="name">The name.</param>
            <returns>System.Int64.</returns>
        </member>
        <member name="M:ServiceStack.XLinqExtensions.GetDateTime(System.Xml.Linq.XElement,System.String)">
            <summary>
            Gets the date time.
            </summary>
            <param name="el">The el.</param>
            <param name="name">The name.</param>
            <returns>DateTime.</returns>
        </member>
        <member name="M:ServiceStack.XLinqExtensions.GetTimeSpan(System.Xml.Linq.XElement,System.String)">
            <summary>
            Gets the time span.
            </summary>
            <param name="el">The el.</param>
            <param name="name">The name.</param>
            <returns>TimeSpan.</returns>
        </member>
        <member name="M:ServiceStack.XLinqExtensions.GetTimeSpanOrDefault(System.Xml.Linq.XElement,System.String)">
            <summary>
            Gets the time span or default.
            </summary>
            <param name="el">The el.</param>
            <param name="name">The name.</param>
            <returns>TimeSpan.</returns>
        </member>
        <member name="M:ServiceStack.XLinqExtensions.GetElementValueOrDefault``1(System.Xml.Linq.XElement,System.String,System.Func{System.Xml.Linq.XElement,``0})">
            <summary>
            Gets the element value or default.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="element">The element.</param>
            <param name="name">The name.</param>
            <param name="converter">The converter.</param>
            <returns>T.</returns>
            <exception cref="T:System.ArgumentNullException">converter</exception>
        </member>
        <member name="M:ServiceStack.XLinqExtensions.GetElement(System.Xml.Linq.XElement,System.String)">
            <summary>
            Gets the element.
            </summary>
            <param name="element">The element.</param>
            <param name="name">The name.</param>
            <returns>XElement.</returns>
            <exception cref="T:System.ArgumentNullException">element</exception>
            <exception cref="T:System.ArgumentNullException">name</exception>
        </member>
        <member name="M:ServiceStack.XLinqExtensions.AssertElementHasValue(System.Xml.Linq.XElement,System.String)">
            <summary>
            Asserts the element has value.
            </summary>
            <param name="element">The element.</param>
            <param name="name">The name.</param>
            <exception cref="T:System.ArgumentNullException">element</exception>
            <exception cref="T:System.ArgumentNullException">name</exception>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:ServiceStack.XLinqExtensions.GetValues(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})">
            <summary>
            Gets the values.
            </summary>
            <param name="els">The els.</param>
            <returns>List&lt;System.String&gt;.</returns>
        </member>
        <member name="M:ServiceStack.XLinqExtensions.AnyAttribute(System.Xml.Linq.XElement,System.String)">
            <summary>
            Anies the attribute.
            </summary>
            <param name="element">The element.</param>
            <param name="name">The name.</param>
            <returns>XAttribute.</returns>
        </member>
        <member name="M:ServiceStack.XLinqExtensions.AllElements(System.Xml.Linq.XElement,System.String)">
            <summary>
            Alls the elements.
            </summary>
            <param name="element">The element.</param>
            <param name="name">The name.</param>
            <returns>IEnumerable&lt;XElement&gt;.</returns>
        </member>
        <member name="M:ServiceStack.XLinqExtensions.AnyElement(System.Xml.Linq.XElement,System.String)">
            <summary>
            Anies the element.
            </summary>
            <param name="element">The element.</param>
            <param name="name">The name.</param>
            <returns>XElement.</returns>
        </member>
        <member name="M:ServiceStack.XLinqExtensions.AnyElement(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.String)">
            <summary>
            Anies the element.
            </summary>
            <param name="elements">The elements.</param>
            <param name="name">The name.</param>
            <returns>XElement.</returns>
        </member>
        <member name="M:ServiceStack.XLinqExtensions.AllElements(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.String)">
            <summary>
            Alls the elements.
            </summary>
            <param name="elements">The elements.</param>
            <param name="name">The name.</param>
            <returns>IEnumerable&lt;XElement&gt;.</returns>
        </member>
        <member name="M:ServiceStack.XLinqExtensions.FirstElement(System.Xml.Linq.XElement)">
            <summary>
            Firsts the element.
            </summary>
            <param name="element">The element.</param>
            <returns>XElement.</returns>
        </member>
        <member name="M:ServiceStack.XLinqExtensions.NextElement(System.Xml.Linq.XElement)">
            <summary>
            Nexts the element.
            </summary>
            <param name="element">The element.</param>
            <returns>XElement.</returns>
        </member>
        <member name="T:ServiceStack.GenerateBodyParameter">
            <summary>
            Class GenerateBodyParameter.
            </summary>
        </member>
        <member name="F:ServiceStack.GenerateBodyParameter.IfNotDisabled">
            <summary>
            Generates body DTO parameter only if `DisableAutoDtoInBodyParam = false`
            </summary>
        </member>
        <member name="F:ServiceStack.GenerateBodyParameter.Always">
            <summary>
            Always generate body DTO for request
            </summary>
        </member>
        <member name="F:ServiceStack.GenerateBodyParameter.Never">
            <summary>
            Never generate body DTO for request
            </summary>
        </member>
        <member name="T:ServiceStack.ApiAttribute">
            <summary>
            Class ApiAttribute.
            Implements the <see cref="T:ServiceStack.AttributeBase" />
            </summary>
            <seealso cref="T:ServiceStack.AttributeBase" />
        </member>
        <member name="P:ServiceStack.ApiAttribute.Description">
            <summary>
            The overall description of an API. Used by Swagger.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:ServiceStack.ApiAttribute.BodyParameter">
            <summary>
            Create or not body param for request type when verb is POST or PUT.
            Value can be one of the constants of `GenerateBodyParam` class:
            `GenerateBodyParam.IfNotDisabled` (default value), `GenerateBodyParam.Always`, `GenerateBodyParam.Never`
            </summary>
            <value>The body parameter.</value>
        </member>
        <member name="P:ServiceStack.ApiAttribute.IsRequired">
            <summary>
            Tells if body param is required
            </summary>
            <value><c>true</c> if this instance is required; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:ServiceStack.ApiAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.ApiAttribute" /> class.
            </summary>
        </member>
        <member name="M:ServiceStack.ApiAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.ApiAttribute" /> class.
            </summary>
            <param name="description">The description.</param>
        </member>
        <member name="M:ServiceStack.ApiAttribute.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.ApiAttribute" /> class.
            </summary>
            <param name="description">The description.</param>
            <param name="generateBodyParameter">The generate body parameter.</param>
        </member>
        <member name="M:ServiceStack.ApiAttribute.#ctor(System.String,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.ApiAttribute" /> class.
            </summary>
            <param name="description">The description.</param>
            <param name="generateBodyParameter">The generate body parameter.</param>
            <param name="isRequired">if set to <c>true</c> [is required].</param>
        </member>
        <member name="T:ServiceStack.ApplyTo">
            <summary>
            Enum ApplyTo
            </summary>
        </member>
        <member name="F:ServiceStack.ApplyTo.None">
            <summary>
            The none
            </summary>
        </member>
        <member name="F:ServiceStack.ApplyTo.All">
            <summary>
            All
            </summary>
        </member>
        <member name="F:ServiceStack.ApplyTo.Get">
            <summary>
            The get
            </summary>
        </member>
        <member name="F:ServiceStack.ApplyTo.Post">
            <summary>
            The post
            </summary>
        </member>
        <member name="F:ServiceStack.ApplyTo.Put">
            <summary>
            The put
            </summary>
        </member>
        <member name="F:ServiceStack.ApplyTo.Delete">
            <summary>
            The delete
            </summary>
        </member>
        <member name="F:ServiceStack.ApplyTo.Patch">
            <summary>
            The patch
            </summary>
        </member>
        <member name="F:ServiceStack.ApplyTo.Options">
            <summary>
            The options
            </summary>
        </member>
        <member name="F:ServiceStack.ApplyTo.Head">
            <summary>
            The head
            </summary>
        </member>
        <member name="F:ServiceStack.ApplyTo.Connect">
            <summary>
            The connect
            </summary>
        </member>
        <member name="F:ServiceStack.ApplyTo.Trace">
            <summary>
            The trace
            </summary>
        </member>
        <member name="F:ServiceStack.ApplyTo.PropPatch">
            <summary>
            The property patch
            </summary>
        </member>
        <member name="F:ServiceStack.ApplyTo.MkCol">
            <summary>
            The mk col
            </summary>
        </member>
        <member name="F:ServiceStack.ApplyTo.Copy">
            <summary>
            The copy
            </summary>
        </member>
        <member name="F:ServiceStack.ApplyTo.Move">
            <summary>
            The move
            </summary>
        </member>
        <member name="F:ServiceStack.ApplyTo.Lock">
            <summary>
            The lock
            </summary>
        </member>
        <member name="F:ServiceStack.ApplyTo.UnLock">
            <summary>
            The un lock
            </summary>
        </member>
        <member name="F:ServiceStack.ApplyTo.Report">
            <summary>
            The report
            </summary>
        </member>
        <member name="F:ServiceStack.ApplyTo.CheckIn">
            <summary>
            The check in
            </summary>
        </member>
        <member name="F:ServiceStack.ApplyTo.Update">
            <summary>
            The update
            </summary>
        </member>
        <member name="F:ServiceStack.ApplyTo.Label">
            <summary>
            The label
            </summary>
        </member>
        <member name="F:ServiceStack.ApplyTo.Merge">
            <summary>
            The merge
            </summary>
        </member>
        <member name="F:ServiceStack.ApplyTo.MkActivity">
            <summary>
            The mk activity
            </summary>
        </member>
        <member name="F:ServiceStack.ApplyTo.OrderPatch">
            <summary>
            The order patch
            </summary>
        </member>
        <member name="F:ServiceStack.ApplyTo.Acl">
            <summary>
            The acl
            </summary>
        </member>
        <member name="F:ServiceStack.ApplyTo.Search">
            <summary>
            The search
            </summary>
        </member>
        <member name="F:ServiceStack.ApplyTo.VersionControl">
            <summary>
            The version control
            </summary>
        </member>
        <member name="F:ServiceStack.ApplyTo.BaseLineControl">
            <summary>
            The base line control
            </summary>
        </member>
        <member name="T:ServiceStack.AttributeBase">
            <summary>
            Class AttributeBase.
            Implements the <see cref="T:System.Attribute" />
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:ServiceStack.AttributeBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.AttributeBase" /> class.
            </summary>
        </member>
        <member name="F:ServiceStack.AttributeBase.typeId">
            <summary>
            The type identifier
            </summary>
        </member>
        <member name="T:ServiceStack.DataAnnotations.AlterColumnAttribute">
            <summary>
            Class AlterColumnAttribute.
            Implements the <see cref="T:ServiceStack.AttributeBase" />
            </summary>
            <seealso cref="T:ServiceStack.AttributeBase" />
        </member>
        <member name="T:ServiceStack.DataAnnotations.AddColumnAttribute">
            <summary>
            Add Column during Db.Migrate, optional as adding columns are implied
            </summary>
        </member>
        <member name="T:ServiceStack.DataAnnotations.RemoveColumnAttribute">
            <summary>
            Remove Column during Db.Migrate
            </summary>
        </member>
        <member name="T:ServiceStack.DataAnnotations.RenameColumnAttribute">
            <summary>
            Remove Column during Db.Migrate
            </summary>
        </member>
        <member name="P:ServiceStack.DataAnnotations.RenameColumnAttribute.From">
            <summary>
            Gets from.
            </summary>
            <value>From.</value>
        </member>
        <member name="M:ServiceStack.DataAnnotations.RenameColumnAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.DataAnnotations.RenameColumnAttribute"/> class.
            </summary>
            <param name="from">From.</param>
        </member>
        <member name="T:ServiceStack.DataAnnotations.AliasAttribute">
            <summary>
            Class AliasAttribute.
            Implements the <see cref="T:ServiceStack.AttributeBase" />
            </summary>
            <seealso cref="T:ServiceStack.AttributeBase" />
        </member>
        <member name="P:ServiceStack.DataAnnotations.AliasAttribute.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="M:ServiceStack.DataAnnotations.AliasAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.DataAnnotations.AliasAttribute" /> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="T:ServiceStack.DataAnnotations.AutoIdAttribute">
            <summary>
            Class AutoIdAttribute.
            Implements the <see cref="T:ServiceStack.AttributeBase" />
            </summary>
            <seealso cref="T:ServiceStack.AttributeBase" />
        </member>
        <member name="T:ServiceStack.DataAnnotations.AutoIncrementAttribute">
            <summary>
            Class AutoIncrementAttribute.
            Implements the <see cref="T:ServiceStack.AttributeBase" />
            </summary>
            <seealso cref="T:ServiceStack.AttributeBase" />
        </member>
        <member name="T:ServiceStack.DataAnnotations.BelongToAttribute">
            <summary>
            BelongToAttribute
            Use to indicate that a join column belongs to another table.
            </summary>
        </member>
        <member name="P:ServiceStack.DataAnnotations.BelongToAttribute.BelongToTableType">
            <summary>
            Gets or sets the type of the belong to table.
            </summary>
            <value>The type of the belong to table.</value>
        </member>
        <member name="M:ServiceStack.DataAnnotations.BelongToAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.DataAnnotations.BelongToAttribute" /> class.
            </summary>
            <param name="belongToTableType">Type of the belong to table.</param>
        </member>
        <member name="T:ServiceStack.DataAnnotations.CheckConstraintAttribute">
            <summary>
            Class CheckConstraintAttribute.
            Implements the <see cref="T:ServiceStack.AttributeBase" />
            </summary>
            <seealso cref="T:ServiceStack.AttributeBase" />
        </member>
        <member name="P:ServiceStack.DataAnnotations.CheckConstraintAttribute.Constraint">
            <summary>
            Gets the constraint.
            </summary>
            <value>The constraint.</value>
        </member>
        <member name="M:ServiceStack.DataAnnotations.CheckConstraintAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.DataAnnotations.CheckConstraintAttribute" /> class.
            </summary>
            <param name="constraint">The constraint.</param>
        </member>
        <member name="T:ServiceStack.DataAnnotations.CompositeIndexAttribute">
            <summary>
            Class CompositeIndexAttribute.
            Implements the <see cref="T:ServiceStack.AttributeBase" />
            </summary>
            <seealso cref="T:ServiceStack.AttributeBase" />
        </member>
        <member name="M:ServiceStack.DataAnnotations.CompositeIndexAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.DataAnnotations.CompositeIndexAttribute" /> class.
            </summary>
        </member>
        <member name="M:ServiceStack.DataAnnotations.CompositeIndexAttribute.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.DataAnnotations.CompositeIndexAttribute" /> class.
            </summary>
            <param name="fieldNames">The field names.</param>
        </member>
        <member name="M:ServiceStack.DataAnnotations.CompositeIndexAttribute.#ctor(System.Boolean,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.DataAnnotations.CompositeIndexAttribute" /> class.
            </summary>
            <param name="unique">if set to <c>true</c> [unique].</param>
            <param name="fieldNames">The field names.</param>
        </member>
        <member name="P:ServiceStack.DataAnnotations.CompositeIndexAttribute.FieldNames">
            <summary>
            Gets or sets the field names.
            </summary>
            <value>The field names.</value>
        </member>
        <member name="P:ServiceStack.DataAnnotations.CompositeIndexAttribute.Unique">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:ServiceStack.DataAnnotations.CompositeIndexAttribute" /> is unique.
            </summary>
            <value><c>true</c> if unique; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.DataAnnotations.CompositeIndexAttribute.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="T:ServiceStack.DataAnnotations.CompositeKeyAttribute">
            <summary>
            Class CompositeKeyAttribute.
            Implements the <see cref="T:ServiceStack.AttributeBase" />
            </summary>
            <seealso cref="T:ServiceStack.AttributeBase" />
        </member>
        <member name="M:ServiceStack.DataAnnotations.CompositeKeyAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.DataAnnotations.CompositeKeyAttribute" /> class.
            </summary>
        </member>
        <member name="M:ServiceStack.DataAnnotations.CompositeKeyAttribute.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.DataAnnotations.CompositeKeyAttribute" /> class.
            </summary>
            <param name="fieldNames">The field names.</param>
        </member>
        <member name="P:ServiceStack.DataAnnotations.CompositeKeyAttribute.FieldNames">
            <summary>
            Gets or sets the field names.
            </summary>
            <value>The field names.</value>
        </member>
        <member name="T:ServiceStack.DataAnnotations.CompositePrimaryKeyAttribute">
            <summary>
            Class CompositePrimaryKeyAttribute.
            Implements the <see cref="T:ServiceStack.AttributeBase" />
            </summary>
            <seealso cref="T:ServiceStack.AttributeBase" />
        </member>
        <member name="M:ServiceStack.DataAnnotations.CompositePrimaryKeyAttribute.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.DataAnnotations.CompositePrimaryKeyAttribute" /> class.
            </summary>
            <param name="fieldNames">The field names.</param>
        </member>
        <member name="P:ServiceStack.DataAnnotations.CompositePrimaryKeyAttribute.FieldNames">
            <summary>
            Gets or sets the field names.
            </summary>
            <value>The field names.</value>
        </member>
        <member name="P:ServiceStack.DataAnnotations.CompositePrimaryKeyAttribute.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="T:ServiceStack.DataAnnotations.ComputeAttribute">
            <summary>
            Compute attribute.
            Use to indicate that a property is a Calculated Field.
            Use [Persisted] attribute to persist column
            </summary>
        </member>
        <member name="P:ServiceStack.DataAnnotations.ComputeAttribute.Expression">
            <summary>
            Gets or sets the expression.
            </summary>
            <value>The expression.</value>
        </member>
        <member name="M:ServiceStack.DataAnnotations.ComputeAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.DataAnnotations.ComputeAttribute" /> class.
            </summary>
        </member>
        <member name="M:ServiceStack.DataAnnotations.ComputeAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.DataAnnotations.ComputeAttribute" /> class.
            </summary>
            <param name="expression">The expression.</param>
        </member>
        <member name="T:ServiceStack.DataAnnotations.ComputedAttribute">
            <summary>
            Class ComputedAttribute.
            Implements the <see cref="T:ServiceStack.AttributeBase" />
            </summary>
            <seealso cref="T:ServiceStack.AttributeBase" />
        </member>
        <member name="T:ServiceStack.DataAnnotations.PersistedAttribute">
            <summary>
            Whether to persist field
            </summary>
        </member>
        <member name="T:ServiceStack.DataAnnotations.CustomFieldAttribute">
            <summary>
            Class CustomFieldAttribute.
            Implements the <see cref="T:ServiceStack.AttributeBase" />
            </summary>
            <seealso cref="T:ServiceStack.AttributeBase" />
        </member>
        <member name="P:ServiceStack.DataAnnotations.CustomFieldAttribute.Sql">
            <summary>
            Gets or sets the SQL.
            </summary>
            <value>The SQL.</value>
        </member>
        <member name="P:ServiceStack.DataAnnotations.CustomFieldAttribute.Order">
            <summary>
            Gets or sets the order.
            </summary>
            <value>The order.</value>
        </member>
        <member name="M:ServiceStack.DataAnnotations.CustomFieldAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.DataAnnotations.CustomFieldAttribute"/> class.
            </summary>
        </member>
        <member name="M:ServiceStack.DataAnnotations.CustomFieldAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.DataAnnotations.CustomFieldAttribute" /> class.
            </summary>
            <param name="sql">The SQL.</param>
        </member>
        <member name="T:ServiceStack.DataAnnotations.PgSqlJsonAttribute">
            <summary>
            Class PgSqlJsonAttribute.
            Implements the <see cref="T:ServiceStack.DataAnnotations.CustomFieldAttribute" />
            </summary>
            <seealso cref="T:ServiceStack.DataAnnotations.CustomFieldAttribute" />
        </member>
        <member name="M:ServiceStack.DataAnnotations.PgSqlJsonAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.DataAnnotations.PgSqlJsonAttribute" /> class.
            </summary>
        </member>
        <member name="T:ServiceStack.DataAnnotations.PgSqlJsonBAttribute">
            <summary>
            Class PgSqlJsonBAttribute.
            Implements the <see cref="T:ServiceStack.DataAnnotations.CustomFieldAttribute" />
            </summary>
            <seealso cref="T:ServiceStack.DataAnnotations.CustomFieldAttribute" />
        </member>
        <member name="M:ServiceStack.DataAnnotations.PgSqlJsonBAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.DataAnnotations.PgSqlJsonBAttribute" /> class.
            </summary>
        </member>
        <member name="T:ServiceStack.DataAnnotations.PgSqlHStoreAttribute">
            <summary>
            Class PgSqlHStoreAttribute.
            Implements the <see cref="T:ServiceStack.DataAnnotations.CustomFieldAttribute" />
            </summary>
            <seealso cref="T:ServiceStack.DataAnnotations.CustomFieldAttribute" />
        </member>
        <member name="M:ServiceStack.DataAnnotations.PgSqlHStoreAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.DataAnnotations.PgSqlHStoreAttribute" /> class.
            </summary>
        </member>
        <member name="T:ServiceStack.DataAnnotations.PgSqlTextArrayAttribute">
            <summary>
            Class PgSqlTextArrayAttribute.
            Implements the <see cref="T:ServiceStack.DataAnnotations.CustomFieldAttribute" />
            </summary>
            <seealso cref="T:ServiceStack.DataAnnotations.CustomFieldAttribute" />
        </member>
        <member name="M:ServiceStack.DataAnnotations.PgSqlTextArrayAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.DataAnnotations.PgSqlTextArrayAttribute" /> class.
            </summary>
        </member>
        <member name="T:ServiceStack.DataAnnotations.PgSqlShortArrayAttribute">
            <summary>
            Class PgSqlShortArrayAttribute.
            Implements the <see cref="T:ServiceStack.DataAnnotations.CustomFieldAttribute" />
            </summary>
            <seealso cref="T:ServiceStack.DataAnnotations.CustomFieldAttribute" />
        </member>
        <member name="M:ServiceStack.DataAnnotations.PgSqlShortArrayAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.DataAnnotations.PgSqlShortArrayAttribute" /> class.
            </summary>
        </member>
        <member name="T:ServiceStack.DataAnnotations.PgSqlIntArrayAttribute">
            <summary>
            Class PgSqlIntArrayAttribute.
            Implements the <see cref="T:ServiceStack.DataAnnotations.CustomFieldAttribute" />
            </summary>
            <seealso cref="T:ServiceStack.DataAnnotations.CustomFieldAttribute" />
        </member>
        <member name="M:ServiceStack.DataAnnotations.PgSqlIntArrayAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.DataAnnotations.PgSqlIntArrayAttribute" /> class.
            </summary>
        </member>
        <member name="T:ServiceStack.DataAnnotations.PgSqlLongArrayAttribute">
            <summary>
            Class PgSqlLongArrayAttribute.
            Implements the <see cref="T:ServiceStack.DataAnnotations.CustomFieldAttribute" />
            </summary>
            <seealso cref="T:ServiceStack.DataAnnotations.CustomFieldAttribute" />
        </member>
        <member name="M:ServiceStack.DataAnnotations.PgSqlLongArrayAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.DataAnnotations.PgSqlLongArrayAttribute" /> class.
            </summary>
        </member>
        <member name="T:ServiceStack.DataAnnotations.PgSqlFloatArrayAttribute">
            <summary>
            Class PgSqlFloatArrayAttribute.
            Implements the <see cref="T:ServiceStack.DataAnnotations.CustomFieldAttribute" />
            </summary>
            <seealso cref="T:ServiceStack.DataAnnotations.CustomFieldAttribute" />
        </member>
        <member name="M:ServiceStack.DataAnnotations.PgSqlFloatArrayAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.DataAnnotations.PgSqlFloatArrayAttribute" /> class.
            </summary>
        </member>
        <member name="T:ServiceStack.DataAnnotations.PgSqlDoubleArrayAttribute">
            <summary>
            Class PgSqlDoubleArrayAttribute.
            Implements the <see cref="T:ServiceStack.DataAnnotations.CustomFieldAttribute" />
            </summary>
            <seealso cref="T:ServiceStack.DataAnnotations.CustomFieldAttribute" />
        </member>
        <member name="M:ServiceStack.DataAnnotations.PgSqlDoubleArrayAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.DataAnnotations.PgSqlDoubleArrayAttribute" /> class.
            </summary>
        </member>
        <member name="T:ServiceStack.DataAnnotations.PgSqlDecimalArrayAttribute">
            <summary>
            Class PgSqlDecimalArrayAttribute.
            Implements the <see cref="T:ServiceStack.DataAnnotations.CustomFieldAttribute" />
            </summary>
            <seealso cref="T:ServiceStack.DataAnnotations.CustomFieldAttribute" />
        </member>
        <member name="M:ServiceStack.DataAnnotations.PgSqlDecimalArrayAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.DataAnnotations.PgSqlDecimalArrayAttribute" /> class.
            </summary>
        </member>
        <member name="T:ServiceStack.DataAnnotations.PgSqlTimestampArrayAttribute">
            <summary>
            Class PgSqlTimestampArrayAttribute.
            Implements the <see cref="T:ServiceStack.DataAnnotations.CustomFieldAttribute" />
            </summary>
            <seealso cref="T:ServiceStack.DataAnnotations.CustomFieldAttribute" />
        </member>
        <member name="M:ServiceStack.DataAnnotations.PgSqlTimestampArrayAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.DataAnnotations.PgSqlTimestampArrayAttribute" /> class.
            </summary>
        </member>
        <member name="T:ServiceStack.DataAnnotations.PgSqlTimestampTzArrayAttribute">
            <summary>
            Class PgSqlTimestampTzArrayAttribute.
            Implements the <see cref="T:ServiceStack.DataAnnotations.CustomFieldAttribute" />
            </summary>
            <seealso cref="T:ServiceStack.DataAnnotations.CustomFieldAttribute" />
        </member>
        <member name="M:ServiceStack.DataAnnotations.PgSqlTimestampTzArrayAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.DataAnnotations.PgSqlTimestampTzArrayAttribute" /> class.
            </summary>
        </member>
        <member name="T:ServiceStack.DataAnnotations.CustomSelectAttribute">
            <summary>
            Class CustomSelectAttribute.
            Implements the <see cref="T:ServiceStack.AttributeBase" />
            </summary>
            <seealso cref="T:ServiceStack.AttributeBase" />
        </member>
        <member name="P:ServiceStack.DataAnnotations.CustomSelectAttribute.Sql">
            <summary>
            Gets or sets the SQL.
            </summary>
            <value>The SQL.</value>
        </member>
        <member name="M:ServiceStack.DataAnnotations.CustomSelectAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.DataAnnotations.CustomSelectAttribute" /> class.
            </summary>
            <param name="sql">The SQL.</param>
        </member>
        <member name="T:ServiceStack.DataAnnotations.CustomInsertAttribute">
            <summary>
            Class CustomInsertAttribute.
            Implements the <see cref="T:ServiceStack.AttributeBase" />
            </summary>
            <seealso cref="T:ServiceStack.AttributeBase" />
        </member>
        <member name="P:ServiceStack.DataAnnotations.CustomInsertAttribute.Sql">
            <summary>
            Gets or sets the SQL.
            </summary>
            <value>The SQL.</value>
        </member>
        <member name="M:ServiceStack.DataAnnotations.CustomInsertAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.DataAnnotations.CustomInsertAttribute" /> class.
            </summary>
            <param name="sql">The SQL.</param>
        </member>
        <member name="T:ServiceStack.DataAnnotations.CustomUpdateAttribute">
            <summary>
            Class CustomUpdateAttribute.
            Implements the <see cref="T:ServiceStack.AttributeBase" />
            </summary>
            <seealso cref="T:ServiceStack.AttributeBase" />
        </member>
        <member name="P:ServiceStack.DataAnnotations.CustomUpdateAttribute.Sql">
            <summary>
            Gets or sets the SQL.
            </summary>
            <value>The SQL.</value>
        </member>
        <member name="M:ServiceStack.DataAnnotations.CustomUpdateAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.DataAnnotations.CustomUpdateAttribute" /> class.
            </summary>
            <param name="sql">The SQL.</param>
        </member>
        <member name="T:ServiceStack.DataAnnotations.DecimalLengthAttribute">
            <summary>
            Decimal length attribute.
            </summary>
        </member>
        <member name="P:ServiceStack.DataAnnotations.DecimalLengthAttribute.Precision">
            <summary>
            Gets or sets the precision.
            </summary>
            <value>The precision.</value>
        </member>
        <member name="P:ServiceStack.DataAnnotations.DecimalLengthAttribute.Scale">
            <summary>
            Gets or sets the scale.
            </summary>
            <value>The scale.</value>
        </member>
        <member name="M:ServiceStack.DataAnnotations.DecimalLengthAttribute.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.DataAnnotations.DecimalLengthAttribute" /> class.
            </summary>
            <param name="precision">The precision.</param>
            <param name="scale">The scale.</param>
        </member>
        <member name="M:ServiceStack.DataAnnotations.DecimalLengthAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.DataAnnotations.DecimalLengthAttribute" /> class.
            </summary>
            <param name="precision">The precision.</param>
        </member>
        <member name="M:ServiceStack.DataAnnotations.DecimalLengthAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.DataAnnotations.DecimalLengthAttribute" /> class.
            </summary>
        </member>
        <member name="T:ServiceStack.DataAnnotations.DefaultAttribute">
            <summary>
            Class DefaultAttribute.
            Implements the <see cref="T:ServiceStack.AttributeBase" />
            </summary>
            <seealso cref="T:ServiceStack.AttributeBase" />
        </member>
        <member name="P:ServiceStack.DataAnnotations.DefaultAttribute.IntValue">
            <summary>
            Gets or sets the int value.
            </summary>
            <value>The int value.</value>
        </member>
        <member name="P:ServiceStack.DataAnnotations.DefaultAttribute.DoubleValue">
            <summary>
            Gets or sets the double value.
            </summary>
            <value>The double value.</value>
        </member>
        <member name="P:ServiceStack.DataAnnotations.DefaultAttribute.DefaultType">
            <summary>
            Gets or sets the default type.
            </summary>
            <value>The default type.</value>
        </member>
        <member name="P:ServiceStack.DataAnnotations.DefaultAttribute.DefaultValue">
            <summary>
            Gets or sets the default value.
            </summary>
            <value>The default value.</value>
        </member>
        <member name="P:ServiceStack.DataAnnotations.DefaultAttribute.WithConstraint">
            <summary>
            Gets or sets the with constraint.
            </summary>
            <value>The with constraint.</value>
        </member>
        <member name="P:ServiceStack.DataAnnotations.DefaultAttribute.OnUpdate">
            <summary>
            Gets or sets a value indicating whether [on update].
            </summary>
            <value><c>true</c> if [on update]; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:ServiceStack.DataAnnotations.DefaultAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.DataAnnotations.DefaultAttribute" /> class.
            </summary>
            <param name="intValue">The int value.</param>
        </member>
        <member name="M:ServiceStack.DataAnnotations.DefaultAttribute.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.DataAnnotations.DefaultAttribute" /> class.
            </summary>
            <param name="doubleValue">The double value.</param>
        </member>
        <member name="M:ServiceStack.DataAnnotations.DefaultAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.DataAnnotations.DefaultAttribute" /> class.
            </summary>
            <param name="defaultValue">The default value.</param>
        </member>
        <member name="M:ServiceStack.DataAnnotations.DefaultAttribute.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.DataAnnotations.DefaultAttribute" /> class.
            </summary>
            <param name="defaultType">The default type.</param>
            <param name="defaultValue">The default value.</param>
        </member>
        <member name="T:ServiceStack.DataAnnotations.DescriptionAttribute">
            <summary>
            Class DescriptionAttribute.
            Implements the <see cref="T:ServiceStack.AttributeBase" />
            </summary>
            <seealso cref="T:ServiceStack.AttributeBase" />
        </member>
        <member name="P:ServiceStack.DataAnnotations.DescriptionAttribute.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="M:ServiceStack.DataAnnotations.DescriptionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.DataAnnotations.DescriptionAttribute" /> class.
            </summary>
            <param name="description">The description.</param>
        </member>
        <member name="T:ServiceStack.DataAnnotations.EnumAsCharAttribute">
            <summary>
            Class EnumAsCharAttribute.
            Implements the <see cref="T:ServiceStack.AttributeBase" />
            </summary>
            <seealso cref="T:ServiceStack.AttributeBase" />
        </member>
        <member name="T:ServiceStack.DataAnnotations.EnumAsIntAttribute">
            <summary>
            Class EnumAsIntAttribute.
            Implements the <see cref="T:ServiceStack.AttributeBase" />
            </summary>
            <seealso cref="T:ServiceStack.AttributeBase" />
        </member>
        <member name="T:ServiceStack.DataAnnotations.ExcludeAttribute">
            <summary>
            Mark types that are to be excluded from specified features
            </summary>
        </member>
        <member name="P:ServiceStack.DataAnnotations.ExcludeAttribute.Feature">
            <summary>
            Gets or sets the feature.
            </summary>
            <value>The feature.</value>
        </member>
        <member name="M:ServiceStack.DataAnnotations.ExcludeAttribute.#ctor(ServiceStack.Feature)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.DataAnnotations.ExcludeAttribute" /> class.
            </summary>
            <param name="feature">The feature.</param>
        </member>
        <member name="T:ServiceStack.DataAnnotations.ExcludeMetadataAttribute">
            <summary>
            Class ExcludeMetadataAttribute.
            Implements the <see cref="T:ServiceStack.DataAnnotations.ExcludeAttribute" />
            </summary>
            <seealso cref="T:ServiceStack.DataAnnotations.ExcludeAttribute" />
        </member>
        <member name="M:ServiceStack.DataAnnotations.ExcludeMetadataAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.DataAnnotations.ExcludeMetadataAttribute" /> class.
            </summary>
        </member>
        <member name="T:ServiceStack.DataAnnotations.ForeignKeyAttribute">
            <summary>
            Class ForeignKeyAttribute.
            Implements the <see cref="T:ServiceStack.DataAnnotations.ReferencesAttribute" />
            </summary>
            <seealso cref="T:ServiceStack.DataAnnotations.ReferencesAttribute" />
        </member>
        <member name="M:ServiceStack.DataAnnotations.ForeignKeyAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.DataAnnotations.ForeignKeyAttribute" /> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="P:ServiceStack.DataAnnotations.ForeignKeyAttribute.OnDelete">
            <summary>
            Gets or sets the on delete.
            </summary>
            <value>The on delete.</value>
        </member>
        <member name="P:ServiceStack.DataAnnotations.ForeignKeyAttribute.OnUpdate">
            <summary>
            Gets or sets the on update.
            </summary>
            <value>The on update.</value>
        </member>
        <member name="P:ServiceStack.DataAnnotations.ForeignKeyAttribute.ForeignKeyName">
            <summary>
            Explicit foreign key name. If it's null, or empty, the FK name will be autogenerated as before.
            </summary>
            <value>The name of the foreign key.</value>
        </member>
        <member name="T:ServiceStack.DataAnnotations.IdAttribute">
            <summary>
            Class IdAttribute.
            Implements the <see cref="T:ServiceStack.AttributeBase" />
            </summary>
            <seealso cref="T:ServiceStack.AttributeBase" />
        </member>
        <member name="P:ServiceStack.DataAnnotations.IdAttribute.Id">
            <summary>
            Gets the identifier.
            </summary>
            <value>The identifier.</value>
        </member>
        <member name="M:ServiceStack.DataAnnotations.IdAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.DataAnnotations.IdAttribute" /> class.
            </summary>
            <param name="id">The identifier.</param>
        </member>
        <member name="T:ServiceStack.DataAnnotations.IgnoreAttribute">
            <summary>
            IgnoreAttribute
            Use to indicate that a property is not a field  in the table
            properties with this attribute are ignored when building sql sentences
            </summary>
        </member>
        <member name="T:ServiceStack.DataAnnotations.IgnoreOnSelectAttribute">
            <summary>
            Ignore this property in SELECT statements
            </summary>
        </member>
        <member name="T:ServiceStack.DataAnnotations.IgnoreOnUpdateAttribute">
            <summary>
            Ignore this property in UPDATE statements
            </summary>
        </member>
        <member name="T:ServiceStack.DataAnnotations.IgnoreOnInsertAttribute">
            <summary>
            Ignore this property in INSERT statements
            </summary>
        </member>
        <member name="T:ServiceStack.DataAnnotations.IndexAttribute">
            <summary>
            Class IndexAttribute.
            Implements the <see cref="T:ServiceStack.AttributeBase" />
            </summary>
            <seealso cref="T:ServiceStack.AttributeBase" />
        </member>
        <member name="M:ServiceStack.DataAnnotations.IndexAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.DataAnnotations.IndexAttribute" /> class.
            </summary>
        </member>
        <member name="M:ServiceStack.DataAnnotations.IndexAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.DataAnnotations.IndexAttribute" /> class.
            </summary>
            <param name="unique">if set to <c>true</c> [unique].</param>
        </member>
        <member name="P:ServiceStack.DataAnnotations.IndexAttribute.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:ServiceStack.DataAnnotations.IndexAttribute.Unique">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:ServiceStack.DataAnnotations.IndexAttribute" /> is unique.
            </summary>
            <value><c>true</c> if unique; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.DataAnnotations.IndexAttribute.Clustered">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:ServiceStack.DataAnnotations.IndexAttribute" /> is clustered.
            </summary>
            <value><c>true</c> if clustered; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ServiceStack.DataAnnotations.IndexAttribute.NonClustered">
            <summary>
            Gets or sets a value indicating whether [non clustered].
            </summary>
            <value><c>true</c> if [non clustered]; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:ServiceStack.DataAnnotations.MetaAttribute">
            <summary>
            Decorate any type or property with adhoc info
            </summary>
        </member>
        <member name="P:ServiceStack.DataAnnotations.MetaAttribute.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:ServiceStack.DataAnnotations.MetaAttribute.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="M:ServiceStack.DataAnnotations.MetaAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.DataAnnotations.MetaAttribute" /> class.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:ServiceStack.DataAnnotations.PostCreateTableAttribute">
            <summary>
            Class PostCreateTableAttribute.
            Implements the <see cref="T:ServiceStack.AttributeBase" />
            </summary>
            <seealso cref="T:ServiceStack.AttributeBase" />
        </member>
        <member name="P:ServiceStack.DataAnnotations.PostCreateTableAttribute.Sql">
            <summary>
            Gets or sets the SQL.
            </summary>
            <value>The SQL.</value>
        </member>
        <member name="M:ServiceStack.DataAnnotations.PostCreateTableAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.DataAnnotations.PostCreateTableAttribute" /> class.
            </summary>
            <param name="sql">The SQL.</param>
        </member>
        <member name="T:ServiceStack.DataAnnotations.PostDropTableAttribute">
            <summary>
            Class PostDropTableAttribute.
            Implements the <see cref="T:ServiceStack.AttributeBase" />
            </summary>
            <seealso cref="T:ServiceStack.AttributeBase" />
        </member>
        <member name="P:ServiceStack.DataAnnotations.PostDropTableAttribute.Sql">
            <summary>
            Gets or sets the SQL.
            </summary>
            <value>The SQL.</value>
        </member>
        <member name="M:ServiceStack.DataAnnotations.PostDropTableAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.DataAnnotations.PostDropTableAttribute" /> class.
            </summary>
            <param name="sql">The SQL.</param>
        </member>
        <member name="T:ServiceStack.DataAnnotations.PreCreateTableAttribute">
            <summary>
            Class PreCreateTableAttribute.
            Implements the <see cref="T:ServiceStack.AttributeBase" />
            </summary>
            <seealso cref="T:ServiceStack.AttributeBase" />
        </member>
        <member name="P:ServiceStack.DataAnnotations.PreCreateTableAttribute.Sql">
            <summary>
            Gets or sets the SQL.
            </summary>
            <value>The SQL.</value>
        </member>
        <member name="M:ServiceStack.DataAnnotations.PreCreateTableAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.DataAnnotations.PreCreateTableAttribute" /> class.
            </summary>
            <param name="sql">The SQL.</param>
        </member>
        <member name="T:ServiceStack.DataAnnotations.PreDropTableAttribute">
            <summary>
            Class PreDropTableAttribute.
            Implements the <see cref="T:ServiceStack.AttributeBase" />
            </summary>
            <seealso cref="T:ServiceStack.AttributeBase" />
        </member>
        <member name="P:ServiceStack.DataAnnotations.PreDropTableAttribute.Sql">
            <summary>
            Gets or sets the SQL.
            </summary>
            <value>The SQL.</value>
        </member>
        <member name="M:ServiceStack.DataAnnotations.PreDropTableAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.DataAnnotations.PreDropTableAttribute" /> class.
            </summary>
            <param name="sql">The SQL.</param>
        </member>
        <member name="T:ServiceStack.DataAnnotations.PrimaryKeyAttribute">
            <summary>
            Primary key attribute.
            use to indicate that property is part of the pk
            </summary>
        </member>
        <member name="T:ServiceStack.DataAnnotations.RangeAttribute">
            <summary>
            Class RangeAttribute.
            Implements the <see cref="T:ServiceStack.AttributeBase" />
            </summary>
            <seealso cref="T:ServiceStack.AttributeBase" />
        </member>
        <member name="P:ServiceStack.DataAnnotations.RangeAttribute.Minimum">
            <summary>
            Gets the minimum.
            </summary>
            <value>The minimum.</value>
        </member>
        <member name="P:ServiceStack.DataAnnotations.RangeAttribute.Maximum">
            <summary>
            Gets the maximum.
            </summary>
            <value>The maximum.</value>
        </member>
        <member name="P:ServiceStack.DataAnnotations.RangeAttribute.OperandType">
            <summary>
            Gets the type of the operand.
            </summary>
            <value>The type of the operand.</value>
        </member>
        <member name="M:ServiceStack.DataAnnotations.RangeAttribute.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.DataAnnotations.RangeAttribute" /> class.
            </summary>
            <param name="minimum">The minimum.</param>
            <param name="maximum">The maximum.</param>
        </member>
        <member name="M:ServiceStack.DataAnnotations.RangeAttribute.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.DataAnnotations.RangeAttribute" /> class.
            </summary>
            <param name="minimum">The minimum.</param>
            <param name="maximum">The maximum.</param>
        </member>
        <member name="M:ServiceStack.DataAnnotations.RangeAttribute.#ctor(System.Type,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.DataAnnotations.RangeAttribute" /> class.
            </summary>
            <param name="type">The type.</param>
            <param name="minimum">The minimum.</param>
            <param name="maximum">The maximum.</param>
        </member>
        <member name="T:ServiceStack.DataAnnotations.ReferenceAttribute">
            <summary>
            Class ReferenceAttribute.
            Implements the <see cref="T:ServiceStack.AttributeBase" />
            </summary>
            <seealso cref="T:ServiceStack.AttributeBase" />
        </member>
        <member name="P:ServiceStack.DataAnnotations.ReferenceAttribute.SelfId">
            <summary>
            Use the specified Field on this POCO as the FK field for the referenced POCO Complex Type.
            </summary>
        </member>
        <member name="P:ServiceStack.DataAnnotations.ReferenceAttribute.RefId">
            <summary>
            Specify the FK field to match of the referenced POCO Complex Type (default Primary Key).
            </summary>
        </member>
        <member name="P:ServiceStack.DataAnnotations.ReferenceAttribute.RefLabel">
            <summary>
            If configured will display the Reference Field instead of the default rendered complex type.
            </summary>
        </member>
        <member name="T:ServiceStack.DataAnnotations.ReferenceFieldAttribute">
            <summary>
            Populate with a field from a foreign table in Load* APIs
            </summary>
        </member>
        <member name="P:ServiceStack.DataAnnotations.ReferenceFieldAttribute.Model">
            <summary>
            The Foreign Key Table name
            </summary>
        </member>
        <member name="P:ServiceStack.DataAnnotations.ReferenceFieldAttribute.Id">
            <summary>
            The Field name on current Model to use for the Foreign Key Table Lookup.
            </summary>
        </member>
        <member name="P:ServiceStack.DataAnnotations.ReferenceFieldAttribute.Field">
            <summary>
            Specify Field to reference (if different from property name)
            </summary>
        </member>
        <member name="M:ServiceStack.DataAnnotations.ReferenceFieldAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.DataAnnotations.ReferenceFieldAttribute"/> class.
            </summary>
        </member>
        <member name="M:ServiceStack.DataAnnotations.ReferenceFieldAttribute.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.DataAnnotations.ReferenceFieldAttribute"/> class.
            </summary>
            <param name="model">The Foreign Key Table name</param>
            <param name="id">The Field name on current Model to use for the Foreign Key Table Lookup.</param>
        </member>
        <member name="T:ServiceStack.DataAnnotations.ReferencesAttribute">
            <summary>
            Class ReferencesAttribute.
            Implements the <see cref="T:ServiceStack.AttributeBase" />
            </summary>
            <seealso cref="T:ServiceStack.AttributeBase" />
        </member>
        <member name="P:ServiceStack.DataAnnotations.ReferencesAttribute.Type">
            <summary>
            Gets or sets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="M:ServiceStack.DataAnnotations.ReferencesAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.DataAnnotations.ReferencesAttribute" /> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="T:ServiceStack.DataAnnotations.RequiredAttribute">
            <summary>
            Create NOT NULL Columns in Data Models.
            Use [ValidateNotNull] to use https://docs.servicestack.net/validation to enforce a not null property
            </summary>
        </member>
        <member name="T:ServiceStack.DataAnnotations.ReturnOnInsertAttribute">
            <summary>
            ReturnAttribute
            Use to indicate that a property should be included in the
            returning/output clause of INSERT sql sentences
            </summary>
        </member>
        <member name="T:ServiceStack.DataAnnotations.RowVersionAttribute">
            <summary>
            Used to indicate that property is a row version incremented automatically by the database
            </summary>
        </member>
        <member name="T:ServiceStack.DataAnnotations.SchemaAttribute">
            <summary>
            Used to annotate an Entity with its DB schema
            </summary>
        </member>
        <member name="M:ServiceStack.DataAnnotations.SchemaAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.DataAnnotations.SchemaAttribute" /> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="P:ServiceStack.DataAnnotations.SchemaAttribute.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="T:ServiceStack.DataAnnotations.SequenceAttribute">
            <summary>
            Class SequenceAttribute.
            Implements the <see cref="T:ServiceStack.AttributeBase" />
            </summary>
            <seealso cref="T:ServiceStack.AttributeBase" />
        </member>
        <member name="P:ServiceStack.DataAnnotations.SequenceAttribute.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="M:ServiceStack.DataAnnotations.SequenceAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.DataAnnotations.SequenceAttribute" /> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="T:ServiceStack.DataAnnotations.SqlServerBucketCountAttribute">
            <summary>
            Class SqlServerBucketCountAttribute.
            Implements the <see cref="T:ServiceStack.AttributeBase" />
            </summary>
            <seealso cref="T:ServiceStack.AttributeBase" />
        </member>
        <member name="M:ServiceStack.DataAnnotations.SqlServerBucketCountAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.DataAnnotations.SqlServerBucketCountAttribute" /> class.
            </summary>
            <param name="count">The count.</param>
        </member>
        <member name="P:ServiceStack.DataAnnotations.SqlServerBucketCountAttribute.Count">
            <summary>
            Gets or sets the count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="T:ServiceStack.DataAnnotations.SqlServerCollateAttribute">
            <summary>
            Class SqlServerCollateAttribute.
            Implements the <see cref="T:ServiceStack.AttributeBase" />
            </summary>
            <seealso cref="T:ServiceStack.AttributeBase" />
        </member>
        <member name="M:ServiceStack.DataAnnotations.SqlServerCollateAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.DataAnnotations.SqlServerCollateAttribute" /> class.
            </summary>
            <param name="collation">The collation.</param>
        </member>
        <member name="P:ServiceStack.DataAnnotations.SqlServerCollateAttribute.Collation">
            <summary>
            Gets or sets the collation.
            </summary>
            <value>The collation.</value>
        </member>
        <member name="T:ServiceStack.DataAnnotations.SqlServerFileTableAttribute">
            <summary>
            Class SqlServerFileTableAttribute.
            Implements the <see cref="T:ServiceStack.AttributeBase" />
            </summary>
            <seealso cref="T:ServiceStack.AttributeBase" />
        </member>
        <member name="M:ServiceStack.DataAnnotations.SqlServerFileTableAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.DataAnnotations.SqlServerFileTableAttribute" /> class.
            </summary>
        </member>
        <member name="M:ServiceStack.DataAnnotations.SqlServerFileTableAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.DataAnnotations.SqlServerFileTableAttribute" /> class.
            </summary>
            <param name="directory">The directory.</param>
            <param name="collateFileName">Name of the collate file.</param>
        </member>
        <member name="P:ServiceStack.DataAnnotations.SqlServerFileTableAttribute.FileTableDirectory">
            <summary>
            Gets the file table directory.
            </summary>
            <value>The file table directory.</value>
        </member>
        <member name="P:ServiceStack.DataAnnotations.SqlServerFileTableAttribute.FileTableCollateFileName">
            <summary>
            Gets the name of the file table collate file.
            </summary>
            <value>The name of the file table collate file.</value>
        </member>
        <member name="T:ServiceStack.DataAnnotations.SqlServerMemoryOptimizedAttribute">
            <summary>
            Class SqlServerMemoryOptimizedAttribute.
            Implements the <see cref="T:ServiceStack.AttributeBase" />
            </summary>
            <seealso cref="T:ServiceStack.AttributeBase" />
        </member>
        <member name="P:ServiceStack.DataAnnotations.SqlServerMemoryOptimizedAttribute.Durability">
            <summary>
            Gets or sets the durability.
            </summary>
            <value>The durability.</value>
        </member>
        <member name="T:ServiceStack.DataAnnotations.SqlServerDurability">
            <summary>
            Enum SqlServerDurability
            </summary>
        </member>
        <member name="F:ServiceStack.DataAnnotations.SqlServerDurability.SchemaOnly">
            <summary>
            The schema only
            </summary>
        </member>
        <member name="F:ServiceStack.DataAnnotations.SqlServerDurability.SchemaAndData">
            <summary>
            The schema and data
            </summary>
        </member>
        <member name="T:ServiceStack.DataAnnotations.StringLengthAttribute">
            <summary>
            Class StringLengthAttribute.
            Implements the <see cref="T:ServiceStack.AttributeBase" />
            </summary>
            <seealso cref="T:ServiceStack.AttributeBase" />
        </member>
        <member name="F:ServiceStack.DataAnnotations.StringLengthAttribute.MaxText">
            <summary>
            The maximum text
            </summary>
        </member>
        <member name="P:ServiceStack.DataAnnotations.StringLengthAttribute.MinimumLength">
            <summary>
            Gets or sets the minimum length.
            </summary>
            <value>The minimum length.</value>
        </member>
        <member name="P:ServiceStack.DataAnnotations.StringLengthAttribute.MaximumLength">
            <summary>
            Gets or sets the maximum length.
            </summary>
            <value>The maximum length.</value>
        </member>
        <member name="M:ServiceStack.DataAnnotations.StringLengthAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.DataAnnotations.StringLengthAttribute" /> class.
            </summary>
            <param name="maximumLength">The maximum length.</param>
        </member>
        <member name="M:ServiceStack.DataAnnotations.StringLengthAttribute.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.DataAnnotations.StringLengthAttribute" /> class.
            </summary>
            <param name="minimumLength">The minimum length.</param>
            <param name="maximumLength">The maximum length.</param>
        </member>
        <member name="T:ServiceStack.DataAnnotations.UniqueAttribute">
            <summary>
            Class UniqueAttribute.
            Implements the <see cref="T:ServiceStack.AttributeBase" />
            </summary>
            <seealso cref="T:ServiceStack.AttributeBase" />
        </member>
        <member name="T:ServiceStack.DataAnnotations.UniqueConstraintAttribute">
            <summary>
            Class UniqueConstraintAttribute.
            Implements the <see cref="T:ServiceStack.AttributeBase" />
            </summary>
            <seealso cref="T:ServiceStack.AttributeBase" />
        </member>
        <member name="M:ServiceStack.DataAnnotations.UniqueConstraintAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.DataAnnotations.UniqueConstraintAttribute" /> class.
            </summary>
        </member>
        <member name="M:ServiceStack.DataAnnotations.UniqueConstraintAttribute.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.DataAnnotations.UniqueConstraintAttribute" /> class.
            </summary>
            <param name="fieldNames">The field names.</param>
        </member>
        <member name="P:ServiceStack.DataAnnotations.UniqueConstraintAttribute.FieldNames">
            <summary>
            Gets or sets the field names.
            </summary>
            <value>The field names.</value>
        </member>
        <member name="P:ServiceStack.DataAnnotations.UniqueConstraintAttribute.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="T:ServiceStack.Feature">
            <summary>
            Enum Feature
            </summary>
        </member>
        <member name="F:ServiceStack.Feature.None">
            <summary>
            The none
            </summary>
        </member>
        <member name="F:ServiceStack.Feature.All">
            <summary>
            All
            </summary>
        </member>
        <member name="F:ServiceStack.Feature.Soap">
            <summary>
            The SOAP
            </summary>
        </member>
        <member name="F:ServiceStack.Feature.Metadata">
            <summary>
            The metadata
            </summary>
        </member>
        <member name="F:ServiceStack.Feature.PredefinedRoutes">
            <summary>
            The predefined routes
            </summary>
        </member>
        <member name="F:ServiceStack.Feature.RequestInfo">
            <summary>
            The request information
            </summary>
        </member>
        <member name="F:ServiceStack.Feature.Json">
            <summary>
            The json
            </summary>
        </member>
        <member name="F:ServiceStack.Feature.Xml">
            <summary>
            The XML
            </summary>
        </member>
        <member name="F:ServiceStack.Feature.Jsv">
            <summary>
            The JSV
            </summary>
        </member>
        <member name="F:ServiceStack.Feature.Soap11">
            <summary>
            The soap11
            </summary>
        </member>
        <member name="F:ServiceStack.Feature.Soap12">
            <summary>
            The soap12
            </summary>
        </member>
        <member name="F:ServiceStack.Feature.Csv">
            <summary>
            The CSV
            </summary>
        </member>
        <member name="F:ServiceStack.Feature.Html">
            <summary>
            The HTML
            </summary>
        </member>
        <member name="F:ServiceStack.Feature.Razor">
            <summary>
            The razor
            </summary>
        </member>
        <member name="F:ServiceStack.Feature.Wire">
            <summary>
            The wire
            </summary>
        </member>
        <member name="T:ServiceStack.IMeta">
            <summary>
            Interface IMeta
            </summary>
        </member>
        <member name="P:ServiceStack.IMeta.Meta">
            <summary>
            Gets or sets the meta.
            </summary>
            <value>The meta.</value>
        </member>
        <member name="T:ServiceStack.InfoException">
            <summary>
            When only Exception message is important and StackTrace is irrelevant
            </summary>
        </member>
        <member name="M:ServiceStack.InfoException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.InfoException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:ServiceStack.InfoException.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="T:ServiceStack.IReflectAttributeConverter">
            <summary>
            Interface IReflectAttributeConverter
            </summary>
        </member>
        <member name="T:ServiceStack.ReflectAttribute">
            <summary>
            Class ReflectAttribute.
            </summary>
        </member>
        <member name="P:ServiceStack.ReflectAttribute.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:ServiceStack.ReflectAttribute.ConstructorArgs">
            <summary>
            Gets or sets the constructor arguments.
            </summary>
            <value>The constructor arguments.</value>
        </member>
        <member name="P:ServiceStack.ReflectAttribute.PropertyArgs">
            <summary>
            Gets or sets the property arguments.
            </summary>
            <value>The property arguments.</value>
        </member>
        <member name="T:ServiceStack.Model.IHasId`1">
            <summary>
            Interface IHasId
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:ServiceStack.Model.IHasId`1.Id">
            <summary>
            Gets the identifier.
            </summary>
            <value>The identifier.</value>
        </member>
        <member name="T:ServiceStack.NamedConnectionAttribute">
            <summary>
            Class NamedConnectionAttribute.
            Implements the <see cref="T:ServiceStack.AttributeBase" />
            </summary>
            <seealso cref="T:ServiceStack.AttributeBase" />
        </member>
        <member name="P:ServiceStack.NamedConnectionAttribute.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="M:ServiceStack.NamedConnectionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.NamedConnectionAttribute"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="T:ServiceStack.NotesAttribute">
            <summary>
            Document a longer form description about a Type
            </summary>
        </member>
        <member name="P:ServiceStack.NotesAttribute.Notes">
            <summary>
            Get or sets a Label
            </summary>
            <value>The notes.</value>
        </member>
        <member name="M:ServiceStack.NotesAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.NotesAttribute"/> class.
            </summary>
            <param name="notes">The notes.</param>
        </member>
        <member name="T:ServiceStack.TagAttribute">
            <summary>
            Class TagAttribute.
            Implements the <see cref="T:ServiceStack.AttributeBase" />
            </summary>
            <seealso cref="T:ServiceStack.AttributeBase" />
        </member>
        <member name="P:ServiceStack.TagAttribute.Name">
            <summary>
            Get or sets tag name
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:ServiceStack.TagAttribute.ApplyTo">
            <summary>
            Get or sets operation verbs for which the attribute be applied
            </summary>
            <value>The apply to.</value>
        </member>
        <member name="M:ServiceStack.TagAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.TagAttribute" /> class.
            </summary>
        </member>
        <member name="M:ServiceStack.TagAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.TagAttribute" /> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:ServiceStack.TagAttribute.#ctor(System.String,ServiceStack.ApplyTo)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.TagAttribute" /> class.
            </summary>
            <param name="name">The name.</param>
            <param name="applyTo">The apply to.</param>
        </member>
        <member name="T:ServiceStack.ValidateRequestAttribute">
            <summary>
            Assert pre-conditions before DTO's Fluent Validation properties are evaluated
            </summary>
        </member>
        <member name="M:ServiceStack.ValidateRequestAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.ValidateRequestAttribute" /> class.
            </summary>
        </member>
        <member name="M:ServiceStack.ValidateRequestAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.ValidateRequestAttribute" /> class.
            </summary>
            <param name="validator">The validator.</param>
        </member>
        <member name="P:ServiceStack.ValidateRequestAttribute.Validator">
            <summary>
            Script Expression to create an IPropertyValidator registered in Validators.Types
            </summary>
            <value>The validator.</value>
        </member>
        <member name="P:ServiceStack.ValidateRequestAttribute.Condition">
            <summary>
            Boolean #Script Code Expression to Test
            ARGS:
            - Request: IRequest
            -     dto: Request DTO
            -      it: Request DTO
            </summary>
            <value>The condition.</value>
        </member>
        <member name="P:ServiceStack.ValidateRequestAttribute.Conditions">
            <summary>
            Combine multiple conditions
            </summary>
            <value>The conditions.</value>
        </member>
        <member name="P:ServiceStack.ValidateRequestAttribute.ErrorCode">
            <summary>
            Custom ErrorCode to return
            </summary>
            <value>The error code.</value>
        </member>
        <member name="P:ServiceStack.ValidateRequestAttribute.Message">
            <summary>
            Custom Error Message to return
            - {PropertyName}
            - {PropertyValue}
            </summary>
            <value>The message.</value>
        </member>
        <member name="P:ServiceStack.ValidateRequestAttribute.StatusCode">
            <summary>
            Custom Status Code to return when invalid
            </summary>
            <value>The status code.</value>
        </member>
        <member name="P:ServiceStack.ValidateRequestAttribute.AllConditions">
            <summary>
            Gets or sets all conditions.
            </summary>
            <value>All conditions.</value>
            <exception cref="T:System.NotSupportedException">AllConditions</exception>
        </member>
        <member name="P:ServiceStack.ValidateRequestAttribute.AnyConditions">
            <summary>
            Gets or sets any conditions.
            </summary>
            <value>Any conditions.</value>
            <exception cref="T:System.NotSupportedException">AnyConditions</exception>
        </member>
        <member name="T:ServiceStack.ValidateIsAuthenticatedAttribute">
            <summary>
            Class ValidateIsAuthenticatedAttribute.
            Implements the <see cref="T:ServiceStack.ValidateRequestAttribute" />
            </summary>
            <seealso cref="T:ServiceStack.ValidateRequestAttribute" />
        </member>
        <member name="M:ServiceStack.ValidateIsAuthenticatedAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.ValidateIsAuthenticatedAttribute" /> class.
            </summary>
        </member>
        <member name="T:ServiceStack.ValidateIsAdminAttribute">
            <summary>
            Class ValidateIsAdminAttribute.
            Implements the <see cref="T:ServiceStack.ValidateRequestAttribute" />
            </summary>
            <seealso cref="T:ServiceStack.ValidateRequestAttribute" />
        </member>
        <member name="M:ServiceStack.ValidateIsAdminAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.ValidateIsAdminAttribute" /> class.
            </summary>
        </member>
        <member name="T:ServiceStack.ValidateHasRoleAttribute">
            <summary>
            Class ValidateHasRoleAttribute.
            Implements the <see cref="T:ServiceStack.ValidateRequestAttribute" />
            </summary>
            <seealso cref="T:ServiceStack.ValidateRequestAttribute" />
        </member>
        <member name="M:ServiceStack.ValidateHasRoleAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.ValidateHasRoleAttribute" /> class.
            </summary>
            <param name="role">The role.</param>
        </member>
        <member name="T:ServiceStack.ValidateHasPermissionAttribute">
            <summary>
            Class ValidateHasPermissionAttribute.
            Implements the <see cref="T:ServiceStack.ValidateRequestAttribute" />
            </summary>
            <seealso cref="T:ServiceStack.ValidateRequestAttribute" />
        </member>
        <member name="M:ServiceStack.ValidateHasPermissionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.ValidateHasPermissionAttribute" /> class.
            </summary>
            <param name="permission">The permission.</param>
        </member>
        <member name="T:ServiceStack.ValidateAttribute">
            <summary>
            Class ValidateAttribute.
            Implements the <see cref="T:ServiceStack.AttributeBase" />
            Implements the <see cref="T:ServiceStack.IValidateRule" />
            Implements the <see cref="T:ServiceStack.IReflectAttributeConverter" />
            </summary>
            <seealso cref="T:ServiceStack.AttributeBase" />
            <seealso cref="T:ServiceStack.IValidateRule" />
            <seealso cref="T:ServiceStack.IReflectAttributeConverter" />
        </member>
        <member name="M:ServiceStack.ValidateAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.ValidateAttribute" /> class.
            </summary>
        </member>
        <member name="M:ServiceStack.ValidateAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.ValidateAttribute" /> class.
            </summary>
            <param name="validator">The validator.</param>
        </member>
        <member name="P:ServiceStack.ValidateAttribute.Validator">
            <summary>
            Script Expression to create an IPropertyValidator registered in Validators.Types
            </summary>
            <value>The validator.</value>
        </member>
        <member name="P:ServiceStack.ValidateAttribute.Condition">
            <summary>
            Boolean #Script Code Expression to Test
            ARGS:
            - Request: IRequest
            -     dto: Request DTO
            -   field: Property Name
            -      it: Property Value
            </summary>
            <value>The condition.</value>
        </member>
        <member name="P:ServiceStack.ValidateAttribute.AllConditions">
            <summary>
            Gets or sets all conditions.
            </summary>
            <value>All conditions.</value>
            <exception cref="T:System.NotSupportedException">AllConditions</exception>
        </member>
        <member name="P:ServiceStack.ValidateAttribute.AnyConditions">
            <summary>
            Gets or sets any conditions.
            </summary>
            <value>Any conditions.</value>
            <exception cref="T:System.NotSupportedException">AnyConditions</exception>
        </member>
        <member name="P:ServiceStack.ValidateAttribute.ErrorCode">
            <summary>
            Custom ErrorCode to return
            </summary>
            <value>The error code.</value>
        </member>
        <member name="P:ServiceStack.ValidateAttribute.Message">
            <summary>
            Refer to FluentValidation docs for Variable
            - {PropertyName}
            - {PropertyValue}
            </summary>
            <value>The message.</value>
        </member>
        <member name="M:ServiceStack.ValidateAttribute.Combine(System.String,System.String[])">
            <summary>
            Combines the specified comperand.
            </summary>
            <param name="comperand">The comperand.</param>
            <param name="conditions">The conditions.</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:ServiceStack.IValidateRule">
            <summary>
            Interface IValidateRule
            </summary>
        </member>
        <member name="P:ServiceStack.IValidateRule.Validator">
            <summary>
            Gets or sets the validator.
            </summary>
            <value>The validator.</value>
        </member>
        <member name="P:ServiceStack.IValidateRule.Condition">
            <summary>
            Gets or sets the condition.
            </summary>
            <value>The condition.</value>
        </member>
        <member name="P:ServiceStack.IValidateRule.ErrorCode">
            <summary>
            Gets or sets the error code.
            </summary>
            <value>The error code.</value>
        </member>
        <member name="P:ServiceStack.IValidateRule.Message">
            <summary>
            Gets or sets the message.
            </summary>
            <value>The message.</value>
        </member>
        <member name="T:ServiceStack.ValidateRule">
            <summary>
            Class ValidateRule.
            Implements the <see cref="T:ServiceStack.IValidateRule" />
            </summary>
            <seealso cref="T:ServiceStack.IValidateRule" />
        </member>
        <member name="P:ServiceStack.ValidateRule.Validator">
            <summary>
            Gets or sets the validator.
            </summary>
            <value>The validator.</value>
        </member>
        <member name="P:ServiceStack.ValidateRule.Condition">
            <summary>
            Gets or sets the condition.
            </summary>
            <value>The condition.</value>
        </member>
        <member name="P:ServiceStack.ValidateRule.ErrorCode">
            <summary>
            Gets or sets the error code.
            </summary>
            <value>The error code.</value>
        </member>
        <member name="P:ServiceStack.ValidateRule.Message">
            <summary>
            Gets or sets the message.
            </summary>
            <value>The message.</value>
        </member>
        <member name="T:ServiceStack.ValidationRule">
            <summary>
            Data persistence Model
            </summary>
        </member>
        <member name="P:ServiceStack.ValidationRule.Id">
            <summary>
            Gets or sets the identifier.
            </summary>
            <value>The identifier.</value>
        </member>
        <member name="P:ServiceStack.ValidationRule.Type">
            <summary>
            The name of the Type
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:ServiceStack.ValidationRule.Field">
            <summary>
            The property field for Property Validators, null for Type Validators
            </summary>
            <value>The field.</value>
        </member>
        <member name="P:ServiceStack.ValidationRule.CreatedBy">
            <summary>
            Gets or sets the created by.
            </summary>
            <value>The created by.</value>
        </member>
        <member name="P:ServiceStack.ValidationRule.CreatedDate">
            <summary>
            Gets or sets the created date.
            </summary>
            <value>The created date.</value>
        </member>
        <member name="P:ServiceStack.ValidationRule.ModifiedBy">
            <summary>
            Gets or sets the modified by.
            </summary>
            <value>The modified by.</value>
        </member>
        <member name="P:ServiceStack.ValidationRule.ModifiedDate">
            <summary>
            Gets or sets the modified date.
            </summary>
            <value>The modified date.</value>
        </member>
        <member name="P:ServiceStack.ValidationRule.SuspendedBy">
            <summary>
            Gets or sets the suspended by.
            </summary>
            <value>The suspended by.</value>
        </member>
        <member name="P:ServiceStack.ValidationRule.SuspendedDate">
            <summary>
            Gets or sets the suspended date.
            </summary>
            <value>The suspended date.</value>
        </member>
        <member name="P:ServiceStack.ValidationRule.Notes">
            <summary>
            Gets or sets the notes.
            </summary>
            <value>The notes.</value>
        </member>
        <member name="M:ServiceStack.ValidationRule.Equals(ServiceStack.ValidationRule)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ServiceStack.ValidationRule.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ServiceStack.ValidationRule.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="T:JetBrains.Annotations.CanBeNullAttribute">
            <summary>
            Indicates that the value of the marked element could be <c>null</c> sometimes,
            so the check for <c>null</c> is necessary before its usage.
            </summary>
            <example>
              <code>
            object Test() =&gt; null;
            void UseTest() {
            var p = Test();
            var s = p.ToString(); // Warning: Possible 'System.NullReferenceException'
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.NotNullAttribute">
            <summary>
            Indicates that the value of the marked element could never be <c>null</c>.
            </summary>
            <example>
              <code>
            object Foo() {
            return null; // Warning: Possible 'null' assignment
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.ItemNotNullAttribute">
            <summary>
            Can be applied to symbols of types derived from IEnumerable as well as to symbols of Task
            and Lazy classes to indicate that the value of a collection item, of the Task.Result property
            or of the Lazy.Value property can never be null.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.ItemCanBeNullAttribute">
            <summary>
            Can be appplied to symbols of types derived from IEnumerable as well as to symbols of Task
            and Lazy classes to indicate that the value of a collection item, of the Task.Result property
            or of the Lazy.Value property can be null.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.StringFormatMethodAttribute">
            <summary>
            Indicates that the marked method builds string by format pattern and (optional) arguments.
            Parameter, which contains format string, should be given in constructor. The format string
            should be in <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])" />-like form.
            </summary>
            <example>
              <code>
            [StringFormatMethod("message")]
            void ShowError(string message, params object[] args) { /* do something */ }
            void Foo() {
            ShowError("Failed: {0}"); // Warning: Non-existing argument in format string
            }
            </code>
            </example>
        </member>
        <member name="M:JetBrains.Annotations.StringFormatMethodAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:JetBrains.Annotations.StringFormatMethodAttribute" /> class.
            </summary>
            <param name="formatParameterName">Specifies which parameter of an annotated method should be treated as format-string</param>
        </member>
        <member name="P:JetBrains.Annotations.StringFormatMethodAttribute.FormatParameterName">
            <summary>
            Gets the name of the format parameter.
            </summary>
            <value>The name of the format parameter.</value>
        </member>
        <member name="T:JetBrains.Annotations.ValueProviderAttribute">
            <summary>
            For a parameter that is expected to be one of the limited set of values.
            Specify fields of which type should be used as values for this parameter.
            </summary>
        </member>
        <member name="M:JetBrains.Annotations.ValueProviderAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:JetBrains.Annotations.ValueProviderAttribute" /> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="P:JetBrains.Annotations.ValueProviderAttribute.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="T:JetBrains.Annotations.InvokerParameterNameAttribute">
            <summary>
            Indicates that the function argument should be string literal and match one
            of the parameters of the caller function. For example, ReSharper annotates
            the parameter of <see cref="T:System.ArgumentNullException" />.
            </summary>
            <example>
              <code>
            void Foo(string param) {
            if (param == null)
            throw new ArgumentNullException("par"); // Warning: Cannot resolve symbol
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.NotifyPropertyChangedInvocatorAttribute">
            <summary>
            Indicates that the method is contained in a type that implements
            <c>System.ComponentModel.INotifyPropertyChanged</c> interface and this method
            is used to notify that some property value changed.
            </summary>
            <example>
              <code>
            public class Foo : INotifyPropertyChanged {
            public event PropertyChangedEventHandler PropertyChanged;
            [NotifyPropertyChangedInvocator]
            protected virtual void NotifyChanged(string propertyName) { ... }
            string _name;
            public string Name {
            get { return _name; }
            set { _name = value; NotifyChanged("LastName"); /* Warning */ }
            }
            }
            </code>
            Examples of generated notifications:
            <list><item><c>NotifyChanged("Property")</c></item><item><c>NotifyChanged(() =&gt; Property)</c></item><item><c>NotifyChanged((VM x) =&gt; x.Property)</c></item><item><c>SetProperty(ref myField, value, "Property")</c></item></list></example>
            <remarks>The method should be non-static and conform to one of the supported signatures:
            <list><item><c>NotifyChanged(string)</c></item><item><c>NotifyChanged(params string[])</c></item><item><c>NotifyChanged{T}(Expression{Func{T}})</c></item><item><c>NotifyChanged{T,U}(Expression{Func{T,U}})</c></item><item><c>SetProperty{T}(ref T, T, string)</c></item></list></remarks>
        </member>
        <member name="M:JetBrains.Annotations.NotifyPropertyChangedInvocatorAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:JetBrains.Annotations.NotifyPropertyChangedInvocatorAttribute" /> class.
            </summary>
        </member>
        <member name="M:JetBrains.Annotations.NotifyPropertyChangedInvocatorAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:JetBrains.Annotations.NotifyPropertyChangedInvocatorAttribute" /> class.
            </summary>
            <param name="parameterName">Name of the parameter.</param>
        </member>
        <member name="P:JetBrains.Annotations.NotifyPropertyChangedInvocatorAttribute.ParameterName">
            <summary>
            Gets the name of the parameter.
            </summary>
            <value>The name of the parameter.</value>
        </member>
        <member name="T:JetBrains.Annotations.ContractAnnotationAttribute">
            <summary>
            Describes dependency between method input and output.
            </summary>
            <syntax>
              <p>Function Definition Table syntax:</p>
              <list>
                <item>FDT      ::= FDTRow [;FDTRow]*</item>
                <item>FDTRow   ::= Input =&gt; Output | Output &lt;= Input</item>
                <item>Input    ::= ParameterName: Value [, Input]*</item>
                <item>Output   ::= [ParameterName: Value]* {halt|stop|void|nothing|Value}</item>
                <item>Value    ::= true | false | null | notnull | canbenull</item>
              </list>
            If method has single input parameter, it's name could be omitted.<br />
            Using <c>halt</c> (or <c>void</c>/<c>nothing</c>, which is the same) for method output
            means that the methos doesn't return normally (throws or terminates the process).<br />
            Value <c>canbenull</c> is only applicable for output parameters.<br />
            You can use multiple <c>[ContractAnnotation]</c> for each FDT row, or use single attribute
            with rows separated by semicolon. There is no notion of order rows, all rows are checked
            for applicability and applied per each program state tracked by R# analysis.<br /></syntax>
            <examples>
              <list>
                <item>
                  <code>
            [ContractAnnotation("=&gt; halt")]
            public void TerminationMethod()
            </code>
                </item>
                <item>
                  <code>
            [ContractAnnotation("halt &lt;= condition: false")]
            public void Assert(bool condition, string text) // regular assertion method
            </code>
                </item>
                <item>
                  <code>
            [ContractAnnotation("s:null =&gt; true")]
            public bool IsNullOrEmpty(string s) // string.IsNullOrEmpty()
            </code>
                </item>
                <item>
                  <code>
            // A method that returns null if the parameter is null,
            // and not null if the parameter is not null
            [ContractAnnotation("null =&gt; null; notnull =&gt; notnull")]
            public object Transform(object data)
            </code>
                </item>
                <item>
                  <code>
            [ContractAnnotation("=&gt; true, result: notnull; =&gt; false, result: null")]
            public bool TryParse(string s, out Person result)
            </code>
                </item>
              </list>
            </examples>
        </member>
        <member name="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:JetBrains.Annotations.ContractAnnotationAttribute" /> class.
            </summary>
            <param name="contract">The contract.</param>
        </member>
        <member name="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:JetBrains.Annotations.ContractAnnotationAttribute" /> class.
            </summary>
            <param name="contract">The contract.</param>
            <param name="forceFullStates">if set to <c>true</c> [force full states].</param>
        </member>
        <member name="P:JetBrains.Annotations.ContractAnnotationAttribute.Contract">
            <summary>
            Gets the contract.
            </summary>
            <value>The contract.</value>
        </member>
        <member name="P:JetBrains.Annotations.ContractAnnotationAttribute.ForceFullStates">
            <summary>
            Gets a value indicating whether [force full states].
            </summary>
            <value><c>true</c> if [force full states]; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:JetBrains.Annotations.LocalizationRequiredAttribute">
            <summary>
            Indicates that marked element should be localized or not.
            </summary>
            <example>
              <code>
            [LocalizationRequiredAttribute(true)]
            class Foo {
            string str = "my string"; // Warning: Localizable string
            }
            </code>
            </example>
        </member>
        <member name="M:JetBrains.Annotations.LocalizationRequiredAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:JetBrains.Annotations.LocalizationRequiredAttribute" /> class.
            </summary>
        </member>
        <member name="M:JetBrains.Annotations.LocalizationRequiredAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:JetBrains.Annotations.LocalizationRequiredAttribute" /> class.
            </summary>
            <param name="required">if set to <c>true</c> [required].</param>
        </member>
        <member name="P:JetBrains.Annotations.LocalizationRequiredAttribute.Required">
            <summary>
            Gets a value indicating whether this <see cref="T:JetBrains.Annotations.LocalizationRequiredAttribute" /> is required.
            </summary>
            <value><c>true</c> if required; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:JetBrains.Annotations.CannotApplyEqualityOperatorAttribute">
            <summary>
            Indicates that the value of the marked type (or its derivatives)
            cannot be compared using '==' or '!=' operators and <c>Equals()</c>
            should be used instead. However, using '==' or '!=' for comparison
            with <c>null</c> is always permitted.
            </summary>
            <example>
              <code>
            [CannotApplyEqualityOperator]
            class NoEquality { }
            class UsesNoEquality {
            void Test() {
            var ca1 = new NoEquality();
            var ca2 = new NoEquality();
            if (ca1 != null) { // OK
            bool condition = ca1 == ca2; // Warning
            }
            }
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.BaseTypeRequiredAttribute">
            <summary>
            When applied to a target attribute, specifies a requirement for any type marked
            with the target attribute to implement or inherit specific type or types.
            </summary>
            <example>
              <code>
            [BaseTypeRequired(typeof(IComponent)] // Specify requirement
            class ComponentAttribute : Attribute { }
            [Component] // ComponentAttribute requires implementing IComponent interface
            class MyComponent : IComponent { }
            </code>
            </example>
        </member>
        <member name="M:JetBrains.Annotations.BaseTypeRequiredAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:JetBrains.Annotations.BaseTypeRequiredAttribute" /> class.
            </summary>
            <param name="baseType">Type of the base.</param>
        </member>
        <member name="P:JetBrains.Annotations.BaseTypeRequiredAttribute.BaseType">
            <summary>
            Gets the type of the base.
            </summary>
            <value>The type of the base.</value>
        </member>
        <member name="T:JetBrains.Annotations.UsedImplicitlyAttribute">
            <summary>
            Indicates that the marked symbol is used implicitly (e.g. via reflection, in external library),
            so this symbol will not be marked as unused (as well as by other usage inspections).
            </summary>
        </member>
        <member name="M:JetBrains.Annotations.UsedImplicitlyAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:JetBrains.Annotations.UsedImplicitlyAttribute" /> class.
            </summary>
        </member>
        <member name="M:JetBrains.Annotations.UsedImplicitlyAttribute.#ctor(JetBrains.Annotations.ImplicitUseKindFlags)">
            <summary>
            Initializes a new instance of the <see cref="T:JetBrains.Annotations.UsedImplicitlyAttribute" /> class.
            </summary>
            <param name="useKindFlags">The use kind flags.</param>
        </member>
        <member name="M:JetBrains.Annotations.UsedImplicitlyAttribute.#ctor(JetBrains.Annotations.ImplicitUseTargetFlags)">
            <summary>
            Initializes a new instance of the <see cref="T:JetBrains.Annotations.UsedImplicitlyAttribute" /> class.
            </summary>
            <param name="targetFlags">The target flags.</param>
        </member>
        <member name="M:JetBrains.Annotations.UsedImplicitlyAttribute.#ctor(JetBrains.Annotations.ImplicitUseKindFlags,JetBrains.Annotations.ImplicitUseTargetFlags)">
            <summary>
            Initializes a new instance of the <see cref="T:JetBrains.Annotations.UsedImplicitlyAttribute" /> class.
            </summary>
            <param name="useKindFlags">The use kind flags.</param>
            <param name="targetFlags">The target flags.</param>
        </member>
        <member name="P:JetBrains.Annotations.UsedImplicitlyAttribute.UseKindFlags">
            <summary>
            Gets the use kind flags.
            </summary>
            <value>The use kind flags.</value>
        </member>
        <member name="P:JetBrains.Annotations.UsedImplicitlyAttribute.TargetFlags">
            <summary>
            Gets the target flags.
            </summary>
            <value>The target flags.</value>
        </member>
        <member name="T:JetBrains.Annotations.MeansImplicitUseAttribute">
            <summary>
            Should be used on attributes and causes ReSharper to not mark symbols marked with such attributes
            as unused (as well as by other usage inspections)
            </summary>
        </member>
        <member name="M:JetBrains.Annotations.MeansImplicitUseAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:JetBrains.Annotations.MeansImplicitUseAttribute" /> class.
            </summary>
        </member>
        <member name="M:JetBrains.Annotations.MeansImplicitUseAttribute.#ctor(JetBrains.Annotations.ImplicitUseKindFlags)">
            <summary>
            Initializes a new instance of the <see cref="T:JetBrains.Annotations.MeansImplicitUseAttribute" /> class.
            </summary>
            <param name="useKindFlags">The use kind flags.</param>
        </member>
        <member name="M:JetBrains.Annotations.MeansImplicitUseAttribute.#ctor(JetBrains.Annotations.ImplicitUseTargetFlags)">
            <summary>
            Initializes a new instance of the <see cref="T:JetBrains.Annotations.MeansImplicitUseAttribute" /> class.
            </summary>
            <param name="targetFlags">The target flags.</param>
        </member>
        <member name="M:JetBrains.Annotations.MeansImplicitUseAttribute.#ctor(JetBrains.Annotations.ImplicitUseKindFlags,JetBrains.Annotations.ImplicitUseTargetFlags)">
            <summary>
            Initializes a new instance of the <see cref="T:JetBrains.Annotations.MeansImplicitUseAttribute" /> class.
            </summary>
            <param name="useKindFlags">The use kind flags.</param>
            <param name="targetFlags">The target flags.</param>
        </member>
        <member name="P:JetBrains.Annotations.MeansImplicitUseAttribute.UseKindFlags">
            <summary>
            Gets the use kind flags.
            </summary>
            <value>The use kind flags.</value>
        </member>
        <member name="P:JetBrains.Annotations.MeansImplicitUseAttribute.TargetFlags">
            <summary>
            Gets the target flags.
            </summary>
            <value>The target flags.</value>
        </member>
        <member name="T:JetBrains.Annotations.ImplicitUseKindFlags">
            <summary>
            Enum ImplicitUseKindFlags
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.Default">
            <summary>
            The default
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.Access">
            <summary>
            Only entity marked with attribute considered used.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.Assign">
            <summary>
            Indicates implicit assignment to a member.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.InstantiatedWithFixedConstructorSignature">
            <summary>
            Indicates implicit instantiation of a type with fixed constructor signature.
            That means any unused constructor parameters won't be reported as such.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.InstantiatedNoFixedConstructorSignature">
            <summary>
            Indicates implicit instantiation of a type.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.ImplicitUseTargetFlags">
            <summary>
            Specify what is considered used implicitly when marked
            with <see cref="T:JetBrains.Annotations.MeansImplicitUseAttribute" /> or <see cref="T:JetBrains.Annotations.UsedImplicitlyAttribute" />.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseTargetFlags.Default">
            <summary>
            The default
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseTargetFlags.Itself">
            <summary>
            The itself
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseTargetFlags.Members">
            <summary>
            Members of entity marked with attribute are considered used.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseTargetFlags.WithMembers">
            <summary>
            Entity marked with attribute and all its members considered used.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.PublicAPIAttribute">
            <summary>
            This attribute is intended to mark publicly available API
            which should not be removed and so is treated as used.
            </summary>
        </member>
        <member name="M:JetBrains.Annotations.PublicAPIAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:JetBrains.Annotations.PublicAPIAttribute" /> class.
            </summary>
        </member>
        <member name="M:JetBrains.Annotations.PublicAPIAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:JetBrains.Annotations.PublicAPIAttribute" /> class.
            </summary>
            <param name="comment">The comment.</param>
        </member>
        <member name="P:JetBrains.Annotations.PublicAPIAttribute.Comment">
            <summary>
            Gets the comment.
            </summary>
            <value>The comment.</value>
        </member>
        <member name="T:JetBrains.Annotations.InstantHandleAttribute">
            <summary>
            Tells code analysis engine if the parameter is completely handled when the invoked method is on stack.
            If the parameter is a delegate, indicates that delegate is executed while the method is executed.
            If the parameter is an enumerable, indicates that it is enumerated while the method is executed.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.PureAttribute">
            <summary>
            Indicates that a method does not make any observable state changes.
            The same as <c>System.Diagnostics.Contracts.PureAttribute</c>.
            </summary>
            <example>
              <code>
            [Pure] int Multiply(int x, int y) =&gt; x * y;
            void M() {
            Multiply(123, 42); // Waring: Return value of pure method is not used
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.MustUseReturnValueAttribute">
            <summary>
            Indicates that the return value of method invocation must be used.
            </summary>
        </member>
        <member name="M:JetBrains.Annotations.MustUseReturnValueAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:JetBrains.Annotations.MustUseReturnValueAttribute" /> class.
            </summary>
        </member>
        <member name="M:JetBrains.Annotations.MustUseReturnValueAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:JetBrains.Annotations.MustUseReturnValueAttribute" /> class.
            </summary>
            <param name="justification">The justification.</param>
        </member>
        <member name="P:JetBrains.Annotations.MustUseReturnValueAttribute.Justification">
            <summary>
            Gets the justification.
            </summary>
            <value>The justification.</value>
        </member>
        <member name="T:JetBrains.Annotations.ProvidesContextAttribute">
            <summary>
            Indicates the type member or parameter of some type, that should be used instead of all other ways
            to get the value that type. This annotation is useful when you have some "context" value evaluated
            and stored somewhere, meaning that all other ways to get this value must be consolidated with existing one.
            </summary>
            <example>
              <code>
            class Foo {
            [ProvidesContext] IBarService _barService = ...;
            void ProcessNode(INode node) {
            DoSomething(node, node.GetGlobalServices().Bar);
            //              ^ Warning: use value of '_barService' field
            }
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.PathReferenceAttribute">
            <summary>
            Indicates that a parameter is a path to a file or a folder within a web project.
            Path can be relative or absolute, starting from web root (~).
            </summary>
        </member>
        <member name="M:JetBrains.Annotations.PathReferenceAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:JetBrains.Annotations.PathReferenceAttribute" /> class.
            </summary>
        </member>
        <member name="M:JetBrains.Annotations.PathReferenceAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:JetBrains.Annotations.PathReferenceAttribute" /> class.
            </summary>
            <param name="basePath">The base path.</param>
        </member>
        <member name="P:JetBrains.Annotations.PathReferenceAttribute.BasePath">
            <summary>
            Gets the base path.
            </summary>
            <value>The base path.</value>
        </member>
        <member name="T:JetBrains.Annotations.SourceTemplateAttribute">
            <summary>
            An extension method marked with this attribute is processed by ReSharper code completion
            as a 'Source Template'. When extension method is completed over some expression, it's source code
            is automatically expanded like a template at call site.
            </summary>
            <example>
            In this example, the 'forEach' method is a source template available over all values
            of enumerable types, producing ordinary C# 'foreach' statement and placing caret inside block:
            <code>
            [SourceTemplate]
            public static void forEach&lt;T&gt;(this IEnumerable&lt;T&gt; xs) {
            foreach (var x in xs) {
            //$ $END$
            }
            }
            </code></example>
            <remarks>Template method body can contain valid source code and/or special comments starting with '$'.
            Text inside these comments is added as source code when the template is applied. Template parameters
            can be used either as additional method parameters or as identifiers wrapped in two '$' signs.
            Use the <see cref="T:JetBrains.Annotations.MacroAttribute" /> attribute to specify macros for parameters.</remarks>
        </member>
        <member name="T:JetBrains.Annotations.MacroAttribute">
            <summary>
            Allows specifying a macro for a parameter of a <see cref="T:JetBrains.Annotations.SourceTemplateAttribute">source template</see>.
            </summary>
            <example>
            Applying the attribute on a source template method:
            <code>
            [SourceTemplate, Macro(Target = "item", Expression = "suggestVariableName()")]
            public static void forEach&lt;T&gt;(this IEnumerable&lt;T&gt; collection) {
            foreach (var item in collection) {
            //$ $END$
            }
            }
            </code>
            Applying the attribute on a template method parameter:
            <code>
            [SourceTemplate]
            public static void something(this Entity x, [Macro(Expression = "guid()", Editable = -1)] string newguid) {
            /*$ var $x$Id = "$newguid$" + x.ToString();
            x.DoSomething($x$Id); */
            }
            </code></example>
            <remarks>You can apply the attribute on the whole method or on any of its additional parameters. The macro expression
            is defined in the <see cref="P:JetBrains.Annotations.MacroAttribute.Expression" /> property. When applied on a method, the target
            template parameter is defined in the <see cref="P:JetBrains.Annotations.MacroAttribute.Target" /> property. To apply the macro silently
            for the parameter, set the <see cref="P:JetBrains.Annotations.MacroAttribute.Editable" /> property value = -1.</remarks>
        </member>
        <member name="P:JetBrains.Annotations.MacroAttribute.Expression">
            <summary>
            Allows specifying a macro that will be executed for a <see cref="T:JetBrains.Annotations.SourceTemplateAttribute">source template</see>
            parameter when the template is expanded.
            </summary>
            <value>The expression.</value>
        </member>
        <member name="P:JetBrains.Annotations.MacroAttribute.Editable">
            <summary>
            Allows specifying which occurrence of the target parameter becomes editable when the template is deployed.
            </summary>
            <value>The editable.</value>
            &gt;
            <remarks>If the target parameter is used several times in the template, only one occurrence becomes editable;
            other occurrences are changed synchronously. To specify the zero-based index of the editable occurrence,
            use values &gt;= 0. To make the parameter non-editable when the template is expanded, use -1.</remarks>
        </member>
        <member name="P:JetBrains.Annotations.MacroAttribute.Target">
            <summary>
            Identifies the target parameter of a <see cref="T:JetBrains.Annotations.SourceTemplateAttribute">source template</see> if the
            <see cref="T:JetBrains.Annotations.MacroAttribute" /> is applied on a template method.
            </summary>
            <value>The target.</value>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcAreaMasterLocationFormatAttribute">
            <summary>
            Class AspMvcAreaMasterLocationFormatAttribute. This class cannot be inherited.
            Implements the <see cref="T:System.Attribute" />
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:JetBrains.Annotations.AspMvcAreaMasterLocationFormatAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:JetBrains.Annotations.AspMvcAreaMasterLocationFormatAttribute" /> class.
            </summary>
            <param name="format">The format.</param>
        </member>
        <member name="P:JetBrains.Annotations.AspMvcAreaMasterLocationFormatAttribute.Format">
            <summary>
            Gets the format.
            </summary>
            <value>The format.</value>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcAreaPartialViewLocationFormatAttribute">
            <summary>
            Class AspMvcAreaPartialViewLocationFormatAttribute. This class cannot be inherited.
            Implements the <see cref="T:System.Attribute" />
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:JetBrains.Annotations.AspMvcAreaPartialViewLocationFormatAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:JetBrains.Annotations.AspMvcAreaPartialViewLocationFormatAttribute" /> class.
            </summary>
            <param name="format">The format.</param>
        </member>
        <member name="P:JetBrains.Annotations.AspMvcAreaPartialViewLocationFormatAttribute.Format">
            <summary>
            Gets the format.
            </summary>
            <value>The format.</value>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcAreaViewLocationFormatAttribute">
            <summary>
            Class AspMvcAreaViewLocationFormatAttribute. This class cannot be inherited.
            Implements the <see cref="T:System.Attribute" />
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:JetBrains.Annotations.AspMvcAreaViewLocationFormatAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:JetBrains.Annotations.AspMvcAreaViewLocationFormatAttribute" /> class.
            </summary>
            <param name="format">The format.</param>
        </member>
        <member name="P:JetBrains.Annotations.AspMvcAreaViewLocationFormatAttribute.Format">
            <summary>
            Gets the format.
            </summary>
            <value>The format.</value>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcMasterLocationFormatAttribute">
            <summary>
            Class AspMvcMasterLocationFormatAttribute. This class cannot be inherited.
            Implements the <see cref="T:System.Attribute" />
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:JetBrains.Annotations.AspMvcMasterLocationFormatAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:JetBrains.Annotations.AspMvcMasterLocationFormatAttribute" /> class.
            </summary>
            <param name="format">The format.</param>
        </member>
        <member name="P:JetBrains.Annotations.AspMvcMasterLocationFormatAttribute.Format">
            <summary>
            Gets the format.
            </summary>
            <value>The format.</value>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcPartialViewLocationFormatAttribute">
            <summary>
            Class AspMvcPartialViewLocationFormatAttribute. This class cannot be inherited.
            Implements the <see cref="T:System.Attribute" />
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:JetBrains.Annotations.AspMvcPartialViewLocationFormatAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:JetBrains.Annotations.AspMvcPartialViewLocationFormatAttribute" /> class.
            </summary>
            <param name="format">The format.</param>
        </member>
        <member name="P:JetBrains.Annotations.AspMvcPartialViewLocationFormatAttribute.Format">
            <summary>
            Gets the format.
            </summary>
            <value>The format.</value>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcViewLocationFormatAttribute">
            <summary>
            Class AspMvcViewLocationFormatAttribute. This class cannot be inherited.
            Implements the <see cref="T:System.Attribute" />
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:JetBrains.Annotations.AspMvcViewLocationFormatAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:JetBrains.Annotations.AspMvcViewLocationFormatAttribute" /> class.
            </summary>
            <param name="format">The format.</param>
        </member>
        <member name="P:JetBrains.Annotations.AspMvcViewLocationFormatAttribute.Format">
            <summary>
            Gets the format.
            </summary>
            <value>The format.</value>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcActionAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC action. If applied to a method, the MVC action name is calculated
            implicitly from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="M:JetBrains.Annotations.AspMvcActionAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:JetBrains.Annotations.AspMvcActionAttribute" /> class.
            </summary>
        </member>
        <member name="M:JetBrains.Annotations.AspMvcActionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:JetBrains.Annotations.AspMvcActionAttribute" /> class.
            </summary>
            <param name="anonymousProperty">The anonymous property.</param>
        </member>
        <member name="P:JetBrains.Annotations.AspMvcActionAttribute.AnonymousProperty">
            <summary>
            Gets the anonymous property.
            </summary>
            <value>The anonymous property.</value>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcAreaAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC area.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="M:JetBrains.Annotations.AspMvcAreaAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:JetBrains.Annotations.AspMvcAreaAttribute" /> class.
            </summary>
        </member>
        <member name="M:JetBrains.Annotations.AspMvcAreaAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:JetBrains.Annotations.AspMvcAreaAttribute" /> class.
            </summary>
            <param name="anonymousProperty">The anonymous property.</param>
        </member>
        <member name="P:JetBrains.Annotations.AspMvcAreaAttribute.AnonymousProperty">
            <summary>
            Gets the anonymous property.
            </summary>
            <value>The anonymous property.</value>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcControllerAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter is
            an MVC controller. If applied to a method, the MVC controller name is calculated
            implicitly from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String, String)</c>.
            </summary>
        </member>
        <member name="M:JetBrains.Annotations.AspMvcControllerAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:JetBrains.Annotations.AspMvcControllerAttribute" /> class.
            </summary>
        </member>
        <member name="M:JetBrains.Annotations.AspMvcControllerAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:JetBrains.Annotations.AspMvcControllerAttribute" /> class.
            </summary>
            <param name="anonymousProperty">The anonymous property.</param>
        </member>
        <member name="P:JetBrains.Annotations.AspMvcControllerAttribute.AnonymousProperty">
            <summary>
            Gets the anonymous property.
            </summary>
            <value>The anonymous property.</value>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcMasterAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC Master. Use this attribute
            for custom wrappers similar to <c>System.Web.Mvc.Controller.View(String, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcModelTypeAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC model type. Use this attribute
            for custom wrappers similar to <c>System.Web.Mvc.Controller.View(String, Object)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcPartialViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter is an MVC
            partial view. If applied to a method, the MVC partial view name is calculated implicitly
            from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.RenderPartialExtensions.RenderPartial(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcSuppressViewErrorAttribute">
            <summary>
            ASP.NET MVC attribute. Allows disabling inspections for MVC views within a class or a method.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcDisplayTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC display template.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.DisplayExtensions.DisplayForModel(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcEditorTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC editor template.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.EditorExtensions.EditorForModel(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC template.
            Use this attribute for custom wrappers similar to
            <c>System.ComponentModel.DataAnnotations.UIHintAttribute(System.String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC view component. If applied to a method, the MVC view name is calculated implicitly
            from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Controller.View(Object)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcViewComponentAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC view component name.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcViewComponentViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC view component view. If applied to a method, the MVC view component view name is default.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcActionSelectorAttribute">
            <summary>
            ASP.NET MVC attribute. When applied to a parameter of an attribute,
            indicates that this parameter is an MVC action name.
            </summary>
            <example>
              <code>
            [ActionName("Foo")]
            public ActionResult Login(string returnUrl) {
            ViewBag.ReturnUrl = Url.Action("Foo"); // OK
            return RedirectToAction("Bar"); // Error: Cannot resolve action
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.HtmlElementAttributesAttribute">
            <summary>
            Class HtmlElementAttributesAttribute. This class cannot be inherited.
            Implements the <see cref="T:System.Attribute" />
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:JetBrains.Annotations.HtmlElementAttributesAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:JetBrains.Annotations.HtmlElementAttributesAttribute" /> class.
            </summary>
        </member>
        <member name="M:JetBrains.Annotations.HtmlElementAttributesAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:JetBrains.Annotations.HtmlElementAttributesAttribute" /> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="P:JetBrains.Annotations.HtmlElementAttributesAttribute.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="T:JetBrains.Annotations.HtmlAttributeValueAttribute">
            <summary>
            Class HtmlAttributeValueAttribute. This class cannot be inherited.
            Implements the <see cref="T:System.Attribute" />
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:JetBrains.Annotations.HtmlAttributeValueAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:JetBrains.Annotations.HtmlAttributeValueAttribute" /> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="P:JetBrains.Annotations.HtmlAttributeValueAttribute.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="T:JetBrains.Annotations.RazorSectionAttribute">
            <summary>
            Razor attribute. Indicates that a parameter or a method is a Razor section.
            Use this attribute for custom wrappers similar to
            <c>System.Web.WebPages.WebPageBase.RenderSection(String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.CollectionAccessAttribute">
            <summary>
            Indicates how method, constructor invocation or property access
            over collection type affects content of the collection.
            </summary>
        </member>
        <member name="M:JetBrains.Annotations.CollectionAccessAttribute.#ctor(JetBrains.Annotations.CollectionAccessType)">
            <summary>
            Initializes a new instance of the <see cref="T:JetBrains.Annotations.CollectionAccessAttribute" /> class.
            </summary>
            <param name="collectionAccessType">Type of the collection access.</param>
        </member>
        <member name="P:JetBrains.Annotations.CollectionAccessAttribute.CollectionAccessType">
            <summary>
            Gets the type of the collection access.
            </summary>
            <value>The type of the collection access.</value>
        </member>
        <member name="T:JetBrains.Annotations.CollectionAccessType">
            <summary>
            Enum CollectionAccessType
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.CollectionAccessType.None">
            <summary>
            Method does not use or modify content of the collection.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.CollectionAccessType.Read">
            <summary>
            Method only reads content of the collection but does not modify it.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.CollectionAccessType.ModifyExistingContent">
            <summary>
            Method can change content of the collection but does not add new elements.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.CollectionAccessType.UpdatedContent">
            <summary>
            Method can add new elements to the collection.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AssertionMethodAttribute">
            <summary>
            Indicates that the marked method is assertion method, i.e. it halts control flow if
            one of the conditions is satisfied. To set the condition, mark one of the parameters with
            <see cref="T:JetBrains.Annotations.AssertionConditionAttribute" /> attribute.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AssertionConditionAttribute">
            <summary>
            Indicates the condition parameter of the assertion method. The method itself should be
            marked by <see cref="T:JetBrains.Annotations.AssertionMethodAttribute" /> attribute. The mandatory argument of
            the attribute is the assertion type.
            </summary>
        </member>
        <member name="M:JetBrains.Annotations.AssertionConditionAttribute.#ctor(JetBrains.Annotations.AssertionConditionType)">
            <summary>
            Initializes a new instance of the <see cref="T:JetBrains.Annotations.AssertionConditionAttribute" /> class.
            </summary>
            <param name="conditionType">Type of the condition.</param>
        </member>
        <member name="P:JetBrains.Annotations.AssertionConditionAttribute.ConditionType">
            <summary>
            Gets the type of the condition.
            </summary>
            <value>The type of the condition.</value>
        </member>
        <member name="T:JetBrains.Annotations.AssertionConditionType">
            <summary>
            Specifies assertion type. If the assertion method argument satisfies the condition,
            then the execution continues. Otherwise, execution is assumed to be halted.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_TRUE">
            <summary>
            Marked parameter should be evaluated to true.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_FALSE">
            <summary>
            Marked parameter should be evaluated to false.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_NULL">
            <summary>
            Marked parameter should be evaluated to null value.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_NOT_NULL">
            <summary>
            Marked parameter should be evaluated to not null value.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.LinqTunnelAttribute">
            <summary>
            Indicates that method is pure LINQ method, with postponed enumeration (like Enumerable.Select,
            .Where). This annotation allows inference of [InstantHandle] annotation for parameters
            of delegate type by analyzing LINQ method chains.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.NoEnumerationAttribute">
            <summary>
            Indicates that IEnumerable, passed as parameter, is not enumerated.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.RegexPatternAttribute">
            <summary>
            Indicates that parameter is regular expression pattern.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.NoReorderAttribute">
            <summary>
            Prevents the Member Reordering feature from tossing members of the marked class.
            </summary>
            <remarks>The attribute must be mentioned in your member reordering patterns</remarks>
        </member>
        <member name="T:JetBrains.Annotations.XamlItemsControlAttribute">
            <summary>
            XAML attribute. Indicates the type that has <c>ItemsSource</c> property and should be treated
            as <c>ItemsControl</c>-derived type, to enable inner items <c>DataContext</c> type resolve.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.XamlItemBindingOfItemsControlAttribute">
            <summary>
            XAML attribute. Indicates the property of some <c>BindingBase</c>-derived type, that
            is used to bind some item of <c>ItemsControl</c>-derived type. This annotation will
            enable the <c>DataContext</c> type resolve for XAML bindings for such properties.
            </summary>
            <remarks>Property should have the tree ancestor of the <c>ItemsControl</c> type or
            marked with the <see cref="T:JetBrains.Annotations.XamlItemsControlAttribute" /> attribute.</remarks>
        </member>
        <member name="T:JetBrains.Annotations.AspChildControlTypeAttribute">
            <summary>
            Class AspChildControlTypeAttribute. This class cannot be inherited.
            Implements the <see cref="T:System.Attribute" />
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:JetBrains.Annotations.AspChildControlTypeAttribute.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:JetBrains.Annotations.AspChildControlTypeAttribute" /> class.
            </summary>
            <param name="tagName">Name of the tag.</param>
            <param name="controlType">Type of the control.</param>
        </member>
        <member name="P:JetBrains.Annotations.AspChildControlTypeAttribute.TagName">
            <summary>
            Gets the name of the tag.
            </summary>
            <value>The name of the tag.</value>
        </member>
        <member name="P:JetBrains.Annotations.AspChildControlTypeAttribute.ControlType">
            <summary>
            Gets the type of the control.
            </summary>
            <value>The type of the control.</value>
        </member>
        <member name="T:JetBrains.Annotations.AspDataFieldAttribute">
            <summary>
            Class AspDataFieldAttribute. This class cannot be inherited.
            Implements the <see cref="T:System.Attribute" />
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="T:JetBrains.Annotations.AspDataFieldsAttribute">
            <summary>
            Class AspDataFieldsAttribute. This class cannot be inherited.
            Implements the <see cref="T:System.Attribute" />
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="T:JetBrains.Annotations.AspMethodPropertyAttribute">
            <summary>
            Class AspMethodPropertyAttribute. This class cannot be inherited.
            Implements the <see cref="T:System.Attribute" />
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="T:JetBrains.Annotations.AspRequiredAttributeAttribute">
            <summary>
            Class AspRequiredAttributeAttribute. This class cannot be inherited.
            Implements the <see cref="T:System.Attribute" />
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:JetBrains.Annotations.AspRequiredAttributeAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:JetBrains.Annotations.AspRequiredAttributeAttribute" /> class.
            </summary>
            <param name="attribute">The attribute.</param>
        </member>
        <member name="P:JetBrains.Annotations.AspRequiredAttributeAttribute.Attribute">
            <summary>
            Gets the attribute.
            </summary>
            <value>The attribute.</value>
        </member>
        <member name="T:JetBrains.Annotations.AspTypePropertyAttribute">
            <summary>
            Class AspTypePropertyAttribute. This class cannot be inherited.
            Implements the <see cref="T:System.Attribute" />
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="P:JetBrains.Annotations.AspTypePropertyAttribute.CreateConstructorReferences">
            <summary>
            Gets a value indicating whether [create constructor references].
            </summary>
            <value><c>true</c> if [create constructor references]; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:JetBrains.Annotations.AspTypePropertyAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:JetBrains.Annotations.AspTypePropertyAttribute" /> class.
            </summary>
            <param name="createConstructorReferences">if set to <c>true</c> [create constructor references].</param>
        </member>
        <member name="T:JetBrains.Annotations.RazorImportNamespaceAttribute">
            <summary>
            Class RazorImportNamespaceAttribute. This class cannot be inherited.
            Implements the <see cref="T:System.Attribute" />
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:JetBrains.Annotations.RazorImportNamespaceAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:JetBrains.Annotations.RazorImportNamespaceAttribute" /> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="P:JetBrains.Annotations.RazorImportNamespaceAttribute.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="T:JetBrains.Annotations.RazorInjectionAttribute">
            <summary>
            Class RazorInjectionAttribute. This class cannot be inherited.
            Implements the <see cref="T:System.Attribute" />
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:JetBrains.Annotations.RazorInjectionAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:JetBrains.Annotations.RazorInjectionAttribute" /> class.
            </summary>
            <param name="type">The type.</param>
            <param name="fieldName">Name of the field.</param>
        </member>
        <member name="P:JetBrains.Annotations.RazorInjectionAttribute.Type">
            <summary>
            Gets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:JetBrains.Annotations.RazorInjectionAttribute.FieldName">
            <summary>
            Gets the name of the field.
            </summary>
            <value>The name of the field.</value>
        </member>
        <member name="T:JetBrains.Annotations.RazorDirectiveAttribute">
            <summary>
            Class RazorDirectiveAttribute. This class cannot be inherited.
            Implements the <see cref="T:System.Attribute" />
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:JetBrains.Annotations.RazorDirectiveAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:JetBrains.Annotations.RazorDirectiveAttribute" /> class.
            </summary>
            <param name="directive">The directive.</param>
        </member>
        <member name="P:JetBrains.Annotations.RazorDirectiveAttribute.Directive">
            <summary>
            Gets the directive.
            </summary>
            <value>The directive.</value>
        </member>
        <member name="T:JetBrains.Annotations.RazorPageBaseTypeAttribute">
            <summary>
            Class RazorPageBaseTypeAttribute. This class cannot be inherited.
            Implements the <see cref="T:System.Attribute" />
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:JetBrains.Annotations.RazorPageBaseTypeAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:JetBrains.Annotations.RazorPageBaseTypeAttribute" /> class.
            </summary>
            <param name="baseType">Type of the base.</param>
        </member>
        <member name="M:JetBrains.Annotations.RazorPageBaseTypeAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:JetBrains.Annotations.RazorPageBaseTypeAttribute" /> class.
            </summary>
            <param name="baseType">Type of the base.</param>
            <param name="pageName">Name of the page.</param>
        </member>
        <member name="P:JetBrains.Annotations.RazorPageBaseTypeAttribute.BaseType">
            <summary>
            Gets the type of the base.
            </summary>
            <value>The type of the base.</value>
        </member>
        <member name="P:JetBrains.Annotations.RazorPageBaseTypeAttribute.PageName">
            <summary>
            Gets the name of the page.
            </summary>
            <value>The name of the page.</value>
        </member>
        <member name="T:JetBrains.Annotations.RazorHelperCommonAttribute">
            <summary>
            Class RazorHelperCommonAttribute. This class cannot be inherited.
            Implements the <see cref="T:System.Attribute" />
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="T:JetBrains.Annotations.RazorLayoutAttribute">
            <summary>
            Class RazorLayoutAttribute. This class cannot be inherited.
            Implements the <see cref="T:System.Attribute" />
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="T:JetBrains.Annotations.RazorWriteLiteralMethodAttribute">
            <summary>
            Class RazorWriteLiteralMethodAttribute. This class cannot be inherited.
            Implements the <see cref="T:System.Attribute" />
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="T:JetBrains.Annotations.RazorWriteMethodAttribute">
            <summary>
            Class RazorWriteMethodAttribute. This class cannot be inherited.
            Implements the <see cref="T:System.Attribute" />
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="T:JetBrains.Annotations.RazorWriteMethodParameterAttribute">
            <summary>
            Class RazorWriteMethodParameterAttribute. This class cannot be inherited.
            Implements the <see cref="T:System.Attribute" />
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.ValidateType_0">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the ValidateType method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.ValidateType_0.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ValidateType_0.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.ValidateType_0.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ValidateType_0.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.ValidateType_0.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ValidateType_0.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ValidateType_0.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ValidateType_0.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.LicenseKeyRegex_1">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the LicenseKeyRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.LicenseKeyRegex_1.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.LicenseKeyRegex_1.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.LicenseKeyRegex_1.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.LicenseKeyRegex_1.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.LicenseKeyRegex_1.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.LicenseKeyRegex_1.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.LicenseKeyRegex_1.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.LicenseKeyRegex_1.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Utilities">
            <summary>Helper methods used by generated <see cref="T:System.Text.RegularExpressions.Regex"/>-derived implementations.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_defaultTimeout">
            <summary>Default timeout value set in <see cref="T:System.AppContext"/>, or <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout"/> if none was set.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_hasTimeout">
            <summary>Whether <see cref="F:System.Text.RegularExpressions.Generated.Utilities.s_defaultTimeout"/> is non-infinite.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_whitespace">
            <summary>Supports searching for characters in or not in "\t\n\v\f\r \u0085             \u2028\u2029  　".</summary>
        </member>
    </members>
</doc>
